var __defProp = Object.defineProperty;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key2, value) => key2 in obj ? __defProp(obj, key2, {enumerable: true, configurable: true, writable: true, value}) : obj[key2] = value;
var __assign = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var process = {env: {NODE_ENV: "production"}};
var commonjsGlobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function createCommonjsModule(fn) {
  var module = {exports: {}};
  return fn(module, module.exports), module.exports;
}
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty$9 = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === void 0) {
    throw new TypeError("Object.assign cannot be called with null or undefined");
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }
    var test1 = new String("abc");
    test1[5] = "de";
    if (Object.getOwnPropertyNames(test1)[0] === "5") {
      return false;
    }
    var test2 = {};
    for (var i2 = 0; i2 < 10; i2++) {
      test2["_" + String.fromCharCode(i2)] = i2;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
      return test2[n];
    });
    if (order2.join("") !== "0123456789") {
      return false;
    }
    var test3 = {};
    "abcdefghijklmnopqrst".split("").forEach(function(letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}
var objectAssign = shouldUseNative() ? Object.assign : function(target, source2) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);
    for (var key2 in from) {
      if (hasOwnProperty$9.call(from, key2)) {
        to[key2] = from[key2];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i2 = 0; i2 < symbols.length; i2++) {
        if (propIsEnumerable.call(from, symbols[i2])) {
          to[symbols[i2]] = from[symbols[i2]];
        }
      }
    }
  }
  return to;
};
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var react_development = createCommonjsModule(function(module, exports) {
  {
    (function() {
      var _assign = objectAssign;
      var ReactVersion = "17.0.2";
      var REACT_ELEMENT_TYPE = 60103;
      var REACT_PORTAL_TYPE = 60106;
      exports.Fragment = 60107;
      exports.StrictMode = 60108;
      exports.Profiler = 60114;
      var REACT_PROVIDER_TYPE = 60109;
      var REACT_CONTEXT_TYPE = 60110;
      var REACT_FORWARD_REF_TYPE = 60112;
      exports.Suspense = 60113;
      var REACT_SUSPENSE_LIST_TYPE = 60120;
      var REACT_MEMO_TYPE = 60115;
      var REACT_LAZY_TYPE = 60116;
      var REACT_BLOCK_TYPE = 60121;
      var REACT_SERVER_BLOCK_TYPE = 60122;
      var REACT_FUNDAMENTAL_TYPE = 60117;
      var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
      var REACT_LEGACY_HIDDEN_TYPE = 60131;
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor("react.element");
        REACT_PORTAL_TYPE = symbolFor("react.portal");
        exports.Fragment = symbolFor("react.fragment");
        exports.StrictMode = symbolFor("react.strict_mode");
        exports.Profiler = symbolFor("react.profiler");
        REACT_PROVIDER_TYPE = symbolFor("react.provider");
        REACT_CONTEXT_TYPE = symbolFor("react.context");
        REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
        exports.Suspense = symbolFor("react.suspense");
        REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
        REACT_MEMO_TYPE = symbolFor("react.memo");
        REACT_LAZY_TYPE = symbolFor("react.lazy");
        REACT_BLOCK_TYPE = symbolFor("react.block");
        REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
        REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
        symbolFor("react.scope");
        symbolFor("react.opaque.id");
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
        symbolFor("react.offscreen");
        REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
      }
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactCurrentDispatcher = {
        current: null
      };
      var ReactCurrentBatchConfig = {
        transition: 0
      };
      var ReactCurrentOwner = {
        current: null
      };
      var ReactDebugCurrentFrame = {};
      var currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        {
          currentExtraStackFrame = stack;
        }
      }
      {
        ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
          {
            currentExtraStackFrame = stack;
          }
        };
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFrame.getStackAddendum = function() {
          var stack = "";
          if (currentExtraStackFrame) {
            stack += currentExtraStackFrame;
          }
          var impl = ReactDebugCurrentFrame.getCurrentStack;
          if (impl) {
            stack += impl() || "";
          }
          return stack;
        };
      }
      var IsSomeRendererActing = {
        current: false
      };
      var ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner,
        IsSomeRendererActing,
        assign: _assign
      };
      {
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
      }
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          printWarning2("warn", format, args);
        }
      }
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning2("error", format, args);
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return "" + item;
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
          var warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }
          error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }
      var ReactNoopUpdateQueue2 = {
        isMounted: function(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      };
      var emptyObject2 = {};
      {
        Object.freeze(emptyObject2);
      }
      function Component(props, context2, updater) {
        this.props = props;
        this.context = context2;
        this.refs = emptyObject2;
        this.updater = updater || ReactNoopUpdateQueue2;
      }
      Component.prototype.isReactComponent = {};
      Component.prototype.setState = function(partialState, callback) {
        if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
          {
            throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
        }
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        };
        var defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
              return void 0;
            }
          });
        };
        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component.prototype;
      function PureComponent(props, context2, updater) {
        this.props = props;
        this.context = context2;
        this.refs = emptyObject2;
        this.updater = updater || ReactNoopUpdateQueue2;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent;
      _assign(pureComponentPrototype, Component.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      function createRef() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentName(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case exports.Fragment:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case exports.Profiler:
            return "Profiler";
          case exports.StrictMode:
            return "StrictMode";
          case exports.Suspense:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context2 = type;
              return getContextName(context2) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
              return getComponentName(type._render);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentName(init(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty2.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty2.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== void 0;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      var ReactElement = function(type, key2, ref, self2, source2, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key: key2,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source2
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function createElement(type, config, children) {
        var propName;
        var props = {};
        var key2 = null;
        var ref = null;
        var self2 = null;
        var source2 = null;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            {
              warnIfStringRefCannotBeAutoConverted(config);
            }
          }
          if (hasValidKey(config)) {
            key2 = "" + config.key;
          }
          self2 = config.__self === void 0 ? null : config.__self;
          source2 = config.__source === void 0 ? null : config.__source;
          for (propName in config) {
            if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i2 = 0; i2 < childrenLength; i2++) {
            childArray[i2] = arguments[i2 + 2];
          }
          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        {
          if (key2 || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key2) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
        return ReactElement(type, key2, ref, self2, source2, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement(element, config, children) {
        if (!!(element === null || element === void 0)) {
          {
            throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
        }
        var propName;
        var props = _assign({}, element.props);
        var key2 = element.key;
        var ref = element.ref;
        var self2 = element._self;
        var source2 = element._source;
        var owner = element._owner;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }
          if (hasValidKey(config)) {
            key2 = "" + config.key;
          }
          var defaultProps;
          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }
          for (propName in config) {
            if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === void 0 && defaultProps !== void 0) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i2 = 0; i2 < childrenLength; i2++) {
            childArray[i2] = arguments[i2 + 2];
          }
          props.children = childArray;
        }
        return ReactElement(element.type, key2, ref, self2, source2, owner, props);
      }
      function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".";
      var SUBSEPARATOR = ":";
      function escape(key2) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          "=": "=0",
          ":": "=2"
        };
        var escapedString = key2.replace(escapeRegex, function(match) {
          return escaperLookup[match];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index2) {
        if (typeof element === "object" && element !== null && element.key != null) {
          return escape("" + element.key);
        }
        return index2.toString(36);
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === "undefined" || type === "boolean") {
          children = null;
        }
        var invokeCallback = false;
        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }
          }
        }
        if (invokeCallback) {
          var _child = children;
          var mappedChild = callback(_child);
          var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (Array.isArray(mappedChild)) {
            var escapedChildKey = "";
            if (childKey != null) {
              escapedChildKey = escapeUserProvidedKey(childKey) + "/";
            }
            mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
              return c;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
            }
            array.push(mappedChild);
          }
          return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) {
          for (var i2 = 0; i2 < children.length; i2++) {
            child = children[i2];
            nextName = nextNamePrefix + getElementKey(child, i2);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === "function") {
            var iterableChildren = children;
            {
              if (iteratorFn === iterableChildren.entries) {
                if (!didWarnAboutMaps) {
                  warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(iterableChildren);
            var step;
            var ii = 0;
            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getElementKey(child, ii++);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else if (type === "object") {
            var childrenString = "" + children;
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context2) {
        if (children == null) {
          return children;
        }
        var result = [];
        var count = 0;
        mapIntoArray(children, result, "", "", function(child) {
          return func.call(context2, child, count++);
        });
        return result;
      }
      function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
          n++;
        });
        return n;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild2(children) {
        if (!isValidElement(children)) {
          {
            throw Error("React.Children.only expected to receive a single React element child.");
          }
        }
        return children;
      }
      function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === void 0) {
          calculateChangedBits = null;
        } else {
          {
            if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
              error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
            }
          }
        }
        var context2 = {
          $$typeof: REACT_CONTEXT_TYPE,
          _calculateChangedBits: calculateChangedBits,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null
        };
        context2.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context2
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context2,
            _calculateChangedBits: context2._calculateChangedBits
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                if (!hasWarnedAboutUsingConsumerProvider) {
                  hasWarnedAboutUsingConsumerProvider = true;
                  error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                }
                return context2.Provider;
              },
              set: function(_Provider) {
                context2.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context2._currentValue;
              },
              set: function(_currentValue) {
                context2._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context2._currentValue2;
              },
              set: function(_currentValue2) {
                context2._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context2._threadCount;
              },
              set: function(_threadCount) {
                context2._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                if (!hasWarnedAboutUsingNestedContextConsumers) {
                  hasWarnedAboutUsingNestedContextConsumers = true;
                  error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
                return context2.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context2.displayName;
              },
              set: function(displayName) {
                if (!hasWarnedAboutDisplayNameOnConsumer) {
                  warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                  hasWarnedAboutDisplayNameOnConsumer = true;
                }
              }
            }
          });
          context2.Consumer = Consumer;
        }
        {
          context2._currentRenderer = null;
          context2._currentRenderer2 = null;
        }
        return context2;
      }
      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result;
          var thenable = ctor();
          var pending = payload;
          pending._status = Pending;
          pending._result = thenable;
          thenable.then(function(moduleObject) {
            if (payload._status === Pending) {
              var defaultExport = moduleObject.default;
              {
                if (defaultExport === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              var resolved = payload;
              resolved._status = Resolved;
              resolved._result = defaultExport;
            }
          }, function(error2) {
            if (payload._status === Pending) {
              var rejected = payload;
              rejected._status = Rejected;
              rejected._result = error2;
            }
          });
        }
        if (payload._status === Resolved) {
          return payload._result;
        } else {
          throw payload._result;
        }
      }
      function lazy(ctor) {
        var payload = {
          _status: -1,
          _result: ctor
        };
        var lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps;
          var propTypes2;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: true,
              get: function() {
                return defaultProps;
              },
              set: function(newDefaultProps) {
                error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                defaultProps = newDefaultProps;
                Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function() {
                return propTypes2;
              },
              set: function(newPropTypes) {
                error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                propTypes2 = newPropTypes;
                Object.defineProperty(lazyType, "propTypes", {
                  enumerable: true
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef2(render) {
        {
          if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
            error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
          } else if (typeof render !== "function") {
            error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
          } else {
            if (render.length !== 0 && render.length !== 2) {
              error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
            }
          }
          if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) {
              error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
            }
          }
        }
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (render.displayName == null) {
                render.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      var enableScopeAPI = false;
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
            return true;
          }
        }
        return false;
      }
      function memo(type, compare) {
        {
          if (!isValidElementType(type)) {
            error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
          }
        }
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare === void 0 ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (type.displayName == null) {
                type.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (!(dispatcher !== null)) {
          {
            throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
        return dispatcher;
      }
      function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        {
          if (unstable_observedBits !== void 0) {
            error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
          }
          if (Context._context !== void 0) {
            var realContext = Context._context;
            if (realContext.Consumer === Context) {
              error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            } else if (realContext.Provider === Context) {
              error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
            }
          }
        }
        return dispatcher.useContext(Context, unstable_observedBits);
      }
      function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect(create2, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create2, deps);
      }
      function useLayoutEffect(create2, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create2, deps);
      }
      function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo(create2, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create2, deps);
      }
      function useImperativeHandle(ref, create2, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create2, deps);
      }
      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: _assign({}, props, {
                value: prevLog
              }),
              info: _assign({}, props, {
                value: prevInfo
              }),
              warn: _assign({}, props, {
                value: prevWarn
              }),
              error: _assign({}, props, {
                value: prevError
              }),
              group: _assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: _assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: _assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix2;
      function describeBuiltInComponentFrame(name, source2, ownerFn) {
        {
          if (prefix2 === void 0) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match && match[1] || "";
            }
          }
          return "\n" + prefix2 + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source2, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source2, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case exports.Suspense:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source2, ownerFn);
            case REACT_BLOCK_TYPE:
              return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source2, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      var loggedTypeFailures2 = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes2(typeSpecs, values, location, componentName, element) {
        {
          var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures2)) {
                loggedTypeFailures2[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
          } else {
            setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentName(ReactCurrentOwner.current.type);
          if (name) {
            return "\n\nCheck the render method of `" + name + "`.";
          }
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source2) {
        if (source2 !== void 0) {
          var fileName = source2.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source2.lineNumber;
          return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== void 0) {
          return getSourceInfoErrorAddendum(elementProps.__source);
        }
        return "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        }
        {
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node !== "object") {
          return;
        }
        if (Array.isArray(node)) {
          for (var i2 = 0; i2 < node.length; i2++) {
            var child = node[i2];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === void 0 || typeof type === "string") {
            return;
          }
          var propTypes2;
          if (typeof type === "function") {
            propTypes2 = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes2 = type.propTypes;
          } else {
            return;
          }
          if (propTypes2) {
            var name = getComponentName(type);
            checkPropTypes2(propTypes2, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentName(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys2 = Object.keys(fragment.props);
          for (var i2 = 0; i2 < keys2.length; i2++) {
            var key2 = keys2[i2];
            if (key2 !== "children" && key2 !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key2);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (Array.isArray(type)) {
            typeString = "array";
          } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
            info = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          {
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
        }
        var element = createElement.apply(this, arguments);
        if (element == null) {
          return element;
        }
        if (validType) {
          for (var i2 = 2; i2 < arguments.length; i2++) {
            validateChildKeys(arguments[i2], type);
          }
        }
        if (type === exports.Fragment) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
      var didWarnAboutDeprecatedCreateFactory = false;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
          }
          Object.defineProperty(validatedFactory, "type", {
            enumerable: false,
            get: function() {
              warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
              Object.defineProperty(this, "type", {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for (var i2 = 2; i2 < arguments.length; i2++) {
          validateChildKeys(arguments[i2], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
      {
        try {
          var frozenObject = Object.freeze({});
          new Map([[frozenObject, null]]);
          new Set([frozenObject]);
        } catch (e) {
        }
      }
      var createElement$1 = createElementWithValidation;
      var cloneElement$1 = cloneElementWithValidation;
      var createFactory = createFactoryWithValidation;
      var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild2
      };
      exports.Children = Children;
      exports.Component = Component;
      exports.PureComponent = PureComponent;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
      exports.cloneElement = cloneElement$1;
      exports.createContext = createContext;
      exports.createElement = createElement$1;
      exports.createFactory = createFactory;
      exports.createRef = createRef;
      exports.forwardRef = forwardRef2;
      exports.isValidElement = isValidElement;
      exports.lazy = lazy;
      exports.memo = memo;
      exports.useCallback = useCallback;
      exports.useContext = useContext;
      exports.useDebugValue = useDebugValue;
      exports.useEffect = useEffect;
      exports.useImperativeHandle = useImperativeHandle;
      exports.useLayoutEffect = useLayoutEffect;
      exports.useMemo = useMemo;
      exports.useReducer = useReducer;
      exports.useRef = useRef;
      exports.useState = useState;
      exports.version = ReactVersion;
    })();
  }
});
var react = createCommonjsModule(function(module) {
  {
    module.exports = react_development;
  }
});
function _setPrototypeOf$2(o, p) {
  _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$2(o, p);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf$2(subClass, superClass);
}
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var reactIs_development = createCommonjsModule(function(module, exports) {
  {
    (function() {
      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
      function isValidElementType(type) {
        return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object) {
        if (typeof object === "object" && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return void 0;
      }
      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      exports.AsyncMode = AsyncMode;
      exports.ConcurrentMode = ConcurrentMode;
      exports.ContextConsumer = ContextConsumer;
      exports.ContextProvider = ContextProvider;
      exports.Element = Element;
      exports.ForwardRef = ForwardRef;
      exports.Fragment = Fragment;
      exports.Lazy = Lazy;
      exports.Memo = Memo;
      exports.Portal = Portal;
      exports.Profiler = Profiler;
      exports.StrictMode = StrictMode;
      exports.Suspense = Suspense;
      exports.isAsyncMode = isAsyncMode;
      exports.isConcurrentMode = isConcurrentMode;
      exports.isContextConsumer = isContextConsumer;
      exports.isContextProvider = isContextProvider;
      exports.isElement = isElement;
      exports.isForwardRef = isForwardRef;
      exports.isFragment = isFragment;
      exports.isLazy = isLazy;
      exports.isMemo = isMemo;
      exports.isPortal = isPortal;
      exports.isProfiler = isProfiler;
      exports.isStrictMode = isStrictMode;
      exports.isSuspense = isSuspense;
      exports.isValidElementType = isValidElementType;
      exports.typeOf = typeOf;
    })();
  }
});
var reactIs = createCommonjsModule(function(module) {
  {
    module.exports = reactIs_development;
  }
});
var ReactPropTypesSecret$1 = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;
var printWarning$2 = function() {
};
{
  var ReactPropTypesSecret = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
  var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
  printWarning$2 = function(text) {
    var message = "Warning: " + text;
    if (typeof console !== "undefined") {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (x) {
    }
  };
}
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  {
    for (var typeSpecName in typeSpecs) {
      if (has$1(typeSpecs, typeSpecName)) {
        var error;
        try {
          if (typeof typeSpecs[typeSpecName] !== "function") {
            var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.");
            err.name = "Invariant Violation";
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning$2((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          loggedTypeFailures[error.message] = true;
          var stack = getStack ? getStack() : "";
          printWarning$2("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
        }
      }
    }
  }
}
checkPropTypes.resetWarningCache = function() {
  {
    loggedTypeFailures = {};
  }
};
var checkPropTypes_1 = checkPropTypes;
var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning$1 = function() {
};
{
  printWarning$1 = function(text) {
    var message = "Warning: " + text;
    if (typeof console !== "undefined") {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (x) {
    }
  };
}
function emptyFunctionThatReturnsNull() {
  return null;
}
var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
  var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = "@@iterator";
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === "function") {
      return iteratorFn;
    }
  }
  var ANONYMOUS = "<<anonymous>>";
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker("array"),
    bool: createPrimitiveTypeChecker("boolean"),
    func: createPrimitiveTypeChecker("function"),
    number: createPrimitiveTypeChecker("number"),
    object: createPrimitiveTypeChecker("object"),
    string: createPrimitiveTypeChecker("string"),
    symbol: createPrimitiveTypeChecker("symbol"),
    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };
  function is(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }
  function PropTypeError(message) {
    this.message = message;
    this.stack = "";
  }
  PropTypeError.prototype = Error.prototype;
  function createChainableTypeChecker(validate2) {
    {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;
      if (secret !== ReactPropTypesSecret_1) {
        if (throwOnDirectAccess) {
          var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
          err.name = "Invariant Violation";
          throw err;
        } else if (typeof console !== "undefined") {
          var cacheKey = componentName + ":" + propName;
          if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
            printWarning$1("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
          }
          return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
        }
        return null;
      } else {
        return validate2(props, propName, componentName, location, propFullName);
      }
    }
    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }
  function createPrimitiveTypeChecker(expectedType) {
    function validate2(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        var preciseType = getPreciseType(propValue);
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
      }
      return null;
    }
    return createChainableTypeChecker(validate2);
  }
  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }
  function createArrayOfTypeChecker(typeChecker) {
    function validate2(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== "function") {
        return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
      }
      for (var i2 = 0; i2 < propValue.length; i2++) {
        var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret_1);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate2);
  }
  function createElementTypeChecker() {
    function validate2(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
      }
      return null;
    }
    return createChainableTypeChecker(validate2);
  }
  function createElementTypeTypeChecker() {
    function validate2(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!reactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
      }
      return null;
    }
    return createChainableTypeChecker(validate2);
  }
  function createInstanceTypeChecker(expectedClass) {
    function validate2(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
      }
      return null;
    }
    return createChainableTypeChecker(validate2);
  }
  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      {
        if (arguments.length > 1) {
          printWarning$1("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
        } else {
          printWarning$1("Invalid argument supplied to oneOf, expected an array.");
        }
      }
      return emptyFunctionThatReturnsNull;
    }
    function validate2(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i2 = 0; i2 < expectedValues.length; i2++) {
        if (is(propValue, expectedValues[i2])) {
          return null;
        }
      }
      var valuesString = JSON.stringify(expectedValues, function replacer(key2, value) {
        var type = getPreciseType(value);
        if (type === "symbol") {
          return String(value);
        }
        return value;
      });
      return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
    }
    return createChainableTypeChecker(validate2);
  }
  function createObjectOfTypeChecker(typeChecker) {
    function validate2(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== "function") {
        return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== "object") {
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
      }
      for (var key2 in propValue) {
        if (has(propValue, key2)) {
          var error = typeChecker(propValue, key2, componentName, location, propFullName + "." + key2, ReactPropTypesSecret_1);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate2);
  }
  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      printWarning$1("Invalid argument supplied to oneOfType, expected an instance of array.");
      return emptyFunctionThatReturnsNull;
    }
    for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
      var checker = arrayOfTypeCheckers[i2];
      if (typeof checker !== "function") {
        printWarning$1("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + ".");
        return emptyFunctionThatReturnsNull;
      }
    }
    function validate2(props, propName, componentName, location, propFullName) {
      for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
        var checker2 = arrayOfTypeCheckers[i3];
        if (checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
          return null;
        }
      }
      return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
    }
    return createChainableTypeChecker(validate2);
  }
  function createNodeChecker() {
    function validate2(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
      }
      return null;
    }
    return createChainableTypeChecker(validate2);
  }
  function createShapeTypeChecker(shapeTypes) {
    function validate2(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== "object") {
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
      }
      for (var key2 in shapeTypes) {
        var checker = shapeTypes[key2];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key2, componentName, location, propFullName + "." + key2, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate2);
  }
  function createStrictShapeTypeChecker(shapeTypes) {
    function validate2(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== "object") {
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
      }
      var allKeys = objectAssign({}, props[propName], shapeTypes);
      for (var key2 in allKeys) {
        var checker = shapeTypes[key2];
        if (!checker) {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key2 + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
        }
        var error = checker(propValue, key2, componentName, location, propFullName + "." + key2, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate2);
  }
  function isNode(propValue) {
    switch (typeof propValue) {
      case "number":
      case "string":
      case "undefined":
        return true;
      case "boolean":
        return !propValue;
      case "object":
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }
        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }
        return true;
      default:
        return false;
    }
  }
  function isSymbol2(propType, propValue) {
    if (propType === "symbol") {
      return true;
    }
    if (!propValue) {
      return false;
    }
    if (propValue["@@toStringTag"] === "Symbol") {
      return true;
    }
    if (typeof Symbol === "function" && propValue instanceof Symbol) {
      return true;
    }
    return false;
  }
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return "array";
    }
    if (propValue instanceof RegExp) {
      return "object";
    }
    if (isSymbol2(propType, propValue)) {
      return "symbol";
    }
    return propType;
  }
  function getPreciseType(propValue) {
    if (typeof propValue === "undefined" || propValue === null) {
      return "" + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === "object") {
      if (propValue instanceof Date) {
        return "date";
      } else if (propValue instanceof RegExp) {
        return "regexp";
      }
    }
    return propType;
  }
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case "array":
      case "object":
        return "an " + type;
      case "boolean":
      case "date":
      case "regexp":
        return "a " + type;
      default:
        return type;
    }
  }
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }
  ReactPropTypes.checkPropTypes = checkPropTypes_1;
  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};
var propTypes = createCommonjsModule(function(module) {
  {
    var ReactIs = reactIs;
    var throwOnDirectAccess = true;
    module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
  }
});
function _extends$2() {
  _extends$2 = Object.assign || function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source2 = arguments[i2];
      for (var key2 in source2) {
        if (Object.prototype.hasOwnProperty.call(source2, key2)) {
          target[key2] = source2[key2];
        }
      }
    }
    return target;
  };
  return _extends$2.apply(this, arguments);
}
function isAbsolute(pathname) {
  return pathname.charAt(0) === "/";
}
function spliceOne(list, index2) {
  for (var i2 = index2, k = i2 + 1, n = list.length; k < n; i2 += 1, k += 1) {
    list[i2] = list[k];
  }
  list.pop();
}
function resolvePathname(to, from) {
  if (from === void 0)
    from = "";
  var toParts = to && to.split("/") || [];
  var fromParts = from && from.split("/") || [];
  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;
  if (to && isAbsolute(to)) {
    fromParts = toParts;
  } else if (toParts.length) {
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }
  if (!fromParts.length)
    return "/";
  var hasTrailingSlash;
  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === "." || last === ".." || last === "";
  } else {
    hasTrailingSlash = false;
  }
  var up = 0;
  for (var i2 = fromParts.length; i2 >= 0; i2--) {
    var part = fromParts[i2];
    if (part === ".") {
      spliceOne(fromParts, i2);
    } else if (part === "..") {
      spliceOne(fromParts, i2);
      up++;
    } else if (up) {
      spliceOne(fromParts, i2);
      up--;
    }
  }
  if (!mustEndAbs)
    for (; up--; up)
      fromParts.unshift("..");
  if (mustEndAbs && fromParts[0] !== "" && (!fromParts[0] || !isAbsolute(fromParts[0])))
    fromParts.unshift("");
  var result = fromParts.join("/");
  if (hasTrailingSlash && result.substr(-1) !== "/")
    result += "/";
  return result;
}
function valueOf(obj) {
  return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
}
function valueEqual(a, b) {
  if (a === b)
    return true;
  if (a == null || b == null)
    return false;
  if (Array.isArray(a)) {
    return Array.isArray(b) && a.length === b.length && a.every(function(item, index2) {
      return valueEqual(item, b[index2]);
    });
  }
  if (typeof a === "object" || typeof b === "object") {
    var aValue = valueOf(a);
    var bValue = valueOf(b);
    if (aValue !== a || bValue !== b)
      return valueEqual(aValue, bValue);
    return Object.keys(Object.assign({}, a, b)).every(function(key2) {
      return valueEqual(a[key2], b[key2]);
    });
  }
  return false;
}
function warning$1(condition, message) {
  {
    if (condition) {
      return;
    }
    var text = "Warning: " + message;
    if (typeof console !== "undefined") {
      console.warn(text);
    }
    try {
      throw Error(text);
    } catch (x) {
    }
  }
}
var prefix = "Invariant failed";
function invariant$1(condition, message) {
  if (condition) {
    return;
  }
  throw new Error(prefix + ": " + (message || ""));
}
function addLeadingSlash$1(path) {
  return path.charAt(0) === "/" ? path : "/" + path;
}
function stripLeadingSlash(path) {
  return path.charAt(0) === "/" ? path.substr(1) : path;
}
function hasBasename(path, prefix2) {
  return path.toLowerCase().indexOf(prefix2.toLowerCase()) === 0 && "/?#".indexOf(path.charAt(prefix2.length)) !== -1;
}
function stripBasename$1(path, prefix2) {
  return hasBasename(path, prefix2) ? path.substr(prefix2.length) : path;
}
function stripTrailingSlash(path) {
  return path.charAt(path.length - 1) === "/" ? path.slice(0, -1) : path;
}
function parsePath(path) {
  var pathname = path || "/";
  var search = "";
  var hash = "";
  var hashIndex = pathname.indexOf("#");
  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }
  var searchIndex = pathname.indexOf("?");
  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }
  return {
    pathname,
    search: search === "?" ? "" : search,
    hash: hash === "#" ? "" : hash
  };
}
function createPath(location) {
  var pathname = location.pathname, search = location.search, hash = location.hash;
  var path = pathname || "/";
  if (search && search !== "?")
    path += search.charAt(0) === "?" ? search : "?" + search;
  if (hash && hash !== "#")
    path += hash.charAt(0) === "#" ? hash : "#" + hash;
  return path;
}
function createLocation(path, state, key2, currentLocation) {
  var location;
  if (typeof path === "string") {
    location = parsePath(path);
    location.state = state;
  } else {
    location = _extends$2({}, path);
    if (location.pathname === void 0)
      location.pathname = "";
    if (location.search) {
      if (location.search.charAt(0) !== "?")
        location.search = "?" + location.search;
    } else {
      location.search = "";
    }
    if (location.hash) {
      if (location.hash.charAt(0) !== "#")
        location.hash = "#" + location.hash;
    } else {
      location.hash = "";
    }
    if (state !== void 0 && location.state === void 0)
      location.state = state;
  }
  try {
    location.pathname = decodeURI(location.pathname);
  } catch (e) {
    if (e instanceof URIError) {
      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. This is likely caused by an invalid percent-encoding.');
    } else {
      throw e;
    }
  }
  if (key2)
    location.key = key2;
  if (currentLocation) {
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== "/") {
      location.pathname = resolvePathname(location.pathname, currentLocation.pathname);
    }
  } else {
    if (!location.pathname) {
      location.pathname = "/";
    }
  }
  return location;
}
function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && valueEqual(a.state, b.state);
}
function createTransitionManager() {
  var prompt2 = null;
  function setPrompt(nextPrompt) {
    warning$1(prompt2 == null, "A history supports only one prompt at a time");
    prompt2 = nextPrompt;
    return function() {
      if (prompt2 === nextPrompt)
        prompt2 = null;
    };
  }
  function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    if (prompt2 != null) {
      var result = typeof prompt2 === "function" ? prompt2(location, action) : prompt2;
      if (typeof result === "string") {
        if (typeof getUserConfirmation === "function") {
          getUserConfirmation(result, callback);
        } else {
          warning$1(false, "A history needs a getUserConfirmation function in order to use a prompt message");
          callback(true);
        }
      } else {
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  }
  var listeners = [];
  function appendListener(fn) {
    var isActive = true;
    function listener() {
      if (isActive)
        fn.apply(void 0, arguments);
    }
    listeners.push(listener);
    return function() {
      isActive = false;
      listeners = listeners.filter(function(item) {
        return item !== listener;
      });
    };
  }
  function notifyListeners() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    listeners.forEach(function(listener) {
      return listener.apply(void 0, args);
    });
  }
  return {
    setPrompt,
    confirmTransitionTo,
    appendListener,
    notifyListeners
  };
}
var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
function getConfirmation(message, callback) {
  callback(window.confirm(message));
}
function supportsHistory() {
  var ua = window.navigator.userAgent;
  if ((ua.indexOf("Android 2.") !== -1 || ua.indexOf("Android 4.0") !== -1) && ua.indexOf("Mobile Safari") !== -1 && ua.indexOf("Chrome") === -1 && ua.indexOf("Windows Phone") === -1)
    return false;
  return window.history && "pushState" in window.history;
}
function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf("Trident") === -1;
}
function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf("Firefox") === -1;
}
function isExtraneousPopstateEvent(event) {
  return event.state === void 0 && navigator.userAgent.indexOf("CriOS") === -1;
}
var PopStateEvent = "popstate";
var HashChangeEvent = "hashchange";
function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    return {};
  }
}
function createBrowserHistory(props) {
  if (props === void 0) {
    props = {};
  }
  !canUseDOM ? invariant$1(false, "Browser history needs a DOM") : void 0;
  var globalHistory = window.history;
  var canUseHistory = supportsHistory();
  var needsHashChangeListener = !supportsPopStateOnHashChange();
  var _props = props, _props$forceRefresh = _props.forceRefresh, forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash$1(props.basename)) : "";
  function getDOMLocation(historyState) {
    var _ref = historyState || {}, key2 = _ref.key, state = _ref.state;
    var _window$location = window.location, pathname = _window$location.pathname, search = _window$location.search, hash = _window$location.hash;
    var path = pathname + search + hash;
    warning$1(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "' + path + '" to begin with "' + basename + '".');
    if (basename)
      path = stripBasename$1(path, basename);
    return createLocation(path, state, key2);
  }
  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }
  var transitionManager = createTransitionManager();
  function setState(nextState) {
    _extends$2(history, nextState);
    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }
  function handlePopState(event) {
    if (isExtraneousPopstateEvent(event))
      return;
    handlePop(getDOMLocation(event.state));
  }
  function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  }
  var forceNextPop = false;
  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = "POP";
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
        if (ok) {
          setState({
            action,
            location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }
  function revertPop(fromLocation) {
    var toLocation = history.location;
    var toIndex = allKeys.indexOf(toLocation.key);
    if (toIndex === -1)
      toIndex = 0;
    var fromIndex = allKeys.indexOf(fromLocation.key);
    if (fromIndex === -1)
      fromIndex = 0;
    var delta = toIndex - fromIndex;
    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  }
  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key];
  function createHref(location) {
    return basename + createPath(location);
  }
  function push(path, state) {
    warning$1(!(typeof path === "object" && path.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
    var action = "PUSH";
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
      if (!ok)
        return;
      var href = createHref(location);
      var key2 = location.key, state2 = location.state;
      if (canUseHistory) {
        globalHistory.pushState({
          key: key2,
          state: state2
        }, null, href);
        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex + 1);
          nextKeys.push(location.key);
          allKeys = nextKeys;
          setState({
            action,
            location
          });
        }
      } else {
        warning$1(state2 === void 0, "Browser history cannot push state in browsers that do not support HTML5 history");
        window.location.href = href;
      }
    });
  }
  function replace(path, state) {
    warning$1(!(typeof path === "object" && path.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
    var action = "REPLACE";
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
      if (!ok)
        return;
      var href = createHref(location);
      var key2 = location.key, state2 = location.state;
      if (canUseHistory) {
        globalHistory.replaceState({
          key: key2,
          state: state2
        }, null, href);
        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          if (prevIndex !== -1)
            allKeys[prevIndex] = location.key;
          setState({
            action,
            location
          });
        }
      } else {
        warning$1(state2 === void 0, "Browser history cannot replace state in browsers that do not support HTML5 history");
        window.location.replace(href);
      }
    });
  }
  function go(n) {
    globalHistory.go(n);
  }
  function goBack() {
    go(-1);
  }
  function goForward() {
    go(1);
  }
  var listenerCount = 0;
  function checkDOMListeners(delta) {
    listenerCount += delta;
    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener)
        window.addEventListener(HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener)
        window.removeEventListener(HashChangeEvent, handleHashChange);
    }
  }
  var isBlocked = false;
  function block(prompt2) {
    if (prompt2 === void 0) {
      prompt2 = false;
    }
    var unblock = transitionManager.setPrompt(prompt2);
    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }
    return function() {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }
      return unblock();
    };
  }
  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function() {
      checkDOMListeners(-1);
      unlisten();
    };
  }
  var history = {
    length: globalHistory.length,
    action: "POP",
    location: initialLocation,
    createHref,
    push,
    replace,
    go,
    goBack,
    goForward,
    block,
    listen
  };
  return history;
}
var HashChangeEvent$1 = "hashchange";
var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path) {
      return path.charAt(0) === "!" ? path : "!/" + stripLeadingSlash(path);
    },
    decodePath: function decodePath(path) {
      return path.charAt(0) === "!" ? path.substr(1) : path;
    }
  },
  noslash: {
    encodePath: stripLeadingSlash,
    decodePath: addLeadingSlash$1
  },
  slash: {
    encodePath: addLeadingSlash$1,
    decodePath: addLeadingSlash$1
  }
};
function stripHash(url) {
  var hashIndex = url.indexOf("#");
  return hashIndex === -1 ? url : url.slice(0, hashIndex);
}
function getHashPath() {
  var href = window.location.href;
  var hashIndex = href.indexOf("#");
  return hashIndex === -1 ? "" : href.substring(hashIndex + 1);
}
function pushHashPath(path) {
  window.location.hash = path;
}
function replaceHashPath(path) {
  window.location.replace(stripHash(window.location.href) + "#" + path);
}
function createHashHistory(props) {
  if (props === void 0) {
    props = {};
  }
  !canUseDOM ? invariant$1(false, "Hash history needs a DOM") : void 0;
  var globalHistory = window.history;
  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
  var _props = props, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$hashType = _props.hashType, hashType = _props$hashType === void 0 ? "slash" : _props$hashType;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash$1(props.basename)) : "";
  var _HashPathCoders$hashT = HashPathCoders[hashType], encodePath2 = _HashPathCoders$hashT.encodePath, decodePath2 = _HashPathCoders$hashT.decodePath;
  function getDOMLocation() {
    var path2 = decodePath2(getHashPath());
    warning$1(!basename || hasBasename(path2, basename), 'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "' + path2 + '" to begin with "' + basename + '".');
    if (basename)
      path2 = stripBasename$1(path2, basename);
    return createLocation(path2);
  }
  var transitionManager = createTransitionManager();
  function setState(nextState) {
    _extends$2(history, nextState);
    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }
  var forceNextPop = false;
  var ignorePath = null;
  function locationsAreEqual$$1(a, b) {
    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
  }
  function handleHashChange() {
    var path2 = getHashPath();
    var encodedPath2 = encodePath2(path2);
    if (path2 !== encodedPath2) {
      replaceHashPath(encodedPath2);
    } else {
      var location = getDOMLocation();
      var prevLocation = history.location;
      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location))
        return;
      if (ignorePath === createPath(location))
        return;
      ignorePath = null;
      handlePop(location);
    }
  }
  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = "POP";
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
        if (ok) {
          setState({
            action,
            location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }
  function revertPop(fromLocation) {
    var toLocation = history.location;
    var toIndex = allPaths.lastIndexOf(createPath(toLocation));
    if (toIndex === -1)
      toIndex = 0;
    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
    if (fromIndex === -1)
      fromIndex = 0;
    var delta = toIndex - fromIndex;
    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  }
  var path = getHashPath();
  var encodedPath = encodePath2(path);
  if (path !== encodedPath)
    replaceHashPath(encodedPath);
  var initialLocation = getDOMLocation();
  var allPaths = [createPath(initialLocation)];
  function createHref(location) {
    var baseTag = document.querySelector("base");
    var href = "";
    if (baseTag && baseTag.getAttribute("href")) {
      href = stripHash(window.location.href);
    }
    return href + "#" + encodePath2(basename + createPath(location));
  }
  function push(path2, state) {
    warning$1(state === void 0, "Hash history cannot push state; it is ignored");
    var action = "PUSH";
    var location = createLocation(path2, void 0, void 0, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
      if (!ok)
        return;
      var path3 = createPath(location);
      var encodedPath2 = encodePath2(basename + path3);
      var hashChanged = getHashPath() !== encodedPath2;
      if (hashChanged) {
        ignorePath = path3;
        pushHashPath(encodedPath2);
        var prevIndex = allPaths.lastIndexOf(createPath(history.location));
        var nextPaths = allPaths.slice(0, prevIndex + 1);
        nextPaths.push(path3);
        allPaths = nextPaths;
        setState({
          action,
          location
        });
      } else {
        warning$1(false, "Hash history cannot PUSH the same path; a new entry will not be added to the history stack");
        setState();
      }
    });
  }
  function replace(path2, state) {
    warning$1(state === void 0, "Hash history cannot replace state; it is ignored");
    var action = "REPLACE";
    var location = createLocation(path2, void 0, void 0, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
      if (!ok)
        return;
      var path3 = createPath(location);
      var encodedPath2 = encodePath2(basename + path3);
      var hashChanged = getHashPath() !== encodedPath2;
      if (hashChanged) {
        ignorePath = path3;
        replaceHashPath(encodedPath2);
      }
      var prevIndex = allPaths.indexOf(createPath(history.location));
      if (prevIndex !== -1)
        allPaths[prevIndex] = path3;
      setState({
        action,
        location
      });
    });
  }
  function go(n) {
    warning$1(canGoWithoutReload, "Hash history go(n) causes a full page reload in this browser");
    globalHistory.go(n);
  }
  function goBack() {
    go(-1);
  }
  function goForward() {
    go(1);
  }
  var listenerCount = 0;
  function checkDOMListeners(delta) {
    listenerCount += delta;
    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(HashChangeEvent$1, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(HashChangeEvent$1, handleHashChange);
    }
  }
  var isBlocked = false;
  function block(prompt2) {
    if (prompt2 === void 0) {
      prompt2 = false;
    }
    var unblock = transitionManager.setPrompt(prompt2);
    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }
    return function() {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }
      return unblock();
    };
  }
  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function() {
      checkDOMListeners(-1);
      unlisten();
    };
  }
  var history = {
    length: globalHistory.length,
    action: "POP",
    location: initialLocation,
    createHref,
    push,
    replace,
    go,
    goBack,
    goForward,
    block,
    listen
  };
  return history;
}
function clamp(n, lowerBound, upperBound) {
  return Math.min(Math.max(n, lowerBound), upperBound);
}
function createMemoryHistory(props) {
  if (props === void 0) {
    props = {};
  }
  var _props = props, getUserConfirmation = _props.getUserConfirmation, _props$initialEntries = _props.initialEntries, initialEntries = _props$initialEntries === void 0 ? ["/"] : _props$initialEntries, _props$initialIndex = _props.initialIndex, initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var transitionManager = createTransitionManager();
  function setState(nextState) {
    _extends$2(history, nextState);
    history.length = history.entries.length;
    transitionManager.notifyListeners(history.location, history.action);
  }
  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }
  var index2 = clamp(initialIndex, 0, initialEntries.length - 1);
  var entries = initialEntries.map(function(entry) {
    return typeof entry === "string" ? createLocation(entry, void 0, createKey()) : createLocation(entry, void 0, entry.key || createKey());
  });
  var createHref = createPath;
  function push(path, state) {
    warning$1(!(typeof path === "object" && path.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
    var action = "PUSH";
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
      if (!ok)
        return;
      var prevIndex = history.index;
      var nextIndex = prevIndex + 1;
      var nextEntries = history.entries.slice(0);
      if (nextEntries.length > nextIndex) {
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
      } else {
        nextEntries.push(location);
      }
      setState({
        action,
        location,
        index: nextIndex,
        entries: nextEntries
      });
    });
  }
  function replace(path, state) {
    warning$1(!(typeof path === "object" && path.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
    var action = "REPLACE";
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
      if (!ok)
        return;
      history.entries[history.index] = location;
      setState({
        action,
        location
      });
    });
  }
  function go(n) {
    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
    var action = "POP";
    var location = history.entries[nextIndex];
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function(ok) {
      if (ok) {
        setState({
          action,
          location,
          index: nextIndex
        });
      } else {
        setState();
      }
    });
  }
  function goBack() {
    go(-1);
  }
  function goForward() {
    go(1);
  }
  function canGo(n) {
    var nextIndex = history.index + n;
    return nextIndex >= 0 && nextIndex < history.entries.length;
  }
  function block(prompt2) {
    if (prompt2 === void 0) {
      prompt2 = false;
    }
    return transitionManager.setPrompt(prompt2);
  }
  function listen(listener) {
    return transitionManager.appendListener(listener);
  }
  var history = {
    length: entries.length,
    action: "POP",
    location: entries[index2],
    index: index2,
    entries,
    createHref,
    push,
    replace,
    go,
    goBack,
    goForward,
    canGo,
    block,
    listen
  };
  return history;
}
var MAX_SIGNED_31_BIT_INT = 1073741823;
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
function getUniqueId() {
  var key2 = "__global_unique_id__";
  return commonjsGlobal[key2] = (commonjsGlobal[key2] || 0) + 1;
}
function objectIs(x, y) {
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}
function createEventEmitter(value) {
  var handlers = [];
  return {
    on: function on(handler) {
      handlers.push(handler);
    },
    off: function off(handler) {
      handlers = handlers.filter(function(h) {
        return h !== handler;
      });
    },
    get: function get2() {
      return value;
    },
    set: function set(newValue, changedBits) {
      value = newValue;
      handlers.forEach(function(handler) {
        return handler(value, changedBits);
      });
    }
  };
}
function onlyChild(children) {
  return Array.isArray(children) ? children[0] : children;
}
function createReactContext(defaultValue, calculateChangedBits) {
  var _Provider$childContex, _Consumer$contextType;
  var contextProp = "__create-react-context-" + getUniqueId() + "__";
  var Provider = /* @__PURE__ */ function(_Component) {
    _inheritsLoose(Provider2, _Component);
    function Provider2() {
      var _this;
      _this = _Component.apply(this, arguments) || this;
      _this.emitter = createEventEmitter(_this.props.value);
      return _this;
    }
    var _proto = Provider2.prototype;
    _proto.getChildContext = function getChildContext() {
      var _ref;
      return _ref = {}, _ref[contextProp] = this.emitter, _ref;
    };
    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      if (this.props.value !== nextProps.value) {
        var oldValue = this.props.value;
        var newValue = nextProps.value;
        var changedBits;
        if (objectIs(oldValue, newValue)) {
          changedBits = 0;
        } else {
          changedBits = typeof calculateChangedBits === "function" ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
          {
            warning$1((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, "calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: " + changedBits);
          }
          changedBits |= 0;
          if (changedBits !== 0) {
            this.emitter.set(nextProps.value, changedBits);
          }
        }
      }
    };
    _proto.render = function render() {
      return this.props.children;
    };
    return Provider2;
  }(react.Component);
  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = propTypes.object.isRequired, _Provider$childContex);
  var Consumer = /* @__PURE__ */ function(_Component2) {
    _inheritsLoose(Consumer2, _Component2);
    function Consumer2() {
      var _this2;
      _this2 = _Component2.apply(this, arguments) || this;
      _this2.state = {
        value: _this2.getValue()
      };
      _this2.onUpdate = function(newValue, changedBits) {
        var observedBits = _this2.observedBits | 0;
        if ((observedBits & changedBits) !== 0) {
          _this2.setState({
            value: _this2.getValue()
          });
        }
      };
      return _this2;
    }
    var _proto2 = Consumer2.prototype;
    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      var observedBits = nextProps.observedBits;
      this.observedBits = observedBits === void 0 || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
    };
    _proto2.componentDidMount = function componentDidMount() {
      if (this.context[contextProp]) {
        this.context[contextProp].on(this.onUpdate);
      }
      var observedBits = this.props.observedBits;
      this.observedBits = observedBits === void 0 || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
    };
    _proto2.componentWillUnmount = function componentWillUnmount() {
      if (this.context[contextProp]) {
        this.context[contextProp].off(this.onUpdate);
      }
    };
    _proto2.getValue = function getValue2() {
      if (this.context[contextProp]) {
        return this.context[contextProp].get();
      } else {
        return defaultValue;
      }
    };
    _proto2.render = function render() {
      return onlyChild(this.props.children)(this.state.value);
    };
    return Consumer2;
  }(react.Component);
  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = propTypes.object, _Consumer$contextType);
  return {
    Provider,
    Consumer
  };
}
var index = react.createContext || createReactContext;
var isarray = Array.isArray || function(arr) {
  return Object.prototype.toString.call(arr) == "[object Array]";
};
var pathToRegexp_1 = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;
var PATH_REGEXP = new RegExp([
  "(\\\\.)",
  "([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"
].join("|"), "g");
function parse(str, options) {
  var tokens = [];
  var key2 = 0;
  var index2 = 0;
  var path = "";
  var defaultDelimiter = options && options.delimiter || "/";
  var res;
  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index2, offset);
    index2 = offset + m.length;
    if (escaped) {
      path += escaped[1];
      continue;
    }
    var next = str[index2];
    var prefix2 = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7];
    if (path) {
      tokens.push(path);
      path = "";
    }
    var partial = prefix2 != null && next != null && next !== prefix2;
    var repeat = modifier === "+" || modifier === "*";
    var optional = modifier === "?" || modifier === "*";
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;
    tokens.push({
      name: name || key2++,
      prefix: prefix2 || "",
      delimiter,
      optional,
      repeat,
      partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : asterisk ? ".*" : "[^" + escapeString(delimiter) + "]+?"
    });
  }
  if (index2 < str.length) {
    path += str.substr(index2);
  }
  if (path) {
    tokens.push(path);
  }
  return tokens;
}
function compile(str, options) {
  return tokensToFunction(parse(str, options), options);
}
function encodeURIComponentPretty(str) {
  return encodeURI(str).replace(/[\/?#]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
function encodeAsterisk(str) {
  return encodeURI(str).replace(/[?#]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
function tokensToFunction(tokens, options) {
  var matches = new Array(tokens.length);
  for (var i2 = 0; i2 < tokens.length; i2++) {
    if (typeof tokens[i2] === "object") {
      matches[i2] = new RegExp("^(?:" + tokens[i2].pattern + ")$", flags(options));
    }
  }
  return function(obj, opts) {
    var path = "";
    var data = obj || {};
    var options2 = opts || {};
    var encode2 = options2.pretty ? encodeURIComponentPretty : encodeURIComponent;
    for (var i3 = 0; i3 < tokens.length; i3++) {
      var token = tokens[i3];
      if (typeof token === "string") {
        path += token;
        continue;
      }
      var value = data[token.name];
      var segment;
      if (value == null) {
        if (token.optional) {
          if (token.partial) {
            path += token.prefix;
          }
          continue;
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined');
        }
      }
      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + "`");
        }
        if (value.length === 0) {
          if (token.optional) {
            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty');
          }
        }
        for (var j = 0; j < value.length; j++) {
          segment = encode2(value[j]);
          if (!matches[i3].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + "`");
          }
          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }
        continue;
      }
      segment = token.asterisk ? encodeAsterisk(value) : encode2(value);
      if (!matches[i3].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
      }
      path += token.prefix + segment;
    }
    return path;
  };
}
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, "\\$1");
}
function escapeGroup(group) {
  return group.replace(/([=!:$\/()])/g, "\\$1");
}
function attachKeys(re, keys2) {
  re.keys = keys2;
  return re;
}
function flags(options) {
  return options && options.sensitive ? "" : "i";
}
function regexpToRegexp(path, keys2) {
  var groups = path.source.match(/\((?!\?)/g);
  if (groups) {
    for (var i2 = 0; i2 < groups.length; i2++) {
      keys2.push({
        name: i2,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }
  return attachKeys(path, keys2);
}
function arrayToRegexp(path, keys2, options) {
  var parts = [];
  for (var i2 = 0; i2 < path.length; i2++) {
    parts.push(pathToRegexp(path[i2], keys2, options).source);
  }
  var regexp = new RegExp("(?:" + parts.join("|") + ")", flags(options));
  return attachKeys(regexp, keys2);
}
function stringToRegexp(path, keys2, options) {
  return tokensToRegExp(parse(path, options), keys2, options);
}
function tokensToRegExp(tokens, keys2, options) {
  if (!isarray(keys2)) {
    options = keys2 || options;
    keys2 = [];
  }
  options = options || {};
  var strict = options.strict;
  var end = options.end !== false;
  var route = "";
  for (var i2 = 0; i2 < tokens.length; i2++) {
    var token = tokens[i2];
    if (typeof token === "string") {
      route += escapeString(token);
    } else {
      var prefix2 = escapeString(token.prefix);
      var capture = "(?:" + token.pattern + ")";
      keys2.push(token);
      if (token.repeat) {
        capture += "(?:" + prefix2 + capture + ")*";
      }
      if (token.optional) {
        if (!token.partial) {
          capture = "(?:" + prefix2 + "(" + capture + "))?";
        } else {
          capture = prefix2 + "(" + capture + ")?";
        }
      } else {
        capture = prefix2 + "(" + capture + ")";
      }
      route += capture;
    }
  }
  var delimiter = escapeString(options.delimiter || "/");
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + "(?:" + delimiter + "(?=$))?";
  }
  if (end) {
    route += "$";
  } else {
    route += strict && endsWithDelimiter ? "" : "(?=" + delimiter + "|$)";
  }
  return attachKeys(new RegExp("^" + route, flags(options)), keys2);
}
function pathToRegexp(path, keys2, options) {
  if (!isarray(keys2)) {
    options = keys2 || options;
    keys2 = [];
  }
  options = options || {};
  if (path instanceof RegExp) {
    return regexpToRegexp(path, keys2);
  }
  if (isarray(path)) {
    return arrayToRegexp(path, keys2, options);
  }
  return stringToRegexp(path, keys2, options);
}
pathToRegexp_1.parse = parse_1;
pathToRegexp_1.compile = compile_1;
pathToRegexp_1.tokensToFunction = tokensToFunction_1;
pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;
function _objectWithoutPropertiesLoose$3(source2, excluded) {
  if (source2 == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source2);
  var key2, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key2 = sourceKeys[i2];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source2[key2];
  }
  return target;
}
var FORWARD_REF_STATICS = {
  $$typeof: true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  $$typeof: true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
var createNamedContext = function createNamedContext2(name) {
  var context2 = index();
  context2.displayName = name;
  return context2;
};
var historyContext = /* @__PURE__ */ createNamedContext("Router-History");
var createNamedContext$1 = function createNamedContext3(name) {
  var context2 = index();
  context2.displayName = name;
  return context2;
};
var context = /* @__PURE__ */ createNamedContext$1("Router");
var Router = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(Router2, _React$Component);
  Router2.computeRootMatch = function computeRootMatch(pathname) {
    return {
      path: "/",
      url: "/",
      params: {},
      isExact: pathname === "/"
    };
  };
  function Router2(props) {
    var _this;
    _this = _React$Component.call(this, props) || this;
    _this.state = {
      location: props.history.location
    };
    _this._isMounted = false;
    _this._pendingLocation = null;
    if (!props.staticContext) {
      _this.unlisten = props.history.listen(function(location) {
        if (_this._isMounted) {
          _this.setState({
            location
          });
        } else {
          _this._pendingLocation = location;
        }
      });
    }
    return _this;
  }
  var _proto = Router2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this._isMounted = true;
    if (this._pendingLocation) {
      this.setState({
        location: this._pendingLocation
      });
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.unlisten)
      this.unlisten();
  };
  _proto.render = function render() {
    return react.createElement(context.Provider, {
      value: {
        history: this.props.history,
        location: this.state.location,
        match: Router2.computeRootMatch(this.state.location.pathname),
        staticContext: this.props.staticContext
      }
    }, react.createElement(historyContext.Provider, {
      children: this.props.children || null,
      value: this.props.history
    }));
  };
  return Router2;
}(react.Component);
{
  Router.propTypes = {
    children: propTypes.node,
    history: propTypes.object.isRequired,
    staticContext: propTypes.object
  };
  Router.prototype.componentDidUpdate = function(prevProps) {
    warning$1(prevProps.history === this.props.history, "You cannot change <Router history>");
  };
}
var MemoryRouter = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(MemoryRouter2, _React$Component);
  function MemoryRouter2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = createMemoryHistory(_this.props);
    return _this;
  }
  var _proto = MemoryRouter2.prototype;
  _proto.render = function render() {
    return react.createElement(Router, {
      history: this.history,
      children: this.props.children
    });
  };
  return MemoryRouter2;
}(react.Component);
{
  MemoryRouter.propTypes = {
    initialEntries: propTypes.array,
    initialIndex: propTypes.number,
    getUserConfirmation: propTypes.func,
    keyLength: propTypes.number,
    children: propTypes.node
  };
  MemoryRouter.prototype.componentDidMount = function() {
    warning$1(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.");
  };
}
var Lifecycle = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(Lifecycle2, _React$Component);
  function Lifecycle2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = Lifecycle2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    if (this.props.onMount)
      this.props.onMount.call(this, this);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.onUpdate)
      this.props.onUpdate.call(this, this, prevProps);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.props.onUnmount)
      this.props.onUnmount.call(this, this);
  };
  _proto.render = function render() {
    return null;
  };
  return Lifecycle2;
}(react.Component);
{
  var messageType = propTypes.oneOfType([propTypes.func, propTypes.string]);
  ({
    when: propTypes.bool,
    message: messageType.isRequired
  });
}
var cache = {};
var cacheLimit = 1e4;
var cacheCount = 0;
function compilePath(path) {
  if (cache[path])
    return cache[path];
  var generator = pathToRegexp_1.compile(path);
  if (cacheCount < cacheLimit) {
    cache[path] = generator;
    cacheCount++;
  }
  return generator;
}
function generatePath(path, params) {
  if (path === void 0) {
    path = "/";
  }
  if (params === void 0) {
    params = {};
  }
  return path === "/" ? path : compilePath(path)(params, {
    pretty: true
  });
}
function Redirect(_ref) {
  var computedMatch = _ref.computedMatch, to = _ref.to, _ref$push = _ref.push, push = _ref$push === void 0 ? false : _ref$push;
  return react.createElement(context.Consumer, null, function(context2) {
    !context2 ? invariant$1(false, "You should not use <Redirect> outside a <Router>") : void 0;
    var history = context2.history, staticContext = context2.staticContext;
    var method = push ? history.push : history.replace;
    var location = createLocation(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : _extends$2({}, to, {
      pathname: generatePath(to.pathname, computedMatch.params)
    }) : to);
    if (staticContext) {
      method(location);
      return null;
    }
    return react.createElement(Lifecycle, {
      onMount: function onMount() {
        method(location);
      },
      onUpdate: function onUpdate(self2, prevProps) {
        var prevLocation = createLocation(prevProps.to);
        if (!locationsAreEqual(prevLocation, _extends$2({}, location, {
          key: prevLocation.key
        }))) {
          method(location);
        }
      },
      to
    });
  });
}
{
  Redirect.propTypes = {
    push: propTypes.bool,
    from: propTypes.string,
    to: propTypes.oneOfType([propTypes.string, propTypes.object]).isRequired
  };
}
var cache$1 = {};
var cacheLimit$1 = 1e4;
var cacheCount$1 = 0;
function compilePath$1(path, options) {
  var cacheKey = "" + options.end + options.strict + options.sensitive;
  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
  if (pathCache[path])
    return pathCache[path];
  var keys2 = [];
  var regexp = pathToRegexp_1(path, keys2, options);
  var result = {
    regexp,
    keys: keys2
  };
  if (cacheCount$1 < cacheLimit$1) {
    pathCache[path] = result;
    cacheCount$1++;
  }
  return result;
}
function matchPath(pathname, options) {
  if (options === void 0) {
    options = {};
  }
  if (typeof options === "string" || Array.isArray(options)) {
    options = {
      path: options
    };
  }
  var _options = options, path = _options.path, _options$exact = _options.exact, exact = _options$exact === void 0 ? false : _options$exact, _options$strict = _options.strict, strict = _options$strict === void 0 ? false : _options$strict, _options$sensitive = _options.sensitive, sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
  var paths = [].concat(path);
  return paths.reduce(function(matched, path2) {
    if (!path2 && path2 !== "")
      return null;
    if (matched)
      return matched;
    var _compilePath = compilePath$1(path2, {
      end: exact,
      strict,
      sensitive
    }), regexp = _compilePath.regexp, keys2 = _compilePath.keys;
    var match = regexp.exec(pathname);
    if (!match)
      return null;
    var url = match[0], values = match.slice(1);
    var isExact = pathname === url;
    if (exact && !isExact)
      return null;
    return {
      path: path2,
      url: path2 === "/" && url === "" ? "/" : url,
      isExact,
      params: keys2.reduce(function(memo, key2, index2) {
        memo[key2.name] = values[index2];
        return memo;
      }, {})
    };
  }, null);
}
function isEmptyChildren(children) {
  return react.Children.count(children) === 0;
}
function evalChildrenDev(children, props, path) {
  var value = children(props);
  warning$1(value !== void 0, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? ' path="' + path + '"' : "") + ">, but you ") + "should have returned a React element or `null`");
  return value || null;
}
var Route = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(Route2, _React$Component);
  function Route2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = Route2.prototype;
  _proto.render = function render() {
    var _this = this;
    return react.createElement(context.Consumer, null, function(context$1) {
      !context$1 ? invariant$1(false, "You should not use <Route> outside a <Router>") : void 0;
      var location = _this.props.location || context$1.location;
      var match = _this.props.computedMatch ? _this.props.computedMatch : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;
      var props = _extends$2({}, context$1, {
        location,
        match
      });
      var _this$props = _this.props, children = _this$props.children, component2 = _this$props.component, render2 = _this$props.render;
      if (Array.isArray(children) && children.length === 0) {
        children = null;
      }
      return react.createElement(context.Provider, {
        value: props
      }, props.match ? children ? typeof children === "function" ? evalChildrenDev(children, props, _this.props.path) : children : component2 ? react.createElement(component2, props) : render2 ? render2(props) : null : typeof children === "function" ? evalChildrenDev(children, props, _this.props.path) : null);
    });
  };
  return Route2;
}(react.Component);
{
  Route.propTypes = {
    children: propTypes.oneOfType([propTypes.func, propTypes.node]),
    component: function component2(props, propName) {
      if (props[propName] && !reactIs.isValidElementType(props[propName])) {
        return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
      }
    },
    exact: propTypes.bool,
    location: propTypes.object,
    path: propTypes.oneOfType([propTypes.string, propTypes.arrayOf(propTypes.string)]),
    render: propTypes.func,
    sensitive: propTypes.bool,
    strict: propTypes.bool
  };
  Route.prototype.componentDidMount = function() {
    warning$1(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored");
    warning$1(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored");
    warning$1(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");
  };
  Route.prototype.componentDidUpdate = function(prevProps) {
    warning$1(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
    warning$1(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
  };
}
function addLeadingSlash(path) {
  return path.charAt(0) === "/" ? path : "/" + path;
}
function addBasename(basename, location) {
  if (!basename)
    return location;
  return _extends$2({}, location, {
    pathname: addLeadingSlash(basename) + location.pathname
  });
}
function stripBasename(basename, location) {
  if (!basename)
    return location;
  var base = addLeadingSlash(basename);
  if (location.pathname.indexOf(base) !== 0)
    return location;
  return _extends$2({}, location, {
    pathname: location.pathname.substr(base.length)
  });
}
function createURL(location) {
  return typeof location === "string" ? location : createPath(location);
}
function staticHandler(methodName) {
  return function() {
    invariant$1(false, "You cannot %s with <StaticRouter>");
  };
}
function noop() {
}
var StaticRouter = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(StaticRouter2, _React$Component);
  function StaticRouter2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.handlePush = function(location) {
      return _this.navigateTo(location, "PUSH");
    };
    _this.handleReplace = function(location) {
      return _this.navigateTo(location, "REPLACE");
    };
    _this.handleListen = function() {
      return noop;
    };
    _this.handleBlock = function() {
      return noop;
    };
    return _this;
  }
  var _proto = StaticRouter2.prototype;
  _proto.navigateTo = function navigateTo(location, action) {
    var _this$props = this.props, _this$props$basename = _this$props.basename, basename = _this$props$basename === void 0 ? "" : _this$props$basename, _this$props$context = _this$props.context, context2 = _this$props$context === void 0 ? {} : _this$props$context;
    context2.action = action;
    context2.location = addBasename(basename, createLocation(location));
    context2.url = createURL(context2.location);
  };
  _proto.render = function render() {
    var _this$props2 = this.props, _this$props2$basename = _this$props2.basename, basename = _this$props2$basename === void 0 ? "" : _this$props2$basename, _this$props2$context = _this$props2.context, context2 = _this$props2$context === void 0 ? {} : _this$props2$context, _this$props2$location = _this$props2.location, location = _this$props2$location === void 0 ? "/" : _this$props2$location, rest = _objectWithoutPropertiesLoose$3(_this$props2, ["basename", "context", "location"]);
    var history = {
      createHref: function createHref(path) {
        return addLeadingSlash(basename + createURL(path));
      },
      action: "POP",
      location: stripBasename(basename, createLocation(location)),
      push: this.handlePush,
      replace: this.handleReplace,
      go: staticHandler(),
      goBack: staticHandler(),
      goForward: staticHandler(),
      listen: this.handleListen,
      block: this.handleBlock
    };
    return react.createElement(Router, _extends$2({}, rest, {
      history,
      staticContext: context2
    }));
  };
  return StaticRouter2;
}(react.Component);
{
  StaticRouter.propTypes = {
    basename: propTypes.string,
    context: propTypes.object,
    location: propTypes.oneOfType([propTypes.string, propTypes.object])
  };
  StaticRouter.prototype.componentDidMount = function() {
    warning$1(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.");
  };
}
var Switch = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(Switch2, _React$Component);
  function Switch2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = Switch2.prototype;
  _proto.render = function render() {
    var _this = this;
    return react.createElement(context.Consumer, null, function(context2) {
      !context2 ? invariant$1(false, "You should not use <Switch> outside a <Router>") : void 0;
      var location = _this.props.location || context2.location;
      var element, match;
      react.Children.forEach(_this.props.children, function(child) {
        if (match == null && react.isValidElement(child)) {
          element = child;
          var path = child.props.path || child.props.from;
          match = path ? matchPath(location.pathname, _extends$2({}, child.props, {
            path
          })) : context2.match;
        }
      });
      return match ? react.cloneElement(element, {
        location,
        computedMatch: match
      }) : null;
    });
  };
  return Switch2;
}(react.Component);
{
  Switch.propTypes = {
    children: propTypes.node,
    location: propTypes.object
  };
  Switch.prototype.componentDidUpdate = function(prevProps) {
    warning$1(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
    warning$1(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
  };
}
react.useContext;
{
  if (typeof window !== "undefined") {
    var global$1 = window;
    var key = "__react_router_build__";
    var buildNames = {
      cjs: "CommonJS",
      esm: "ES modules",
      umd: "UMD"
    };
    if (global$1[key] && global$1[key] !== "esm") {
      var initialBuildName = buildNames[global$1[key]];
      var secondaryBuildName = buildNames["esm"];
      throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
    }
    global$1[key] = "esm";
  }
}
var BrowserRouter = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(BrowserRouter2, _React$Component);
  function BrowserRouter2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = createBrowserHistory(_this.props);
    return _this;
  }
  var _proto = BrowserRouter2.prototype;
  _proto.render = function render() {
    return react.createElement(Router, {
      history: this.history,
      children: this.props.children
    });
  };
  return BrowserRouter2;
}(react.Component);
{
  BrowserRouter.propTypes = {
    basename: propTypes.string,
    children: propTypes.node,
    forceRefresh: propTypes.bool,
    getUserConfirmation: propTypes.func,
    keyLength: propTypes.number
  };
  BrowserRouter.prototype.componentDidMount = function() {
    warning$1(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.");
  };
}
var HashRouter = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(HashRouter2, _React$Component);
  function HashRouter2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = createHashHistory(_this.props);
    return _this;
  }
  var _proto = HashRouter2.prototype;
  _proto.render = function render() {
    return react.createElement(Router, {
      history: this.history,
      children: this.props.children
    });
  };
  return HashRouter2;
}(react.Component);
{
  HashRouter.propTypes = {
    basename: propTypes.string,
    children: propTypes.node,
    getUserConfirmation: propTypes.func,
    hashType: propTypes.oneOf(["hashbang", "noslash", "slash"])
  };
  HashRouter.prototype.componentDidMount = function() {
    warning$1(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.");
  };
}
var resolveToLocation = function resolveToLocation2(to, currentLocation) {
  return typeof to === "function" ? to(currentLocation) : to;
};
var normalizeToLocation = function normalizeToLocation2(to, currentLocation) {
  return typeof to === "string" ? createLocation(to, null, null, currentLocation) : to;
};
var forwardRefShim = function forwardRefShim2(C) {
  return C;
};
var forwardRef = react.forwardRef;
if (typeof forwardRef === "undefined") {
  forwardRef = forwardRefShim;
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
var LinkAnchor = forwardRef(function(_ref, forwardedRef) {
  var innerRef = _ref.innerRef, navigate = _ref.navigate, _onClick = _ref.onClick, rest = _objectWithoutPropertiesLoose$3(_ref, ["innerRef", "navigate", "onClick"]);
  var target = rest.target;
  var props = _extends$2({}, rest, {
    onClick: function onClick(event) {
      try {
        if (_onClick)
          _onClick(event);
      } catch (ex) {
        event.preventDefault();
        throw ex;
      }
      if (!event.defaultPrevented && event.button === 0 && (!target || target === "_self") && !isModifiedEvent(event)) {
        event.preventDefault();
        navigate();
      }
    }
  });
  if (forwardRefShim !== forwardRef) {
    props.ref = forwardedRef || innerRef;
  } else {
    props.ref = innerRef;
  }
  return react.createElement("a", props);
});
{
  LinkAnchor.displayName = "LinkAnchor";
}
var Link = forwardRef(function(_ref2, forwardedRef) {
  var _ref2$component = _ref2.component, component2 = _ref2$component === void 0 ? LinkAnchor : _ref2$component, replace = _ref2.replace, to = _ref2.to, innerRef = _ref2.innerRef, rest = _objectWithoutPropertiesLoose$3(_ref2, ["component", "replace", "to", "innerRef"]);
  return react.createElement(context.Consumer, null, function(context2) {
    !context2 ? invariant$1(false, "You should not use <Link> outside a <Router>") : void 0;
    var history = context2.history;
    var location = normalizeToLocation(resolveToLocation(to, context2.location), context2.location);
    var href = location ? history.createHref(location) : "";
    var props = _extends$2({}, rest, {
      href,
      navigate: function navigate() {
        var location2 = resolveToLocation(to, context2.location);
        var method = replace ? history.replace : history.push;
        method(location2);
      }
    });
    if (forwardRefShim !== forwardRef) {
      props.ref = forwardedRef || innerRef;
    } else {
      props.innerRef = innerRef;
    }
    return react.createElement(component2, props);
  });
});
{
  var toType = propTypes.oneOfType([propTypes.string, propTypes.object, propTypes.func]);
  var refType = propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.shape({
    current: propTypes.any
  })]);
  Link.displayName = "Link";
  Link.propTypes = {
    innerRef: refType,
    onClick: propTypes.func,
    replace: propTypes.bool,
    target: propTypes.string,
    to: toType.isRequired
  };
}
var forwardRefShim$1 = function forwardRefShim3(C) {
  return C;
};
var forwardRef$1 = react.forwardRef;
if (typeof forwardRef$1 === "undefined") {
  forwardRef$1 = forwardRefShim$1;
}
function joinClassnames() {
  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {
    classnames[_key] = arguments[_key];
  }
  return classnames.filter(function(i2) {
    return i2;
  }).join(" ");
}
var NavLink = forwardRef$1(function(_ref, forwardedRef) {
  var _ref$ariaCurrent = _ref["aria-current"], ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent, _ref$activeClassName = _ref.activeClassName, activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName, activeStyle = _ref.activeStyle, classNameProp = _ref.className, exact = _ref.exact, isActiveProp = _ref.isActive, locationProp = _ref.location, sensitive = _ref.sensitive, strict = _ref.strict, styleProp = _ref.style, to = _ref.to, innerRef = _ref.innerRef, rest = _objectWithoutPropertiesLoose$3(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);
  return react.createElement(context.Consumer, null, function(context2) {
    !context2 ? invariant$1(false, "You should not use <NavLink> outside a <Router>") : void 0;
    var currentLocation = locationProp || context2.location;
    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
    var path = toLocation.pathname;
    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
    var match = escapedPath ? matchPath(currentLocation.pathname, {
      path: escapedPath,
      exact,
      sensitive,
      strict
    }) : null;
    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
    var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
    var style = isActive ? _extends$2({}, styleProp, {}, activeStyle) : styleProp;
    var props = _extends$2({
      "aria-current": isActive && ariaCurrent || null,
      className,
      style,
      to: toLocation
    }, rest);
    if (forwardRefShim$1 !== forwardRef$1) {
      props.ref = forwardedRef || innerRef;
    } else {
      props.innerRef = innerRef;
    }
    return react.createElement(Link, props);
  });
});
{
  NavLink.displayName = "NavLink";
  var ariaCurrentType = propTypes.oneOf(["page", "step", "location", "date", "time", "true"]);
  NavLink.propTypes = _extends$2({}, Link.propTypes, {
    "aria-current": ariaCurrentType,
    activeClassName: propTypes.string,
    activeStyle: propTypes.object,
    className: propTypes.string,
    exact: propTypes.bool,
    isActive: propTypes.func,
    location: propTypes.object,
    sensitive: propTypes.bool,
    strict: propTypes.bool,
    style: propTypes.object
  });
}
var bind = function bind2(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i2 = 0; i2 < args.length; i2++) {
      args[i2] = arguments[i2];
    }
    return fn.apply(thisArg, args);
  };
};
var toString$1 = Object.prototype.toString;
function isArray$1(val) {
  return toString$1.call(val) === "[object Array]";
}
function isUndefined$1(val) {
  return typeof val === "undefined";
}
function isBuffer(val) {
  return val !== null && !isUndefined$1(val) && val.constructor !== null && !isUndefined$1(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
}
function isArrayBuffer(val) {
  return toString$1.call(val) === "[object ArrayBuffer]";
}
function isFormData(val) {
  return typeof FormData !== "undefined" && val instanceof FormData;
}
function isArrayBufferView(val) {
  var result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
  }
  return result;
}
function isString(val) {
  return typeof val === "string";
}
function isNumber(val) {
  return typeof val === "number";
}
function isObject$1(val) {
  return val !== null && typeof val === "object";
}
function isPlainObject$1(val) {
  if (toString$1.call(val) !== "[object Object]") {
    return false;
  }
  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}
function isDate(val) {
  return toString$1.call(val) === "[object Date]";
}
function isFile(val) {
  return toString$1.call(val) === "[object File]";
}
function isBlob(val) {
  return toString$1.call(val) === "[object Blob]";
}
function isFunction$2(val) {
  return toString$1.call(val) === "[object Function]";
}
function isStream(val) {
  return isObject$1(val) && isFunction$2(val.pipe);
}
function isURLSearchParams(val) {
  return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
}
function trim(str) {
  return str.replace(/^\s*/, "").replace(/\s*$/, "");
}
function isStandardBrowserEnv() {
  if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
    return false;
  }
  return typeof window !== "undefined" && typeof document !== "undefined";
}
function forEach(obj, fn) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray$1(obj)) {
    for (var i2 = 0, l = obj.length; i2 < l; i2++) {
      fn.call(null, obj[i2], i2, obj);
    }
  } else {
    for (var key2 in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key2)) {
        fn.call(null, obj[key2], key2, obj);
      }
    }
  }
}
function merge$1() {
  var result = {};
  function assignValue(val, key2) {
    if (isPlainObject$1(result[key2]) && isPlainObject$1(val)) {
      result[key2] = merge$1(result[key2], val);
    } else if (isPlainObject$1(val)) {
      result[key2] = merge$1({}, val);
    } else if (isArray$1(val)) {
      result[key2] = val.slice();
    } else {
      result[key2] = val;
    }
  }
  for (var i2 = 0, l = arguments.length; i2 < l; i2++) {
    forEach(arguments[i2], assignValue);
  }
  return result;
}
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key2) {
    if (thisArg && typeof val === "function") {
      a[key2] = bind(val, thisArg);
    } else {
      a[key2] = val;
    }
  });
  return a;
}
function stripBOM(content) {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
}
var utils = {
  isArray: isArray$1,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isObject: isObject$1,
  isPlainObject: isPlainObject$1,
  isUndefined: isUndefined$1,
  isDate,
  isFile,
  isBlob,
  isFunction: isFunction$2,
  isStream,
  isURLSearchParams,
  isStandardBrowserEnv,
  forEach,
  merge: merge$1,
  extend,
  trim,
  stripBOM
};
function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
var buildURL = function buildURL2(url, params, paramsSerializer) {
  if (!params) {
    return url;
  }
  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils.forEach(params, function serialize(val, key2) {
      if (val === null || typeof val === "undefined") {
        return;
      }
      if (utils.isArray(val)) {
        key2 = key2 + "[]";
      } else {
        val = [val];
      }
      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key2) + "=" + encode(v));
      });
    });
    serializedParams = parts.join("&");
  }
  if (serializedParams) {
    var hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
};
function InterceptorManager() {
  this.handlers = [];
}
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled,
    rejected
  });
  return this.handlers.length - 1;
};
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};
InterceptorManager.prototype.forEach = function forEach2(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};
var InterceptorManager_1 = InterceptorManager;
var transformData = function transformData2(data, headers, fns) {
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });
  return data;
};
var isCancel = function isCancel2(value) {
  return !!(value && value.__CANCEL__);
};
var normalizeHeaderName = function normalizeHeaderName2(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};
var enhanceError = function enhanceError2(error, config, code, request3, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request3;
  error.response = response;
  error.isAxiosError = true;
  error.toJSON = function toJSON() {
    return {
      message: this.message,
      name: this.name,
      description: this.description,
      number: this.number,
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      config: this.config,
      code: this.code
    };
  };
  return error;
};
var createError = function createError2(message, config, code, request3, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request3, response);
};
var settle = function settle2(resolve, reject, response) {
  var validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
  }
};
var cookies = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + "=" + encodeURIComponent(value));
      if (utils.isNumber(expires)) {
        cookie.push("expires=" + new Date(expires).toGMTString());
      }
      if (utils.isString(path)) {
        cookie.push("path=" + path);
      }
      if (utils.isString(domain)) {
        cookie.push("domain=" + domain);
      }
      if (secure === true) {
        cookie.push("secure");
      }
      document.cookie = cookie.join("; ");
    },
    read: function read(name) {
      var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  };
}() : function nonStandardBrowserEnv() {
  return {
    write: function write() {
    },
    read: function read() {
      return null;
    },
    remove: function remove() {
    }
  };
}();
var isAbsoluteURL = function isAbsoluteURL2(url) {
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};
var combineURLs = function combineURLs2(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
};
var buildFullPath = function buildFullPath2(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};
var ignoreDuplicateOf = [
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
];
var parseHeaders = function parseHeaders2(headers) {
  var parsed = {};
  var key2;
  var val;
  var i2;
  if (!headers) {
    return parsed;
  }
  utils.forEach(headers.split("\n"), function parser(line) {
    i2 = line.indexOf(":");
    key2 = utils.trim(line.substr(0, i2)).toLowerCase();
    val = utils.trim(line.substr(i2 + 1));
    if (key2) {
      if (parsed[key2] && ignoreDuplicateOf.indexOf(key2) >= 0) {
        return;
      }
      if (key2 === "set-cookie") {
        parsed[key2] = (parsed[key2] ? parsed[key2] : []).concat([val]);
      } else {
        parsed[key2] = parsed[key2] ? parsed[key2] + ", " + val : val;
      }
    }
  });
  return parsed;
};
var isURLSameOrigin = utils.isStandardBrowserEnv() ? function standardBrowserEnv2() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement("a");
  var originURL;
  function resolveURL(url) {
    var href = url;
    if (msie) {
      urlParsingNode.setAttribute("href", href);
      href = urlParsingNode.href;
    }
    urlParsingNode.setAttribute("href", href);
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
    };
  }
  originURL = resolveURL(window.location.href);
  return function isURLSameOrigin2(requestURL) {
    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : function nonStandardBrowserEnv2() {
  return function isURLSameOrigin2() {
    return true;
  };
}();
var xhr = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    if (utils.isFormData(requestData)) {
      delete requestHeaders["Content-Type"];
    }
    var request3 = new XMLHttpRequest();
    if (config.auth) {
      var username = config.auth.username || "";
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
      requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
    }
    var fullPath = buildFullPath(config.baseURL, config.url);
    request3.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
    request3.timeout = config.timeout;
    request3.onreadystatechange = function handleLoad() {
      if (!request3 || request3.readyState !== 4) {
        return;
      }
      if (request3.status === 0 && !(request3.responseURL && request3.responseURL.indexOf("file:") === 0)) {
        return;
      }
      var responseHeaders = "getAllResponseHeaders" in request3 ? parseHeaders(request3.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === "text" ? request3.responseText : request3.response;
      var response = {
        data: responseData,
        status: request3.status,
        statusText: request3.statusText,
        headers: responseHeaders,
        config,
        request: request3
      };
      settle(resolve, reject, response);
      request3 = null;
    };
    request3.onabort = function handleAbort() {
      if (!request3) {
        return;
      }
      reject(createError("Request aborted", config, "ECONNABORTED", request3));
      request3 = null;
    };
    request3.onerror = function handleError() {
      reject(createError("Network Error", config, null, request3));
      request3 = null;
    };
    request3.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(timeoutErrorMessage, config, "ECONNABORTED", request3));
      request3 = null;
    };
    if (utils.isStandardBrowserEnv()) {
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }
    if ("setRequestHeader" in request3) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key2) {
        if (typeof requestData === "undefined" && key2.toLowerCase() === "content-type") {
          delete requestHeaders[key2];
        } else {
          request3.setRequestHeader(key2, val);
        }
      });
    }
    if (!utils.isUndefined(config.withCredentials)) {
      request3.withCredentials = !!config.withCredentials;
    }
    if (config.responseType) {
      try {
        request3.responseType = config.responseType;
      } catch (e) {
        if (config.responseType !== "json") {
          throw e;
        }
      }
    }
    if (typeof config.onDownloadProgress === "function") {
      request3.addEventListener("progress", config.onDownloadProgress);
    }
    if (typeof config.onUploadProgress === "function" && request3.upload) {
      request3.upload.addEventListener("progress", config.onUploadProgress);
    }
    if (config.cancelToken) {
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request3) {
          return;
        }
        request3.abort();
        reject(cancel);
        request3 = null;
      });
    }
    if (!requestData) {
      requestData = null;
    }
    request3.send(requestData);
  });
};
var DEFAULT_CONTENT_TYPE = {
  "Content-Type": "application/x-www-form-urlencoded"
};
function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
    headers["Content-Type"] = value;
  }
}
function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== "undefined") {
    adapter = xhr;
  } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
    adapter = xhr;
  }
  return adapter;
}
var defaults$1 = {
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, "Accept");
    normalizeHeaderName(headers, "Content-Type");
    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, "application/json;charset=utf-8");
      return JSON.stringify(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    if (typeof data === "string") {
      try {
        data = JSON.parse(data);
      } catch (e) {
      }
    }
    return data;
  }],
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};
defaults$1.headers = {
  common: {
    Accept: "application/json, text/plain, */*"
  }
};
utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
  defaults$1.headers[method] = {};
});
utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  defaults$1.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
var defaults_1 = defaults$1;
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}
var dispatchRequest = function dispatchRequest2(config) {
  throwIfCancellationRequested(config);
  config.headers = config.headers || {};
  config.data = transformData(config.data, config.headers, config.transformRequest);
  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
  utils.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });
  var adapter = config.adapter || defaults_1.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData(response.data, response.headers, config.transformResponse);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
      }
    }
    return Promise.reject(reason);
  });
};
var mergeConfig = function mergeConfig2(config1, config2) {
  config2 = config2 || {};
  var config = {};
  var valueFromConfig2Keys = ["url", "method", "data"];
  var mergeDeepPropertiesKeys = ["headers", "auth", "proxy", "params"];
  var defaultToConfig2Keys = [
    "baseURL",
    "transformRequest",
    "transformResponse",
    "paramsSerializer",
    "timeout",
    "timeoutMessage",
    "withCredentials",
    "adapter",
    "responseType",
    "xsrfCookieName",
    "xsrfHeaderName",
    "onUploadProgress",
    "onDownloadProgress",
    "decompress",
    "maxContentLength",
    "maxBodyLength",
    "maxRedirects",
    "transport",
    "httpAgent",
    "httpsAgent",
    "cancelToken",
    "socketPath",
    "responseEncoding"
  ];
  var directMergeKeys = ["validateStatus"];
  function getMergedValue(target, source2) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source2)) {
      return utils.merge(target, source2);
    } else if (utils.isPlainObject(source2)) {
      return utils.merge({}, source2);
    } else if (utils.isArray(source2)) {
      return source2.slice();
    }
    return source2;
  }
  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(void 0, config1[prop]);
    }
  }
  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(void 0, config2[prop]);
    }
  });
  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(void 0, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(void 0, config1[prop]);
    }
  });
  utils.forEach(directMergeKeys, function merge2(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(void 0, config1[prop]);
    }
  });
  var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
  var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key2) {
    return axiosKeys.indexOf(key2) === -1;
  });
  utils.forEach(otherKeys, mergeDeepProperties);
  return config;
};
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager_1(),
    response: new InterceptorManager_1()
  };
}
Axios.prototype.request = function request2(config) {
  if (typeof config === "string") {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }
  config = mergeConfig(this.defaults, config);
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = "get";
  }
  var chain = [dispatchRequest, void 0];
  var promise = Promise.resolve(config);
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });
  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }
  return promise;
};
Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
};
utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData2(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils.forEach(["post", "put", "patch"], function forEachMethodWithData2(method) {
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data
    }));
  };
});
var Axios_1 = Axios;
function Cancel(message) {
  this.message = message;
}
Cancel.prototype.toString = function toString2() {
  return "Cancel" + (this.message ? ": " + this.message : "");
};
Cancel.prototype.__CANCEL__ = true;
var Cancel_1 = Cancel;
function CancelToken(executor) {
  if (typeof executor !== "function") {
    throw new TypeError("executor must be a function.");
  }
  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });
  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      return;
    }
    token.reason = new Cancel_1(message);
    resolvePromise(token.reason);
  });
}
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token,
    cancel
  };
};
var CancelToken_1 = CancelToken;
var spread = function spread2(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};
var isAxiosError = function isAxiosError2(payload) {
  return typeof payload === "object" && payload.isAxiosError === true;
};
function createInstance(defaultConfig) {
  var context2 = new Axios_1(defaultConfig);
  var instance = bind(Axios_1.prototype.request, context2);
  utils.extend(instance, Axios_1.prototype, context2);
  utils.extend(instance, context2);
  return instance;
}
var axios$1 = createInstance(defaults_1);
axios$1.Axios = Axios_1;
axios$1.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios$1.defaults, instanceConfig));
};
axios$1.Cancel = Cancel_1;
axios$1.CancelToken = CancelToken_1;
axios$1.isCancel = isCancel;
axios$1.all = function all(promises) {
  return Promise.all(promises);
};
axios$1.spread = spread;
axios$1.isAxiosError = isAxiosError;
var axios_1 = axios$1;
var _default$1 = axios$1;
axios_1.default = _default$1;
var axios = axios_1;
class Login extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      error: true,
      email: "",
      psw: "",
      empty_email: false,
      empty_psw: false,
      email_error: false,
      credential_error: false,
      redirect: null
    };
    this.EmailChange = this.EmailChange.bind(this);
    this.PswChange = this.PswChange.bind(this);
    this.Submited = this.Submited.bind(this);
  }
  componentDidMount() {
    setTimeout(() => {
      if (this.state.email < 5) {
        this.setState({empty_email: true, error: true});
      } else {
        this.setState({empty_email: false});
        if (!this.state.credential_error && !this.state.empty_psw) {
          this.setState({error: false});
        }
      }
      if (this.state.psw < 5) {
        this.setState({empty_psw: true, error: true});
      } else {
        this.setState({empty_psw: false});
        if (!this.state.email_error && !this.state.empty_email) {
          this.setState({error: false});
        }
      }
    }, 200);
  }
  EmailChange(e) {
    e.preventDefault();
    this.setState({email: e.target.value});
    this.setState({email_error: false});
    if (e.target.value < 5) {
      this.setState({empty_email: true, error: true});
    } else {
      this.setState({empty_email: false});
      if (!this.state.credential_error && !this.state.empty_psw) {
        this.setState({error: false});
      }
    }
  }
  PswChange(e) {
    e.preventDefault();
    this.setState({psw: e.target.value});
    this.setState({credential_error: false});
    if (e.target.value < 5) {
      this.setState({empty_psw: true, error: true});
    } else {
      this.setState({empty_psw: false});
      if (!this.state.email_error && !this.state.empty_email) {
        this.setState({error: false});
      }
    }
  }
  async Submited(e) {
    e.preventDefault();
    if (!this.state.error) {
      var email = this.state.email;
      var psw = this.state.psw;
      var req = await axios({
        method: "post",
        url: "/data/login",
        data: {
          email,
          psw,
          "X-CSRF-TOKEN": csrf
        }
      });
      if (req.data.status === "Mot de passe invalide") {
        this.setState({credential_error: true, error: true});
      }
      if (req.data.status === "adresse mail non existante") {
        this.setState({email_error: true, error: true});
      }
      if (req.data.status === "ANA")
        ;
      if (req.data.status === "INFOS") {
        window.location.href = "/informations";
      }
      if (req.data.status === "OK") {
        window.location.href = "/";
      }
    }
  }
  render() {
    if (this.state.redirect) {
      return /* @__PURE__ */ react.createElement(Redirect, {
        to: this.state.redirect
      });
    }
    return /* @__PURE__ */ react.createElement("div", {
      className: "Login"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "Form"
    }, /* @__PURE__ */ react.createElement("form", {
      method: "POST",
      onSubmit: this.Submited
    }, /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/assets/images/LONG_EMS_BC_2.png"
    }), /* @__PURE__ */ react.createElement("h1", null, "Connexion"), /* @__PURE__ */ react.createElement("label", null, "adresse mail : "), /* @__PURE__ */ react.createElement("input", {
      value: this.state.email,
      type: "email",
      name: "email",
      onChange: this.EmailChange
    }), this.state.email_empty && /* @__PURE__ */ react.createElement("div", {
      className: "form-error"
    }, /* @__PURE__ */ react.createElement("p", null, "Case vide (min 5 caract\xE8res)")), this.state.email_error && /* @__PURE__ */ react.createElement("div", {
      className: "form-error"
    }, /* @__PURE__ */ react.createElement("p", null, "cette email n'existe pas")), /* @__PURE__ */ react.createElement("label", null, "Mot de passe : "), /* @__PURE__ */ react.createElement("input", {
      value: this.state.psw,
      type: "password",
      name: "psw",
      onChange: this.PswChange
    }), this.state.empty_psw && /* @__PURE__ */ react.createElement("div", {
      className: "form-error"
    }, /* @__PURE__ */ react.createElement("p", null, "Case vide (min 5 caract\xE8res)")), this.state.credential_error && /* @__PURE__ */ react.createElement("div", {
      className: "form-error"
    }, /* @__PURE__ */ react.createElement("p", null, "mot de passe incorect")), /* @__PURE__ */ react.createElement("div", {
      className: "btn-contain"
    }, /* @__PURE__ */ react.createElement(NavLink, {
      className: "btn",
      to: "/register"
    }, "j'ai pas de compte"), /* @__PURE__ */ react.createElement("button", {
      type: "submit",
      className: "btn"
    }, "Se connecter")))));
  }
}
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var scheduler_development = createCommonjsModule(function(module, exports) {
  {
    (function() {
      var enableSchedulerDebugging = false;
      var enableProfiling = false;
      var requestHostCallback;
      var requestHostTimeout;
      var cancelHostTimeout;
      var requestPaint;
      var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
      if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      if (typeof window === "undefined" || typeof MessageChannel !== "function") {
        var _callback = null;
        var _timeoutID = null;
        var _flushCallback = function() {
          if (_callback !== null) {
            try {
              var currentTime = exports.unstable_now();
              var hasRemainingTime = true;
              _callback(hasRemainingTime, currentTime);
              _callback = null;
            } catch (e) {
              setTimeout(_flushCallback, 0);
              throw e;
            }
          }
        };
        requestHostCallback = function(cb) {
          if (_callback !== null) {
            setTimeout(requestHostCallback, 0, cb);
          } else {
            _callback = cb;
            setTimeout(_flushCallback, 0);
          }
        };
        requestHostTimeout = function(cb, ms) {
          _timeoutID = setTimeout(cb, ms);
        };
        cancelHostTimeout = function() {
          clearTimeout(_timeoutID);
        };
        exports.unstable_shouldYield = function() {
          return false;
        };
        requestPaint = exports.unstable_forceFrameRate = function() {
        };
      } else {
        var _setTimeout = window.setTimeout;
        var _clearTimeout = window.clearTimeout;
        if (typeof console !== "undefined") {
          var requestAnimationFrame = window.requestAnimationFrame;
          var cancelAnimationFrame = window.cancelAnimationFrame;
          if (typeof requestAnimationFrame !== "function") {
            console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
          if (typeof cancelAnimationFrame !== "function") {
            console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var yieldInterval = 5;
        var deadline = 0;
        {
          exports.unstable_shouldYield = function() {
            return exports.unstable_now() >= deadline;
          };
          requestPaint = function() {
          };
        }
        exports.unstable_forceFrameRate = function(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            yieldInterval = Math.floor(1e3 / fps);
          } else {
            yieldInterval = 5;
          }
        };
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            deadline = currentTime + yieldInterval;
            var hasTimeRemaining = true;
            try {
              var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              if (!hasMoreWork) {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              } else {
                port.postMessage(null);
              }
            } catch (error) {
              port.postMessage(null);
              throw error;
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        requestHostCallback = function(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            port.postMessage(null);
          }
        };
        requestHostTimeout = function(callback, ms) {
          taskTimeoutID = _setTimeout(function() {
            callback(exports.unstable_now());
          }, ms);
        };
        cancelHostTimeout = function() {
          _clearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        };
      }
      function push(heap, node) {
        var index2 = heap.length;
        heap.push(node);
        siftUp(heap, node, index2);
      }
      function peek(heap) {
        var first = heap[0];
        return first === void 0 ? null : first;
      }
      function pop(heap) {
        var first = heap[0];
        if (first !== void 0) {
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        } else {
          return null;
        }
      }
      function siftUp(heap, node, i2) {
        var index2 = i2;
        while (true) {
          var parentIndex = index2 - 1 >>> 1;
          var parent = heap[parentIndex];
          if (parent !== void 0 && compare(parent, node) > 0) {
            heap[parentIndex] = node;
            heap[index2] = parent;
            index2 = parentIndex;
          } else {
            return;
          }
        }
      }
      function siftDown(heap, node, i2) {
        var index2 = i2;
        var length = heap.length;
        while (index2 < length) {
          var leftIndex = (index2 + 1) * 2 - 1;
          var left = heap[leftIndex];
          var rightIndex = leftIndex + 1;
          var right = heap[rightIndex];
          if (left !== void 0 && compare(left, node) < 0) {
            if (right !== void 0 && compare(right, left) < 0) {
              heap[index2] = right;
              heap[rightIndex] = node;
              index2 = rightIndex;
            } else {
              heap[index2] = left;
              heap[leftIndex] = node;
              index2 = leftIndex;
            }
          } else if (right !== void 0 && compare(right, node) < 0) {
            heap[index2] = right;
            heap[rightIndex] = node;
            index2 = rightIndex;
          } else {
            return;
          }
        }
      }
      function compare(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
      }
      var ImmediatePriority = 1;
      var UserBlockingPriority = 2;
      var NormalPriority = 3;
      var LowPriority = 4;
      var IdlePriority = 5;
      function markTaskErrored(task, ms) {
      }
      var maxSigned31BitInt = 1073741823;
      var IMMEDIATE_PRIORITY_TIMEOUT = -1;
      var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
      var NORMAL_PRIORITY_TIMEOUT = 5e3;
      var LOW_PRIORITY_TIMEOUT = 1e4;
      var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
      var taskQueue = [];
      var timerQueue = [];
      var taskIdCounter = 1;
      var currentTask = null;
      var currentPriorityLevel = NormalPriority;
      var isPerformingWork = false;
      var isHostCallbackScheduled = false;
      var isHostTimeoutScheduled = false;
      function advanceTimers(currentTime) {
        var timer = peek(timerQueue);
        while (timer !== null) {
          if (timer.callback === null) {
            pop(timerQueue);
          } else if (timer.startTime <= currentTime) {
            pop(timerQueue);
            timer.sortIndex = timer.expirationTime;
            push(taskQueue, timer);
          } else {
            return;
          }
          timer = peek(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
          if (peek(taskQueue) !== null) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
          }
        }
      }
      function flushWork(hasTimeRemaining, initialTime2) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
          isHostTimeoutScheduled = false;
          cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          var currentTime;
          if (enableProfiling)
            ;
          else {
            return workLoop(hasTimeRemaining, initialTime2);
          }
        } finally {
          currentTask = null;
          currentPriorityLevel = previousPriorityLevel;
          isPerformingWork = false;
        }
      }
      function workLoop(hasTimeRemaining, initialTime2) {
        var currentTime = initialTime2;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while (currentTask !== null && !enableSchedulerDebugging) {
          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
            break;
          }
          var callback = currentTask.callback;
          if (typeof callback === "function") {
            currentTask.callback = null;
            currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
            var continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports.unstable_now();
            if (typeof continuationCallback === "function") {
              currentTask.callback = continuationCallback;
            } else {
              if (currentTask === peek(taskQueue)) {
                pop(taskQueue);
              }
            }
            advanceTimers(currentTime);
          } else {
            pop(taskQueue);
          }
          currentTask = peek(taskQueue);
        }
        if (currentTask !== null) {
          return true;
        } else {
          var firstTimer = peek(timerQueue);
          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
          return false;
        }
      }
      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === "object" && options !== null) {
          var delay = options.delay;
          if (typeof delay === "number" && delay > 0) {
            startTime = currentTime + delay;
          } else {
            startTime = currentTime;
          }
        } else {
          startTime = currentTime;
        }
        var timeout;
        switch (priorityLevel) {
          case ImmediatePriority:
            timeout = IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
            break;
          case IdlePriority:
            timeout = IDLE_PRIORITY_TIMEOUT;
            break;
          case LowPriority:
            timeout = LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            timeout = NORMAL_PRIORITY_TIMEOUT;
            break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime,
          expirationTime,
          sortIndex: -1
        };
        if (startTime > currentTime) {
          newTask.sortIndex = startTime;
          push(timerQueue, newTask);
          if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
            if (isHostTimeoutScheduled) {
              cancelHostTimeout();
            } else {
              isHostTimeoutScheduled = true;
            }
            requestHostTimeout(handleTimeout, startTime - currentTime);
          }
        } else {
          newTask.sortIndex = expirationTime;
          push(taskQueue, newTask);
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        return newTask;
      }
      function unstable_pauseExecution() {
      }
      function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        }
      }
      function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
      }
      function unstable_cancelCallback(task) {
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      var unstable_requestPaint = requestPaint;
      var unstable_Profiling = null;
      exports.unstable_IdlePriority = IdlePriority;
      exports.unstable_ImmediatePriority = ImmediatePriority;
      exports.unstable_LowPriority = LowPriority;
      exports.unstable_NormalPriority = NormalPriority;
      exports.unstable_Profiling = unstable_Profiling;
      exports.unstable_UserBlockingPriority = UserBlockingPriority;
      exports.unstable_cancelCallback = unstable_cancelCallback;
      exports.unstable_continueExecution = unstable_continueExecution;
      exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
      exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
      exports.unstable_next = unstable_next;
      exports.unstable_pauseExecution = unstable_pauseExecution;
      exports.unstable_requestPaint = unstable_requestPaint;
      exports.unstable_runWithPriority = unstable_runWithPriority;
      exports.unstable_scheduleCallback = unstable_scheduleCallback;
      exports.unstable_wrapCallback = unstable_wrapCallback;
    })();
  }
});
var scheduler = createCommonjsModule(function(module) {
  {
    module.exports = scheduler_development;
  }
});
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var schedulerTracing_development = createCommonjsModule(function(module, exports) {
  {
    (function() {
      var DEFAULT_THREAD_ID = 0;
      var interactionIDCounter = 0;
      var threadIDCounter = 0;
      exports.__interactionsRef = null;
      exports.__subscriberRef = null;
      {
        exports.__interactionsRef = {
          current: new Set()
        };
        exports.__subscriberRef = {
          current: null
        };
      }
      function unstable_clear(callback) {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = new Set();
        try {
          return callback();
        } finally {
          exports.__interactionsRef.current = prevInteractions;
        }
      }
      function unstable_getCurrent() {
        {
          return exports.__interactionsRef.current;
        }
      }
      function unstable_getThreadID() {
        return ++threadIDCounter;
      }
      function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
        var interaction = {
          __count: 1,
          id: interactionIDCounter++,
          name,
          timestamp
        };
        var prevInteractions = exports.__interactionsRef.current;
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports.__interactionsRef.current = interactions;
        var subscriber = exports.__subscriberRef.current;
        var returnValue;
        try {
          if (subscriber !== null) {
            subscriber.onInteractionTraced(interaction);
          }
        } finally {
          try {
            if (subscriber !== null) {
              subscriber.onWorkStarted(interactions, threadID);
            }
          } finally {
            try {
              returnValue = callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStopped(interactions, threadID);
                }
              } finally {
                interaction.__count--;
                if (subscriber !== null && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              }
            }
          }
        }
        return returnValue;
      }
      function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
        var wrappedInteractions = exports.__interactionsRef.current;
        var subscriber = exports.__subscriberRef.current;
        if (subscriber !== null) {
          subscriber.onWorkScheduled(wrappedInteractions, threadID);
        }
        wrappedInteractions.forEach(function(interaction) {
          interaction.__count++;
        });
        var hasRun = false;
        function wrapped() {
          var prevInteractions = exports.__interactionsRef.current;
          exports.__interactionsRef.current = wrappedInteractions;
          subscriber = exports.__subscriberRef.current;
          try {
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(wrappedInteractions, threadID);
              }
            } finally {
              try {
                returnValue = callback.apply(void 0, arguments);
              } finally {
                exports.__interactionsRef.current = prevInteractions;
                if (subscriber !== null) {
                  subscriber.onWorkStopped(wrappedInteractions, threadID);
                }
              }
            }
            return returnValue;
          } finally {
            if (!hasRun) {
              hasRun = true;
              wrappedInteractions.forEach(function(interaction) {
                interaction.__count--;
                if (subscriber !== null && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          }
        }
        wrapped.cancel = function cancel() {
          subscriber = exports.__subscriberRef.current;
          try {
            if (subscriber !== null) {
              subscriber.onWorkCanceled(wrappedInteractions, threadID);
            }
          } finally {
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count--;
              if (subscriber && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            });
          }
        };
        return wrapped;
      }
      var subscribers = null;
      {
        subscribers = new Set();
      }
      function unstable_subscribe(subscriber) {
        {
          subscribers.add(subscriber);
          if (subscribers.size === 1) {
            exports.__subscriberRef.current = {
              onInteractionScheduledWorkCompleted,
              onInteractionTraced,
              onWorkCanceled,
              onWorkScheduled,
              onWorkStarted,
              onWorkStopped
            };
          }
        }
      }
      function unstable_unsubscribe(subscriber) {
        {
          subscribers.delete(subscriber);
          if (subscribers.size === 0) {
            exports.__subscriberRef.current = null;
          }
        }
      }
      function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onInteractionTraced(interaction);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onWorkScheduled(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onWorkStarted(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onWorkStopped(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
          try {
            subscriber.onWorkCanceled(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });
        if (didCatchError) {
          throw caughtError;
        }
      }
      exports.unstable_clear = unstable_clear;
      exports.unstable_getCurrent = unstable_getCurrent;
      exports.unstable_getThreadID = unstable_getThreadID;
      exports.unstable_subscribe = unstable_subscribe;
      exports.unstable_trace = unstable_trace;
      exports.unstable_unsubscribe = unstable_unsubscribe;
      exports.unstable_wrap = unstable_wrap;
    })();
  }
});
var tracing = createCommonjsModule(function(module) {
  {
    module.exports = schedulerTracing_development;
  }
});
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var reactDom_development = createCommonjsModule(function(module, exports) {
  {
    (function() {
      var React = react;
      var _assign = objectAssign;
      var Scheduler = scheduler;
      var tracing$1 = tracing;
      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          printWarning2("warn", format, args);
        }
      }
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning2("error", format, args);
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return "" + item;
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      if (!React) {
        {
          throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
        }
      }
      var FunctionComponent = 0;
      var ClassComponent = 1;
      var IndeterminateComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var Fragment = 7;
      var Mode = 8;
      var ContextConsumer = 9;
      var ContextProvider = 10;
      var ForwardRef = 11;
      var Profiler = 12;
      var SuspenseComponent = 13;
      var MemoComponent = 14;
      var SimpleMemoComponent = 15;
      var LazyComponent = 16;
      var IncompleteClassComponent = 17;
      var DehydratedFragment = 18;
      var SuspenseListComponent = 19;
      var FundamentalComponent = 20;
      var ScopeComponent = 21;
      var Block = 22;
      var OffscreenComponent = 23;
      var LegacyHiddenComponent = 24;
      var enableProfilerTimer = true;
      var enableFundamentalAPI = false;
      var enableNewReconciler = false;
      var warnAboutStringRefs = false;
      var allNativeEvents = new Set();
      var registrationNameDependencies = {};
      var possibleRegistrationNames = {};
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        {
          if (registrationNameDependencies[registrationName]) {
            error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
          }
        }
        registrationNameDependencies[registrationName] = dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName;
          if (registrationName === "onDoubleClick") {
            possibleRegistrationNames.ondblclick = registrationName;
          }
        }
        for (var i2 = 0; i2 < dependencies.length; i2++) {
          allNativeEvents.add(dependencies[i2]);
        }
      }
      var canUseDOM2 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
      var RESERVED = 0;
      var STRING = 1;
      var BOOLEANISH_STRING = 2;
      var BOOLEAN = 3;
      var OVERLOADED_BOOLEAN = 4;
      var NUMERIC = 5;
      var POSITIVE_NUMERIC = 6;
      var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
      var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
      var ROOT_ATTRIBUTE_NAME = "data-reactroot";
      var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var illegalAttributeNameCache = {};
      var validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
          return true;
        }
        if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
          return false;
        }
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
          validatedAttributeNameCache[attributeName] = true;
          return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        {
          error("Invalid attribute name: `%s`", attributeName);
        }
        return false;
      }
      function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) {
          return propertyInfo.type === RESERVED;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
          return true;
        }
        return false;
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) {
          return false;
        }
        switch (typeof value) {
          case "function":
          case "symbol":
            return true;
          case "boolean": {
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix3 = name.toLowerCase().slice(0, 5);
              return prefix3 !== "data-" && prefix3 !== "aria-";
            }
          }
          default:
            return false;
        }
      }
      function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === "undefined") {
          return true;
        }
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
          return true;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (propertyInfo !== null) {
          switch (propertyInfo.type) {
            case BOOLEAN:
              return !value;
            case OVERLOADED_BOOLEAN:
              return value === false;
            case NUMERIC:
              return isNaN(value);
            case POSITIVE_NUMERIC:
              return isNaN(value) || value < 1;
          }
        }
        return false;
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL2;
        this.removeEmptyString = removeEmptyString;
      }
      var properties = {};
      var reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
      });
      [
        "allowFullScreen",
        "async",
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
      });
      [
        "checked",
        "multiple",
        "muted",
        "selected"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
      });
      [
        "capture",
        "download"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
      });
      [
        "cols",
        "rows",
        "size",
        "span"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
      });
      var CAMELIZE = /[\-\:]([a-z])/g;
      var capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
      });
      [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
      });
      [
        "xml:base",
        "xml:lang",
        "xml:space"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
      });
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
      var didWarn = false;
      function sanitizeURL(url) {
        {
          if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
          }
        }
      }
      function getValueForProperty(node, name, expected, propertyInfo) {
        {
          if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
          } else {
            if (propertyInfo.sanitizeURL) {
              sanitizeURL("" + expected);
            }
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
              if (node.hasAttribute(attributeName)) {
                var value = node.getAttribute(attributeName);
                if (value === "") {
                  return true;
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return value;
                }
                if (value === "" + expected) {
                  return expected;
                }
                return value;
              }
            } else if (node.hasAttribute(attributeName)) {
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return node.getAttribute(attributeName);
              }
              if (propertyInfo.type === BOOLEAN) {
                return expected;
              }
              stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return stringValue === null ? expected : stringValue;
            } else if (stringValue === "" + expected) {
              return expected;
            } else {
              return stringValue;
            }
          }
        }
      }
      function getValueForAttribute(node, name, expected) {
        {
          if (!isAttributeNameSafe(name)) {
            return;
          }
          if (isOpaqueHydratingObject(expected)) {
            return expected;
          }
          if (!node.hasAttribute(name)) {
            return expected === void 0 ? void 0 : null;
          }
          var value = node.getAttribute(name);
          if (value === "" + expected) {
            return expected;
          }
          return value;
        }
      }
      function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
          return;
        }
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
          value = null;
        }
        if (isCustomComponentTag || propertyInfo === null) {
          if (isAttributeNameSafe(name)) {
            var _attributeName = name;
            if (value === null) {
              node.removeAttribute(_attributeName);
            } else {
              node.setAttribute(_attributeName, "" + value);
            }
          }
          return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          if (value === null) {
            var type = propertyInfo.type;
            node[propertyName] = type === BOOLEAN ? false : "";
          } else {
            node[propertyName] = value;
          }
          return;
        }
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) {
          node.removeAttribute(attributeName);
        } else {
          var _type = propertyInfo.type;
          var attributeValue;
          if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
            attributeValue = "";
          } else {
            {
              attributeValue = "" + value;
            }
            if (propertyInfo.sanitizeURL) {
              sanitizeURL(attributeValue.toString());
            }
          }
          if (attributeNamespace) {
            node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
          } else {
            node.setAttribute(attributeName, attributeValue);
          }
        }
      }
      var REACT_ELEMENT_TYPE = 60103;
      var REACT_PORTAL_TYPE = 60106;
      var REACT_FRAGMENT_TYPE = 60107;
      var REACT_STRICT_MODE_TYPE = 60108;
      var REACT_PROFILER_TYPE = 60114;
      var REACT_PROVIDER_TYPE = 60109;
      var REACT_CONTEXT_TYPE = 60110;
      var REACT_FORWARD_REF_TYPE = 60112;
      var REACT_SUSPENSE_TYPE = 60113;
      var REACT_SUSPENSE_LIST_TYPE = 60120;
      var REACT_MEMO_TYPE = 60115;
      var REACT_LAZY_TYPE = 60116;
      var REACT_BLOCK_TYPE = 60121;
      var REACT_SCOPE_TYPE = 60119;
      var REACT_OPAQUE_ID_TYPE = 60128;
      var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
      var REACT_OFFSCREEN_TYPE = 60130;
      var REACT_LEGACY_HIDDEN_TYPE = 60131;
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor("react.element");
        REACT_PORTAL_TYPE = symbolFor("react.portal");
        REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
        REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
        REACT_PROFILER_TYPE = symbolFor("react.profiler");
        REACT_PROVIDER_TYPE = symbolFor("react.provider");
        REACT_CONTEXT_TYPE = symbolFor("react.context");
        REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
        REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
        REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
        REACT_MEMO_TYPE = symbolFor("react.memo");
        REACT_LAZY_TYPE = symbolFor("react.lazy");
        REACT_BLOCK_TYPE = symbolFor("react.block");
        symbolFor("react.server.block");
        symbolFor("react.fundamental");
        REACT_SCOPE_TYPE = symbolFor("react.scope");
        REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
        REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
        REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
      }
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: _assign({}, props, {
                value: prevLog
              }),
              info: _assign({}, props, {
                value: prevInfo
              }),
              warn: _assign({}, props, {
                value: prevWarn
              }),
              error: _assign({}, props, {
                value: prevError
              }),
              group: _assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: _assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: _assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix2;
      function describeBuiltInComponentFrame(name, source2, ownerFn) {
        {
          if (prefix2 === void 0) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match && match[1] || "";
            }
          }
          return "\n" + prefix2 + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source2, ownerFn) {
        {
          return describeNativeComponentFrame(ctor, true);
        }
      }
      function describeFunctionComponentFrame(fn, source2, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source2, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source2, ownerFn);
            case REACT_BLOCK_TYPE:
              return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source2, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      function describeFiber(fiber) {
        fiber._debugOwner ? fiber._debugOwner.type : null;
        fiber._debugSource;
        switch (fiber.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type);
          case LazyComponent:
            return describeBuiltInComponentFrame("Lazy");
          case SuspenseComponent:
            return describeBuiltInComponentFrame("Suspense");
          case SuspenseListComponent:
            return describeBuiltInComponentFrame("SuspenseList");
          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type);
          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render);
          case Block:
            return describeFunctionComponentFrame(fiber.type._render);
          case ClassComponent:
            return describeClassComponentFrame(fiber.type);
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info = "";
          var node = workInProgress2;
          do {
            info += describeFiber(node);
            node = node.return;
          } while (node);
          return info;
        } catch (x) {
          return "\nError generating stack: " + x.message + "\n" + x.stack;
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentName(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context2 = type;
              return getContextName(context2) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
              return getComponentName(type._render);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentName(init(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var current = null;
      var isRendering = false;
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null;
          }
          var owner = current._debugOwner;
          if (owner !== null && typeof owner !== "undefined") {
            return getComponentName(owner.type);
          }
        }
        return null;
      }
      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return "";
          }
          return getStackByFiberInDevAndProd(current);
        }
      }
      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          current = null;
          isRendering = false;
        }
      }
      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
          current = fiber;
          isRendering = false;
        }
      }
      function setIsRendering(rendering) {
        {
          isRendering = rendering;
        }
      }
      function getIsRendering() {
        {
          return isRendering;
        }
      }
      function toString3(value) {
        return "" + value;
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "boolean":
          case "number":
          case "object":
          case "string":
          case "undefined":
            return value;
          default:
            return "";
        }
      }
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      function checkControlledValueProps(tagName, props) {
        {
          if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
            error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
          }
          if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
            error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
          }
        }
      }
      function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
      }
      function getTracker(node) {
        return node._valueTracker;
      }
      function detachTracker(node) {
        node._valueTracker = null;
      }
      function getValueFromNode(node) {
        var value = "";
        if (!node) {
          return value;
        }
        if (isCheckable(node)) {
          value = node.checked ? "true" : "false";
        } else {
          value = node.value;
        }
        return value;
      }
      function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value";
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        var currentValue = "" + node[valueField];
        if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
          return;
        }
        var get3 = descriptor.get, set2 = descriptor.set;
        Object.defineProperty(node, valueField, {
          configurable: true,
          get: function() {
            return get3.call(this);
          },
          set: function(value) {
            currentValue = "" + value;
            set2.call(this, value);
          }
        });
        Object.defineProperty(node, valueField, {
          enumerable: descriptor.enumerable
        });
        var tracker = {
          getValue: function() {
            return currentValue;
          },
          setValue: function(value) {
            currentValue = "" + value;
          },
          stopTracking: function() {
            detachTracker(node);
            delete node[valueField];
          }
        };
        return tracker;
      }
      function track(node) {
        if (getTracker(node)) {
          return;
        }
        node._valueTracker = trackValueOnNode(node);
      }
      function updateValueIfChanged(node) {
        if (!node) {
          return false;
        }
        var tracker = getTracker(node);
        if (!tracker) {
          return true;
        }
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
          tracker.setValue(nextValue);
          return true;
        }
        return false;
      }
      function getActiveElement(doc) {
        doc = doc || (typeof document !== "undefined" ? document : void 0);
        if (typeof doc === "undefined") {
          return null;
        }
        try {
          return doc.activeElement || doc.body;
        } catch (e) {
          return doc.body;
        }
      }
      var didWarnValueDefaultValue = false;
      var didWarnCheckedDefaultChecked = false;
      var didWarnControlledToUncontrolled = false;
      var didWarnUncontrolledToControlled = false;
      function isControlled(props) {
        var usesChecked = props.type === "checkbox" || props.type === "radio";
        return usesChecked ? props.checked != null : props.value != null;
      }
      function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = _assign({}, props, {
          defaultChecked: void 0,
          defaultValue: void 0,
          value: void 0,
          checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
      }
      function initWrapperState(element, props) {
        {
          checkControlledValueProps("input", props);
          if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnCheckedDefaultChecked = true;
          }
          if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnValueDefaultValue = true;
          }
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
        node._wrapperState = {
          initialChecked: props.checked != null ? props.checked : props.defaultChecked,
          initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
          controlled: isControlled(props)
        };
      }
      function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) {
          setValueForProperty(node, "checked", checked, false);
        }
      }
      function updateWrapper(element, props) {
        var node = element;
        {
          var controlled = isControlled(props);
          if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
          }
          if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
          }
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
          if (type === "number") {
            if (value === 0 && node.value === "" || node.value != value) {
              node.value = toString3(value);
            }
          } else if (node.value !== toString3(value)) {
            node.value = toString3(value);
          }
        } else if (type === "submit" || type === "reset") {
          node.removeAttribute("value");
          return;
        }
        {
          if (props.hasOwnProperty("value")) {
            setDefaultValue(node, props.type, value);
          } else if (props.hasOwnProperty("defaultValue")) {
            setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
          }
        }
        {
          if (props.checked == null && props.defaultChecked != null) {
            node.defaultChecked = !!props.defaultChecked;
          }
        }
      }
      function postMountWrapper(element, props, isHydrating2) {
        var node = element;
        if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
          var type = props.type;
          var isButton = type === "submit" || type === "reset";
          if (isButton && (props.value === void 0 || props.value === null)) {
            return;
          }
          var initialValue = toString3(node._wrapperState.initialValue);
          if (!isHydrating2) {
            {
              if (initialValue !== node.value) {
                node.value = initialValue;
              }
            }
          }
          {
            node.defaultValue = initialValue;
          }
        }
        var name = node.name;
        if (name !== "") {
          node.name = "";
        }
        {
          node.defaultChecked = !node.defaultChecked;
          node.defaultChecked = !!node._wrapperState.initialChecked;
        }
        if (name !== "") {
          node.name = name;
        }
      }
      function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
      }
      function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === "radio" && name != null) {
          var queryRoot = rootNode;
          while (queryRoot.parentNode) {
            queryRoot = queryRoot.parentNode;
          }
          var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
          for (var i2 = 0; i2 < group.length; i2++) {
            var otherNode = group[i2];
            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
              continue;
            }
            var otherProps = getFiberCurrentPropsFromNode(otherNode);
            if (!otherProps) {
              {
                throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
            }
            updateValueIfChanged(otherNode);
            updateWrapper(otherNode, otherProps);
          }
        }
      }
      function setDefaultValue(node, type, value) {
        if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
          if (value == null) {
            node.defaultValue = toString3(node._wrapperState.initialValue);
          } else if (node.defaultValue !== toString3(value)) {
            node.defaultValue = toString3(value);
          }
        }
      }
      var didWarnSelectedSetOnOption = false;
      var didWarnInvalidChild = false;
      function flattenChildren(children) {
        var content = "";
        React.Children.forEach(children, function(child) {
          if (child == null) {
            return;
          }
          content += child;
        });
        return content;
      }
      function validateProps(element, props) {
        {
          if (typeof props.children === "object" && props.children !== null) {
            React.Children.forEach(props.children, function(child) {
              if (child == null) {
                return;
              }
              if (typeof child === "string" || typeof child === "number") {
                return;
              }
              if (typeof child.type !== "string") {
                return;
              }
              if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                error("Only strings and numbers are supported as <option> children.");
              }
            });
          }
          if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
          }
        }
      }
      function postMountWrapper$1(element, props) {
        if (props.value != null) {
          element.setAttribute("value", toString3(getToStringValue(props.value)));
        }
      }
      function getHostProps$1(element, props) {
        var hostProps = _assign({
          children: void 0
        }, props);
        var content = flattenChildren(props.children);
        if (content) {
          hostProps.children = content;
        }
        return hostProps;
      }
      var didWarnValueDefaultValue$1;
      {
        didWarnValueDefaultValue$1 = false;
      }
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) {
          return "\n\nCheck the render method of `" + ownerName + "`.";
        }
        return "";
      }
      var valuePropNames = ["value", "defaultValue"];
      function checkSelectPropTypes(props) {
        {
          checkControlledValueProps("select", props);
          for (var i2 = 0; i2 < valuePropNames.length; i2++) {
            var propName = valuePropNames[i2];
            if (props[propName] == null) {
              continue;
            }
            var isArray3 = Array.isArray(props[propName]);
            if (props.multiple && !isArray3) {
              error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            } else if (!props.multiple && isArray3) {
              error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
            }
          }
        }
      }
      function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options2 = node.options;
        if (multiple) {
          var selectedValues = propValue;
          var selectedValue = {};
          for (var i2 = 0; i2 < selectedValues.length; i2++) {
            selectedValue["$" + selectedValues[i2]] = true;
          }
          for (var _i = 0; _i < options2.length; _i++) {
            var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
            if (options2[_i].selected !== selected) {
              options2[_i].selected = selected;
            }
            if (selected && setDefaultSelected) {
              options2[_i].defaultSelected = true;
            }
          }
        } else {
          var _selectedValue = toString3(getToStringValue(propValue));
          var defaultSelected = null;
          for (var _i2 = 0; _i2 < options2.length; _i2++) {
            if (options2[_i2].value === _selectedValue) {
              options2[_i2].selected = true;
              if (setDefaultSelected) {
                options2[_i2].defaultSelected = true;
              }
              return;
            }
            if (defaultSelected === null && !options2[_i2].disabled) {
              defaultSelected = options2[_i2];
            }
          }
          if (defaultSelected !== null) {
            defaultSelected.selected = true;
          }
        }
      }
      function getHostProps$2(element, props) {
        return _assign({}, props, {
          value: void 0
        });
      }
      function initWrapperState$1(element, props) {
        var node = element;
        {
          checkSelectPropTypes(props);
        }
        node._wrapperState = {
          wasMultiple: !!props.multiple
        };
        {
          if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
          }
        }
      }
      function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        } else if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true);
        }
      }
      function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        } else if (wasMultiple !== !!props.multiple) {
          if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          } else {
            updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
          }
        }
      }
      function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        }
      }
      var didWarnValDefaultVal = false;
      function getHostProps$3(element, props) {
        var node = element;
        if (!(props.dangerouslySetInnerHTML == null)) {
          {
            throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
        }
        var hostProps = _assign({}, props, {
          value: void 0,
          defaultValue: void 0,
          children: toString3(node._wrapperState.initialValue)
        });
        return hostProps;
      }
      function initWrapperState$2(element, props) {
        var node = element;
        {
          checkControlledValueProps("textarea", props);
          if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
            didWarnValDefaultVal = true;
          }
        }
        var initialValue = props.value;
        if (initialValue == null) {
          var children = props.children, defaultValue = props.defaultValue;
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            {
              if (!(defaultValue == null)) {
                {
                  throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
              }
              if (Array.isArray(children)) {
                if (!(children.length <= 1)) {
                  {
                    throw Error("<textarea> can only have at most one child.");
                  }
                }
                children = children[0];
              }
              defaultValue = children;
            }
          }
          if (defaultValue == null) {
            defaultValue = "";
          }
          initialValue = defaultValue;
        }
        node._wrapperState = {
          initialValue: getToStringValue(initialValue)
        };
      }
      function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
          var newValue = toString3(value);
          if (newValue !== node.value) {
            node.value = newValue;
          }
          if (props.defaultValue == null && node.defaultValue !== newValue) {
            node.defaultValue = newValue;
          }
        }
        if (defaultValue != null) {
          node.defaultValue = toString3(defaultValue);
        }
      }
      function postMountWrapper$3(element, props) {
        var node = element;
        var textContent = node.textContent;
        if (textContent === node._wrapperState.initialValue) {
          if (textContent !== "" && textContent !== null) {
            node.value = textContent;
          }
        }
      }
      function restoreControlledState$2(element, props) {
        updateWrapper$1(element, props);
      }
      var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
      var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
      var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
      var Namespaces = {
        html: HTML_NAMESPACE,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE
      };
      function getIntrinsicNamespace(type) {
        switch (type) {
          case "svg":
            return SVG_NAMESPACE;
          case "math":
            return MATH_NAMESPACE;
          default:
            return HTML_NAMESPACE;
        }
      }
      function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
          return getIntrinsicNamespace(type);
        }
        if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
          return HTML_NAMESPACE;
        }
        return parentNamespace;
      }
      var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
          return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
              return func(arg0, arg1, arg2, arg3);
            });
          };
        } else {
          return func;
        }
      };
      var reusableSVGContainer;
      var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === Namespaces.svg) {
          if (!("innerHTML" in node)) {
            reusableSVGContainer = reusableSVGContainer || document.createElement("div");
            reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
            var svgNode = reusableSVGContainer.firstChild;
            while (node.firstChild) {
              node.removeChild(node.firstChild);
            }
            while (svgNode.firstChild) {
              node.appendChild(svgNode.firstChild);
            }
            return;
          }
        }
        node.innerHTML = html;
      });
      var ELEMENT_NODE = 1;
      var TEXT_NODE = 3;
      var COMMENT_NODE = 8;
      var DOCUMENT_NODE = 9;
      var DOCUMENT_FRAGMENT_NODE = 11;
      var setTextContent = function(node, text) {
        if (text) {
          var firstChild = node.firstChild;
          if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
            firstChild.nodeValue = text;
            return;
          }
        }
        node.textContent = text;
      };
      var shorthandToLonghand = {
        animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
        background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
        borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
        borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
        borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
        borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
        borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
        borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
        borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
        borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
        fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
        gap: ["columnGap", "rowGap"],
        grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
        wordWrap: ["overflowWrap"]
      };
      var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      function prefixKey(prefix3, key2) {
        return prefix3 + key2.charAt(0).toUpperCase() + key2.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix3) {
          isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
        });
      });
      function dangerousStyleValue(name, value, isCustomProperty) {
        var isEmpty2 = value == null || typeof value === "boolean" || value === "";
        if (isEmpty2) {
          return "";
        }
        if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
          return value + "px";
        }
        return ("" + value).trim();
      }
      var uppercasePattern = /([A-Z])/g;
      var msPattern = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        var camelize = function(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        };
        var warnHyphenatedStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
        };
        var warnBadVendoredStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
        };
        var warnStyleValueWithSemicolon = function(name, value) {
          if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
            return;
          }
          warnedStyleValues[value] = true;
          error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
        };
        var warnStyleValueIsNaN = function(name, value) {
          if (warnedForNaNValue) {
            return;
          }
          warnedForNaNValue = true;
          error("`NaN` is an invalid value for the `%s` css style property.", name);
        };
        var warnStyleValueIsInfinity = function(name, value) {
          if (warnedForInfinityValue) {
            return;
          }
          warnedForInfinityValue = true;
          error("`Infinity` is an invalid value for the `%s` css style property.", name);
        };
        warnValidStyle = function(name, value) {
          if (name.indexOf("-") > -1) {
            warnHyphenatedStyleName(name);
          } else if (badVendoredStyleNamePattern.test(name)) {
            warnBadVendoredStyleName(name);
          } else if (badStyleValueWithSemicolonPattern.test(value)) {
            warnStyleValueWithSemicolon(name, value);
          }
          if (typeof value === "number") {
            if (isNaN(value)) {
              warnStyleValueIsNaN(name, value);
            } else if (!isFinite(value)) {
              warnStyleValueIsInfinity(name, value);
            }
          }
        };
      }
      var warnValidStyle$1 = warnValidStyle;
      function createDangerousStringForStyles(styles) {
        {
          var serialized = "";
          var delimiter = "";
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var styleValue = styles[styleName];
            if (styleValue != null) {
              var isCustomProperty = styleName.indexOf("--") === 0;
              serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
              serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
              delimiter = ";";
            }
          }
          return serialized || null;
        }
      }
      function setValueForStyles(node, styles) {
        var style2 = node.style;
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          var isCustomProperty = styleName.indexOf("--") === 0;
          {
            if (!isCustomProperty) {
              warnValidStyle$1(styleName, styles[styleName]);
            }
          }
          var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
          if (styleName === "float") {
            styleName = "cssFloat";
          }
          if (isCustomProperty) {
            style2.setProperty(styleName, styleValue);
          } else {
            style2[styleName] = styleValue;
          }
        }
      }
      function isValueEmpty(value) {
        return value == null || typeof value === "boolean" || value === "";
      }
      function expandShorthandMap(styles) {
        var expanded = {};
        for (var key2 in styles) {
          var longhands = shorthandToLonghand[key2] || [key2];
          for (var i2 = 0; i2 < longhands.length; i2++) {
            expanded[longhands[i2]] = key2;
          }
        }
        return expanded;
      }
      function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        {
          if (!nextStyles) {
            return;
          }
          var expandedUpdates = expandShorthandMap(styleUpdates);
          var expandedStyles = expandShorthandMap(nextStyles);
          var warnedAbout = {};
          for (var key2 in expandedUpdates) {
            var originalKey = expandedUpdates[key2];
            var correctOriginalKey = expandedStyles[key2];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
              var warningKey = originalKey + "," + correctOriginalKey;
              if (warnedAbout[warningKey]) {
                continue;
              }
              warnedAbout[warningKey] = true;
              error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
          }
        }
      }
      var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
      };
      var voidElementTags = _assign({
        menuitem: true
      }, omittedCloseTags);
      var HTML = "__html";
      function assertValidProps(tag, props) {
        if (!props) {
          return;
        }
        if (voidElementTags[tag]) {
          if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
            {
              throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
        }
        if (props.dangerouslySetInnerHTML != null) {
          if (!(props.children == null)) {
            {
              throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
          }
          if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
            {
              throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
        }
        {
          if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
            error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
          }
        }
        if (!(props.style == null || typeof props.style === "object")) {
          {
            throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1) {
          return typeof props.is === "string";
        }
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      };
      var ariaProperties = {
        "aria-current": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      };
      var warnedProperties = {};
      var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
      var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      var hasOwnProperty$12 = Object.prototype.hasOwnProperty;
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty$12.call(warnedProperties, name) && warnedProperties[name]) {
            return true;
          }
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null) {
              error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (name !== correctName) {
              error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
              warnedProperties[name] = true;
              return true;
            }
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null) {
              warnedProperties[name] = true;
              return false;
            }
            if (name !== standardName) {
              error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties[name] = true;
              return true;
            }
          }
        }
        return true;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key2 in props) {
            var isValid = validateProperty(type, key2);
            if (!isValid) {
              invalidProps.push(key2);
            }
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (invalidProps.length === 1) {
            error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          } else if (invalidProps.length > 1) {
            error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          }
        }
      }
      function validateProperties(type, props) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = false;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select") {
            return;
          }
          if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === "select" && props.multiple) {
              error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            } else {
              error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
            }
          }
        }
      }
      var validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {};
        var _hasOwnProperty = Object.prototype.hasOwnProperty;
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
            return true;
          }
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (eventRegistry != null) {
            var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies2.hasOwnProperty(name)) {
              return true;
            }
            var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
            if (registrationName != null) {
              error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
              error("Unknown event handler property `%s`. It will be ignored.", name);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (EVENT_NAME_REGEX.test(name)) {
            if (INVALID_EVENT_NAME_REGEX.test(name)) {
              error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
            return true;
          }
          if (lowerCasedName === "innerhtml") {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "aria") {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "number" && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
          }
          var propertyInfo = getPropertyInfo(name);
          var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
              error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (!isReserved && name !== lowerCasedName) {
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) {
              error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
            } else {
              error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (isReserved) {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
          }
          if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
          }
          return true;
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key2 in props) {
            var isValid = validateProperty$1(type, key2, props[key2], eventRegistry);
            if (!isValid) {
              unknownProps.push(key2);
            }
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (unknownProps.length === 1) {
            error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          } else if (unknownProps.length > 1) {
            error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          }
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnUnknownProperties(type, props, eventRegistry);
      }
      var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
      var IS_NON_DELEGATED = 1 << 1;
      var IS_CAPTURE_PHASE = 1 << 2;
      var IS_REPLAYED = 1 << 4;
      var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
      function getEventTarget(nativeEvent) {
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        if (target.correspondingUseElement) {
          target = target.correspondingUseElement;
        }
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
      }
      var restoreImpl = null;
      var restoreTarget = null;
      var restoreQueue = null;
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) {
          return;
        }
        if (!(typeof restoreImpl === "function")) {
          {
            throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var stateNode = internalInstance.stateNode;
        if (stateNode) {
          var _props = getFiberCurrentPropsFromNode(stateNode);
          restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
      }
      function setRestoreImplementation(impl) {
        restoreImpl = impl;
      }
      function enqueueStateRestore(target) {
        if (restoreTarget) {
          if (restoreQueue) {
            restoreQueue.push(target);
          } else {
            restoreQueue = [target];
          }
        } else {
          restoreTarget = target;
        }
      }
      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }
      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return;
        }
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) {
          for (var i2 = 0; i2 < queuedTargets.length; i2++) {
            restoreStateOfTarget(queuedTargets[i2]);
          }
        }
      }
      var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
      };
      var discreteUpdatesImpl = function(fn, a, b, c, d) {
        return fn(a, b, c, d);
      };
      var flushDiscreteUpdatesImpl = function() {
      };
      var batchedEventUpdatesImpl = batchedUpdatesImpl;
      var isInsideEventHandler = false;
      var isBatchingEventUpdates = false;
      function finishEventHandler() {
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
          flushDiscreteUpdatesImpl();
          restoreStateIfNeeded();
        }
      }
      function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) {
          return fn(bookkeeping);
        }
        isInsideEventHandler = true;
        try {
          return batchedUpdatesImpl(fn, bookkeeping);
        } finally {
          isInsideEventHandler = false;
          finishEventHandler();
        }
      }
      function batchedEventUpdates(fn, a, b) {
        if (isBatchingEventUpdates) {
          return fn(a, b);
        }
        isBatchingEventUpdates = true;
        try {
          return batchedEventUpdatesImpl(fn, a, b);
        } finally {
          isBatchingEventUpdates = false;
          finishEventHandler();
        }
      }
      function discreteUpdates(fn, a, b, c, d) {
        var prevIsInsideEventHandler = isInsideEventHandler;
        isInsideEventHandler = true;
        try {
          return discreteUpdatesImpl(fn, a, b, c, d);
        } finally {
          isInsideEventHandler = prevIsInsideEventHandler;
          if (!isInsideEventHandler) {
            finishEventHandler();
          }
        }
      }
      function flushDiscreteUpdatesIfNeeded(timeStamp) {
        {
          if (!isInsideEventHandler) {
            flushDiscreteUpdatesImpl();
          }
        }
      }
      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        discreteUpdatesImpl = _discreteUpdatesImpl;
        flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
        batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
      }
      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }
      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            return !!(props.disabled && isInteractive(type));
          default:
            return false;
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) {
          return null;
        }
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) {
          return null;
        }
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }
        if (!(!listener || typeof listener === "function")) {
          {
            throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
        }
        return listener;
      }
      var passiveBrowserEventsSupported = false;
      if (canUseDOM2) {
        try {
          var options = {};
          Object.defineProperty(options, "passive", {
            get: function() {
              passiveBrowserEventsSupported = true;
            }
          });
          window.addEventListener("test", options, options);
          window.removeEventListener("test", options, options);
        } catch (e) {
          passiveBrowserEventsSupported = false;
        }
      }
      function invokeGuardedCallbackProd(name, func, context2, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
          func.apply(context2, funcArgs);
        } catch (error2) {
          this.onError(error2);
        }
      }
      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");
          invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context2, a, b, c, d, e, f) {
            if (!(typeof document !== "undefined")) {
              {
                throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
            }
            var evt = document.createEvent("Event");
            var didCall = false;
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            function restoreAfterDispatch() {
              fakeNode.removeEventListener(evtType, callCallback2, false);
              if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                window.event = windowEvent;
              }
            }
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback2() {
              didCall = true;
              restoreAfterDispatch();
              func.apply(context2, funcArgs);
              didError = false;
            }
            var error2;
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
              error2 = event.error;
              didSetError = true;
              if (error2 === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }
              if (event.defaultPrevented) {
                if (error2 != null && typeof error2 === "object") {
                  try {
                    error2._suppressLogging = true;
                  } catch (inner) {
                  }
                }
              }
            }
            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback2, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) {
              Object.defineProperty(window, "event", windowEventDescriptor);
            }
            if (didCall && didError) {
              if (!didSetError) {
                error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
              } else if (isCrossOriginError) {
                error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
              }
              this.onError(error2);
            }
            window.removeEventListener("error", handleWindowError);
            if (!didCall) {
              restoreAfterDispatch();
              return invokeGuardedCallbackProd.apply(this, arguments);
            }
          };
        }
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
      var hasError = false;
      var caughtError = null;
      var hasRethrowError = false;
      var rethrowError = null;
      var reporter = {
        onError: function(error2) {
          hasError = true;
          caughtError = error2;
        }
      };
      function invokeGuardedCallback(name, func, context2, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }
      function invokeGuardedCallbackAndCatchFirstError(name, func, context2, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
          var error2 = clearCaughtError();
          if (!hasRethrowError) {
            hasRethrowError = true;
            rethrowError = error2;
          }
        }
      }
      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error2 = rethrowError;
          hasRethrowError = false;
          rethrowError = null;
          throw error2;
        }
      }
      function hasCaughtError() {
        return hasError;
      }
      function clearCaughtError() {
        if (hasError) {
          var error2 = caughtError;
          hasError = false;
          caughtError = null;
          return error2;
        } else {
          {
            {
              throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
      }
      function get2(key2) {
        return key2._reactInternals;
      }
      function has2(key2) {
        return key2._reactInternals !== void 0;
      }
      function set(key2, value) {
        key2._reactInternals = value;
      }
      var NoFlags = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var PlacementAndUpdate = 6;
      var Deletion = 8;
      var ContentReset = 16;
      var Callback = 32;
      var DidCapture = 64;
      var Ref = 128;
      var Snapshot = 256;
      var Passive = 512;
      var PassiveUnmountPendingDev = 8192;
      var Hydrating = 1024;
      var HydratingAndUpdate = 1028;
      var LifecycleEffectMask = 932;
      var HostEffectMask = 2047;
      var Incomplete = 2048;
      var ShouldCapture = 4096;
      var ForceUpdateForLegacySuspense = 16384;
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
          var nextNode = node;
          do {
            node = nextNode;
            if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
              nearestMounted = node.return;
            }
            nextNode = node.return;
          } while (nextNode);
        } else {
          while (node.return) {
            node = node.return;
          }
        }
        if (node.tag === HostRoot) {
          return nearestMounted;
        }
        return null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState === null) {
            var current2 = fiber.alternate;
            if (current2 !== null) {
              suspenseState = current2.memoizedState;
            }
          }
          if (suspenseState !== null) {
            return suspenseState.dehydrated;
          }
        }
        return null;
      }
      function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }
      function isMounted(component2) {
        {
          var owner = ReactCurrentOwner.current;
          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) {
              error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
            }
            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get2(component2);
        if (!fiber) {
          return false;
        }
        return getNearestMountedFiber(fiber) === fiber;
      }
      function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) {
          {
            throw Error("Unable to find node on an unmounted component.");
          }
        }
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);
          if (!(nearestMounted !== null)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
          if (nearestMounted !== fiber) {
            return null;
          }
          return fiber;
        }
        var a = fiber;
        var b = alternate;
        while (true) {
          var parentA = a.return;
          if (parentA === null) {
            break;
          }
          var parentB = parentA.alternate;
          if (parentB === null) {
            var nextParent = parentA.return;
            if (nextParent !== null) {
              a = b = nextParent;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            var child = parentA.child;
            while (child) {
              if (child === a) {
                assertIsMounted(parentA);
                return fiber;
              }
              if (child === b) {
                assertIsMounted(parentA);
                return alternate;
              }
              child = child.sibling;
            }
            {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          if (a.return !== b.return) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;
            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              _child = parentB.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                {
                  throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
          }
          if (!(a.alternate === b)) {
            {
              throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        if (!(a.tag === HostRoot)) {
          {
            throw Error("Unable to find node on an unmounted component.");
          }
        }
        if (a.stateNode.current === a) {
          return fiber;
        }
        return alternate;
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) {
          return null;
        }
        var node = currentParent;
        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === currentParent) {
            return null;
          }
          while (!node.sibling) {
            if (!node.return || node.return === currentParent) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) {
          return null;
        }
        var node = currentParent;
        while (true) {
          if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
            return node;
          } else if (node.child && node.tag !== HostPortal) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === currentParent) {
            return null;
          }
          while (!node.sibling) {
            if (!node.return || node.return === currentParent) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      function doesFiberContain(parentFiber, childFiber) {
        var node = childFiber;
        var parentFiberAlternate = parentFiber.alternate;
        while (node !== null) {
          if (node === parentFiber || node === parentFiberAlternate) {
            return true;
          }
          node = node.return;
        }
        return false;
      }
      var attemptUserBlockingHydration;
      function setAttemptUserBlockingHydration(fn) {
        attemptUserBlockingHydration = fn;
      }
      var attemptContinuousHydration;
      function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
      }
      var attemptHydrationAtCurrentPriority;
      function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
      }
      var attemptHydrationAtPriority;
      function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
      }
      var hasScheduledReplayAttempt = false;
      var queuedDiscreteEvents = [];
      var queuedFocus = null;
      var queuedDrag = null;
      var queuedMouse = null;
      var queuedPointers = new Map();
      var queuedPointerCaptures = new Map();
      var queuedExplicitHydrationTargets = [];
      function hasQueuedDiscreteEvents() {
        return queuedDiscreteEvents.length > 0;
      }
      var discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset",
        "submit"
      ];
      function isReplayableDiscreteEvent(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
      }
      function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
          blockedOn,
          domEventName,
          eventSystemFlags: eventSystemFlags | IS_REPLAYED,
          nativeEvent,
          targetContainers: [targetContainer]
        };
      }
      function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        queuedDiscreteEvents.push(queuedEvent);
      }
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout": {
            var pointerId = nativeEvent.pointerId;
            queuedPointers.delete(pointerId);
            break;
          }
          case "gotpointercapture":
          case "lostpointercapture": {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn !== null) {
            var _fiber2 = getInstanceFromNode(blockedOn);
            if (_fiber2 !== null) {
              attemptContinuousHydration(_fiber2);
            }
          }
          return queuedEvent;
        }
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
          targetContainers.push(targetContainer);
        }
        return existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin": {
            var focusEvent = nativeEvent;
            queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
            return true;
          }
          case "dragenter": {
            var dragEvent = nativeEvent;
            queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
            return true;
          }
          case "mouseover": {
            var mouseEvent = nativeEvent;
            queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
            return true;
          }
          case "pointerover": {
            var pointerEvent = nativeEvent;
            var pointerId = pointerEvent.pointerId;
            queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
            return true;
          }
          case "gotpointercapture": {
            var _pointerEvent = nativeEvent;
            var _pointerId2 = _pointerEvent.pointerId;
            queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
            return true;
          }
        }
        return false;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted !== null) {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                queuedTarget.blockedOn = instance;
                attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                  Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                });
                return;
              }
            } else if (tag === HostRoot) {
              var root3 = nearestMounted.stateNode;
              if (root3.hydrate) {
                queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                return;
              }
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) {
          return false;
        }
        var targetContainers = queuedEvent.targetContainers;
        while (targetContainers.length > 0) {
          var targetContainer = targetContainers[0];
          var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
          if (nextBlockedOn !== null) {
            var _fiber3 = getInstanceFromNode(nextBlockedOn);
            if (_fiber3 !== null) {
              attemptContinuousHydration(_fiber3);
            }
            queuedEvent.blockedOn = nextBlockedOn;
            return false;
          }
          targetContainers.shift();
        }
        return true;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key2, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
          map.delete(key2);
        }
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        while (queuedDiscreteEvents.length > 0) {
          var nextDiscreteEvent = queuedDiscreteEvents[0];
          if (nextDiscreteEvent.blockedOn !== null) {
            var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
            if (_fiber4 !== null) {
              attemptUserBlockingHydration(_fiber4);
            }
            break;
          }
          var targetContainers = nextDiscreteEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
            if (nextBlockedOn !== null) {
              nextDiscreteEvent.blockedOn = nextBlockedOn;
              break;
            }
            targetContainers.shift();
          }
          if (nextDiscreteEvent.blockedOn === null) {
            queuedDiscreteEvents.shift();
          }
        }
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
          queuedFocus = null;
        }
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
          queuedDrag = null;
        }
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
          queuedMouse = null;
        }
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
          queuedEvent.blockedOn = null;
          if (!hasScheduledReplayAttempt) {
            hasScheduledReplayAttempt = true;
            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
          }
        }
      }
      function retryIfBlockedOn(unblocked) {
        if (queuedDiscreteEvents.length > 0) {
          scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
          for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
            var queuedEvent = queuedDiscreteEvents[i2];
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
            }
          }
        }
        if (queuedFocus !== null) {
          scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        }
        if (queuedDrag !== null) {
          scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        }
        if (queuedMouse !== null) {
          scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        }
        var unblock = function(queuedEvent2) {
          return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
          var queuedTarget = queuedExplicitHydrationTargets[_i];
          if (queuedTarget.blockedOn === unblocked) {
            queuedTarget.blockedOn = null;
          }
        }
        while (queuedExplicitHydrationTargets.length > 0) {
          var nextExplicitTarget = queuedExplicitHydrationTargets[0];
          if (nextExplicitTarget.blockedOn !== null) {
            break;
          } else {
            attemptExplicitHydrationTarget(nextExplicitTarget);
            if (nextExplicitTarget.blockedOn === null) {
              queuedExplicitHydrationTargets.shift();
            }
          }
        }
      }
      var DiscreteEvent = 0;
      var UserBlockingEvent = 1;
      var ContinuousEvent = 2;
      function makePrefixMap(styleProp, eventName) {
        var prefixes2 = {};
        prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes2["Webkit" + styleProp] = "webkit" + eventName;
        prefixes2["Moz" + styleProp] = "moz" + eventName;
        return prefixes2;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      };
      var prefixedEventNames = {};
      var style = {};
      if (canUseDOM2) {
        style = document.createElement("div").style;
        if (!("AnimationEvent" in window)) {
          delete vendorPrefixes.animationend.animation;
          delete vendorPrefixes.animationiteration.animation;
          delete vendorPrefixes.animationstart.animation;
        }
        if (!("TransitionEvent" in window)) {
          delete vendorPrefixes.transitionend.transition;
        }
      }
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) {
          return prefixedEventNames[eventName];
        } else if (!vendorPrefixes[eventName]) {
          return eventName;
        }
        var prefixMap = vendorPrefixes[eventName];
        for (var styleProp in prefixMap) {
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
            return prefixedEventNames[eventName] = prefixMap[styleProp];
          }
        }
        return eventName;
      }
      var ANIMATION_END = getVendorPrefixedEventName("animationend");
      var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
      var ANIMATION_START = getVendorPrefixedEventName("animationstart");
      var TRANSITION_END = getVendorPrefixedEventName("transitionend");
      var topLevelEventsToReactNames = new Map();
      var eventPriorities = new Map();
      var discreteEventPairsForSimpleEventPlugin = [
        "cancel",
        "cancel",
        "click",
        "click",
        "close",
        "close",
        "contextmenu",
        "contextMenu",
        "copy",
        "copy",
        "cut",
        "cut",
        "auxclick",
        "auxClick",
        "dblclick",
        "doubleClick",
        "dragend",
        "dragEnd",
        "dragstart",
        "dragStart",
        "drop",
        "drop",
        "focusin",
        "focus",
        "focusout",
        "blur",
        "input",
        "input",
        "invalid",
        "invalid",
        "keydown",
        "keyDown",
        "keypress",
        "keyPress",
        "keyup",
        "keyUp",
        "mousedown",
        "mouseDown",
        "mouseup",
        "mouseUp",
        "paste",
        "paste",
        "pause",
        "pause",
        "play",
        "play",
        "pointercancel",
        "pointerCancel",
        "pointerdown",
        "pointerDown",
        "pointerup",
        "pointerUp",
        "ratechange",
        "rateChange",
        "reset",
        "reset",
        "seeked",
        "seeked",
        "submit",
        "submit",
        "touchcancel",
        "touchCancel",
        "touchend",
        "touchEnd",
        "touchstart",
        "touchStart",
        "volumechange",
        "volumeChange"
      ];
      var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
      var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
      var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
      function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
        for (var i2 = 0; i2 < eventTypes.length; i2 += 2) {
          var topEvent = eventTypes[i2];
          var event = eventTypes[i2 + 1];
          var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
          var reactName = "on" + capitalizedEvent;
          eventPriorities.set(topEvent, priority);
          topLevelEventsToReactNames.set(topEvent, reactName);
          registerTwoPhaseEvent(reactName, [topEvent]);
        }
      }
      function setEventPriorities(eventTypes, priority) {
        for (var i2 = 0; i2 < eventTypes.length; i2++) {
          eventPriorities.set(eventTypes[i2], priority);
        }
      }
      function getEventPriorityForPluginSystem(domEventName) {
        var priority = eventPriorities.get(domEventName);
        return priority === void 0 ? ContinuousEvent : priority;
      }
      function registerSimpleEvents() {
        registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
        registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
        registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
        setEventPriorities(otherDiscreteEvents, DiscreteEvent);
      }
      var Scheduler_now = Scheduler.unstable_now;
      {
        if (!(tracing$1.__interactionsRef != null && tracing$1.__interactionsRef.current != null)) {
          {
            throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
          }
        }
      }
      var ImmediatePriority = 99;
      var UserBlockingPriority = 98;
      var NormalPriority = 97;
      var LowPriority = 96;
      var IdlePriority = 95;
      var NoPriority = 90;
      Scheduler_now();
      var SyncLanePriority = 15;
      var SyncBatchedLanePriority = 14;
      var InputDiscreteHydrationLanePriority = 13;
      var InputDiscreteLanePriority = 12;
      var InputContinuousHydrationLanePriority = 11;
      var InputContinuousLanePriority = 10;
      var DefaultHydrationLanePriority = 9;
      var DefaultLanePriority = 8;
      var TransitionHydrationPriority = 7;
      var TransitionPriority = 6;
      var RetryLanePriority = 5;
      var SelectiveHydrationLanePriority = 4;
      var IdleHydrationLanePriority = 3;
      var IdleLanePriority = 2;
      var OffscreenLanePriority = 1;
      var NoLanePriority = 0;
      var TotalLanes = 31;
      var NoLanes = 0;
      var NoLane = 0;
      var SyncLane = 1;
      var SyncBatchedLane = 2;
      var InputDiscreteHydrationLane = 4;
      var InputDiscreteLanes = 24;
      var InputContinuousHydrationLane = 32;
      var InputContinuousLanes = 192;
      var DefaultHydrationLane = 256;
      var DefaultLanes = 3584;
      var TransitionHydrationLane = 4096;
      var TransitionLanes = 4186112;
      var RetryLanes = 62914560;
      var SomeRetryLane = 33554432;
      var SelectiveHydrationLane = 67108864;
      var NonIdleLanes = 134217727;
      var IdleHydrationLane = 134217728;
      var IdleLanes = 805306368;
      var OffscreenLane = 1073741824;
      var NoTimestamp = -1;
      function setCurrentUpdateLanePriority(newLanePriority) {
      }
      var return_highestLanePriority = DefaultLanePriority;
      function getHighestPriorityLanes(lanes) {
        if ((SyncLane & lanes) !== NoLanes) {
          return_highestLanePriority = SyncLanePriority;
          return SyncLane;
        }
        if ((SyncBatchedLane & lanes) !== NoLanes) {
          return_highestLanePriority = SyncBatchedLanePriority;
          return SyncBatchedLane;
        }
        if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
          return_highestLanePriority = InputDiscreteHydrationLanePriority;
          return InputDiscreteHydrationLane;
        }
        var inputDiscreteLanes = InputDiscreteLanes & lanes;
        if (inputDiscreteLanes !== NoLanes) {
          return_highestLanePriority = InputDiscreteLanePriority;
          return inputDiscreteLanes;
        }
        if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
          return_highestLanePriority = InputContinuousHydrationLanePriority;
          return InputContinuousHydrationLane;
        }
        var inputContinuousLanes = InputContinuousLanes & lanes;
        if (inputContinuousLanes !== NoLanes) {
          return_highestLanePriority = InputContinuousLanePriority;
          return inputContinuousLanes;
        }
        if ((lanes & DefaultHydrationLane) !== NoLanes) {
          return_highestLanePriority = DefaultHydrationLanePriority;
          return DefaultHydrationLane;
        }
        var defaultLanes = DefaultLanes & lanes;
        if (defaultLanes !== NoLanes) {
          return_highestLanePriority = DefaultLanePriority;
          return defaultLanes;
        }
        if ((lanes & TransitionHydrationLane) !== NoLanes) {
          return_highestLanePriority = TransitionHydrationPriority;
          return TransitionHydrationLane;
        }
        var transitionLanes = TransitionLanes & lanes;
        if (transitionLanes !== NoLanes) {
          return_highestLanePriority = TransitionPriority;
          return transitionLanes;
        }
        var retryLanes = RetryLanes & lanes;
        if (retryLanes !== NoLanes) {
          return_highestLanePriority = RetryLanePriority;
          return retryLanes;
        }
        if (lanes & SelectiveHydrationLane) {
          return_highestLanePriority = SelectiveHydrationLanePriority;
          return SelectiveHydrationLane;
        }
        if ((lanes & IdleHydrationLane) !== NoLanes) {
          return_highestLanePriority = IdleHydrationLanePriority;
          return IdleHydrationLane;
        }
        var idleLanes = IdleLanes & lanes;
        if (idleLanes !== NoLanes) {
          return_highestLanePriority = IdleLanePriority;
          return idleLanes;
        }
        if ((OffscreenLane & lanes) !== NoLanes) {
          return_highestLanePriority = OffscreenLanePriority;
          return OffscreenLane;
        }
        {
          error("Should have found matching lanes. This is a bug in React.");
        }
        return_highestLanePriority = DefaultLanePriority;
        return lanes;
      }
      function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
        switch (schedulerPriorityLevel) {
          case ImmediatePriority:
            return SyncLanePriority;
          case UserBlockingPriority:
            return InputContinuousLanePriority;
          case NormalPriority:
          case LowPriority:
            return DefaultLanePriority;
          case IdlePriority:
            return IdleLanePriority;
          default:
            return NoLanePriority;
        }
      }
      function lanePriorityToSchedulerPriority(lanePriority) {
        switch (lanePriority) {
          case SyncLanePriority:
          case SyncBatchedLanePriority:
            return ImmediatePriority;
          case InputDiscreteHydrationLanePriority:
          case InputDiscreteLanePriority:
          case InputContinuousHydrationLanePriority:
          case InputContinuousLanePriority:
            return UserBlockingPriority;
          case DefaultHydrationLanePriority:
          case DefaultLanePriority:
          case TransitionHydrationPriority:
          case TransitionPriority:
          case SelectiveHydrationLanePriority:
          case RetryLanePriority:
            return NormalPriority;
          case IdleHydrationLanePriority:
          case IdleLanePriority:
          case OffscreenLanePriority:
            return IdlePriority;
          case NoLanePriority:
            return NoPriority;
          default: {
            {
              throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
            }
          }
        }
      }
      function getNextLanes(root3, wipLanes) {
        var pendingLanes = root3.pendingLanes;
        if (pendingLanes === NoLanes) {
          return_highestLanePriority = NoLanePriority;
          return NoLanes;
        }
        var nextLanes = NoLanes;
        var nextLanePriority = NoLanePriority;
        var expiredLanes = root3.expiredLanes;
        var suspendedLanes = root3.suspendedLanes;
        var pingedLanes = root3.pingedLanes;
        if (expiredLanes !== NoLanes) {
          nextLanes = expiredLanes;
          nextLanePriority = return_highestLanePriority = SyncLanePriority;
        } else {
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              nextLanePriority = return_highestLanePriority;
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                nextLanePriority = return_highestLanePriority;
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
              nextLanePriority = return_highestLanePriority;
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
                nextLanePriority = return_highestLanePriority;
              }
            }
          }
        }
        if (nextLanes === NoLanes) {
          return NoLanes;
        }
        nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
          getHighestPriorityLanes(wipLanes);
          var wipLanePriority = return_highestLanePriority;
          if (nextLanePriority <= wipLanePriority) {
            return wipLanes;
          } else {
            return_highestLanePriority = nextLanePriority;
          }
        }
        var entangledLanes = root3.entangledLanes;
        if (entangledLanes !== NoLanes) {
          var entanglements = root3.entanglements;
          var lanes = nextLanes & entangledLanes;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            nextLanes |= entanglements[index3];
            lanes &= ~lane;
          }
        }
        return nextLanes;
      }
      function getMostRecentEventTime(root3, lanes) {
        var eventTimes = root3.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          var eventTime = eventTimes[index3];
          if (eventTime > mostRecentEventTime) {
            mostRecentEventTime = eventTime;
          }
          lanes &= ~lane;
        }
        return mostRecentEventTime;
      }
      function computeExpirationTime(lane, currentTime) {
        getHighestPriorityLanes(lane);
        var priority = return_highestLanePriority;
        if (priority >= InputContinuousLanePriority) {
          return currentTime + 250;
        } else if (priority >= TransitionPriority) {
          return currentTime + 5e3;
        } else {
          return NoTimestamp;
        }
      }
      function markStarvedLanesAsExpired(root3, currentTime) {
        var pendingLanes = root3.pendingLanes;
        var suspendedLanes = root3.suspendedLanes;
        var pingedLanes = root3.pingedLanes;
        var expirationTimes = root3.expirationTimes;
        var lanes = pendingLanes;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          var expirationTime = expirationTimes[index3];
          if (expirationTime === NoTimestamp) {
            if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
              expirationTimes[index3] = computeExpirationTime(lane, currentTime);
            }
          } else if (expirationTime <= currentTime) {
            root3.expiredLanes |= lane;
          }
          lanes &= ~lane;
        }
      }
      function getLanesToRetrySynchronouslyOnError(root3) {
        var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) {
          return everythingButOffscreen;
        }
        if (everythingButOffscreen & OffscreenLane) {
          return OffscreenLane;
        }
        return NoLanes;
      }
      function returnNextLanesPriority() {
        return return_highestLanePriority;
      }
      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
      }
      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
      }
      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
      }
      function findUpdateLane(lanePriority, wipLanes) {
        switch (lanePriority) {
          case NoLanePriority:
            break;
          case SyncLanePriority:
            return SyncLane;
          case SyncBatchedLanePriority:
            return SyncBatchedLane;
          case InputDiscreteLanePriority: {
            var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
            if (_lane === NoLane) {
              return findUpdateLane(InputContinuousLanePriority, wipLanes);
            }
            return _lane;
          }
          case InputContinuousLanePriority: {
            var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
            if (_lane2 === NoLane) {
              return findUpdateLane(DefaultLanePriority, wipLanes);
            }
            return _lane2;
          }
          case DefaultLanePriority: {
            var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
            if (_lane3 === NoLane) {
              _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (_lane3 === NoLane) {
                _lane3 = pickArbitraryLane(DefaultLanes);
              }
            }
            return _lane3;
          }
          case TransitionPriority:
          case RetryLanePriority:
            break;
          case IdleLanePriority:
            var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(IdleLanes);
            }
            return lane;
        }
        {
          {
            throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
          }
        }
      }
      function findTransitionLane(wipLanes, pendingLanes) {
        var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
        if (lane === NoLane) {
          lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
          if (lane === NoLane) {
            lane = pickArbitraryLane(TransitionLanes);
          }
        }
        return lane;
      }
      function findRetryLane(wipLanes) {
        var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
        if (lane === NoLane) {
          lane = pickArbitraryLane(RetryLanes);
        }
        return lane;
      }
      function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
      }
      function getLowestPriorityLane(lanes) {
        var index3 = 31 - clz32(lanes);
        return index3 < 0 ? NoLanes : 1 << index3;
      }
      function getEqualOrHigherPriorityLanes(lanes) {
        return (getLowestPriorityLane(lanes) << 1) - 1;
      }
      function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
      }
      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
      }
      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
      }
      function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
      }
      function isSubsetOfLanes(set2, subset) {
        return (set2 & subset) === subset;
      }
      function mergeLanes(a, b) {
        return a | b;
      }
      function removeLanes(set2, subset) {
        return set2 & ~subset;
      }
      function laneToLanes(lane) {
        return lane;
      }
      function higherPriorityLane(a, b) {
        return a !== NoLane && a < b ? a : b;
      }
      function createLaneMap(initial) {
        var laneMap = [];
        for (var i2 = 0; i2 < TotalLanes; i2++) {
          laneMap.push(initial);
        }
        return laneMap;
      }
      function markRootUpdated(root3, updateLane, eventTime) {
        root3.pendingLanes |= updateLane;
        var higherPriorityLanes = updateLane - 1;
        root3.suspendedLanes &= higherPriorityLanes;
        root3.pingedLanes &= higherPriorityLanes;
        var eventTimes = root3.eventTimes;
        var index3 = laneToIndex(updateLane);
        eventTimes[index3] = eventTime;
      }
      function markRootSuspended(root3, suspendedLanes) {
        root3.suspendedLanes |= suspendedLanes;
        root3.pingedLanes &= ~suspendedLanes;
        var expirationTimes = root3.expirationTimes;
        var lanes = suspendedLanes;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          expirationTimes[index3] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootPinged(root3, pingedLanes, eventTime) {
        root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
      }
      function markDiscreteUpdatesExpired(root3) {
        root3.expiredLanes |= InputDiscreteLanes & root3.pendingLanes;
      }
      function hasDiscreteLanes(lanes) {
        return (lanes & InputDiscreteLanes) !== NoLanes;
      }
      function markRootMutableRead(root3, updateLane) {
        root3.mutableReadLanes |= updateLane & root3.pendingLanes;
      }
      function markRootFinished(root3, remainingLanes) {
        var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
        root3.pendingLanes = remainingLanes;
        root3.suspendedLanes = 0;
        root3.pingedLanes = 0;
        root3.expiredLanes &= remainingLanes;
        root3.mutableReadLanes &= remainingLanes;
        root3.entangledLanes &= remainingLanes;
        var entanglements = root3.entanglements;
        var eventTimes = root3.eventTimes;
        var expirationTimes = root3.expirationTimes;
        var lanes = noLongerPendingLanes;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          entanglements[index3] = NoLanes;
          eventTimes[index3] = NoTimestamp;
          expirationTimes[index3] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootEntangled(root3, entangledLanes) {
        root3.entangledLanes |= entangledLanes;
        var entanglements = root3.entanglements;
        var lanes = entangledLanes;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          entanglements[index3] |= entangledLanes;
          lanes &= ~lane;
        }
      }
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
      var log = Math.log;
      var LN2 = Math.LN2;
      function clz32Fallback(lanes) {
        if (lanes === 0) {
          return 32;
        }
        return 31 - (log(lanes) / LN2 | 0) | 0;
      }
      var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
      var _enabled = true;
      function setEnabled(enabled) {
        _enabled = !!enabled;
      }
      function isEnabled() {
        return _enabled;
      }
      function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriorityForPluginSystem(domEventName);
        var listenerWrapper;
        switch (eventPriority) {
          case DiscreteEvent:
            listenerWrapper = dispatchDiscreteEvent;
            break;
          case UserBlockingEvent:
            listenerWrapper = dispatchUserBlockingUpdate;
            break;
          case ContinuousEvent:
          default:
            listenerWrapper = dispatchEvent;
            break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
      }
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        {
          flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
        }
        discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
      }
      function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
        {
          runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) {
          return;
        }
        var allowReplay = true;
        {
          allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
        }
        if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
          queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          return;
        }
        var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
          if (allowReplay) {
            clearIfContinuousEvent(domEventName, nativeEvent);
          }
          return;
        }
        if (allowReplay) {
          if (isReplayableDiscreteEvent(domEventName)) {
            queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
      }
      function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted === null) {
            targetInst = null;
          } else {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                return instance;
              }
              targetInst = null;
            } else if (tag === HostRoot) {
              var root3 = nearestMounted.stateNode;
              if (root3.hydrate) {
                return getContainerFromFiber(nearestMounted);
              }
              targetInst = null;
            } else if (nearestMounted !== targetInst) {
              targetInst = null;
            }
          }
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
        return null;
      }
      function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
      }
      function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
      }
      function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
          capture: true,
          passive
        });
        return listener;
      }
      function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
          passive
        });
        return listener;
      }
      var root2 = null;
      var startText = null;
      var fallbackText = null;
      function initialize(nativeEventTarget) {
        root2 = nativeEventTarget;
        startText = getText();
        return true;
      }
      function reset() {
        root2 = null;
        startText = null;
        fallbackText = null;
      }
      function getData() {
        if (fallbackText) {
          return fallbackText;
        }
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for (start = 0; start < startLength; start++) {
          if (startValue[start] !== endValue[start]) {
            break;
          }
        }
        var minEnd = startLength - start;
        for (end = 1; end <= minEnd; end++) {
          if (startValue[startLength - end] !== endValue[endLength - end]) {
            break;
          }
        }
        var sliceTail = end > 1 ? 1 - end : void 0;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
      }
      function getText() {
        if ("value" in root2) {
          return root2.value;
        }
        return root2.textContent;
      }
      function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ("charCode" in nativeEvent) {
          charCode = nativeEvent.charCode;
          if (charCode === 0 && keyCode === 13) {
            charCode = 13;
          }
        } else {
          charCode = keyCode;
        }
        if (charCode === 10) {
          charCode = 13;
        }
        if (charCode >= 32 || charCode === 13) {
          return charCode;
        }
        return 0;
      }
      function functionThatReturnsTrue() {
        return true;
      }
      function functionThatReturnsFalse() {
        return false;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName;
          this._targetInst = targetInst;
          this.type = reactEventType;
          this.nativeEvent = nativeEvent;
          this.target = nativeEventTarget;
          this.currentTarget = null;
          for (var _propName in Interface) {
            if (!Interface.hasOwnProperty(_propName)) {
              continue;
            }
            var normalize = Interface[_propName];
            if (normalize) {
              this[_propName] = normalize(nativeEvent);
            } else {
              this[_propName] = nativeEvent[_propName];
            }
          }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue;
          } else {
            this.isDefaultPrevented = functionThatReturnsFalse;
          }
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        _assign(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.preventDefault) {
              event.preventDefault();
            } else if (typeof event.returnValue !== "unknown") {
              event.returnValue = false;
            }
            this.isDefaultPrevented = functionThatReturnsTrue;
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.stopPropagation) {
              event.stopPropagation();
            } else if (typeof event.cancelBubble !== "unknown") {
              event.cancelBubble = true;
            }
            this.isPropagationStopped = functionThatReturnsTrue;
          },
          persist: function() {
          },
          isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
      }
      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      };
      var SyntheticEvent = createSyntheticEvent(EventInterface);
      var UIEventInterface = _assign({}, EventInterface, {
        view: 0,
        detail: 0
      });
      var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
      var lastMovementX;
      var lastMovementY;
      var lastMouseEvent;
      function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
          if (lastMouseEvent && event.type === "mousemove") {
            lastMovementX = event.screenX - lastMouseEvent.screenX;
            lastMovementY = event.screenY - lastMouseEvent.screenY;
          } else {
            lastMovementX = 0;
            lastMovementY = 0;
          }
          lastMouseEvent = event;
        }
      }
      var MouseEventInterface = _assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
          if (event.relatedTarget === void 0)
            return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
          return event.relatedTarget;
        },
        movementX: function(event) {
          if ("movementX" in event) {
            return event.movementX;
          }
          updateMouseMovementPolyfillState(event);
          return lastMovementX;
        },
        movementY: function(event) {
          if ("movementY" in event) {
            return event.movementY;
          }
          return lastMovementY;
        }
      });
      var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
      var DragEventInterface = _assign({}, MouseEventInterface, {
        dataTransfer: 0
      });
      var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
      var FocusEventInterface = _assign({}, UIEventInterface, {
        relatedTarget: 0
      });
      var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
      var AnimationEventInterface = _assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
      var ClipboardEventInterface = _assign({}, EventInterface, {
        clipboardData: function(event) {
          return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
      });
      var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
      var CompositionEventInterface = _assign({}, EventInterface, {
        data: 0
      });
      var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
      var SyntheticInputEvent = SyntheticCompositionEvent;
      var normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var translateToKey = {
        "8": "Backspace",
        "9": "Tab",
        "12": "Clear",
        "13": "Enter",
        "16": "Shift",
        "17": "Control",
        "18": "Alt",
        "19": "Pause",
        "20": "CapsLock",
        "27": "Escape",
        "32": " ",
        "33": "PageUp",
        "34": "PageDown",
        "35": "End",
        "36": "Home",
        "37": "ArrowLeft",
        "38": "ArrowUp",
        "39": "ArrowRight",
        "40": "ArrowDown",
        "45": "Insert",
        "46": "Delete",
        "112": "F1",
        "113": "F2",
        "114": "F3",
        "115": "F4",
        "116": "F5",
        "117": "F6",
        "118": "F7",
        "119": "F8",
        "120": "F9",
        "121": "F10",
        "122": "F11",
        "123": "F12",
        "144": "NumLock",
        "145": "ScrollLock",
        "224": "Meta"
      };
      function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
          var key2 = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if (key2 !== "Unidentified") {
            return key2;
          }
        }
        if (nativeEvent.type === "keypress") {
          var charCode = getEventCharCode(nativeEvent);
          return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
          return translateToKey[nativeEvent.keyCode] || "Unidentified";
        }
        return "";
      }
      var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) {
          return nativeEvent.getModifierState(keyArg);
        }
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
      }
      function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
      }
      var KeyboardEventInterface = _assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        charCode: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          return 0;
        },
        keyCode: function(event) {
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        },
        which: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        }
      });
      var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
      var PointerEventInterface = _assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      });
      var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
      var TouchEventInterface = _assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      });
      var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
      var TransitionEventInterface = _assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
      var WheelEventInterface = _assign({}, MouseEventInterface, {
        deltaX: function(event) {
          return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
          return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      });
      var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
      var END_KEYCODES = [9, 13, 27, 32];
      var START_KEYCODE = 229;
      var canUseCompositionEvent = canUseDOM2 && "CompositionEvent" in window;
      var documentMode = null;
      if (canUseDOM2 && "documentMode" in document) {
        documentMode = document.documentMode;
      }
      var canUseTextInputEvent = canUseDOM2 && "TextEvent" in window && !documentMode;
      var useFallbackCompositionData = canUseDOM2 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
      var SPACEBAR_CODE = 32;
      var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
      function registerEvents() {
        registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
        registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      }
      var hasSpaceKeypress = false;
      function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
      }
      function getCompositionEventType(domEventName) {
        switch (domEventName) {
          case "compositionstart":
            return "onCompositionStart";
          case "compositionend":
            return "onCompositionEnd";
          case "compositionupdate":
            return "onCompositionUpdate";
        }
      }
      function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
      }
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
          case "keydown":
            return nativeEvent.keyCode !== START_KEYCODE;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === "object" && "data" in detail) {
          return detail.data;
        }
        return null;
      }
      function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
      }
      var isComposing = false;
      function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) {
          eventType = getCompositionEventType(domEventName);
        } else if (!isComposing) {
          if (isFallbackCompositionStart(domEventName, nativeEvent)) {
            eventType = "onCompositionStart";
          }
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
          eventType = "onCompositionEnd";
        }
        if (!eventType) {
          return null;
        }
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
          if (!isComposing && eventType === "onCompositionStart") {
            isComposing = initialize(nativeEventTarget);
          } else if (eventType === "onCompositionEnd") {
            if (isComposing) {
              fallbackData = getData();
            }
          }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
          var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          if (fallbackData) {
            event.data = fallbackData;
          } else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
              event.data = customData;
            }
          }
        }
      }
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            var which = nativeEvent.which;
            if (which !== SPACEBAR_CODE) {
              return null;
            }
            hasSpaceKeypress = true;
            return SPACEBAR_CHAR;
          case "textInput":
            var chars = nativeEvent.data;
            if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
              return null;
            }
            return chars;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing) {
          if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
            var chars = getData();
            reset();
            isComposing = false;
            return chars;
          }
          return null;
        }
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!isKeypressCommand(nativeEvent)) {
              if (nativeEvent.char && nativeEvent.char.length > 1) {
                return nativeEvent.char;
              } else if (nativeEvent.which) {
                return String.fromCharCode(nativeEvent.which);
              }
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) {
          chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        } else {
          chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
        }
        if (!chars) {
          return null;
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners.length > 0) {
          var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          event.data = chars;
        }
      }
      function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
      var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === "input") {
          return !!supportedInputTypes[elem.type];
        }
        if (nodeName === "textarea") {
          return true;
        }
        return false;
      }
      /**
       * Checks if an event is supported in the current execution environment.
       *
       * NOTE: This will not work correctly for non-generic events such as `change`,
       * `reset`, `load`, `error`, and `select`.
       *
       * Borrows from Modernizr.
       *
       * @param {string} eventNameSuffix Event name, e.g. "click".
       * @return {boolean} True if the event is supported.
       * @internal
       * @license Modernizr 3.0.0pre (Custom Build) | MIT
       */
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM2) {
          return false;
        }
        var eventName = "on" + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
          var element = document.createElement("div");
          element.setAttribute(eventName, "return;");
          isSupported = typeof element[eventName] === "function";
        }
        return isSupported;
      }
      function registerEvents$1() {
        registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      var activeElement = null;
      var activeElementInst = null;
      function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
      }
      function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
        batchedUpdates(runEventInBatch, dispatchQueue);
      }
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) {
          return targetInst;
        }
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change") {
          return targetInst;
        }
      }
      var isInputEventSupported = false;
      if (canUseDOM2) {
        isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
      }
      function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent("onpropertychange", handlePropertyChange);
      }
      function stopWatchingForValueChange() {
        if (!activeElement) {
          return;
        }
        activeElement.detachEvent("onpropertychange", handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
      }
      function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== "value") {
          return;
        }
        if (getInstIfValueChanged(activeElementInst)) {
          manualDispatchChangeEvent(nativeEvent);
        }
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === "focusin") {
          stopWatchingForValueChange();
          startWatchingForValueChange(target, targetInst);
        } else if (domEventName === "focusout") {
          stopWatchingForValueChange();
        }
      }
      function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
          return getInstIfValueChanged(activeElementInst);
        }
      }
      function shouldUseClickEvent(elem) {
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== "number") {
          return;
        }
        {
          setDefaultValue(node, "number", node.value);
        }
      }
      function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else if (isTextInputElement(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            handleEventFunc = handleEventsForInputEventPolyfill;
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent;
        }
        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(domEventName, targetInst);
          if (inst) {
            createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
            return;
          }
        }
        if (handleEventFunc) {
          handleEventFunc(domEventName, targetNode, targetInst);
        }
        if (domEventName === "focusout") {
          handleControlledInputBlur(targetNode);
        }
      }
      function registerEvents$2() {
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
        registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
        registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
        registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      }
      function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
        var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
          var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
          if (related) {
            if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
              return;
            }
          }
        }
        if (!isOutEvent && !isOverEvent) {
          return;
        }
        var win;
        if (nativeEventTarget.window === nativeEventTarget) {
          win = nativeEventTarget;
        } else {
          var doc = nativeEventTarget.ownerDocument;
          if (doc) {
            win = doc.defaultView || doc.parentWindow;
          } else {
            win = window;
          }
        }
        var from;
        var to;
        if (isOutEvent) {
          var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
          from = targetInst;
          to = _related ? getClosestInstanceFromNode(_related) : null;
          if (to !== null) {
            var nearestMounted = getNearestMountedFiber(to);
            if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
              to = null;
            }
          }
        } else {
          from = null;
          to = targetInst;
        }
        if (from === to) {
          return;
        }
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = "onMouseLeave";
        var enterEventType = "onMouseEnter";
        var eventTypePrefix = "mouse";
        if (domEventName === "pointerout" || domEventName === "pointerover") {
          SyntheticEventCtor = SyntheticPointerEvent;
          leaveEventType = "onPointerLeave";
          enterEventType = "onPointerEnter";
          eventTypePrefix = "pointer";
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null;
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
          var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
          enterEvent.target = toNode;
          enterEvent.relatedTarget = fromNode;
          enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
      }
      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }
      var objectIs2 = typeof Object.is === "function" ? Object.is : is;
      var hasOwnProperty$22 = Object.prototype.hasOwnProperty;
      function shallowEqual(objA, objB) {
        if (objectIs2(objA, objB)) {
          return true;
        }
        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        for (var i2 = 0; i2 < keysA.length; i2++) {
          if (!hasOwnProperty$22.call(objB, keysA[i2]) || !objectIs2(objA[keysA[i2]], objB[keysA[i2]])) {
            return false;
          }
        }
        return true;
      }
      function getLeafNode(node) {
        while (node && node.firstChild) {
          node = node.firstChild;
        }
        return node;
      }
      function getSiblingNode(node) {
        while (node) {
          if (node.nextSibling) {
            return node.nextSibling;
          }
          node = node.parentNode;
        }
      }
      function getNodeForCharacterOffset(root3, offset) {
        var node = getLeafNode(root3);
        var nodeStart = 0;
        var nodeEnd = 0;
        while (node) {
          if (node.nodeType === TEXT_NODE) {
            nodeEnd = nodeStart + node.textContent.length;
            if (nodeStart <= offset && nodeEnd >= offset) {
              return {
                node,
                offset: offset - nodeStart
              };
            }
            nodeStart = nodeEnd;
          }
          node = getLeafNode(getSiblingNode(node));
        }
      }
      function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) {
          return null;
        }
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
        try {
          anchorNode.nodeType;
          focusNode.nodeType;
        } catch (e) {
          return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
      }
      function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer:
          while (true) {
            var next = null;
            while (true) {
              if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                start = length + anchorOffset;
              }
              if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                end = length + focusOffset;
              }
              if (node.nodeType === TEXT_NODE) {
                length += node.nodeValue.length;
              }
              if ((next = node.firstChild) === null) {
                break;
              }
              parentNode = node;
              node = next;
            }
            while (true) {
              if (node === outerNode) {
                break outer;
              }
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start = length;
              }
              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end = length;
              }
              if ((next = node.nextSibling) !== null) {
                break;
              }
              node = parentNode;
              parentNode = node.parentNode;
            }
            node = next;
          }
        if (start === -1 || end === -1) {
          return null;
        }
        return {
          start,
          end
        };
      }
      function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window;
        if (!win.getSelection) {
          return;
        }
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
        if (!selection.extend && start > end) {
          var temp = end;
          end = start;
          start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
          if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
            return;
          }
          var range = doc.createRange();
          range.setStart(startMarker.node, startMarker.offset);
          selection.removeAllRanges();
          if (start > end) {
            selection.addRange(range);
            selection.extend(endMarker.node, endMarker.offset);
          } else {
            range.setEnd(endMarker.node, endMarker.offset);
            selection.addRange(range);
          }
        }
      }
      function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
      }
      function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) {
          return false;
        } else if (outerNode === innerNode) {
          return true;
        } else if (isTextNode(outerNode)) {
          return false;
        } else if (isTextNode(innerNode)) {
          return containsNode(outerNode, innerNode.parentNode);
        } else if ("contains" in outerNode) {
          return outerNode.contains(innerNode);
        } else if (outerNode.compareDocumentPosition) {
          return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        } else {
          return false;
        }
      }
      function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
      }
      function isSameOriginFrame(iframe) {
        try {
          return typeof iframe.contentWindow.location.href === "string";
        } catch (err) {
          return false;
        }
      }
      function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while (element instanceof win.HTMLIFrameElement) {
          if (isSameOriginFrame(element)) {
            win = element.contentWindow;
          } else {
            return element;
          }
          element = getActiveElement(win.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
      }
      function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
          focusedElem,
          selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
      }
      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
          if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
            setSelection(priorFocusedElem, priorSelectionRange);
          }
          var ancestors = [];
          var ancestor = priorFocusedElem;
          while (ancestor = ancestor.parentNode) {
            if (ancestor.nodeType === ELEMENT_NODE) {
              ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
              });
            }
          }
          if (typeof priorFocusedElem.focus === "function") {
            priorFocusedElem.focus();
          }
          for (var i2 = 0; i2 < ancestors.length; i2++) {
            var info = ancestors[i2];
            info.element.scrollLeft = info.left;
            info.element.scrollTop = info.top;
          }
        }
      }
      function getSelection(input) {
        var selection;
        if ("selectionStart" in input) {
          selection = {
            start: input.selectionStart,
            end: input.selectionEnd
          };
        } else {
          selection = getOffsets(input);
        }
        return selection || {
          start: 0,
          end: 0
        };
      }
      function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === void 0) {
          end = start;
        }
        if ("selectionStart" in input) {
          input.selectionStart = start;
          input.selectionEnd = Math.min(end, input.value.length);
        } else {
          setOffsets(input, offsets);
        }
      }
      var skipSelectionChangeEvent = canUseDOM2 && "documentMode" in document && document.documentMode <= 11;
      function registerEvents$3() {
        registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
      }
      var activeElement$1 = null;
      var activeElementInst$1 = null;
      var lastSelection = null;
      var mouseDown = false;
      function getSelection$1(node) {
        if ("selectionStart" in node && hasSelectionCapabilities(node)) {
          return {
            start: node.selectionStart,
            end: node.selectionEnd
          };
        } else {
          var win = node.ownerDocument && node.ownerDocument.defaultView || window;
          var selection = win.getSelection();
          return {
            anchorNode: selection.anchorNode,
            anchorOffset: selection.anchorOffset,
            focusNode: selection.focusNode,
            focusOffset: selection.focusOffset
          };
        }
      }
      function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
      }
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
          return;
        }
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
          lastSelection = currentSelection;
          var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.target = activeElement$1;
          }
        }
      }
      function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch (domEventName) {
          case "focusin":
            if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
              activeElement$1 = targetNode;
              activeElementInst$1 = targetInst;
              lastSelection = null;
            }
            break;
          case "focusout":
            activeElement$1 = null;
            activeElementInst$1 = null;
            lastSelection = null;
            break;
          case "mousedown":
            mouseDown = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            mouseDown = false;
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            break;
          case "selectionchange":
            if (skipSelectionChangeEvent) {
              break;
            }
          case "keydown":
          case "keyup":
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
      }
      function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === void 0) {
          return;
        }
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch (domEventName) {
          case "keypress":
            if (getEventCharCode(nativeEvent) === 0) {
              return;
            }
          case "keydown":
          case "keyup":
            SyntheticEventCtor = SyntheticKeyboardEvent;
            break;
          case "focusin":
            reactEventType = "focus";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "focusout":
            reactEventType = "blur";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "beforeblur":
          case "afterblur":
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "click":
            if (nativeEvent.button === 2) {
              return;
            }
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            SyntheticEventCtor = SyntheticMouseEvent;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            SyntheticEventCtor = SyntheticDragEvent;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            SyntheticEventCtor = SyntheticTouchEvent;
            break;
          case ANIMATION_END:
          case ANIMATION_ITERATION:
          case ANIMATION_START:
            SyntheticEventCtor = SyntheticAnimationEvent;
            break;
          case TRANSITION_END:
            SyntheticEventCtor = SyntheticTransitionEvent;
            break;
          case "scroll":
            SyntheticEventCtor = SyntheticUIEvent;
            break;
          case "wheel":
            SyntheticEventCtor = SyntheticWheelEvent;
            break;
          case "copy":
          case "cut":
          case "paste":
            SyntheticEventCtor = SyntheticClipboardEvent;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            SyntheticEventCtor = SyntheticPointerEvent;
            break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        {
          var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
          var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
          if (_listeners.length > 0) {
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event: _event,
              listeners: _listeners
            });
          }
        }
      }
      registerSimpleEvents();
      registerEvents$2();
      registerEvents$1();
      registerEvents$3();
      registerEvents();
      function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
        if (shouldProcessPolyfillPlugins) {
          extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
      }
      var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
      var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
      function executeDispatch(event, listener, currentTarget) {
        var type = event.type || "unknown-event";
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
        event.currentTarget = null;
      }
      function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) {
          for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
            var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
          }
        } else {
          for (var _i = 0; _i < dispatchListeners.length; _i++) {
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
          }
        }
      }
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
          var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
          processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
        }
        rethrowCaughtError();
      }
      function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
          addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
          listenerSet.add(listenerSetKey);
        }
      }
      var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
      function listenToAllSupportedEvents(rootContainerElement) {
        {
          if (rootContainerElement[listeningMarker]) {
            return;
          }
          rootContainerElement[listeningMarker] = true;
          allNativeEvents.forEach(function(domEventName) {
            if (!nonDelegatedEvents.has(domEventName)) {
              listenToNativeEvent(domEventName, false, rootContainerElement, null);
            }
            listenToNativeEvent(domEventName, true, rootContainerElement, null);
          });
        }
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
        var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
        var target = rootContainerElement;
        if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
          target = rootContainerElement.ownerDocument;
        }
        if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
          if (domEventName !== "scroll") {
            return;
          }
          eventSystemFlags |= IS_NON_DELEGATED;
          target = targetElement;
        }
        var listenerSet = getEventListenerSet(target);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          listenerSet.add(listenerSetKey);
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
        var isPassiveListener = void 0;
        if (passiveBrowserEventsSupported) {
          if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
            isPassiveListener = true;
          }
        }
        targetContainer = targetContainer;
        if (isCapturePhaseListener) {
          if (isPassiveListener !== void 0) {
            addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            addEventCaptureListener(targetContainer, domEventName, listener);
          }
        } else {
          if (isPassiveListener !== void 0) {
            addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            addEventBubbleListener(targetContainer, domEventName, listener);
          }
        }
      }
      function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
          var targetContainerNode = targetContainer;
          if (targetInst !== null) {
            var node = targetInst;
            mainLoop:
              while (true) {
                if (node === null) {
                  return;
                }
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container !== null) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null) {
                      return;
                    }
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node = node.return;
              }
          }
        }
        batchedEventUpdates(function() {
          return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
      }
      function createDispatchListener(instance, listener, currentTarget) {
        return {
          instance,
          listener,
          currentTarget
        };
      }
      function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
        var captureName = reactName !== null ? reactName + "Capture" : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null;
        while (instance !== null) {
          var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
          if (tag === HostComponent && stateNode !== null) {
            lastHostComponent = stateNode;
            if (reactEventName !== null) {
              var listener = getListener(instance, reactEventName);
              if (listener != null) {
                listeners.push(createDispatchListener(instance, listener, lastHostComponent));
              }
            }
          }
          if (accumulateTargetOnly) {
            break;
          }
          instance = instance.return;
        }
        return listeners;
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + "Capture";
        var listeners = [];
        var instance = targetFiber;
        while (instance !== null) {
          var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            var captureListener = getListener(instance, captureName);
            if (captureListener != null) {
              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            }
            var bubbleListener = getListener(instance, reactName);
            if (bubbleListener != null) {
              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
          instance = instance.return;
        }
        return listeners;
      }
      function getParent(inst) {
        if (inst === null) {
          return null;
        }
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) {
          return inst;
        }
        return null;
      }
      function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
          depthA++;
        }
        var depthB = 0;
        for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
          depthB++;
        }
        while (depthA - depthB > 0) {
          nodeA = getParent(nodeA);
          depthA--;
        }
        while (depthB - depthA > 0) {
          nodeB = getParent(nodeB);
          depthB--;
        }
        var depth = depthA;
        while (depth--) {
          if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
            return nodeA;
          }
          nodeA = getParent(nodeA);
          nodeB = getParent(nodeB);
        }
        return null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while (instance !== null) {
          if (instance === common) {
            break;
          }
          var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
          if (alternate !== null && alternate === common) {
            break;
          }
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            if (inCapturePhase) {
              var captureListener = getListener(instance, registrationName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
            } else if (!inCapturePhase) {
              var bubbleListener = getListener(instance, registrationName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
          }
          instance = instance.return;
        }
        if (listeners.length !== 0) {
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        }
        if (to !== null && enterEvent !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
        }
      }
      function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
      }
      var didWarnInvalidHydration = false;
      var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
      var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
      var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
      var AUTOFOCUS = "autoFocus";
      var CHILDREN = "children";
      var STYLE = "style";
      var HTML$1 = "__html";
      var HTML_NAMESPACE$1 = Namespaces.html;
      var warnedUnknownTags;
      var suppressHydrationWarning;
      var validatePropertiesInDevelopment;
      var warnForTextDifference;
      var warnForPropDifference;
      var warnForExtraAttributes;
      var warnForInvalidEventListener;
      var canDiffStyleForHydrationWarning;
      var normalizeMarkupForTextOrAttribute;
      var normalizeHTML;
      {
        warnedUnknownTags = {
          dialog: true,
          webview: true
        };
        validatePropertiesInDevelopment = function(type, props) {
          validateProperties(type, props);
          validateProperties$1(type, props);
          validateProperties$2(type, props, {
            registrationNameDependencies,
            possibleRegistrationNames
          });
        };
        canDiffStyleForHydrationWarning = canUseDOM2 && !document.documentMode;
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        normalizeMarkupForTextOrAttribute = function(markup) {
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        };
        warnForTextDifference = function(serverText, clientText) {
          if (didWarnInvalidHydration) {
            return;
          }
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
        };
        warnForPropDifference = function(propName, serverValue, clientValue) {
          if (didWarnInvalidHydration) {
            return;
          }
          var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
          var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
          if (normalizedServerValue === normalizedClientValue) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
        };
        warnForExtraAttributes = function(attributeNames) {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          var names = [];
          attributeNames.forEach(function(name) {
            names.push(name);
          });
          error("Extra attributes from the server: %s", names);
        };
        warnForInvalidEventListener = function(registrationName, listener) {
          if (listener === false) {
            error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
          } else {
            error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
          }
        };
        normalizeHTML = function(parent, html) {
          var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
          testElement.innerHTML = html;
          return testElement.innerHTML;
        };
      }
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function noop2() {
      }
      function trapClickOnNonInteractiveElement(node) {
        node.onclick = noop2;
      }
      function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for (var propKey in nextProps) {
          if (!nextProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = nextProps[propKey];
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            setValueForStyles(domElement, nextProp);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
            if (nextHtml != null) {
              setInnerHTML(domElement, nextHtml);
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              var canSetTextContent = tag !== "textarea" || nextProp !== "";
              if (canSetTextContent) {
                setTextContent(domElement, nextProp);
              }
            } else if (typeof nextProp === "number") {
              setTextContent(domElement, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (nextProp != null) {
            setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
          }
        }
      }
      function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
          var propKey = updatePayload[i2];
          var propValue = updatePayload[i2 + 1];
          if (propKey === STYLE) {
            setValueForStyles(domElement, propValue);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            setInnerHTML(domElement, propValue);
          } else if (propKey === CHILDREN) {
            setTextContent(domElement, propValue);
          } else {
            setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
          }
        }
      }
      function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag;
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE$1) {
          namespaceURI = getIntrinsicNamespace(type);
        }
        if (namespaceURI === HTML_NAMESPACE$1) {
          {
            isCustomComponentTag = isCustomComponent(type, props);
            if (!isCustomComponentTag && type !== type.toLowerCase()) {
              error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            }
          }
          if (type === "script") {
            var div = ownerDocument.createElement("div");
            div.innerHTML = "<script></script>";
            var firstChild = div.firstChild;
            domElement = div.removeChild(firstChild);
          } else if (typeof props.is === "string") {
            domElement = ownerDocument.createElement(type, {
              is: props.is
            });
          } else {
            domElement = ownerDocument.createElement(type);
            if (type === "select") {
              var node = domElement;
              if (props.multiple) {
                node.multiple = true;
              } else if (props.size) {
                node.size = props.size;
              }
            }
          }
        } else {
          domElement = ownerDocument.createElementNS(namespaceURI, type);
        }
        {
          if (namespaceURI === HTML_NAMESPACE$1) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
              warnedUnknownTags[type] = true;
              error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
          }
        }
        return domElement;
      }
      function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
      }
      function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        {
          validatePropertiesInDevelopment(tag, rawProps);
        }
        var props;
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            props = rawProps;
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "video":
          case "audio":
            for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
              listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
            }
            props = rawProps;
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            props = rawProps;
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            props = rawProps;
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            props = getHostProps(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            props = getHostProps$1(domElement, rawProps);
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            props = getHostProps$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            props = getHostProps$3(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          default:
            props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch (tag) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, false);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "option":
            postMountWrapper$1(domElement, rawProps);
            break;
          case "select":
            postMountWrapper$2(domElement, rawProps);
            break;
          default:
            if (typeof props.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
      }
      function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        {
          validatePropertiesInDevelopment(tag, nextRawProps);
        }
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch (tag) {
          case "input":
            lastProps = getHostProps(domElement, lastRawProps);
            nextProps = getHostProps(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "option":
            lastProps = getHostProps$1(domElement, lastRawProps);
            nextProps = getHostProps$1(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "select":
            lastProps = getHostProps$2(domElement, lastRawProps);
            nextProps = getHostProps$2(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "textarea":
            lastProps = getHostProps$3(domElement, lastRawProps);
            nextProps = getHostProps$3(domElement, nextRawProps);
            updatePayload = [];
            break;
          default:
            lastProps = lastRawProps;
            nextProps = nextRawProps;
            if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for (propKey in lastProps) {
          if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
            continue;
          }
          if (propKey === STYLE) {
            var lastStyle = lastProps[propKey];
            for (styleName in lastStyle) {
              if (lastStyle.hasOwnProperty(styleName)) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = "";
              }
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
            ;
          else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (!updatePayload) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, null);
          }
        }
        for (propKey in nextProps) {
          var nextProp = nextProps[propKey];
          var lastProp = lastProps != null ? lastProps[propKey] : void 0;
          if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
            continue;
          }
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            if (lastProp) {
              for (styleName in lastProp) {
                if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
              for (styleName in nextProp) {
                if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = nextProp[styleName];
                }
              }
            } else {
              if (!styleUpdates) {
                if (!updatePayload) {
                  updatePayload = [];
                }
                updatePayload.push(propKey, styleUpdates);
              }
              styleUpdates = nextProp;
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
            var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
            if (nextHtml != null) {
              if (lastHtml !== nextHtml) {
                (updatePayload = updatePayload || []).push(propKey, nextHtml);
              }
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string" || typeof nextProp === "number") {
              (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
            if (!updatePayload && lastProp !== nextProp) {
              updatePayload = [];
            }
          } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
            nextProp.toString();
          } else {
            (updatePayload = updatePayload || []).push(propKey, nextProp);
          }
        }
        if (styleUpdates) {
          {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
          }
          (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
      }
      function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
          updateChecked(domElement, nextRawProps);
        }
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
        switch (tag) {
          case "input":
            updateWrapper(domElement, nextRawProps);
            break;
          case "textarea":
            updateWrapper$1(domElement, nextRawProps);
            break;
          case "select":
            postUpdateWrapper(domElement, nextRawProps);
            break;
        }
      }
      function getPossibleStandardName(propName) {
        {
          var lowerCasedName = propName.toLowerCase();
          if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            return null;
          }
          return possibleStandardNames[lowerCasedName] || null;
        }
      }
      function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
        var isCustomComponentTag;
        var extraAttributeNames;
        {
          suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
          isCustomComponentTag = isCustomComponent(tag, rawProps);
          validatePropertiesInDevelopment(tag, rawProps);
        }
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
              listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
            }
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
        }
        assertValidProps(tag, rawProps);
        {
          extraAttributeNames = new Set();
          var attributes = domElement.attributes;
          for (var _i = 0; _i < attributes.length; _i++) {
            var name = attributes[_i].name.toLowerCase();
            switch (name) {
              case "data-reactroot":
                break;
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributeNames.add(attributes[_i].name);
            }
          }
        }
        var updatePayload = null;
        for (var propKey in rawProps) {
          if (!rawProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = rawProps[propKey];
          if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              if (domElement.textContent !== nextProp) {
                if (!suppressHydrationWarning) {
                  warnForTextDifference(domElement.textContent, nextProp);
                }
                updatePayload = [CHILDREN, nextProp];
              }
            } else if (typeof nextProp === "number") {
              if (domElement.textContent !== "" + nextProp) {
                if (!suppressHydrationWarning) {
                  warnForTextDifference(domElement.textContent, nextProp);
                }
                updatePayload = [CHILDREN, "" + nextProp];
              }
            }
          } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (typeof isCustomComponentTag === "boolean") {
            var serverValue = void 0;
            var propertyInfo = getPropertyInfo(propKey);
            if (suppressHydrationWarning)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
              ;
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var serverHTML = domElement.innerHTML;
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                var expectedHTML = normalizeHTML(domElement, nextHtml);
                if (expectedHTML !== serverHTML) {
                  warnForPropDifference(propKey, serverHTML, expectedHTML);
                }
              }
            } else if (propKey === STYLE) {
              extraAttributeNames.delete(propKey);
              if (canDiffStyleForHydrationWarning) {
                var expectedStyle = createDangerousStringForStyles(nextProp);
                serverValue = domElement.getAttribute("style");
                if (expectedStyle !== serverValue) {
                  warnForPropDifference(propKey, serverValue, expectedStyle);
                }
              }
            } else if (isCustomComponentTag) {
              extraAttributeNames.delete(propKey.toLowerCase());
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
              if (nextProp !== serverValue) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
              var isMismatchDueToBadCasing = false;
              if (propertyInfo !== null) {
                extraAttributeNames.delete(propertyInfo.attributeName);
                serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
              } else {
                var ownNamespace = parentNamespace;
                if (ownNamespace === HTML_NAMESPACE$1) {
                  ownNamespace = getIntrinsicNamespace(tag);
                }
                if (ownNamespace === HTML_NAMESPACE$1) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                } else {
                  var standardName = getPossibleStandardName(propKey);
                  if (standardName !== null && standardName !== propKey) {
                    isMismatchDueToBadCasing = true;
                    extraAttributeNames.delete(standardName);
                  }
                  extraAttributeNames.delete(propKey);
                }
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
              }
              if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            }
          }
        }
        {
          if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
            warnForExtraAttributes(extraAttributeNames);
          }
        }
        switch (tag) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, true);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "select":
          case "option":
            break;
          default:
            if (typeof rawProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        return updatePayload;
      }
      function diffHydratedText(textNode, text) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
      }
      function warnForUnmatchedText(textNode, text) {
        {
          warnForTextDifference(textNode.nodeValue, text);
        }
      }
      function warnForDeletedHydratableElement(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
        }
      }
      function warnForDeletedHydratableText(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedElement(parentNode, tag, props) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedText(parentNode, text) {
        {
          if (text === "") {
            return;
          }
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
        }
      }
      function restoreControlledState$3(domElement, tag, props) {
        switch (tag) {
          case "input":
            restoreControlledState(domElement, props);
            return;
          case "textarea":
            restoreControlledState$2(domElement, props);
            return;
          case "select":
            restoreControlledState$1(domElement, props);
            return;
        }
      }
      var validateDOMNesting = function() {
      };
      var updatedAncestorInfo = function() {
      };
      {
        var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
        var inScopeTags = [
          "applet",
          "caption",
          "html",
          "table",
          "td",
          "th",
          "marquee",
          "object",
          "template",
          "foreignObject",
          "desc",
          "title"
        ];
        var buttonScopeTags = inScopeTags.concat(["button"]);
        var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
        var emptyAncestorInfo = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null
        };
        updatedAncestorInfo = function(oldInfo, tag) {
          var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
          var info = {
            tag
          };
          if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
          }
          if (buttonScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.pTagInButtonScope = null;
          }
          if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
          }
          ancestorInfo.current = info;
          if (tag === "form") {
            ancestorInfo.formTag = info;
          }
          if (tag === "a") {
            ancestorInfo.aTagInScope = info;
          }
          if (tag === "button") {
            ancestorInfo.buttonTagInScope = info;
          }
          if (tag === "nobr") {
            ancestorInfo.nobrTagInScope = info;
          }
          if (tag === "p") {
            ancestorInfo.pTagInButtonScope = info;
          }
          if (tag === "li") {
            ancestorInfo.listItemTagAutoclosing = info;
          }
          if (tag === "dd" || tag === "dt") {
            ancestorInfo.dlItemTagAutoclosing = info;
          }
          return ancestorInfo;
        };
        var isTagValidWithParent = function(tag, parentTag) {
          switch (parentTag) {
            case "select":
              return tag === "option" || tag === "optgroup" || tag === "#text";
            case "optgroup":
              return tag === "option" || tag === "#text";
            case "option":
              return tag === "#text";
            case "tr":
              return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
            case "tbody":
            case "thead":
            case "tfoot":
              return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
            case "colgroup":
              return tag === "col" || tag === "template";
            case "table":
              return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
            case "head":
              return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
            case "html":
              return tag === "head" || tag === "body" || tag === "frameset";
            case "frameset":
              return tag === "frame";
            case "#document":
              return tag === "html";
          }
          switch (tag) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
              return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return parentTag == null;
          }
          return true;
        };
        var findInvalidAncestorForTag = function(tag, ancestorInfo) {
          switch (tag) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        };
        var didWarn$1 = {};
        validateDOMNesting = function(childTag, childText, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo;
          var parentInfo = ancestorInfo.current;
          var parentTag = parentInfo && parentInfo.tag;
          if (childText != null) {
            if (childTag != null) {
              error("validateDOMNesting: when childText is passed, childTag should be null");
            }
            childTag = "#text";
          }
          var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
          var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
          var invalidParentOrAncestor = invalidParent || invalidAncestor;
          if (!invalidParentOrAncestor) {
            return;
          }
          var ancestorTag = invalidParentOrAncestor.tag;
          var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
          if (didWarn$1[warnKey]) {
            return;
          }
          didWarn$1[warnKey] = true;
          var tagDisplayName = childTag;
          var whitespaceInfo = "";
          if (childTag === "#text") {
            if (/\S/.test(childText)) {
              tagDisplayName = "Text nodes";
            } else {
              tagDisplayName = "Whitespace text nodes";
              whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
          } else {
            tagDisplayName = "<" + childTag + ">";
          }
          if (invalidParent) {
            var info = "";
            if (ancestorTag === "table" && childTag === "tr") {
              info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            }
            error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
          } else {
            error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
          }
        };
      }
      var SUPPRESS_HYDRATION_WARNING$1;
      {
        SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
      }
      var SUSPENSE_START_DATA = "$";
      var SUSPENSE_END_DATA = "/$";
      var SUSPENSE_PENDING_START_DATA = "$?";
      var SUSPENSE_FALLBACK_START_DATA = "$!";
      var STYLE$1 = "style";
      var eventsEnabled = null;
      var selectionInformation = null;
      function shouldAutoFocusHostComponent(type, props) {
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            return !!props.autoFocus;
        }
        return false;
      }
      function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch (nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
            var root3 = rootContainerInstance.documentElement;
            namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
            break;
          }
          default: {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container.namespaceURI || null;
            type = container.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
        }
        {
          var validatedTag = type.toLowerCase();
          var ancestorInfo = updatedAncestorInfo(null, validatedTag);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        {
          var parentHostContextDev = parentHostContext;
          var namespace = getChildNamespace(parentHostContextDev.namespace, type);
          var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getPublicInstance(instance) {
        return instance;
      }
      function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
      }
      function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
      }
      function createInstance2(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          validateDOMNesting(type, null, hostContextDev.ancestorInfo);
          if (typeof props.children === "string" || typeof props.children === "number") {
            var string = "" + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
          parentNamespace = hostContextDev.namespace;
        }
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
      }
      function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        return shouldAutoFocusHostComponent(type, props);
      }
      function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        {
          var hostContextDev = hostContext;
          if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
            var string = "" + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
        }
        return diffProperties(domElement, type, oldProps, newProps);
      }
      function shouldSetTextContent(type, props) {
        return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
      }
      function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
          var hostContextDev = hostContext;
          validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        }
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
      }
      var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
      var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
      var noTimeout = -1;
      function commitMount(domElement, type, newProps, internalInstanceHandle) {
        if (shouldAutoFocusHostComponent(type, newProps)) {
          domElement.focus();
        }
      }
      function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        updateFiberProps(domElement, newProps);
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, "");
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      }
      function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
          parentNode = container.parentNode;
          parentNode.insertBefore(child, container);
        } else {
          parentNode = container;
          parentNode.appendChild(child);
        }
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
          trapClickOnNonInteractiveElement(parentNode);
        }
      }
      function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
      }
      function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.insertBefore(child, beforeChild);
        } else {
          container.insertBefore(child, beforeChild);
        }
      }
      function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
      }
      function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.removeChild(child);
        } else {
          container.removeChild(child);
        }
      }
      function hideInstance(instance) {
        instance = instance;
        var style2 = instance.style;
        if (typeof style2.setProperty === "function") {
          style2.setProperty("display", "none", "important");
        } else {
          style2.display = "none";
        }
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
      }
      function unhideInstance(instance, props) {
        instance = instance;
        var styleProp = props[STYLE$1];
        var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance.style.display = dangerousStyleValue("display", display);
      }
      function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
      }
      function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) {
          container.textContent = "";
        } else if (container.nodeType === DOCUMENT_NODE) {
          var body = container.body;
          if (body != null) {
            body.textContent = "";
          }
        }
      }
      function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
          return null;
        }
        return instance;
      }
      function canHydrateTextInstance(instance, text) {
        if (text === "" || instance.nodeType !== TEXT_NODE) {
          return null;
        }
        return instance;
      }
      function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
      }
      function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
      }
      function getNextHydratable(node) {
        for (; node != null; node = node.nextSibling) {
          var nodeType = node.nodeType;
          if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
            break;
          }
        }
        return node;
      }
      function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
      }
      function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
      }
      function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, instance);
        updateFiberProps(instance, props);
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          parentNamespace = hostContextDev.namespace;
        }
        return diffHydratedProperties(instance, type, props, parentNamespace);
      }
      function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling;
        var depth = 0;
        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                return getNextHydratableSibling(node);
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              depth++;
            }
          }
          node = node.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling;
        var depth = 0;
        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              if (depth === 0) {
                return node;
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_END_DATA) {
              depth++;
            }
          }
          node = node.previousSibling;
        }
        return null;
      }
      function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
      }
      function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
        {
          warnForUnmatchedText(textInstance, text);
        }
      }
      function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForUnmatchedText(textInstance, text);
        }
      }
      function didNotHydrateContainerInstance(parentContainer, instance) {
        {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentContainer, instance);
          } else if (instance.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentContainer, instance);
          }
        }
      }
      function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentInstance, instance);
          } else if (instance.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentInstance, instance);
          }
        }
      }
      function didNotFindHydratableContainerInstance(parentContainer, type, props) {
        {
          warnForInsertedHydratedElement(parentContainer, type);
        }
      }
      function didNotFindHydratableContainerTextInstance(parentContainer, text) {
        {
          warnForInsertedHydratedText(parentContainer, text);
        }
      }
      function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForInsertedHydratedElement(parentInstance, type);
        }
      }
      function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForInsertedHydratedText(parentInstance, text);
        }
      }
      function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
          ;
      }
      var clientId = 0;
      function makeClientIdInDEV(warnOnAccessInDEV) {
        var id = "r:" + (clientId++).toString(36);
        return {
          toString: function() {
            warnOnAccessInDEV();
            return id;
          },
          valueOf: function() {
            warnOnAccessInDEV();
            return id;
          }
        };
      }
      function isOpaqueHydratingObject(value) {
        return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
      }
      function makeOpaqueHydratingObject(attemptToReadValue) {
        return {
          $$typeof: REACT_OPAQUE_ID_TYPE,
          toString: attemptToReadValue,
          valueOf: attemptToReadValue
        };
      }
      function preparePortalMount(portalInstance) {
        {
          listenToAllSupportedEvents(portalInstance);
        }
      }
      var randomKey = Math.random().toString(36).slice(2);
      var internalInstanceKey = "__reactFiber$" + randomKey;
      var internalPropsKey = "__reactProps$" + randomKey;
      var internalContainerInstanceKey = "__reactContainer$" + randomKey;
      var internalEventHandlersKey = "__reactEvents$" + randomKey;
      function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
      }
      function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
      }
      function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
      }
      function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) {
          return targetInst;
        }
        var parentNode = targetNode.parentNode;
        while (parentNode) {
          targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
          if (targetInst) {
            var alternate = targetInst.alternate;
            if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
              var suspenseInstance = getParentSuspenseInstance(targetNode);
              while (suspenseInstance !== null) {
                var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                if (targetSuspenseInst) {
                  return targetSuspenseInst;
                }
                suspenseInstance = getParentSuspenseInstance(suspenseInstance);
              }
            }
            return targetInst;
          }
          targetNode = parentNode;
          parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
          if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
            return inst;
          } else {
            return null;
          }
        }
        return null;
      }
      function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          return inst.stateNode;
        }
        {
          {
            throw Error("getNodeFromInstance: Invalid argument.");
          }
        }
      }
      function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
      }
      function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
      }
      function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === void 0) {
          elementListenerSet = node[internalEventHandlersKey] = new Set();
        }
        return elementListenerSet;
      }
      var loggedTypeFailures2 = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes2(typeSpecs, values, location, componentName, element) {
        {
          var has3 = Function.call.bind(Object.prototype.hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has3(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures2)) {
                loggedTypeFailures2[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var valueStack = [];
      var fiberStack;
      {
        fiberStack = [];
      }
      var index2 = -1;
      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }
      function pop(cursor, fiber) {
        if (index2 < 0) {
          {
            error("Unexpected pop.");
          }
          return;
        }
        {
          if (fiber !== fiberStack[index2]) {
            error("Unexpected Fiber popped.");
          }
        }
        cursor.current = valueStack[index2];
        valueStack[index2] = null;
        {
          fiberStack[index2] = null;
        }
        index2--;
      }
      function push(cursor, value, fiber) {
        index2++;
        valueStack[index2] = cursor.current;
        {
          fiberStack[index2] = fiber;
        }
        cursor.current = value;
      }
      var warnedAboutMissingGetChildContext;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var emptyContextObject = {};
      {
        Object.freeze(emptyContextObject);
      }
      var contextStackCursor = createCursor(emptyContextObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyContextObject;
      function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
        {
          if (didPushOwnContextIfProvider && isContextProvider(Component)) {
            return previousContext;
          }
          return contextStackCursor.current;
        }
      }
      function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress2.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }
      function getMaskedContext(workInProgress2, unmaskedContext) {
        {
          var type = workInProgress2.type;
          var contextTypes = type.contextTypes;
          if (!contextTypes) {
            return emptyContextObject;
          }
          var instance = workInProgress2.stateNode;
          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
          }
          var context2 = {};
          for (var key2 in contextTypes) {
            context2[key2] = unmaskedContext[key2];
          }
          {
            var name = getComponentName(type) || "Unknown";
            checkPropTypes2(contextTypes, context2, "context", name);
          }
          if (instance) {
            cacheContext(workInProgress2, unmaskedContext, context2);
          }
          return context2;
        }
      }
      function hasContextChanged() {
        {
          return didPerformWorkStackCursor.current;
        }
      }
      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes !== null && childContextTypes !== void 0;
        }
      }
      function popContext(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function popTopLevelContextObject(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function pushTopLevelContextObject(fiber, context2, didChange) {
        {
          if (!(contextStackCursor.current === emptyContextObject)) {
            {
              throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          push(contextStackCursor, context2, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        }
      }
      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode;
          var childContextTypes = type.childContextTypes;
          if (typeof instance.getChildContext !== "function") {
            {
              var componentName = getComponentName(type) || "Unknown";
              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext) {
            if (!(contextKey in childContextTypes)) {
              {
                throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
          }
          {
            var name = getComponentName(type) || "Unknown";
            checkPropTypes2(childContextTypes, childContext, "child context", name);
          }
          return _assign({}, parentContext, childContext);
        }
      }
      function pushContextProvider(workInProgress2) {
        {
          var instance = workInProgress2.stateNode;
          var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
          return true;
        }
      }
      function invalidateContextProvider(workInProgress2, type, didChange) {
        {
          var instance = workInProgress2.stateNode;
          if (!instance) {
            {
              throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (didChange) {
            var mergedContext = processChildContext(workInProgress2, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress2);
            pop(contextStackCursor, workInProgress2);
            push(contextStackCursor, mergedContext, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          } else {
            pop(didPerformWorkStackCursor, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          }
        }
      }
      function findCurrentUnmaskedContext(fiber) {
        {
          if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
            {
              throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var node = fiber;
          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;
              case ClassComponent: {
                var Component = node.type;
                if (isContextProvider(Component)) {
                  return node.stateNode.__reactInternalMemoizedMergedChildContext;
                }
                break;
              }
            }
            node = node.return;
          } while (node !== null);
          {
            {
              throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
      }
      var LegacyRoot = 0;
      var BlockingRoot = 1;
      var ConcurrentRoot = 2;
      var rendererID = null;
      var injectedHook = null;
      var hasLoggedError = false;
      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) {
          return true;
        }
        if (!hook.supportsFiber) {
          {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
          }
          return true;
        }
        try {
          rendererID = hook.inject(internals);
          injectedHook = hook;
        } catch (err) {
          {
            error("React instrumentation encountered an error: %s.", err);
          }
        }
        return true;
      }
      function onScheduleRoot(root3, children) {
        {
          if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
            try {
              injectedHook.onScheduleFiberRoot(rendererID, root3, children);
            } catch (err) {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitRoot(root3, priorityLevel) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
          try {
            var didError = (root3.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
              injectedHook.onCommitFiberRoot(rendererID, root3, priorityLevel, didError);
            }
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
      {
        if (!(tracing$1.__interactionsRef != null && tracing$1.__interactionsRef.current != null)) {
          {
            throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
          }
        }
      }
      var fakeCallbackNode = {};
      var ImmediatePriority$1 = 99;
      var UserBlockingPriority$2 = 98;
      var NormalPriority$1 = 97;
      var LowPriority$1 = 96;
      var IdlePriority$1 = 95;
      var NoPriority$1 = 90;
      var shouldYield = Scheduler_shouldYield;
      var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
      };
      var syncQueue = null;
      var immediateQueueCallbackNode = null;
      var isFlushingSyncQueue = false;
      var initialTimeMs$1 = Scheduler_now$1();
      var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
        return Scheduler_now$1() - initialTimeMs$1;
      };
      function getCurrentPriorityLevel() {
        switch (Scheduler_getCurrentPriorityLevel()) {
          case Scheduler_ImmediatePriority:
            return ImmediatePriority$1;
          case Scheduler_UserBlockingPriority:
            return UserBlockingPriority$2;
          case Scheduler_NormalPriority:
            return NormalPriority$1;
          case Scheduler_LowPriority:
            return LowPriority$1;
          case Scheduler_IdlePriority:
            return IdlePriority$1;
          default: {
            {
              throw Error("Unknown priority level.");
            }
          }
        }
      }
      function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch (reactPriorityLevel) {
          case ImmediatePriority$1:
            return Scheduler_ImmediatePriority;
          case UserBlockingPriority$2:
            return Scheduler_UserBlockingPriority;
          case NormalPriority$1:
            return Scheduler_NormalPriority;
          case LowPriority$1:
            return Scheduler_LowPriority;
          case IdlePriority$1:
            return Scheduler_IdlePriority;
          default: {
            {
              throw Error("Unknown priority level.");
            }
          }
        }
      }
      function runWithPriority$1(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
      }
      function scheduleCallback(reactPriorityLevel, callback, options2) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options2);
      }
      function scheduleSyncCallback(callback) {
        if (syncQueue === null) {
          syncQueue = [callback];
          immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else {
          syncQueue.push(callback);
        }
        return fakeCallbackNode;
      }
      function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) {
          Scheduler_cancelCallback(callbackNode);
        }
      }
      function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
          var node = immediateQueueCallbackNode;
          immediateQueueCallbackNode = null;
          Scheduler_cancelCallback(node);
        }
        flushSyncCallbackQueueImpl();
      }
      function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = true;
          var i2 = 0;
          {
            try {
              var _isSync2 = true;
              var _queue = syncQueue;
              runWithPriority$1(ImmediatePriority$1, function() {
                for (; i2 < _queue.length; i2++) {
                  var callback = _queue[i2];
                  do {
                    callback = callback(_isSync2);
                  } while (callback !== null);
                }
              });
              syncQueue = null;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i2 + 1);
              }
              Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
              throw error2;
            } finally {
              isFlushingSyncQueue = false;
            }
          }
        }
      }
      var ReactVersion = "17.0.2";
      var NoMode = 0;
      var StrictMode = 1;
      var BlockingMode = 2;
      var ConcurrentMode = 4;
      var ProfileMode = 8;
      var DebugTracingMode = 16;
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
      var NoTransition = 0;
      function requestCurrentTransition() {
        return ReactCurrentBatchConfig.transition;
      }
      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
      };
      {
        var findStrictRoot = function(fiber) {
          var maybeStrictRoot = null;
          var node = fiber;
          while (node !== null) {
            if (node.mode & StrictMode) {
              maybeStrictRoot = node;
            }
            node = node.return;
          }
          return maybeStrictRoot;
        };
        var setToSortedString = function(set2) {
          var array = [];
          set2.forEach(function(value) {
            array.push(value);
          });
          return array.sort().join(", ");
        };
        var pendingComponentWillMountWarnings = [];
        var pendingUNSAFE_ComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUNSAFE_ComponentWillUpdateWarnings = [];
        var didWarnAboutUnsafeLifecycles = new Set();
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }
          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }
          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
          }
          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }
          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
          }
          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }
          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = new Set();
          if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
              componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
          }
          var UNSAFE_componentWillMountUniqueNames = new Set();
          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
          }
          var componentWillReceivePropsUniqueNames = new Set();
          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
          }
          var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          }
          var componentWillUpdateUniqueNames = new Set();
          if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
              componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
          }
          var UNSAFE_componentWillUpdateUniqueNames = new Set();
          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
          }
          if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
          }
          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
          }
          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
          }
          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
          }
          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
          }
          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
          }
        };
        var pendingLegacyContextWarning = new Map();
        var didWarnAboutLegacyContext = new Set();
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
          var strictRoot = findStrictRoot(fiber);
          if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
          }
          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return;
          }
          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
            if (warningsForRoot === void 0) {
              warningsForRoot = [];
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) {
              return;
            }
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
              uniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
              setCurrentFiber(firstFiber);
              error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally {
              resetCurrentFiber();
            }
          });
        };
        ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = new Map();
        };
      }
      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = _assign({}, baseProps);
          var defaultProps = Component.defaultProps;
          for (var propName in defaultProps) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps[propName];
            }
          }
          return props;
        }
        return baseProps;
      }
      var MAX_SIGNED_31_BIT_INT2 = 1073741823;
      var valueCursor = createCursor(null);
      var rendererSigil;
      {
        rendererSigil = {};
      }
      var currentlyRenderingFiber = null;
      var lastContextDependency = null;
      var lastContextWithAllBitsObserved = null;
      var isDisallowedContextReadInDEV = false;
      function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true;
        }
      }
      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function pushProvider(providerFiber, nextValue) {
        var context2 = providerFiber.type._context;
        {
          push(valueCursor, context2._currentValue, providerFiber);
          context2._currentValue = nextValue;
          {
            if (context2._currentRenderer !== void 0 && context2._currentRenderer !== null && context2._currentRenderer !== rendererSigil) {
              error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
            }
            context2._currentRenderer = rendererSigil;
          }
        }
      }
      function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context2 = providerFiber.type._context;
        {
          context2._currentValue = currentValue;
        }
      }
      function calculateChangedBits(context2, newValue, oldValue) {
        if (objectIs2(oldValue, newValue)) {
          return 0;
        } else {
          var changedBits = typeof context2._calculateChangedBits === "function" ? context2._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT2;
          {
            if ((changedBits & MAX_SIGNED_31_BIT_INT2) !== changedBits) {
              error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
            }
          }
          return changedBits | 0;
        }
      }
      function scheduleWorkOnParentPath(parent, renderLanes2) {
        var node = parent;
        while (node !== null) {
          var alternate = node.alternate;
          if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
            node.childLanes = mergeLanes(node.childLanes, renderLanes2);
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
          } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
          } else {
            break;
          }
          node = node.return;
        }
      }
      function propagateContextChange(workInProgress2, context2, changedBits, renderLanes2) {
        var fiber = workInProgress2.child;
        if (fiber !== null) {
          fiber.return = workInProgress2;
        }
        while (fiber !== null) {
          var nextFiber = void 0;
          var list = fiber.dependencies;
          if (list !== null) {
            nextFiber = fiber.child;
            var dependency = list.firstContext;
            while (dependency !== null) {
              if (dependency.context === context2 && (dependency.observedBits & changedBits) !== 0) {
                if (fiber.tag === ClassComponent) {
                  var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                  update.tag = ForceUpdate;
                  enqueueUpdate(fiber, update);
                }
                fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                }
                scheduleWorkOnParentPath(fiber.return, renderLanes2);
                list.lanes = mergeLanes(list.lanes, renderLanes2);
                break;
              }
              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider) {
            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
          } else {
            nextFiber = fiber.child;
          }
          if (nextFiber !== null) {
            nextFiber.return = fiber;
          } else {
            nextFiber = fiber;
            while (nextFiber !== null) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              var sibling = nextFiber.sibling;
              if (sibling !== null) {
                sibling.return = nextFiber.return;
                nextFiber = sibling;
                break;
              }
              nextFiber = nextFiber.return;
            }
          }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress2, renderLanes2) {
        currentlyRenderingFiber = workInProgress2;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress2.dependencies;
        if (dependencies !== null) {
          var firstContext = dependencies.firstContext;
          if (firstContext !== null) {
            if (includesSomeLane(dependencies.lanes, renderLanes2)) {
              markWorkInProgressReceivedUpdate();
            }
            dependencies.firstContext = null;
          }
        }
      }
      function readContext(context2, observedBits) {
        {
          if (isDisallowedContextReadInDEV) {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          }
        }
        if (lastContextWithAllBitsObserved === context2)
          ;
        else if (observedBits === false || observedBits === 0)
          ;
        else {
          var resolvedObservedBits;
          if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT2) {
            lastContextWithAllBitsObserved = context2;
            resolvedObservedBits = MAX_SIGNED_31_BIT_INT2;
          } else {
            resolvedObservedBits = observedBits;
          }
          var contextItem = {
            context: context2,
            observedBits: resolvedObservedBits,
            next: null
          };
          if (lastContextDependency === null) {
            if (!(currentlyRenderingFiber !== null)) {
              {
                throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            lastContextDependency = contextItem;
            currentlyRenderingFiber.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem,
              responders: null
            };
          } else {
            lastContextDependency = lastContextDependency.next = contextItem;
          }
        }
        return context2._currentValue;
      }
      var UpdateState = 0;
      var ReplaceState = 1;
      var ForceUpdate = 2;
      var CaptureUpdate = 3;
      var hasForceUpdate = false;
      var didWarnUpdateInsideUpdate;
      var currentlyProcessingQueue;
      {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
      }
      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null
          },
          effects: null
        };
        fiber.updateQueue = queue;
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        var queue = workInProgress2.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
          var clone2 = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = clone2;
        }
      }
      function createUpdate(eventTime, lane) {
        var update = {
          eventTime,
          lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        return update;
      }
      function enqueueUpdate(fiber, update) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return;
        }
        var sharedQueue = updateQueue.shared;
        var pending = sharedQueue.pending;
        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }
        sharedQueue.pending = update;
        {
          if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue;
        var current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var newFirst = null;
            var newLast = null;
            var firstBaseUpdate = queue.firstBaseUpdate;
            if (firstBaseUpdate !== null) {
              var update = firstBaseUpdate;
              do {
                var clone2 = {
                  eventTime: update.eventTime,
                  lane: update.lane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLast === null) {
                  newFirst = newLast = clone2;
                } else {
                  newLast.next = clone2;
                  newLast = clone2;
                }
                update = update.next;
              } while (update !== null);
              if (newLast === null) {
                newFirst = newLast = capturedUpdate;
              } else {
                newLast.next = capturedUpdate;
                newLast = capturedUpdate;
              }
            } else {
              newFirst = newLast = capturedUpdate;
            }
            queue = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = queue;
            return;
          }
        }
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) {
          queue.firstBaseUpdate = capturedUpdate;
        } else {
          lastBaseUpdate.next = capturedUpdate;
        }
        queue.lastBaseUpdate = capturedUpdate;
      }
      function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState: {
            var payload = update.payload;
            if (typeof payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              var nextState = payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    payload.call(instance, prevState, nextProps);
                  } finally {
                    reenableLogs();
                  }
                }
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            return payload;
          }
          case CaptureUpdate: {
            workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
          }
          case UpdateState: {
            var _payload = update.payload;
            var partialState;
            if (typeof _payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              partialState = _payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    _payload.call(instance, prevState, nextProps);
                  } finally {
                    reenableLogs();
                  }
                }
                exitDisallowedContextReadInDEV();
              }
            } else {
              partialState = _payload;
            }
            if (partialState === null || partialState === void 0) {
              return prevState;
            }
            return _assign({}, prevState, partialState);
          }
          case ForceUpdate: {
            hasForceUpdate = true;
            return prevState;
          }
        }
        return prevState;
      }
      function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
        var queue = workInProgress2.updateQueue;
        hasForceUpdate = false;
        {
          currentlyProcessingQueue = queue.shared;
        }
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate;
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue;
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null;
          if (lastBaseUpdate === null) {
            firstBaseUpdate = firstPendingUpdate;
          } else {
            lastBaseUpdate.next = firstPendingUpdate;
          }
          lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
            if (currentLastBaseUpdate !== lastBaseUpdate) {
              if (currentLastBaseUpdate === null) {
                currentQueue.firstBaseUpdate = firstPendingUpdate;
              } else {
                currentLastBaseUpdate.next = firstPendingUpdate;
              }
              currentQueue.lastBaseUpdate = lastPendingUpdate;
            }
          }
        }
        if (firstBaseUpdate !== null) {
          var newState = queue.baseState;
          var newLanes = NoLanes;
          var newBaseState = null;
          var newFirstBaseUpdate = null;
          var newLastBaseUpdate = null;
          var update = firstBaseUpdate;
          do {
            var updateLane = update.lane;
            var updateEventTime = update.eventTime;
            if (!isSubsetOfLanes(renderLanes2, updateLane)) {
              var clone2 = {
                eventTime: updateEventTime,
                lane: updateLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              if (newLastBaseUpdate === null) {
                newFirstBaseUpdate = newLastBaseUpdate = clone2;
                newBaseState = newState;
              } else {
                newLastBaseUpdate = newLastBaseUpdate.next = clone2;
              }
              newLanes = mergeLanes(newLanes, updateLane);
            } else {
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  eventTime: updateEventTime,
                  lane: NoLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLastBaseUpdate = newLastBaseUpdate.next = _clone;
              }
              newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
              var callback = update.callback;
              if (callback !== null) {
                workInProgress2.flags |= Callback;
                var effects = queue.effects;
                if (effects === null) {
                  queue.effects = [update];
                } else {
                  effects.push(update);
                }
              }
            }
            update = update.next;
            if (update === null) {
              pendingQueue = queue.shared.pending;
              if (pendingQueue === null) {
                break;
              } else {
                var _lastPendingUpdate = pendingQueue;
                var _firstPendingUpdate = _lastPendingUpdate.next;
                _lastPendingUpdate.next = null;
                update = _firstPendingUpdate;
                queue.lastBaseUpdate = _lastPendingUpdate;
                queue.shared.pending = null;
              }
            }
          } while (true);
          if (newLastBaseUpdate === null) {
            newBaseState = newState;
          }
          queue.baseState = newBaseState;
          queue.firstBaseUpdate = newFirstBaseUpdate;
          queue.lastBaseUpdate = newLastBaseUpdate;
          markSkippedUpdateLanes(newLanes);
          workInProgress2.lanes = newLanes;
          workInProgress2.memoizedState = newState;
        }
        {
          currentlyProcessingQueue = null;
        }
      }
      function callCallback(callback, context2) {
        if (!(typeof callback === "function")) {
          {
            throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
          }
        }
        callback.call(context2);
      }
      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }
      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) {
          for (var i2 = 0; i2 < effects.length; i2++) {
            var effect = effects[i2];
            var callback = effect.callback;
            if (callback !== null) {
              effect.callback = null;
              callCallback(callback, instance);
            }
          }
        }
      }
      var fakeInternalInstance = {};
      var isArray2 = Array.isArray;
      var emptyRefsObject = new React.Component().refs;
      var didWarnAboutStateAssignmentForComponent;
      var didWarnAboutUninitializedState;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
      var didWarnAboutLegacyLifecyclesAndDerivedState;
      var didWarnAboutUndefinedDerivedState;
      var warnOnUndefinedDerivedState;
      var warnOnInvalidCallback;
      var didWarnAboutDirectlyAssigningPropsToState;
      var didWarnAboutContextTypeAndContextTypes;
      var didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = new Set();
        didWarnAboutUninitializedState = new Set();
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
        didWarnAboutDirectlyAssigningPropsToState = new Set();
        didWarnAboutUndefinedDerivedState = new Set();
        didWarnAboutContextTypeAndContextTypes = new Set();
        didWarnAboutInvalidateContextType = new Set();
        var didWarnOnInvalidCallback = new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }
          var key2 = callerName + "_" + callback;
          if (!didWarnOnInvalidCallback.has(key2)) {
            didWarnOnInvalidCallback.add(key2);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        };
        warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentName(type) || "Component";
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName);
              error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
          }
        };
        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function() {
            {
              {
                throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            }
          }
        });
        Object.freeze(fakeInternalInstance);
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState;
        {
          if (workInProgress2.mode & StrictMode) {
            disableLogs();
            try {
              getDerivedStateFromProps(nextProps, prevState);
            } finally {
              reenableLogs();
            }
          }
        }
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
        workInProgress2.memoizedState = memoizedState;
        if (workInProgress2.lanes === NoLanes) {
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }
      var classComponentUpdater = {
        isMounted,
        enqueueSetState: function(inst, payload, callback) {
          var fiber = get2(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.payload = payload;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "setState");
            }
            update.callback = callback;
          }
          enqueueUpdate(fiber, update);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var fiber = get2(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ReplaceState;
          update.payload = payload;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            update.callback = callback;
          }
          enqueueUpdate(fiber, update);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueForceUpdate: function(inst, callback) {
          var fiber = get2(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ForceUpdate;
          if (callback !== void 0 && callback !== null) {
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            update.callback = callback;
          }
          enqueueUpdate(fiber, update);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress2.stateNode;
        if (typeof instance.shouldComponentUpdate === "function") {
          {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                instance.shouldComponentUpdate(newProps, newState, nextContext);
              } finally {
                reenableLogs();
              }
            }
          }
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          {
            if (shouldUpdate === void 0) {
              error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
            }
          }
          return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }
        return true;
      }
      function checkClassInstance(workInProgress2, ctor, newProps) {
        var instance = workInProgress2.stateNode;
        {
          var name = getComponentName(ctor) || "Component";
          var renderPresent = instance.render;
          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") {
              error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            } else {
              error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
            }
          }
          if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
            error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
          }
          if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
          }
          if (instance.propTypes) {
            error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
          }
          if (instance.contextType) {
            error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
          }
          {
            if (instance.contextTypes) {
              error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
            }
            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
            }
          }
          if (typeof instance.componentShouldUpdate === "function") {
            error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
            error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
          }
          if (typeof instance.componentDidUnmount === "function") {
            error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
          }
          if (typeof instance.componentDidReceiveProps === "function") {
            error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
          }
          if (typeof instance.componentWillRecieveProps === "function") {
            error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
          }
          if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
            error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          }
          var hasMutatedProps = instance.props !== newProps;
          if (instance.props !== void 0 && hasMutatedProps) {
            error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
          }
          if (instance.defaultProps) {
            error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
          }
          if (typeof instance.getDerivedStateFromProps === "function") {
            error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof instance.getDerivedStateFromError === "function") {
            error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof ctor.getSnapshotBeforeUpdate === "function") {
            error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          }
          var _state = instance.state;
          if (_state && (typeof _state !== "object" || isArray2(_state))) {
            error("%s.state: must be set to an object or null", name);
          }
          if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
            error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
          }
        }
      }
      function adoptClassInstance(workInProgress2, instance) {
        instance.updater = classComponentUpdater;
        workInProgress2.stateNode = instance;
        set(instance, workInProgress2);
        {
          instance._reactInternalInstance = fakeInternalInstance;
        }
      }
      function constructClassInstance(workInProgress2, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context2 = emptyContextObject;
        var contextType = ctor.contextType;
        {
          if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = "";
              if (contextType === void 0) {
                addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
              } else if (typeof contextType !== "object") {
                addendum = " However, it is set to a " + typeof contextType + ".";
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = " Did you accidentally pass the Context.Provider instead?";
              } else if (contextType._context !== void 0) {
                addendum = " Did you accidentally pass the Context.Consumer instead?";
              } else {
                addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
              }
              error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
            }
          }
        }
        if (typeof contextType === "object" && contextType !== null) {
          context2 = readContext(contextType);
        } else {
          unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
          context2 = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
        }
        {
          if (workInProgress2.mode & StrictMode) {
            disableLogs();
            try {
              new ctor(props, context2);
            } finally {
              reenableLogs();
            }
          }
        }
        var instance = new ctor(props, context2);
        var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
        adoptClassInstance(workInProgress2, instance);
        {
          if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentName(ctor) || "Component";
            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName);
              error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
            }
          }
          if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              foundWillMountName = "componentWillMount";
            } else if (typeof instance.UNSAFE_componentWillMount === "function") {
              foundWillMountName = "UNSAFE_componentWillMount";
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              foundWillReceivePropsName = "componentWillReceiveProps";
            } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              foundWillUpdateName = "componentWillUpdate";
            } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              foundWillUpdateName = "UNSAFE_componentWillUpdate";
            }
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentName(ctor) || "Component";
              var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
              }
            }
          }
        }
        if (isLegacyContextConsumer) {
          cacheContext(workInProgress2, unmaskedContext, context2);
        }
        return instance;
      }
      function callComponentWillMount(workInProgress2, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === "function") {
          instance.componentWillMount();
        }
        if (typeof instance.UNSAFE_componentWillMount === "function") {
          instance.UNSAFE_componentWillMount();
        }
        if (oldState !== instance.state) {
          {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === "function") {
          instance.componentWillReceiveProps(newProps, nextContext);
        }
        if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }
        if (instance.state !== oldState) {
          {
            var componentName = getComponentName(workInProgress2.type) || "Component";
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName);
              error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        {
          checkClassInstance(workInProgress2, ctor, newProps);
        }
        var instance = workInProgress2.stateNode;
        instance.props = newProps;
        instance.state = workInProgress2.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress2);
        var contextType = ctor.contextType;
        if (typeof contextType === "object" && contextType !== null) {
          instance.context = readContext(contextType);
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          instance.context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        {
          if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || "Component";
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName);
              error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
          }
          if (workInProgress2.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
          }
          {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
          }
        }
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        instance.state = workInProgress2.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          callComponentWillMount(workInProgress2, instance);
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof instance.componentDidMount === "function") {
          workInProgress2.flags |= Update;
        }
      }
      function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        var oldProps = workInProgress2.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.flags |= Update;
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
          }
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.flags |= Update;
          }
        } else {
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.flags |= Update;
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        cloneUpdateQueue(current2, workInProgress2);
        var unresolvedOldProps = workInProgress2.memoizedProps;
        var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress2.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
            if (typeof instance.componentWillUpdate === "function") {
              instance.componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
          }
          if (typeof instance.componentDidUpdate === "function") {
            workInProgress2.flags |= Update;
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            workInProgress2.flags |= Snapshot;
          }
        } else {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      var didWarnAboutMaps;
      var didWarnAboutGenerators;
      var didWarnAboutStringRefs;
      var ownerHasKeyUseWarning;
      var ownerHasFunctionTypeWarning;
      var warnForMissingKey = function(child, returnFiber) {
      };
      {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefs = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};
        warnForMissingKey = function(child, returnFiber) {
          if (child === null || typeof child !== "object") {
            return;
          }
          if (!child._store || child._store.validated || child.key != null) {
            return;
          }
          if (!(typeof child._store === "object")) {
            {
              throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          child._store.validated = true;
          var componentName = getComponentName(returnFiber.type) || "Component";
          if (ownerHasKeyUseWarning[componentName]) {
            return;
          }
          ownerHasKeyUseWarning[componentName] = true;
          error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
        };
      }
      var isArray$12 = Array.isArray;
      function coerceRef(returnFiber, current2, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (!didWarnAboutStringRefs[componentName]) {
                {
                  error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                }
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
          if (element._owner) {
            var owner = element._owner;
            var inst;
            if (owner) {
              var ownerFiber = owner;
              if (!(ownerFiber.tag === ClassComponent)) {
                {
                  throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
              }
              inst = ownerFiber.stateNode;
            }
            if (!inst) {
              {
                throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stringRef = "" + mixedRef;
            if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
              return current2.ref;
            }
            var ref = function(value) {
              var refs = inst.refs;
              if (refs === emptyRefsObject) {
                refs = inst.refs = {};
              }
              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };
            ref._stringRef = stringRef;
            return ref;
          } else {
            if (!(typeof mixedRef === "string")) {
              {
                throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
            }
            if (!element._owner) {
              {
                throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
        }
        return mixedRef;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== "textarea") {
          {
            {
              throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
        }
      }
      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentName(returnFiber.type) || "Component";
          if (ownerHasFunctionTypeWarning[componentName]) {
            return;
          }
          ownerHasFunctionTypeWarning[componentName] = true;
          error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
        }
      }
      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }
          var last = returnFiber.lastEffect;
          if (last !== null) {
            last.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
          childToDelete.nextEffect = null;
          childToDelete.flags = Deletion;
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }
          var childToDelete = currentFirstChild;
          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }
          return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map();
          var existingChild = currentFirstChild;
          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }
            existingChild = existingChild.sibling;
          }
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          var clone2 = createWorkInProgress(fiber, pendingProps);
          clone2.index = 0;
          clone2.sibling = null;
          return clone2;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;
          if (!shouldTrackSideEffects) {
            return lastPlacedIndex;
          }
          var current2 = newFiber.alternate;
          if (current2 !== null) {
            var oldIndex = current2.index;
            if (oldIndex < lastPlacedIndex) {
              newFiber.flags = Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.flags = Placement;
            return lastPlacedIndex;
          }
        }
        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.flags = Placement;
          }
          return newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent, lanes) {
          if (current2 === null || current2.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, textContent);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateElement(returnFiber, current2, element, lanes) {
          if (current2 !== null) {
            if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
              var existing = useFiber(current2, element.props);
              existing.ref = coerceRef(returnFiber, current2, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            }
          }
          var created = createFiberFromElement(element, returnFiber.mode, lanes);
          created.ref = coerceRef(returnFiber, current2, element);
          created.return = returnFiber;
          return created;
        }
        function updatePortal(returnFiber, current2, portal, lanes) {
          if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, portal.children || []);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateFragment2(returnFiber, current2, fragment, lanes, key2) {
          if (current2 === null || current2.tag !== Fragment) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key2);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, fragment);
            existing.return = returnFiber;
            return existing;
          }
        }
        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }
              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                _created2.return = returnFiber;
                return _created2;
              }
            }
            if (isArray$12(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
              _created3.return = returnFiber;
              return _created3;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key2 = oldFiber !== null ? oldFiber.key : null;
          if (typeof newChild === "string" || typeof newChild === "number") {
            if (key2 !== null) {
              return null;
            }
            return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                if (newChild.key === key2) {
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key2);
                  }
                  return updateElement(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_PORTAL_TYPE: {
                if (newChild.key === key2) {
                  return updatePortal(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
            }
            if (isArray$12(newChild) || getIteratorFn(newChild)) {
              if (key2 !== null) {
                return null;
              }
              return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                }
                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
              }
              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
              }
            }
            if (isArray$12(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;
              return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function warnOnInvalidKey(child, knownKeys, returnFiber) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child, returnFiber);
                var key2 = child.key;
                if (typeof key2 !== "string") {
                  break;
                }
                if (knownKeys === null) {
                  knownKeys = new Set();
                  knownKeys.add(key2);
                  break;
                }
                if (!knownKeys.has(key2)) {
                  knownKeys.add(key2);
                  break;
                }
                error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key2);
                break;
            }
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          {
            var knownKeys = null;
            for (var i2 = 0; i2 < newChildren.length; i2++) {
              var child = newChildren[i2];
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
              if (_newFiber === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }
              previousNewFiber = _newFiber;
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }
              previousNewFiber = _newFiber2;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          if (!(typeof iteratorFn === "function")) {
            {
              throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          {
            if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (newChildrenIterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
              var knownKeys = null;
              var _step = _newChildren.next();
              for (; !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          if (!(newChildren != null)) {
            {
              throw Error("An iterable object provided no iterator.");
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();
          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, lanes);
              if (_newFiber3 === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }
              previousNewFiber = _newFiber3;
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }
              previousNewFiber = _newFiber4;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            existing.return = returnFiber;
            return existing;
          }
          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
          var key2 = element.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key2) {
              switch (child.tag) {
                case Fragment: {
                  if (element.type === REACT_FRAGMENT_TYPE) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                  break;
                }
                case Block:
                default: {
                  if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing3 = useFiber(child, element.props);
                    _existing3.ref = coerceRef(returnFiber, child, element);
                    _existing3.return = returnFiber;
                    {
                      _existing3._debugSource = element._source;
                      _existing3._debugOwner = element._owner;
                    }
                    return _existing3;
                  }
                  break;
                }
              }
              deleteRemainingChildren(returnFiber, child);
              break;
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
            created.return = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
          var key2 = portal.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key2) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                existing.return = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
          var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children;
          }
          var isObject2 = typeof newChild === "object" && newChild !== null;
          if (isObject2) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            }
          }
          if (typeof newChild === "string" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
          }
          if (isArray$12(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
          }
          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
          }
          if (isObject2) {
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
            switch (returnFiber.tag) {
              case ClassComponent: {
                {
                  var instance = returnFiber.stateNode;
                  if (instance.render._isMockFunction) {
                    break;
                  }
                }
              }
              case Block:
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                {
                  {
                    throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                  }
                }
              }
            }
          }
          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers2;
      }
      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);
      function cloneChildFibers(current2, workInProgress2) {
        if (!(current2 === null || workInProgress2.child === current2.child)) {
          {
            throw Error("Resuming work not yet implemented.");
          }
        }
        if (workInProgress2.child === null) {
          return;
        }
        var currentChild = workInProgress2.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress2.child = newChild;
        newChild.return = workInProgress2;
        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
          newChild.return = workInProgress2;
        }
        newChild.sibling = null;
      }
      function resetChildFibers(workInProgress2, lanes) {
        var child = workInProgress2.child;
        while (child !== null) {
          resetWorkInProgress(child, lanes);
          child = child.sibling;
        }
      }
      var NO_CONTEXT = {};
      var contextStackCursor$1 = createCursor(NO_CONTEXT);
      var contextFiberStackCursor = createCursor(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor(NO_CONTEXT);
      function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) {
          {
            throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        return c;
      }
      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        var context2 = requiredContext(contextStackCursor$1.current);
        return context2;
      }
      function pushHostContext(fiber) {
        requiredContext(rootInstanceStackCursor.current);
        var context2 = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context2, fiber.type);
        if (context2 === nextContext) {
          return;
        }
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
      }
      function popHostContext(fiber) {
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
      }
      var DefaultSuspenseContext = 0;
      var SubtreeSuspenseContextMask = 1;
      var InvisibleParentSuspenseContext = 1;
      var ForceSuspenseFallback = 2;
      var suspenseStackCursor = createCursor(DefaultSuspenseContext);
      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }
      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }
      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }
      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }
      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }
      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }
      function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
        var nextState = workInProgress2.memoizedState;
        if (nextState !== null) {
          if (nextState.dehydrated !== null) {
            return true;
          }
          return false;
        }
        var props = workInProgress2.memoizedProps;
        if (props.fallback === void 0) {
          return false;
        }
        if (props.unstable_avoidThisFallback !== true) {
          return true;
        }
        if (hasInvisibleParent) {
          return false;
        }
        return true;
      }
      function findFirstSuspended(row) {
        var node = row;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              var dehydrated = state.dehydrated;
              if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                return node;
              }
            }
          } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
            var didSuspend = (node.flags & DidCapture) !== NoFlags;
            if (didSuspend) {
              return node;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === row) {
            return null;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === row) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      var NoFlags$1 = 0;
      var HasEffect = 1;
      var Layout2 = 2;
      var Passive$1 = 4;
      var hydrationParentFiber = null;
      var nextHydratableInstance = null;
      var isHydrating = false;
      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        return true;
      }
      function deleteHydratableInstance(returnFiber, instance) {
        {
          switch (returnFiber.tag) {
            case HostRoot:
              didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
              break;
            case HostComponent:
              didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
              break;
          }
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        childToDelete.flags = Deletion;
        if (returnFiber.lastEffect !== null) {
          returnFiber.lastEffect.nextEffect = childToDelete;
          returnFiber.lastEffect = childToDelete;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }
      }
      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        {
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  fiber.pendingProps;
                  didNotFindHydratableContainerInstance(parentContainer, type);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableContainerTextInstance(parentContainer, text);
                  break;
              }
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent:
                  var _type = fiber.type;
                  fiber.pendingProps;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                  break;
                case HostText:
                  var _text = fiber.pendingProps;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                  break;
                case SuspenseComponent:
                  didNotFindHydratableSuspenseInstance(parentType, parentProps);
                  break;
              }
              break;
            }
            default:
              return;
          }
        }
      }
      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent: {
            var type = fiber.type;
            fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type);
            if (instance !== null) {
              fiber.stateNode = instance;
              return true;
            }
            return false;
          }
          case HostText: {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);
            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              return true;
            }
            return false;
          }
          case SuspenseComponent: {
            return false;
          }
          default:
            return false;
        }
      }
      function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) {
          return;
        }
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
          nextInstance = getNextHydratableSibling(firstAttemptedInstance);
          if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
        }
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
      }
      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
        fiber.updateQueue = updatePayload;
        if (updatePayload !== null) {
          return true;
        }
        return false;
      }
      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        {
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                  break;
                }
              }
            }
          }
        }
        return shouldUpdate;
      }
      function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          {
            throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
      }
      function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
          parent = parent.return;
        }
        hydrationParentFiber = parent;
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) {
          return false;
        }
        if (!isHydrating) {
          popToNextHostParent(fiber);
          isHydrating = true;
          return false;
        }
        var type = fiber.type;
        if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            deleteHydratableInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) {
          nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        } else {
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        }
        return true;
      }
      function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
      }
      function getIsHydrating() {
        return isHydrating;
      }
      var workInProgressSources = [];
      var rendererSigil$1;
      {
        rendererSigil$1 = {};
      }
      function markSourceAsDirty(mutableSource) {
        workInProgressSources.push(mutableSource);
      }
      function resetWorkInProgressVersions() {
        for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
          var mutableSource = workInProgressSources[i2];
          {
            mutableSource._workInProgressVersionPrimary = null;
          }
        }
        workInProgressSources.length = 0;
      }
      function getWorkInProgressVersion(mutableSource) {
        {
          return mutableSource._workInProgressVersionPrimary;
        }
      }
      function setWorkInProgressVersion(mutableSource, version) {
        {
          mutableSource._workInProgressVersionPrimary = version;
        }
        workInProgressSources.push(mutableSource);
      }
      function warnAboutMultipleRenderersDEV(mutableSource) {
        {
          {
            if (mutableSource._currentPrimaryRenderer == null) {
              mutableSource._currentPrimaryRenderer = rendererSigil$1;
            } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
              error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
            }
          }
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
      var didWarnAboutMismatchedHooksForComponent;
      var didWarnAboutUseOpaqueIdentifier;
      {
        didWarnAboutUseOpaqueIdentifier = {};
        didWarnAboutMismatchedHooksForComponent = new Set();
      }
      var renderLanes = NoLanes;
      var currentlyRenderingFiber$1 = null;
      var currentHook = null;
      var workInProgressHook = null;
      var didScheduleRenderPhaseUpdate = false;
      var didScheduleRenderPhaseUpdateDuringThisPass = false;
      var RE_RENDER_LIMIT = 25;
      var currentHookNameInDev = null;
      var hookTypesDev = null;
      var hookTypesUpdateIndexDev = -1;
      var ignorePreviousDependencies = false;
      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev === null) {
            hookTypesDev = [hookName];
          } else {
            hookTypesDev.push(hookName);
          }
        }
      }
      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName);
            }
          }
        }
      }
      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
            error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
          }
        }
      }
      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentName(currentlyRenderingFiber$1.type);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
              var table = "";
              var secondColumnStart = 30;
              for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                var oldHookName = hookTypesDev[i2];
                var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                var row = i2 + 1 + ". " + oldHookName;
                while (row.length < secondColumnStart) {
                  row += " ";
                }
                row += newHookName + "\n";
                table += row;
              }
              error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
          }
        }
      }
      function throwInvalidHookError() {
        {
          {
            throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            return false;
          }
        }
        if (prevDeps === null) {
          {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
          }
          return false;
        }
        {
          if (nextDeps.length !== prevDeps.length) {
            error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
          }
        }
        for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
          if (objectIs2(nextDeps[i2], prevDeps[i2])) {
            continue;
          }
          return false;
        }
        return true;
      }
      function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress2;
        {
          hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
        }
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.lanes = NoLanes;
        {
          if (current2 !== null && current2.memoizedState !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          } else if (hookTypesDev !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
          } else {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
          }
        }
        var children = Component(props, secondArg);
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          var numberOfReRenders = 0;
          do {
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
              {
                throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
            }
            numberOfReRenders += 1;
            {
              ignorePreviousDependencies = false;
            }
            currentHook = null;
            workInProgressHook = null;
            workInProgress2.updateQueue = null;
            {
              hookTypesUpdateIndexDev = -1;
            }
            ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
            children = Component(props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
        }
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        {
          workInProgress2._debugHookTypes = hookTypesDev;
        }
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          currentHookNameInDev = null;
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
        }
        didScheduleRenderPhaseUpdate = false;
        if (!!didRenderTooFewHooks) {
          {
            throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
        }
        return children;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue;
        workInProgress2.flags &= ~(Passive | Update);
        current2.lanes = removeLanes(current2.lanes, lanes);
      }
      function resetHooksAfterThrow() {
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
          var hook = currentlyRenderingFiber$1.memoizedState;
          while (hook !== null) {
            var queue = hook.queue;
            if (queue !== null) {
              queue.pending = null;
            }
            hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
          isUpdatingOpaqueValueInRenderPhase = false;
        }
        didScheduleRenderPhaseUpdateDuringThisPass = false;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        } else {
          workInProgressHook = workInProgressHook.next = hook;
        }
        return workInProgressHook;
      }
      function updateWorkInProgressHook() {
        var nextCurrentHook;
        if (currentHook === null) {
          var current2 = currentlyRenderingFiber$1.alternate;
          if (current2 !== null) {
            nextCurrentHook = current2.memoizedState;
          } else {
            nextCurrentHook = null;
          }
        } else {
          nextCurrentHook = currentHook.next;
        }
        var nextWorkInProgressHook;
        if (workInProgressHook === null) {
          nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        } else {
          nextWorkInProgressHook = workInProgressHook.next;
        }
        if (nextWorkInProgressHook !== null) {
          workInProgressHook = nextWorkInProgressHook;
          nextWorkInProgressHook = workInProgressHook.next;
          currentHook = nextCurrentHook;
        } else {
          if (!(nextCurrentHook !== null)) {
            {
              throw Error("Rendered more hooks than during the previous render.");
            }
          }
          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
          } else {
            workInProgressHook = workInProgressHook.next = newHook;
          }
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null
        };
      }
      function basicStateReducer(state, action) {
        return typeof action === "function" ? action(state) : action;
      }
      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== void 0) {
          initialState = init(initialArg);
        } else {
          initialState = initialArg;
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
          pending: null,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) {
          {
            throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
        }
        queue.lastRenderedReducer = reducer;
        var current2 = currentHook;
        var baseQueue = current2.baseQueue;
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next;
            var pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst;
            pendingQueue.next = baseFirst;
          }
          {
            if (current2.baseQueue !== baseQueue) {
              error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            }
          }
          current2.baseQueue = baseQueue = pendingQueue;
          queue.pending = null;
        }
        if (baseQueue !== null) {
          var first = baseQueue.next;
          var newState = current2.baseState;
          var newBaseState = null;
          var newBaseQueueFirst = null;
          var newBaseQueueLast = null;
          var update = first;
          do {
            var updateLane = update.lane;
            if (!isSubsetOfLanes(renderLanes, updateLane)) {
              var clone2 = {
                lane: updateLane,
                action: update.action,
                eagerReducer: update.eagerReducer,
                eagerState: update.eagerState,
                next: null
              };
              if (newBaseQueueLast === null) {
                newBaseQueueFirst = newBaseQueueLast = clone2;
                newBaseState = newState;
              } else {
                newBaseQueueLast = newBaseQueueLast.next = clone2;
              }
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
              markSkippedUpdateLanes(updateLane);
            } else {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  lane: NoLane,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }
              if (update.eagerReducer === reducer) {
                newState = update.eagerState;
              } else {
                var action = update.action;
                newState = reducer(newState, action);
              }
            }
            update = update.next;
          } while (update !== null && update !== first);
          if (newBaseQueueLast === null) {
            newBaseState = newState;
          } else {
            newBaseQueueLast.next = newBaseQueueFirst;
          }
          if (!objectIs2(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          hook.baseState = newBaseState;
          hook.baseQueue = newBaseQueueLast;
          queue.lastRenderedState = newState;
        }
        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }
      function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) {
          {
            throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
        }
        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
          queue.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          var update = firstRenderPhaseUpdate;
          do {
            var action = update.action;
            newState = reducer(newState, action);
            update = update.next;
          } while (update !== firstRenderPhaseUpdate);
          if (!objectIs2(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          if (hook.baseQueue === null) {
            hook.baseState = newState;
          }
          queue.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function readFromUnsubcribedMutableSource(root3, source2, getSnapshot) {
        {
          warnAboutMultipleRenderersDEV(source2);
        }
        var getVersion2 = source2._getVersion;
        var version = getVersion2(source2._source);
        var isSafeToReadFromSource = false;
        var currentRenderVersion = getWorkInProgressVersion(source2);
        if (currentRenderVersion !== null) {
          isSafeToReadFromSource = currentRenderVersion === version;
        } else {
          isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root3.mutableReadLanes);
          if (isSafeToReadFromSource) {
            setWorkInProgressVersion(source2, version);
          }
        }
        if (isSafeToReadFromSource) {
          var snapshot = getSnapshot(source2._source);
          {
            if (typeof snapshot === "function") {
              error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
            }
          }
          return snapshot;
        } else {
          markSourceAsDirty(source2);
          {
            {
              throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
            }
          }
        }
      }
      function useMutableSource(hook, source2, getSnapshot, subscribe) {
        var root3 = getWorkInProgressRoot();
        if (!(root3 !== null)) {
          {
            throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
        }
        var getVersion2 = source2._getVersion;
        var version = getVersion2(source2._source);
        var dispatcher = ReactCurrentDispatcher$1.current;
        var _dispatcher$useState = dispatcher.useState(function() {
          return readFromUnsubcribedMutableSource(root3, source2, getSnapshot);
        }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
        var snapshot = currentSnapshot;
        var stateHook = workInProgressHook;
        var memoizedState = hook.memoizedState;
        var refs = memoizedState.refs;
        var prevGetSnapshot = refs.getSnapshot;
        var prevSource = memoizedState.source;
        var prevSubscribe = memoizedState.subscribe;
        var fiber = currentlyRenderingFiber$1;
        hook.memoizedState = {
          refs,
          source: source2,
          subscribe
        };
        dispatcher.useEffect(function() {
          refs.getSnapshot = getSnapshot;
          refs.setSnapshot = setSnapshot;
          var maybeNewVersion = getVersion2(source2._source);
          if (!objectIs2(version, maybeNewVersion)) {
            var maybeNewSnapshot = getSnapshot(source2._source);
            {
              if (typeof maybeNewSnapshot === "function") {
                error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
              }
            }
            if (!objectIs2(snapshot, maybeNewSnapshot)) {
              setSnapshot(maybeNewSnapshot);
              var lane = requestUpdateLane(fiber);
              markRootMutableRead(root3, lane);
            }
            markRootEntangled(root3, root3.mutableReadLanes);
          }
        }, [getSnapshot, source2, subscribe]);
        dispatcher.useEffect(function() {
          var handleChange = function() {
            var latestGetSnapshot = refs.getSnapshot;
            var latestSetSnapshot = refs.setSnapshot;
            try {
              latestSetSnapshot(latestGetSnapshot(source2._source));
              var lane = requestUpdateLane(fiber);
              markRootMutableRead(root3, lane);
            } catch (error2) {
              latestSetSnapshot(function() {
                throw error2;
              });
            }
          };
          var unsubscribe = subscribe(source2._source, handleChange);
          {
            if (typeof unsubscribe !== "function") {
              error("Mutable source subscribe function must return an unsubscribe function.");
            }
          }
          return unsubscribe;
        }, [source2, subscribe]);
        if (!objectIs2(prevGetSnapshot, getSnapshot) || !objectIs2(prevSource, source2) || !objectIs2(prevSubscribe, subscribe)) {
          var newQueue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: snapshot
          };
          newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
          stateHook.queue = newQueue;
          stateHook.baseQueue = null;
          snapshot = readFromUnsubcribedMutableSource(root3, source2, getSnapshot);
          stateHook.memoizedState = stateHook.baseState = snapshot;
        }
        return snapshot;
      }
      function mountMutableSource(source2, getSnapshot, subscribe) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = {
          refs: {
            getSnapshot,
            setSnapshot: null
          },
          source: source2,
          subscribe
        };
        return useMutableSource(hook, source2, getSnapshot, subscribe);
      }
      function updateMutableSource(source2, getSnapshot, subscribe) {
        var hook = updateWorkInProgressHook();
        return useMutableSource(hook, source2, getSnapshot, subscribe);
      }
      function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === "function") {
          initialState = initialState();
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
          pending: null,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }
      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }
      function pushEffect(tag, create2, destroy, deps) {
        var effect = {
          tag,
          create: create2,
          destroy,
          deps,
          next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var lastEffect = componentUpdateQueue.lastEffect;
          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect;
            effect.next = firstEffect;
            componentUpdateQueue.lastEffect = effect;
          }
        }
        return effect;
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = {
          current: initialValue
        };
        {
          Object.seal(ref);
        }
        hook.memoizedState = ref;
        return ref;
      }
      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create2, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, void 0, nextDeps);
      }
      function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var destroy = void 0;
        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          destroy = prevEffect.destroy;
          if (nextDeps !== null) {
            var prevDeps = prevEffect.deps;
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              pushEffect(hookFlags, create2, destroy, nextDeps);
              return;
            }
          }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, destroy, nextDeps);
      }
      function mountEffect(create2, deps) {
        {
          if (typeof jest !== "undefined") {
            warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
          }
        }
        return mountEffectImpl(Update | Passive, Passive$1, create2, deps);
      }
      function updateEffect(create2, deps) {
        {
          if (typeof jest !== "undefined") {
            warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
          }
        }
        return updateEffectImpl(Update | Passive, Passive$1, create2, deps);
      }
      function mountLayoutEffect(create2, deps) {
        return mountEffectImpl(Update, Layout2, create2, deps);
      }
      function updateLayoutEffect(create2, deps) {
        return updateEffectImpl(Update, Layout2, create2, deps);
      }
      function imperativeHandleEffect(create2, ref) {
        if (typeof ref === "function") {
          var refCallback = ref;
          var _inst = create2();
          refCallback(_inst);
          return function() {
            refCallback(null);
          };
        } else if (ref !== null && ref !== void 0) {
          var refObject = ref;
          {
            if (!refObject.hasOwnProperty("current")) {
              error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            }
          }
          var _inst2 = create2();
          refObject.current = _inst2;
          return function() {
            refObject.current = null;
          };
        }
      }
      function mountImperativeHandle(ref, create2, deps) {
        {
          if (typeof create2 !== "function") {
            error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
          }
        }
        var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
        return mountEffectImpl(Update, Layout2, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
      }
      function updateImperativeHandle(ref, create2, deps) {
        {
          if (typeof create2 !== "function") {
            error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
          }
        }
        var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, Layout2, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
      }
      function mountDebugValue(value, formatterFn) {
      }
      var updateDebugValue = mountDebugValue;
      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function mountDeferredValue(value) {
        var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
        mountEffect(function() {
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          ReactCurrentBatchConfig$1.transition = 1;
          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.transition = prevTransition;
          }
        }, [value]);
        return prevValue;
      }
      function updateDeferredValue(value) {
        var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
        updateEffect(function() {
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          ReactCurrentBatchConfig$1.transition = 1;
          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.transition = prevTransition;
          }
        }, [value]);
        return prevValue;
      }
      function rerenderDeferredValue(value) {
        var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
        updateEffect(function() {
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          ReactCurrentBatchConfig$1.transition = 1;
          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.transition = prevTransition;
          }
        }, [value]);
        return prevValue;
      }
      function startTransition(setPending, callback) {
        var priorityLevel = getCurrentPriorityLevel();
        {
          runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
            setPending(true);
          });
          runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setPending(false);
              callback();
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          });
        }
      }
      function mountTransition() {
        var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
        var start = startTransition.bind(null, setPending);
        mountRef(start);
        return [start, isPending];
      }
      function updateTransition() {
        var _updateState2 = updateState(), isPending = _updateState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [start, isPending];
      }
      function rerenderTransition() {
        var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [start, isPending];
      }
      var isUpdatingOpaqueValueInRenderPhase = false;
      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        {
          return isUpdatingOpaqueValueInRenderPhase;
        }
      }
      function warnOnOpaqueIdentifierAccessInDEV(fiber) {
        {
          var name = getComponentName(fiber.type) || "Unknown";
          if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
            error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            didWarnAboutUseOpaqueIdentifier[name] = true;
          }
        }
      }
      function mountOpaqueIdentifier() {
        var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
        if (getIsHydrating()) {
          var didUpgrade = false;
          var fiber = currentlyRenderingFiber$1;
          var readValue = function() {
            if (!didUpgrade) {
              didUpgrade = true;
              {
                isUpdatingOpaqueValueInRenderPhase = true;
                setId(makeId());
                isUpdatingOpaqueValueInRenderPhase = false;
                warnOnOpaqueIdentifierAccessInDEV(fiber);
              }
            }
            {
              {
                throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
              }
            }
          };
          var id = makeOpaqueHydratingObject(readValue);
          var setId = mountState(id)[1];
          if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
            currentlyRenderingFiber$1.flags |= Update | Passive;
            pushEffect(HasEffect | Passive$1, function() {
              setId(makeId());
            }, void 0, null);
          }
          return id;
        } else {
          var _id = makeId();
          mountState(_id);
          return _id;
        }
      }
      function updateOpaqueIdentifier() {
        var id = updateState()[0];
        return id;
      }
      function rerenderOpaqueIdentifier() {
        var id = rerenderState()[0];
        return id;
      }
      function dispatchAction(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
          }
        }
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          action,
          eagerReducer: null,
          eagerState: null,
          next: null
        };
        var pending = queue.pending;
        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }
        queue.pending = update;
        var alternate = fiber.alternate;
        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        } else {
          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
            var lastRenderedReducer = queue.lastRenderedReducer;
            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              {
                prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              }
              try {
                var currentState = queue.lastRenderedState;
                var eagerState = lastRenderedReducer(currentState, action);
                update.eagerReducer = lastRenderedReducer;
                update.eagerState = eagerState;
                if (objectIs2(eagerState, currentState)) {
                  return;
                }
              } catch (error2) {
              } finally {
                {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }
            }
          }
          {
            if (typeof jest !== "undefined") {
              warnIfNotScopedWithMatchingAct(fiber);
              warnIfNotCurrentlyActingUpdatesInDev(fiber);
            }
          }
          scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
      }
      var ContextOnlyDispatcher = {
        readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useOpaqueIdentifier: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
      };
      var HooksDispatcherOnMountInDEV = null;
      var HooksDispatcherOnMountWithHookTypesInDEV = null;
      var HooksDispatcherOnUpdateInDEV = null;
      var HooksDispatcherOnRerenderInDEV = null;
      var InvalidNestedHooksDispatcherOnMountInDEV = null;
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
      var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function() {
          error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        };
        var warnInvalidHookAccess = function() {
          error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
        };
        HooksDispatcherOnMountInDEV = {
          readContext: function(context2, observedBits) {
            return readContext(context2, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function(context2, observedBits) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context2, observedBits);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source2, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            mountHookTypesDev();
            return mountMutableSource(source2, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function() {
            currentHookNameInDev = "useOpaqueIdentifier";
            mountHookTypesDev();
            return mountOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context2, observedBits) {
            return readContext(context2, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context2, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context2, observedBits);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source2, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return mountMutableSource(source2, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function() {
            currentHookNameInDev = "useOpaqueIdentifier";
            updateHookTypesDev();
            return mountOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function(context2, observedBits) {
            return readContext(context2, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context2, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context2, observedBits);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source2, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource(source2, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function() {
            currentHookNameInDev = "useOpaqueIdentifier";
            updateHookTypesDev();
            return updateOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnRerenderInDEV = {
          readContext: function(context2, observedBits) {
            return readContext(context2, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context2, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context2, observedBits);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source2, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource(source2, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function() {
            currentHookNameInDev = "useOpaqueIdentifier";
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context2, observedBits) {
            warnInvalidContextAccess();
            return readContext(context2, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context2, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context2, observedBits);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source2, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource(source2, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function() {
            currentHookNameInDev = "useOpaqueIdentifier";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context2, observedBits) {
            warnInvalidContextAccess();
            return readContext(context2, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context2, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context2, observedBits);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source2, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source2, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function() {
            currentHookNameInDev = "useOpaqueIdentifier";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context2, observedBits) {
            warnInvalidContextAccess();
            return readContext(context2, observedBits);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context2, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context2, observedBits);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source2, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source2, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function() {
            currentHookNameInDev = "useOpaqueIdentifier";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
      }
      var now$1 = Scheduler.unstable_now;
      var commitTime = 0;
      var profilerStartTime = -1;
      function getCommitTime() {
        return commitTime;
      }
      function recordCommitTime() {
        commitTime = now$1();
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now$1();
        }
      }
      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime;
          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime;
          }
          profilerStartTime = -1;
        }
      }
      function transferActualDuration(fiber) {
        var child = fiber.child;
        while (child) {
          fiber.actualDuration += child.actualDuration;
          child = child.sibling;
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var didReceiveUpdate = false;
      var didWarnAboutBadClass;
      var didWarnAboutModulePatternComponent;
      var didWarnAboutContextTypeOnFunctionComponent;
      var didWarnAboutGetDerivedStateOnFunctionComponent;
      var didWarnAboutFunctionRefs;
      var didWarnAboutReassigningProps;
      var didWarnAboutRevealOrder;
      var didWarnAboutTailOptions;
      {
        didWarnAboutBadClass = {};
        didWarnAboutModulePatternComponent = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
        didWarnAboutRevealOrder = {};
        didWarnAboutTailOptions = {};
      }
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        if (current2 === null) {
          workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
        }
      }
      function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      }
      function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes2(innerPropTypes, nextProps, "prop", getComponentName(Component));
            }
          }
        }
        var render2 = Component.render;
        var ref = workInProgress2.ref;
        var nextChildren;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
          if (workInProgress2.mode & StrictMode) {
            disableLogs();
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            } finally {
              reenableLogs();
            }
          }
          setIsRendering(false);
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
        if (current2 === null) {
          var type = Component.type;
          if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
            var resolvedType = type;
            {
              resolvedType = resolveFunctionForHotReloading(type);
            }
            workInProgress2.tag = SimpleMemoComponent;
            workInProgress2.type = resolvedType;
            {
              validateFunctionComponentInDev(workInProgress2, type);
            }
            return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
          }
          {
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) {
              checkPropTypes2(innerPropTypes, nextProps, "prop", getComponentName(type));
            }
          }
          var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
          child.ref = workInProgress2.ref;
          child.return = workInProgress2;
          workInProgress2.child = child;
          return child;
        }
        {
          var _type = Component.type;
          var _innerPropTypes = _type.propTypes;
          if (_innerPropTypes) {
            checkPropTypes2(_innerPropTypes, nextProps, "prop", getComponentName(_type));
          }
        }
        var currentChild = current2.child;
        if (!includesSomeLane(updateLanes, renderLanes2)) {
          var prevProps = currentChild.memoizedProps;
          var compare = Component.compare;
          compare = compare !== null ? compare : shallowEqual;
          if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
        }
        workInProgress2.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress2.ref;
        newChild.return = workInProgress2;
        workInProgress2.child = newChild;
        return newChild;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var outerMemoType = workInProgress2.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              var lazyComponent = outerMemoType;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                outerMemoType = init(payload);
              } catch (x) {
                outerMemoType = null;
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              if (outerPropTypes) {
                checkPropTypes2(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
              }
            }
          }
        }
        if (current2 !== null) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
            didReceiveUpdate = false;
            if (!includesSomeLane(renderLanes2, updateLanes)) {
              workInProgress2.lanes = current2.lanes;
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            }
          }
        }
        return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current2 !== null ? current2.memoizedState : null;
        if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            var nextState = {
              baseLanes: NoLanes
            };
            workInProgress2.memoizedState = nextState;
            pushRenderLanes(workInProgress2, renderLanes2);
          } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
            var nextBaseLanes;
            if (prevState !== null) {
              var prevBaseLanes = prevState.baseLanes;
              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
            } else {
              nextBaseLanes = renderLanes2;
            }
            {
              markSpawnedWork(OffscreenLane);
            }
            workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
            var _nextState = {
              baseLanes: nextBaseLanes
            };
            workInProgress2.memoizedState = _nextState;
            pushRenderLanes(workInProgress2, nextBaseLanes);
            return null;
          } else {
            var _nextState2 = {
              baseLanes: NoLanes
            };
            workInProgress2.memoizedState = _nextState2;
            var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
            pushRenderLanes(workInProgress2, subtreeRenderLanes2);
          }
        } else {
          var _subtreeRenderLanes;
          if (prevState !== null) {
            _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
            workInProgress2.memoizedState = null;
          } else {
            _subtreeRenderLanes = renderLanes2;
          }
          pushRenderLanes(workInProgress2, _subtreeRenderLanes);
        }
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      var updateLegacyHiddenComponent = updateOffscreenComponent;
      function updateFragment(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMode(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateProfiler(current2, workInProgress2, renderLanes2) {
        {
          workInProgress2.flags |= Update;
          var stateNode = workInProgress2.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markRef(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
          workInProgress2.flags |= Ref;
        }
      }
      function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes2(innerPropTypes, nextProps, "prop", getComponentName(Component));
            }
          }
        }
        var context2;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
          context2 = getMaskedContext(workInProgress2, unmaskedContext);
        }
        var nextChildren;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context2, renderLanes2);
          if (workInProgress2.mode & StrictMode) {
            disableLogs();
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context2, renderLanes2);
            } finally {
              reenableLogs();
            }
          }
          setIsRendering(false);
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes2(innerPropTypes, nextProps, "prop", getComponentName(Component));
            }
          }
        }
        var hasContext;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode;
        var shouldUpdate;
        if (instance === null) {
          if (current2 !== null) {
            current2.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          shouldUpdate = true;
        } else if (current2 === null) {
          shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
        } else {
          shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
        {
          var inst = workInProgress2.stateNode;
          if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) {
              error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
            }
            didWarnAboutReassigningProps = true;
          }
        }
        return nextUnitOfWork;
      }
      function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
        markRef(current2, workInProgress2);
        var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, false);
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        var instance = workInProgress2.stateNode;
        ReactCurrentOwner$1.current = workInProgress2;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
          nextChildren = null;
          {
            stopProfilerTimerIfRunning();
          }
        } else {
          {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                instance.render();
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(false);
          }
        }
        workInProgress2.flags |= PerformedWork;
        if (current2 !== null && didCaptureError) {
          forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        workInProgress2.memoizedState = instance.state;
        if (hasContext) {
          invalidateContextProvider(workInProgress2, Component, true);
        }
        return workInProgress2.child;
      }
      function pushHostRootContext(workInProgress2) {
        var root3 = workInProgress2.stateNode;
        if (root3.pendingContext) {
          pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
        } else if (root3.context) {
          pushTopLevelContextObject(workInProgress2, root3.context, false);
        }
        pushHostContainer(workInProgress2, root3.containerInfo);
      }
      function updateHostRoot(current2, workInProgress2, renderLanes2) {
        pushHostRootContext(workInProgress2);
        var updateQueue = workInProgress2.updateQueue;
        if (!(current2 !== null && updateQueue !== null)) {
          {
            throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var nextProps = workInProgress2.pendingProps;
        var prevState = workInProgress2.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        cloneUpdateQueue(current2, workInProgress2);
        processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
        var nextState = workInProgress2.memoizedState;
        var nextChildren = nextState.element;
        if (nextChildren === prevChildren) {
          resetHydrationState();
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        var root3 = workInProgress2.stateNode;
        if (root3.hydrate && enterHydrationState(workInProgress2)) {
          {
            var mutableSourceEagerHydrationData = root3.mutableSourceEagerHydrationData;
            if (mutableSourceEagerHydrationData != null) {
              for (var i2 = 0; i2 < mutableSourceEagerHydrationData.length; i2 += 2) {
                var mutableSource = mutableSourceEagerHydrationData[i2];
                var version = mutableSourceEagerHydrationData[i2 + 1];
                setWorkInProgressVersion(mutableSource, version);
              }
            }
          }
          var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          workInProgress2.child = child;
          var node = child;
          while (node) {
            node.flags = node.flags & ~Placement | Hydrating;
            node = node.sibling;
          }
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          resetHydrationState();
        }
        return workInProgress2.child;
      }
      function updateHostComponent(current2, workInProgress2, renderLanes2) {
        pushHostContext(workInProgress2);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        var type = workInProgress2.type;
        var nextProps = workInProgress2.pendingProps;
        var prevProps = current2 !== null ? current2.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) {
          nextChildren = null;
        } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
          workInProgress2.flags |= ContentReset;
        }
        markRef(current2, workInProgress2);
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostText(current2, workInProgress2) {
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        return null;
      }
      function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress2.alternate = null;
          workInProgress2.flags |= Placement;
        }
        var props = workInProgress2.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload);
        workInProgress2.type = Component;
        var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch (resolvedTag) {
          case FunctionComponent: {
            {
              validateFunctionComponentInDev(workInProgress2, Component);
              workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
            }
            child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
            return child;
          }
          case ClassComponent: {
            {
              workInProgress2.type = Component = resolveClassForHotReloading(Component);
            }
            child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
            return child;
          }
          case ForwardRef: {
            {
              workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
            }
            child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
            return child;
          }
          case MemoComponent: {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = Component.propTypes;
                if (outerPropTypes) {
                  checkPropTypes2(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
                }
              }
            }
            child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes2);
            return child;
          }
        }
        var hint = "";
        {
          if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
            hint = " Did you wrap a component in React.lazy() more than once?";
          }
        }
        {
          {
            throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
          }
        }
      }
      function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress2.alternate = null;
          workInProgress2.flags |= Placement;
        }
        workInProgress2.tag = ClassComponent;
        var hasContext;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        constructClassInstance(workInProgress2, Component, nextProps);
        mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
        return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
      }
      function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress2.alternate = null;
          workInProgress2.flags |= Placement;
        }
        var props = workInProgress2.pendingProps;
        var context2;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
          context2 = getMaskedContext(workInProgress2, unmaskedContext);
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var value;
        {
          if (Component.prototype && typeof Component.prototype.render === "function") {
            var componentName = getComponentName(Component) || "Unknown";
            if (!didWarnAboutBadClass[componentName]) {
              error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
              didWarnAboutBadClass[componentName] = true;
            }
          }
          if (workInProgress2.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
          }
          setIsRendering(true);
          ReactCurrentOwner$1.current = workInProgress2;
          value = renderWithHooks(null, workInProgress2, Component, props, context2, renderLanes2);
          setIsRendering(false);
        }
        workInProgress2.flags |= PerformedWork;
        {
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            var _componentName = getComponentName(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName]) {
              error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
              didWarnAboutModulePatternComponent[_componentName] = true;
            }
          }
        }
        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
          {
            var _componentName2 = getComponentName(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
              error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
              didWarnAboutModulePatternComponent[_componentName2] = true;
            }
          }
          workInProgress2.tag = ClassComponent;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          var hasContext = false;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
          initializeUpdateQueue(workInProgress2);
          var getDerivedStateFromProps = Component.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
          }
          adoptClassInstance(workInProgress2, value);
          mountClassInstance(workInProgress2, Component, props, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        } else {
          workInProgress2.tag = FunctionComponent;
          {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                value = renderWithHooks(null, workInProgress2, Component, props, context2, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
          }
          reconcileChildren(null, workInProgress2, value, renderLanes2);
          {
            validateFunctionComponentInDev(workInProgress2, Component);
          }
          return workInProgress2.child;
        }
      }
      function validateFunctionComponentInDev(workInProgress2, Component) {
        {
          if (Component) {
            if (Component.childContextTypes) {
              error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
            }
          }
          if (workInProgress2.ref !== null) {
            var info = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              info += "\n\nCheck the render method of `" + ownerName + "`.";
            }
            var warningKey = ownerName || workInProgress2._debugID || "";
            var debugSource = workInProgress2._debugSource;
            if (debugSource) {
              warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            }
            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true;
              error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
          }
          if (typeof Component.getDerivedStateFromProps === "function") {
            var _componentName3 = getComponentName(Component) || "Unknown";
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
              error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
          }
          if (typeof Component.contextType === "object" && Component.contextType !== null) {
            var _componentName4 = getComponentName(Component) || "Unknown";
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
              error("%s: Function components do not support contextType.", _componentName4);
              didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
          }
        }
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        retryLane: NoLane
      };
      function mountSuspenseOffscreenState(renderLanes2) {
        return {
          baseLanes: renderLanes2
        };
      }
      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
        };
      }
      function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          var suspenseState = current2.memoizedState;
          if (suspenseState === null) {
            return false;
          }
        }
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      }
      function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
        return removeLanes(current2.childLanes, renderLanes2);
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        {
          if (shouldSuspend(workInProgress2)) {
            workInProgress2.flags |= DidCapture;
          }
        }
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
          showFallback = true;
          workInProgress2.flags &= ~DidCapture;
        } else {
          if (current2 === null || current2.memoizedState !== null) {
            if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
              suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
          }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress2, suspenseContext);
        if (current2 === null) {
          if (nextProps.fallback !== void 0) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var nextPrimaryChildren = nextProps.children;
          var nextFallbackChildren = nextProps.fallback;
          if (showFallback) {
            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var primaryChildFragment = workInProgress2.child;
            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackFragment;
          } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
            var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var _primaryChildFragment = workInProgress2.child;
            _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            workInProgress2.lanes = SomeRetryLane;
            {
              markSpawnedWork(SomeRetryLane);
            }
            return _fallbackFragment;
          } else {
            return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
          }
        } else {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            if (showFallback) {
              var _nextFallbackChildren2 = nextProps.fallback;
              var _nextPrimaryChildren2 = nextProps.children;
              var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
              var _primaryChildFragment3 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return _fallbackChildFragment;
            } else {
              var _nextPrimaryChildren3 = nextProps.children;
              var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment4;
            }
          } else {
            if (showFallback) {
              var _nextFallbackChildren3 = nextProps.fallback;
              var _nextPrimaryChildren4 = nextProps.children;
              var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
              var _primaryChildFragment5 = workInProgress2.child;
              var _prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
              _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return _fallbackChildFragment2;
            } else {
              var _nextPrimaryChildren5 = nextProps.children;
              var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment6;
            }
          }
        }
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
        primaryChildFragment.return = workInProgress2;
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var progressedPrimaryFragment = workInProgress2.child;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = 0;
            primaryChildFragment.treeBaseDuration = 0;
          }
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        } else {
          primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        }
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
        return createWorkInProgress(current2, offscreenProps);
      }
      function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
          mode: "visible",
          children: primaryChildren
        });
        if ((workInProgress2.mode & BlockingMode) === NoMode) {
          primaryChildFragment.lanes = renderLanes2;
        }
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
          currentFallbackChildFragment.nextEffect = null;
          currentFallbackChildFragment.flags = Deletion;
          workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
        }
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
          var progressedPrimaryFragment = workInProgress2.child;
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
            primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
          }
          var progressedLastEffect = primaryChildFragment.lastEffect;
          if (progressedLastEffect !== null) {
            workInProgress2.firstEffect = primaryChildFragment.firstEffect;
            workInProgress2.lastEffect = progressedLastEffect;
            progressedLastEffect.nextEffect = null;
          } else {
            workInProgress2.firstEffect = workInProgress2.lastEffect = null;
          }
        } else {
          primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) {
          fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        } else {
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function scheduleWorkOnFiber(fiber, renderLanes2) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
        }
        scheduleWorkOnParentPath(fiber.return, renderLanes2);
      }
      function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
        var node = firstChild;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              scheduleWorkOnFiber(node, renderLanes2);
            }
          } else if (node.tag === SuspenseListComponent) {
            scheduleWorkOnFiber(node, renderLanes2);
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress2) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress2) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;
        while (row !== null) {
          var currentRow = row.alternate;
          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row;
          }
          row = row.sibling;
        }
        return lastContentRow;
      }
      function validateRevealOrder(revealOrder) {
        {
          if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === "string") {
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                case "forward":
                case "backward": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                default:
                  error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  break;
              }
            } else {
              error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
            }
          }
        }
      }
      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
              didWarnAboutTailOptions[tailMode] = true;
              error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
              didWarnAboutTailOptions[tailMode] = true;
              error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
            }
          }
        }
      }
      function validateSuspenseListNestedChild(childSlot, index3) {
        {
          var isArray3 = Array.isArray(childSlot);
          var isIterable = !isArray3 && typeof getIteratorFn(childSlot) === "function";
          if (isArray3 || isIterable) {
            var type = isArray3 ? "array" : "iterable";
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
            return false;
          }
        }
        return true;
      }
      function validateSuspenseListChildren(children, revealOrder) {
        {
          if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
            if (Array.isArray(children)) {
              for (var i2 = 0; i2 < children.length; i2++) {
                if (!validateSuspenseListNestedChild(children[i2], i2)) {
                  return;
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var childrenIterator = iteratorFn.call(children);
                if (childrenIterator) {
                  var step = childrenIterator.next();
                  var _i = 0;
                  for (; !step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                      return;
                    }
                    _i++;
                  }
                }
              } else {
                error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
              }
            }
          }
        }
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress2.memoizedState;
        if (renderState === null) {
          workInProgress2.memoizedState = {
            isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail,
            tailMode,
            lastEffect: lastEffectBeforeRendering
          };
        } else {
          renderState.isBackwards = isBackwards;
          renderState.rendering = null;
          renderState.renderingStartTime = 0;
          renderState.last = lastContentRow;
          renderState.tail = tail;
          renderState.tailMode = tailMode;
          renderState.lastEffect = lastEffectBeforeRendering;
        }
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          workInProgress2.flags |= DidCapture;
        } else {
          var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
          if (didSuspendBefore) {
            propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress2, suspenseContext);
        if ((workInProgress2.mode & BlockingMode) === NoMode) {
          workInProgress2.memoizedState = null;
        } else {
          switch (revealOrder) {
            case "forwards": {
              var lastContentRow = findLastContentRow(workInProgress2.child);
              var tail;
              if (lastContentRow === null) {
                tail = workInProgress2.child;
                workInProgress2.child = null;
              } else {
                tail = lastContentRow.sibling;
                lastContentRow.sibling = null;
              }
              initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
              break;
            }
            case "backwards": {
              var _tail = null;
              var row = workInProgress2.child;
              workInProgress2.child = null;
              while (row !== null) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress2.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail;
                _tail = row;
                row = nextRow;
              }
              initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
              break;
            }
            case "together": {
              initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
              break;
            }
            default: {
              workInProgress2.memoizedState = null;
            }
          }
        }
        return workInProgress2.child;
      }
      function updatePortalComponent(current2, workInProgress2, renderLanes2) {
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        var nextChildren = workInProgress2.pendingProps;
        if (current2 === null) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
      function updateContextProvider(current2, workInProgress2, renderLanes2) {
        var providerType = workInProgress2.type;
        var context2 = providerType._context;
        var newProps = workInProgress2.pendingProps;
        var oldProps = workInProgress2.memoizedProps;
        var newValue = newProps.value;
        {
          if (!("value" in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
              hasWarnedAboutUsingNoValuePropOnContextProvider = true;
              error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
            }
          }
          var providerPropTypes = workInProgress2.type.propTypes;
          if (providerPropTypes) {
            checkPropTypes2(providerPropTypes, newProps, "prop", "Context.Provider");
          }
        }
        pushProvider(workInProgress2, newValue);
        if (oldProps !== null) {
          var oldValue = oldProps.value;
          var changedBits = calculateChangedBits(context2, newValue, oldValue);
          if (changedBits === 0) {
            if (oldProps.children === newProps.children && !hasContextChanged()) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          } else {
            propagateContextChange(workInProgress2, context2, changedBits, renderLanes2);
          }
        }
        var newChildren = newProps.children;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingContextAsConsumer = false;
      function updateContextConsumer(current2, workInProgress2, renderLanes2) {
        var context2 = workInProgress2.type;
        {
          if (context2._context === void 0) {
            if (context2 !== context2.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true;
                error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
              }
            }
          } else {
            context2 = context2._context;
          }
        }
        var newProps = workInProgress2.pendingProps;
        var render2 = newProps.children;
        {
          if (typeof render2 !== "function") {
            error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
          }
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var newValue = readContext(context2, newProps.unstable_observedBits);
        var newChildren;
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          newChildren = render2(newValue);
          setIsRendering(false);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          workInProgress2.dependencies = current2.dependencies;
        }
        {
          stopProfilerTimerIfRunning();
        }
        markSkippedUpdateLanes(workInProgress2.lanes);
        if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
          return null;
        } else {
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
      }
      function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;
          if (returnFiber === null) {
            throw new Error("Cannot swap the root fiber.");
          }
          current2.alternate = null;
          oldWorkInProgress.alternate = null;
          newWorkInProgress.index = oldWorkInProgress.index;
          newWorkInProgress.sibling = oldWorkInProgress.sibling;
          newWorkInProgress.return = oldWorkInProgress.return;
          newWorkInProgress.ref = oldWorkInProgress.ref;
          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress;
          } else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) {
              throw new Error("Expected parent to have a child.");
            }
            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling;
              if (prevSibling === null) {
                throw new Error("Expected to find the previous sibling.");
              }
            }
            prevSibling.sibling = newWorkInProgress;
          }
          var last = returnFiber.lastEffect;
          if (last !== null) {
            last.nextEffect = current2;
            returnFiber.lastEffect = current2;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = current2;
          }
          current2.nextEffect = null;
          current2.flags = Deletion;
          newWorkInProgress.flags |= Placement;
          return newWorkInProgress;
        }
      }
      function beginWork(current2, workInProgress2, renderLanes2) {
        var updateLanes = workInProgress2.lanes;
        {
          if (workInProgress2._debugNeedsRemount && current2 !== null) {
            return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
          }
        }
        if (current2 !== null) {
          var oldProps = current2.memoizedProps;
          var newProps = workInProgress2.pendingProps;
          if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
            didReceiveUpdate = true;
          } else if (!includesSomeLane(renderLanes2, updateLanes)) {
            didReceiveUpdate = false;
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                pushProvider(workInProgress2, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          } else {
            if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            } else {
              didReceiveUpdate = false;
            }
          }
        } else {
          didReceiveUpdate = false;
        }
        workInProgress2.lanes = NoLanes;
        switch (workInProgress2.tag) {
          case IndeterminateComponent: {
            return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
          }
          case LazyComponent: {
            var elementType = workInProgress2.elementType;
            return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
          }
          case FunctionComponent: {
            var _Component = workInProgress2.type;
            var unresolvedProps = workInProgress2.pendingProps;
            var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
            return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
          }
          case ClassComponent: {
            var _Component2 = workInProgress2.type;
            var _unresolvedProps = workInProgress2.pendingProps;
            var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
            return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
          }
          case HostRoot:
            return updateHostRoot(current2, workInProgress2, renderLanes2);
          case HostComponent:
            return updateHostComponent(current2, workInProgress2, renderLanes2);
          case HostText:
            return updateHostText(current2, workInProgress2);
          case SuspenseComponent:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case HostPortal:
            return updatePortalComponent(current2, workInProgress2, renderLanes2);
          case ForwardRef: {
            var type = workInProgress2.type;
            var _unresolvedProps2 = workInProgress2.pendingProps;
            var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
          }
          case Fragment:
            return updateFragment(current2, workInProgress2, renderLanes2);
          case Mode:
            return updateMode(current2, workInProgress2, renderLanes2);
          case Profiler:
            return updateProfiler(current2, workInProgress2, renderLanes2);
          case ContextProvider:
            return updateContextProvider(current2, workInProgress2, renderLanes2);
          case ContextConsumer:
            return updateContextConsumer(current2, workInProgress2, renderLanes2);
          case MemoComponent: {
            var _type2 = workInProgress2.type;
            var _unresolvedProps3 = workInProgress2.pendingProps;
            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = _type2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes2(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
          }
          case SimpleMemoComponent: {
            return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
          }
          case IncompleteClassComponent: {
            var _Component3 = workInProgress2.type;
            var _unresolvedProps4 = workInProgress2.pendingProps;
            var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
            return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
          }
          case SuspenseListComponent: {
            return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
          }
          case FundamentalComponent: {
            break;
          }
          case ScopeComponent: {
            break;
          }
          case Block: {
            break;
          }
          case OffscreenComponent: {
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
          case LegacyHiddenComponent: {
            return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
          }
        }
        {
          {
            throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= Update;
      }
      function markRef$1(workInProgress2) {
        workInProgress2.flags |= Ref;
      }
      var appendAllChildren;
      var updateHostContainer;
      var updateHostComponent$1;
      var updateHostText$1;
      {
        appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
          var node = workInProgress2.child;
          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode);
            } else if (node.tag === HostPortal)
              ;
            else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        };
        updateHostContainer = function(workInProgress2) {
        };
        updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
          var oldProps = current2.memoizedProps;
          if (oldProps === newProps) {
            return;
          }
          var instance = workInProgress2.stateNode;
          var currentHostContext = getHostContext();
          var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
          workInProgress2.updateQueue = updatePayload;
          if (updatePayload) {
            markUpdate(workInProgress2);
          }
        };
        updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
          if (oldText !== newText) {
            markUpdate(workInProgress2);
          }
        };
      }
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) {
          return;
        }
        switch (renderState.tailMode) {
          case "hidden": {
            var tailNode = renderState.tail;
            var lastTailNode = null;
            while (tailNode !== null) {
              if (tailNode.alternate !== null) {
                lastTailNode = tailNode;
              }
              tailNode = tailNode.sibling;
            }
            if (lastTailNode === null) {
              renderState.tail = null;
            } else {
              lastTailNode.sibling = null;
            }
            break;
          }
          case "collapsed": {
            var _tailNode = renderState.tail;
            var _lastTailNode = null;
            while (_tailNode !== null) {
              if (_tailNode.alternate !== null) {
                _lastTailNode = _tailNode;
              }
              _tailNode = _tailNode.sibling;
            }
            if (_lastTailNode === null) {
              if (!hasRenderedATailFallback && renderState.tail !== null) {
                renderState.tail.sibling = null;
              } else {
                renderState.tail = null;
              }
            } else {
              _lastTailNode.sibling = null;
            }
            break;
          }
        }
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        switch (workInProgress2.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            return null;
          case ClassComponent: {
            var Component = workInProgress2.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress2);
            }
            return null;
          }
          case HostRoot: {
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            var fiberRoot = workInProgress2.stateNode;
            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }
            if (current2 === null || current2.child === null) {
              var wasHydrated = popHydrationState(workInProgress2);
              if (wasHydrated) {
                markUpdate(workInProgress2);
              } else if (!fiberRoot.hydrate) {
                workInProgress2.flags |= Snapshot;
              }
            }
            updateHostContainer(workInProgress2);
            return null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress2.type;
            if (current2 !== null && workInProgress2.stateNode != null) {
              updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
              if (current2.ref !== workInProgress2.ref) {
                markRef$1(workInProgress2);
              }
            } else {
              if (!newProps) {
                if (!(workInProgress2.stateNode !== null)) {
                  {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                return null;
              }
              var currentHostContext = getHostContext();
              var _wasHydrated = popHydrationState(workInProgress2);
              if (_wasHydrated) {
                if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress2);
                }
              } else {
                var instance = createInstance2(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                appendAllChildren(instance, workInProgress2, false, false);
                workInProgress2.stateNode = instance;
                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                  markUpdate(workInProgress2);
                }
              }
              if (workInProgress2.ref !== null) {
                markRef$1(workInProgress2);
              }
            }
            return null;
          }
          case HostText: {
            var newText = newProps;
            if (current2 && workInProgress2.stateNode != null) {
              var oldText = current2.memoizedProps;
              updateHostText$1(current2, workInProgress2, oldText, newText);
            } else {
              if (typeof newText !== "string") {
                if (!(workInProgress2.stateNode !== null)) {
                  {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
              }
              var _rootContainerInstance = getRootHostContainer();
              var _currentHostContext = getHostContext();
              var _wasHydrated2 = popHydrationState(workInProgress2);
              if (_wasHydrated2) {
                if (prepareToHydrateHostTextInstance(workInProgress2)) {
                  markUpdate(workInProgress2);
                }
              } else {
                workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
              }
            }
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var nextState = workInProgress2.memoizedState;
            if ((workInProgress2.flags & DidCapture) !== NoFlags) {
              workInProgress2.lanes = renderLanes2;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = false;
            if (current2 === null) {
              if (workInProgress2.memoizedProps.fallback !== void 0) {
                popHydrationState(workInProgress2);
              }
            } else {
              var prevState = current2.memoizedState;
              prevDidTimeout = prevState !== null;
            }
            if (nextDidTimeout && !prevDidTimeout) {
              if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                  renderDidSuspend();
                } else {
                  renderDidSuspendDelayIfPossible();
                }
              }
            }
            {
              if (nextDidTimeout || prevDidTimeout) {
                workInProgress2.flags |= Update;
              }
            }
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            updateHostContainer(workInProgress2);
            if (current2 === null) {
              preparePortalMount(workInProgress2.stateNode.containerInfo);
            }
            return null;
          case ContextProvider:
            popProvider(workInProgress2);
            return null;
          case IncompleteClassComponent: {
            var _Component = workInProgress2.type;
            if (isContextProvider(_Component)) {
              popContext(workInProgress2);
            }
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              return null;
            }
            var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
            var renderedTail = renderState.rendering;
            if (renderedTail === null) {
              if (!didSuspendAlready) {
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                if (!cannotBeSuspended) {
                  var row = workInProgress2.child;
                  while (row !== null) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = true;
                      workInProgress2.flags |= DidCapture;
                      cutOffTailIfNeeded(renderState, false);
                      var newThennables = suspended.updateQueue;
                      if (newThennables !== null) {
                        workInProgress2.updateQueue = newThennables;
                        workInProgress2.flags |= Update;
                      }
                      if (renderState.lastEffect === null) {
                        workInProgress2.firstEffect = null;
                      }
                      workInProgress2.lastEffect = renderState.lastEffect;
                      resetChildFibers(workInProgress2, renderLanes2);
                      pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                      return workInProgress2.child;
                    }
                    row = row.sibling;
                  }
                }
                if (renderState.tail !== null && now() > getRenderTargetTime()) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                  {
                    markSpawnedWork(SomeRetryLane);
                  }
                }
              } else {
                cutOffTailIfNeeded(renderState, false);
              }
            } else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  var _newThennables = _suspended.updateQueue;
                  if (_newThennables !== null) {
                    workInProgress2.updateQueue = _newThennables;
                    workInProgress2.flags |= Update;
                  }
                  cutOffTailIfNeeded(renderState, true);
                  if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                    var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                    if (lastEffect !== null) {
                      lastEffect.nextEffect = null;
                    }
                    return null;
                  }
                } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                  {
                    markSpawnedWork(SomeRetryLane);
                  }
                }
              }
              if (renderState.isBackwards) {
                renderedTail.sibling = workInProgress2.child;
                workInProgress2.child = renderedTail;
              } else {
                var previousSibling = renderState.last;
                if (previousSibling !== null) {
                  previousSibling.sibling = renderedTail;
                } else {
                  workInProgress2.child = renderedTail;
                }
                renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              var next = renderState.tail;
              renderState.rendering = next;
              renderState.tail = next.sibling;
              renderState.lastEffect = workInProgress2.lastEffect;
              renderState.renderingStartTime = now();
              next.sibling = null;
              var suspenseContext = suspenseStackCursor.current;
              if (didSuspendAlready) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              } else {
                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              }
              pushSuspenseContext(workInProgress2, suspenseContext);
              return next;
            }
            return null;
          }
          case FundamentalComponent: {
            break;
          }
          case ScopeComponent: {
            break;
          }
          case Block:
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            popRenderLanes(workInProgress2);
            if (current2 !== null) {
              var _nextState = workInProgress2.memoizedState;
              var _prevState = current2.memoizedState;
              var prevIsHidden = _prevState !== null;
              var nextIsHidden = _nextState !== null;
              if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                workInProgress2.flags |= Update;
              }
            }
            return null;
          }
        }
        {
          {
            throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function unwindWork(workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case ClassComponent: {
            var Component = workInProgress2.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress2);
            }
            var flags2 = workInProgress2.flags;
            if (flags2 & ShouldCapture) {
              workInProgress2.flags = flags2 & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case HostRoot: {
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            var _flags = workInProgress2.flags;
            if (!((_flags & DidCapture) === NoFlags)) {
              {
                throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
              }
            }
            workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
            return workInProgress2;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var _flags2 = workInProgress2.flags;
            if (_flags2 & ShouldCapture) {
              workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            return null;
          case ContextProvider:
            popProvider(workInProgress2);
            return null;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(workInProgress2);
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(interruptedWork) {
        switch (interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              popContext(interruptedWork);
            }
            break;
          }
          case HostRoot: {
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            resetWorkInProgressVersions();
            break;
          }
          case HostComponent: {
            popHostContext(interruptedWork);
            break;
          }
          case HostPortal:
            popHostContainer(interruptedWork);
            break;
          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;
          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;
          case ContextProvider:
            popProvider(interruptedWork);
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(interruptedWork);
            break;
        }
      }
      function createCapturedValue(value, source2) {
        return {
          value,
          source: source2,
          stack: getStackByFiberInDevAndProd(source2)
        };
      }
      function showErrorDialog(boundary, errorInfo) {
        return true;
      }
      function logCapturedError(boundary, errorInfo) {
        try {
          var logError = showErrorDialog(boundary, errorInfo);
          if (logError === false) {
            return;
          }
          var error2 = errorInfo.value;
          if (true) {
            var source2 = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : "";
            if (error2 != null && error2._suppressLogging) {
              if (boundary.tag === ClassComponent) {
                return;
              }
              console["error"](error2);
            }
            var componentName = source2 ? getComponentName(source2.type) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            var errorBoundaryName = getComponentName(boundary.type);
            if (errorBoundaryName) {
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            } else {
              errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            }
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          }
        } catch (e) {
          setTimeout(function() {
            throw e;
          });
        }
      }
      var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        update.payload = {
          element: null
        };
        var error2 = errorInfo.value;
        update.callback = function() {
          onUncaughtError(error2);
          logCapturedError(fiber, errorInfo);
        };
        return update;
      }
      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === "function") {
          var error$1 = errorInfo.value;
          update.payload = function() {
            logCapturedError(fiber, errorInfo);
            return getDerivedStateFromError(error$1);
          };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === "function") {
          update.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            if (typeof getDerivedStateFromError !== "function") {
              markLegacyErrorBoundaryAsFailed(this);
              logCapturedError(fiber, errorInfo);
            }
            var error$12 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$12, {
              componentStack: stack !== null ? stack : ""
            });
            {
              if (typeof getDerivedStateFromError !== "function") {
                if (!includesSomeLane(fiber.lanes, SyncLane)) {
                  error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                }
              }
            }
          };
        } else {
          update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
          };
        }
        return update;
      }
      function attachPingListener(root3, wakeable, lanes) {
        var pingCache = root3.pingCache;
        var threadIDs;
        if (pingCache === null) {
          pingCache = root3.pingCache = new PossiblyWeakMap$1();
          threadIDs = new Set();
          pingCache.set(wakeable, threadIDs);
        } else {
          threadIDs = pingCache.get(wakeable);
          if (threadIDs === void 0) {
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
          }
        }
        if (!threadIDs.has(lanes)) {
          threadIDs.add(lanes);
          var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
          wakeable.then(ping, ping);
        }
      }
      function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= Incomplete;
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        if (value !== null && typeof value === "object" && typeof value.then === "function") {
          var wakeable = value;
          if ((sourceFiber.mode & BlockingMode) === NoMode) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
          var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
          var _workInProgress = returnFiber;
          do {
            if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
              var wakeables = _workInProgress.updateQueue;
              if (wakeables === null) {
                var updateQueue = new Set();
                updateQueue.add(wakeable);
                _workInProgress.updateQueue = updateQueue;
              } else {
                wakeables.add(wakeable);
              }
              if ((_workInProgress.mode & BlockingMode) === NoMode) {
                _workInProgress.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                return;
              }
              attachPingListener(root3, wakeable, rootRenderLanes);
              _workInProgress.flags |= ShouldCapture;
              _workInProgress.lanes = rootRenderLanes;
              return;
            }
            _workInProgress = _workInProgress.return;
          } while (_workInProgress !== null);
          value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
        }
        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress2 = returnFiber;
        do {
          switch (workInProgress2.tag) {
            case HostRoot: {
              var _errorInfo = value;
              workInProgress2.flags |= ShouldCapture;
              var lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
              enqueueCapturedUpdate(workInProgress2, _update);
              return;
            }
            case ClassComponent:
              var errorInfo = value;
              var ctor = workInProgress2.type;
              var instance = workInProgress2.stateNode;
              if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress2.flags |= ShouldCapture;
                var _lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                enqueueCapturedUpdate(workInProgress2, _update2);
                return;
              }
              break;
          }
          workInProgress2 = workInProgress2.return;
        } while (workInProgress2 !== null);
      }
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
      }
      var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
      var callComponentWillUnmountWithTimer = function(current2, instance) {
        instance.props = current2.memoizedProps;
        instance.state = current2.memoizedState;
        {
          instance.componentWillUnmount();
        }
      };
      function safelyCallComponentWillUnmount(current2, instance) {
        {
          invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
          if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current2, unmountError);
          }
        }
      }
      function safelyDetachRef(current2) {
        var ref = current2.ref;
        if (ref !== null) {
          if (typeof ref === "function") {
            {
              invokeGuardedCallback(null, ref, null, null);
              if (hasCaughtError()) {
                var refError = clearCaughtError();
                captureCommitPhaseError(current2, refError);
              }
            }
          } else {
            ref.current = null;
          }
        }
      }
      function safelyCallDestroy(current2, destroy) {
        {
          invokeGuardedCallback(null, destroy, null);
          if (hasCaughtError()) {
            var error2 = clearCaughtError();
            captureCommitPhaseError(current2, error2);
          }
        }
      }
      function commitBeforeMutationLifeCycles(current2, finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
          case Block: {
            return;
          }
          case ClassComponent: {
            if (finishedWork.flags & Snapshot) {
              if (current2 !== null) {
                var prevProps = current2.memoizedProps;
                var prevState = current2.memoizedState;
                var instance = finishedWork.stateNode;
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
            }
            return;
          }
          case HostRoot: {
            {
              if (finishedWork.flags & Snapshot) {
                var root3 = finishedWork.stateNode;
                clearContainer(root3.containerInfo);
              }
            }
            return;
          }
          case HostComponent:
          case HostText:
          case HostPortal:
          case IncompleteClassComponent:
            return;
        }
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function commitHookEffectListUnmount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & tag) === tag) {
              var destroy = effect.destroy;
              effect.destroy = void 0;
              if (destroy !== void 0) {
                destroy();
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitHookEffectListMount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & tag) === tag) {
              var create2 = effect.create;
              effect.destroy = create2();
              {
                var destroy = effect.destroy;
                if (destroy !== void 0 && typeof destroy !== "function") {
                  var addendum = void 0;
                  if (destroy === null) {
                    addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                  } else if (typeof destroy.then === "function") {
                    addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                  } else {
                    addendum = " You returned: " + destroy;
                  }
                  error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function schedulePassiveEffects(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            var _effect = effect, next = _effect.next, tag = _effect.tag;
            if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
              enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
              enqueuePendingPassiveHookEffectMount(finishedWork, effect);
            }
            effect = next;
          } while (effect !== firstEffect);
        }
      }
      function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
          case Block: {
            {
              commitHookEffectListMount(Layout2 | HasEffect, finishedWork);
            }
            schedulePassiveEffects(finishedWork);
            return;
          }
          case ClassComponent: {
            var instance = finishedWork.stateNode;
            if (finishedWork.flags & Update) {
              if (current2 === null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                {
                  instance.componentDidMount();
                }
              } else {
                var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                var prevState = current2.memoizedState;
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                {
                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                }
              }
            }
            var updateQueue = finishedWork.updateQueue;
            if (updateQueue !== null) {
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance.props !== finishedWork.memoizedProps) {
                    error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                  }
                  if (instance.state !== finishedWork.memoizedState) {
                    error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                  }
                }
              }
              commitUpdateQueue(finishedWork, updateQueue, instance);
            }
            return;
          }
          case HostRoot: {
            var _updateQueue = finishedWork.updateQueue;
            if (_updateQueue !== null) {
              var _instance = null;
              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;
                  case ClassComponent:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              }
              commitUpdateQueue(finishedWork, _updateQueue, _instance);
            }
            return;
          }
          case HostComponent: {
            var _instance2 = finishedWork.stateNode;
            if (current2 === null && finishedWork.flags & Update) {
              var type = finishedWork.type;
              var props = finishedWork.memoizedProps;
              commitMount(_instance2, type, props);
            }
            return;
          }
          case HostText: {
            return;
          }
          case HostPortal: {
            return;
          }
          case Profiler: {
            {
              var _finishedWork$memoize2 = finishedWork.memoizedProps;
              _finishedWork$memoize2.onCommit;
              var onRender = _finishedWork$memoize2.onRender;
              finishedWork.stateNode.effectDuration;
              var commitTime2 = getCommitTime();
              if (typeof onRender === "function") {
                {
                  onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                }
              }
            }
            return;
          }
          case SuspenseComponent: {
            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            return;
          }
          case SuspenseListComponent:
          case IncompleteClassComponent:
          case FundamentalComponent:
          case ScopeComponent:
          case OffscreenComponent:
          case LegacyHiddenComponent:
            return;
        }
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        {
          var node = finishedWork;
          while (true) {
            if (node.tag === HostComponent) {
              var instance = node.stateNode;
              if (isHidden) {
                hideInstance(instance);
              } else {
                unhideInstance(node.stateNode, node.memoizedProps);
              }
            } else if (node.tag === HostText) {
              var _instance3 = node.stateNode;
              if (isHidden) {
                hideTextInstance(_instance3);
              } else {
                unhideTextInstance(_instance3, node.memoizedProps);
              }
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
              ;
            else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === finishedWork) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance = finishedWork.stateNode;
          var instanceToUse;
          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = getPublicInstance(instance);
              break;
            default:
              instanceToUse = instance;
          }
          if (typeof ref === "function") {
            ref(instanceToUse);
          } else {
            {
              if (!ref.hasOwnProperty("current")) {
                error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
              }
            }
            ref.current = instanceToUse;
          }
        }
      }
      function commitDetachRef(current2) {
        var currentRef = current2.ref;
        if (currentRef !== null) {
          if (typeof currentRef === "function") {
            currentRef(null);
          } else {
            currentRef.current = null;
          }
        }
      }
      function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
        onCommitUnmount(current2);
        switch (current2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent:
          case Block: {
            var updateQueue = current2.updateQueue;
            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect;
              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;
                do {
                  var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                  if (destroy !== void 0) {
                    if ((tag & Passive$1) !== NoFlags$1) {
                      enqueuePendingPassiveHookEffectUnmount(current2, effect);
                    } else {
                      {
                        safelyCallDestroy(current2, destroy);
                      }
                    }
                  }
                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }
            return;
          }
          case ClassComponent: {
            safelyDetachRef(current2);
            var instance = current2.stateNode;
            if (typeof instance.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(current2, instance);
            }
            return;
          }
          case HostComponent: {
            safelyDetachRef(current2);
            return;
          }
          case HostPortal: {
            {
              unmountHostComponents(finishedRoot, current2);
            }
            return;
          }
          case FundamentalComponent: {
            return;
          }
          case DehydratedFragment: {
            return;
          }
          case ScopeComponent: {
            return;
          }
        }
      }
      function commitNestedUnmounts(finishedRoot, root3, renderPriorityLevel) {
        var node = root3;
        while (true) {
          commitUnmount(finishedRoot, node);
          if (node.child !== null && node.tag !== HostPortal) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === root3) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === root3) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function detachFiberMutation(fiber) {
        fiber.alternate = null;
        fiber.child = null;
        fiber.dependencies = null;
        fiber.firstEffect = null;
        fiber.lastEffect = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.return = null;
        fiber.updateQueue = null;
        {
          fiber._debugOwner = null;
        }
      }
      function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent;
          }
          parent = parent.return;
        }
        {
          {
            throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }
      function getHostSibling(fiber) {
        var node = fiber;
        siblings:
          while (true) {
            while (node.sibling === null) {
              if (node.return === null || isHostParent(node.return)) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
              if (node.flags & Placement) {
                continue siblings;
              }
              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child.return = node;
                node = node.child;
              }
            }
            if (!(node.flags & Placement)) {
              return node.stateNode;
            }
          }
      }
      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        var parent;
        var isContainer;
        var parentStateNode = parentFiber.stateNode;
        switch (parentFiber.tag) {
          case HostComponent:
            parent = parentStateNode;
            isContainer = false;
            break;
          case HostRoot:
            parent = parentStateNode.containerInfo;
            isContainer = true;
            break;
          case HostPortal:
            parent = parentStateNode.containerInfo;
            isContainer = true;
            break;
          case FundamentalComponent:
          default: {
            {
              throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        if (parentFiber.flags & ContentReset) {
          resetTextContent(parent);
          parentFiber.flags &= ~ContentReset;
        }
        var before = getHostSibling(finishedWork);
        if (isContainer) {
          insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
        } else {
          insertOrAppendPlacementNode(finishedWork, before, parent);
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
          var stateNode = isHost ? node.stateNode : node.stateNode.instance;
          if (before) {
            insertInContainerBefore(parent, stateNode, before);
          } else {
            appendChildToContainer(parent, stateNode);
          }
        } else if (tag === HostPortal)
          ;
        else {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
          var stateNode = isHost ? node.stateNode : node.stateNode.instance;
          if (before) {
            insertBefore(parent, stateNode, before);
          } else {
            appendChild(parent, stateNode);
          }
        } else if (tag === HostPortal)
          ;
        else {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNode(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNode(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
        var node = current2;
        var currentParentIsValid = false;
        var currentParent;
        var currentParentIsContainer;
        while (true) {
          if (!currentParentIsValid) {
            var parent = node.return;
            findParent:
              while (true) {
                if (!(parent !== null)) {
                  {
                    throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var parentStateNode = parent.stateNode;
                switch (parent.tag) {
                  case HostComponent:
                    currentParent = parentStateNode;
                    currentParentIsContainer = false;
                    break findParent;
                  case HostRoot:
                    currentParent = parentStateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;
                  case HostPortal:
                    currentParent = parentStateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;
                }
                parent = parent.return;
              }
            currentParentIsValid = true;
          }
          if (node.tag === HostComponent || node.tag === HostText) {
            commitNestedUnmounts(finishedRoot, node);
            if (currentParentIsContainer) {
              removeChildFromContainer(currentParent, node.stateNode);
            } else {
              removeChild(currentParent, node.stateNode);
            }
          } else if (node.tag === HostPortal) {
            if (node.child !== null) {
              currentParent = node.stateNode.containerInfo;
              currentParentIsContainer = true;
              node.child.return = node;
              node = node.child;
              continue;
            }
          } else {
            commitUnmount(finishedRoot, node);
            if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
          }
          if (node === current2) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === current2) {
              return;
            }
            node = node.return;
            if (node.tag === HostPortal) {
              currentParentIsValid = false;
            }
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
        {
          unmountHostComponents(finishedRoot, current2);
        }
        var alternate = current2.alternate;
        detachFiberMutation(current2);
        if (alternate !== null) {
          detachFiberMutation(alternate);
        }
      }
      function commitWork(current2, finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent:
          case Block: {
            {
              commitHookEffectListUnmount(Layout2 | HasEffect, finishedWork);
            }
            return;
          }
          case ClassComponent: {
            return;
          }
          case HostComponent: {
            var instance = finishedWork.stateNode;
            if (instance != null) {
              var newProps = finishedWork.memoizedProps;
              var oldProps = current2 !== null ? current2.memoizedProps : newProps;
              var type = finishedWork.type;
              var updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;
              if (updatePayload !== null) {
                commitUpdate(instance, updatePayload, type, oldProps, newProps);
              }
            }
            return;
          }
          case HostText: {
            if (!(finishedWork.stateNode !== null)) {
              {
                throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var textInstance = finishedWork.stateNode;
            var newText = finishedWork.memoizedProps;
            var oldText = current2 !== null ? current2.memoizedProps : newText;
            commitTextUpdate(textInstance, oldText, newText);
            return;
          }
          case HostRoot: {
            {
              var _root2 = finishedWork.stateNode;
              if (_root2.hydrate) {
                _root2.hydrate = false;
                commitHydratedContainer(_root2.containerInfo);
              }
            }
            return;
          }
          case Profiler: {
            return;
          }
          case SuspenseComponent: {
            commitSuspenseComponent(finishedWork);
            attachSuspenseRetryListeners(finishedWork);
            return;
          }
          case SuspenseListComponent: {
            attachSuspenseRetryListeners(finishedWork);
            return;
          }
          case IncompleteClassComponent: {
            return;
          }
          case FundamentalComponent: {
            break;
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            var newState = finishedWork.memoizedState;
            var isHidden = newState !== null;
            hideOrUnhideAllChildren(finishedWork, isHidden);
            return;
          }
        }
        {
          {
            throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState !== null) {
          markCommitTimeOfFallback();
          {
            var primaryChildParent = finishedWork.child;
            hideOrUnhideAllChildren(primaryChildParent, true);
          }
        }
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
          var current2 = finishedWork.alternate;
          if (current2 !== null) {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated;
              if (suspenseInstance !== null) {
                commitHydratedSuspenseInstance(suspenseInstance);
              }
            }
          }
        }
      }
      function attachSuspenseRetryListeners(finishedWork) {
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;
          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet();
          }
          wakeables.forEach(function(wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
              {
                if (wakeable.__reactDoNotTraceInteractions !== true) {
                  retry = tracing$1.unstable_wrap(retry);
                }
              }
              retryCache.add(wakeable);
              wakeable.then(retry, retry);
            }
          });
        }
      }
      function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
        if (current2 !== null) {
          var oldState = current2.memoizedState;
          if (oldState === null || oldState.dehydrated !== null) {
            var newState = finishedWork.memoizedState;
            return newState !== null && newState.dehydrated === null;
          }
        }
        return false;
      }
      function commitResetTextContent(current2) {
        resetTextContent(current2.stateNode);
      }
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor$1 = Symbol.for;
        symbolFor$1("selector.component");
        symbolFor$1("selector.has_pseudo_class");
        symbolFor$1("selector.role");
        symbolFor$1("selector.test_id");
        symbolFor$1("selector.text");
      }
      var commitHooks = [];
      function onCommitRoot$1() {
        {
          commitHooks.forEach(function(commitHook) {
            return commitHook();
          });
        }
      }
      var ceil = Math.ceil;
      var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
      var NoContext = 0;
      var BatchedContext = 1;
      var EventContext = 2;
      var DiscreteEventContext = 4;
      var LegacyUnbatchedContext = 8;
      var RenderContext = 16;
      var CommitContext = 32;
      var RetryAfterError = 64;
      var RootIncomplete = 0;
      var RootFatalErrored = 1;
      var RootErrored = 2;
      var RootSuspended = 3;
      var RootSuspendedWithDelay = 4;
      var RootCompleted = 5;
      var executionContext = NoContext;
      var workInProgressRoot = null;
      var workInProgress = null;
      var workInProgressRootRenderLanes = NoLanes;
      var subtreeRenderLanes = NoLanes;
      var subtreeRenderLanesCursor = createCursor(NoLanes);
      var workInProgressRootExitStatus = RootIncomplete;
      var workInProgressRootFatalError = null;
      var workInProgressRootIncludedLanes = NoLanes;
      var workInProgressRootSkippedLanes = NoLanes;
      var workInProgressRootUpdatedLanes = NoLanes;
      var workInProgressRootPingedLanes = NoLanes;
      var mostRecentlyUpdatedRoot = null;
      var globalMostRecentFallbackTime = 0;
      var FALLBACK_THROTTLE_MS = 500;
      var workInProgressRootRenderTargetTime = Infinity;
      var RENDER_TIMEOUT_MS = 500;
      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
      }
      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
      }
      var nextEffect = null;
      var hasUncaughtError = false;
      var firstUncaughtError = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var rootDoesHavePassiveEffects = false;
      var rootWithPendingPassiveEffects = null;
      var pendingPassiveEffectsRenderPriority = NoPriority$1;
      var pendingPassiveEffectsLanes = NoLanes;
      var pendingPassiveHookEffectsMount = [];
      var pendingPassiveHookEffectsUnmount = [];
      var rootsWithPendingDiscreteUpdates = null;
      var NESTED_UPDATE_LIMIT = 50;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      var NESTED_PASSIVE_UPDATE_LIMIT = 50;
      var nestedPassiveUpdateCount = 0;
      var spawnedWorkDuringRender = null;
      var currentEventTime = NoTimestamp;
      var currentEventWipLanes = NoLanes;
      var currentEventPendingLanes = NoLanes;
      var isFlushingPassiveEffects = false;
      var focusedInstanceHandle = null;
      var shouldFireAfterActiveInstanceBlur = false;
      function getWorkInProgressRoot() {
        return workInProgressRoot;
      }
      function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          return now();
        }
        if (currentEventTime !== NoTimestamp) {
          return currentEventTime;
        }
        currentEventTime = now();
        return currentEventTime;
      }
      function requestUpdateLane(fiber) {
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) {
          return SyncLane;
        } else if ((mode & ConcurrentMode) === NoMode) {
          return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
        }
        if (currentEventWipLanes === NoLanes) {
          currentEventWipLanes = workInProgressRootIncludedLanes;
        }
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
          if (currentEventPendingLanes !== NoLanes) {
            currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
          }
          return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
        }
        var schedulerPriority = getCurrentPriorityLevel();
        var lane;
        if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
          lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
        } else {
          var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
          lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
        }
        return lane;
      }
      function requestRetryLane(fiber) {
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) {
          return SyncLane;
        } else if ((mode & ConcurrentMode) === NoMode) {
          return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
        }
        if (currentEventWipLanes === NoLanes) {
          currentEventWipLanes = workInProgressRootIncludedLanes;
        }
        return findRetryLane(currentEventWipLanes);
      }
      function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates();
        warnAboutRenderPhaseUpdatesInDEV(fiber);
        var root3 = markUpdateLaneFromFiberToRoot(fiber, lane);
        if (root3 === null) {
          warnAboutUpdateOnUnmountedFiberInDEV(fiber);
          return null;
        }
        markRootUpdated(root3, lane, eventTime);
        if (root3 === workInProgressRoot) {
          {
            workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
          }
          if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
            markRootSuspended$1(root3, workInProgressRootRenderLanes);
          }
        }
        var priorityLevel = getCurrentPriorityLevel();
        if (lane === SyncLane) {
          if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            schedulePendingInteractions(root3, lane);
            performSyncWorkOnRoot(root3);
          } else {
            ensureRootIsScheduled(root3, eventTime);
            schedulePendingInteractions(root3, lane);
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        } else {
          if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
            if (rootsWithPendingDiscreteUpdates === null) {
              rootsWithPendingDiscreteUpdates = new Set([root3]);
            } else {
              rootsWithPendingDiscreteUpdates.add(root3);
            }
          }
          ensureRootIsScheduled(root3, eventTime);
          schedulePendingInteractions(root3, lane);
        }
        mostRecentlyUpdatedRoot = root3;
      }
      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, lane);
        }
        {
          if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          }
        }
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while (parent !== null) {
          parent.childLanes = mergeLanes(parent.childLanes, lane);
          alternate = parent.alternate;
          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, lane);
          } else {
            {
              if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
          }
          node = parent;
          parent = parent.return;
        }
        if (node.tag === HostRoot) {
          var root3 = node.stateNode;
          return root3;
        } else {
          return null;
        }
      }
      function ensureRootIsScheduled(root3, currentTime) {
        var existingCallbackNode = root3.callbackNode;
        markStarvedLanesAsExpired(root3, currentTime);
        var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        var newCallbackPriority = returnNextLanesPriority();
        if (nextLanes === NoLanes) {
          if (existingCallbackNode !== null) {
            cancelCallback(existingCallbackNode);
            root3.callbackNode = null;
            root3.callbackPriority = NoLanePriority;
          }
          return;
        }
        if (existingCallbackNode !== null) {
          var existingCallbackPriority = root3.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority) {
            return;
          }
          cancelCallback(existingCallbackNode);
        }
        var newCallbackNode;
        if (newCallbackPriority === SyncLanePriority) {
          newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
        } else if (newCallbackPriority === SyncBatchedLanePriority) {
          newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root3));
        } else {
          var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
          newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
        }
        root3.callbackPriority = newCallbackPriority;
        root3.callbackNode = newCallbackNode;
      }
      function performConcurrentWorkOnRoot(root3) {
        currentEventTime = NoTimestamp;
        currentEventWipLanes = NoLanes;
        currentEventPendingLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          {
            throw Error("Should not already be working.");
          }
        }
        var originalCallbackNode = root3.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
          if (root3.callbackNode !== originalCallbackNode) {
            return null;
          }
        }
        var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) {
          return null;
        }
        var exitStatus = renderRootConcurrent(root3, lanes);
        if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
          prepareFreshStack(root3, NoLanes);
        } else if (exitStatus !== RootIncomplete) {
          if (exitStatus === RootErrored) {
            executionContext |= RetryAfterError;
            if (root3.hydrate) {
              root3.hydrate = false;
              clearContainer(root3.containerInfo);
            }
            lanes = getLanesToRetrySynchronouslyOnError(root3);
            if (lanes !== NoLanes) {
              exitStatus = renderRootSync(root3, lanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root3, NoLanes);
            markRootSuspended$1(root3, lanes);
            ensureRootIsScheduled(root3, now());
            throw fatalError;
          }
          var finishedWork = root3.current.alternate;
          root3.finishedWork = finishedWork;
          root3.finishedLanes = lanes;
          finishConcurrentRender(root3, exitStatus, lanes);
        }
        ensureRootIsScheduled(root3, now());
        if (root3.callbackNode === originalCallbackNode) {
          return performConcurrentWorkOnRoot.bind(null, root3);
        }
        return null;
      }
      function finishConcurrentRender(root3, exitStatus, lanes) {
        switch (exitStatus) {
          case RootIncomplete:
          case RootFatalErrored: {
            {
              {
                throw Error("Root did not complete. This is a bug in React.");
              }
            }
          }
          case RootErrored: {
            commitRoot(root3);
            break;
          }
          case RootSuspended: {
            markRootSuspended$1(root3, lanes);
            if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
              if (msUntilTimeout > 10) {
                var nextLanes = getNextLanes(root3, NoLanes);
                if (nextLanes !== NoLanes) {
                  break;
                }
                var suspendedLanes = root3.suspendedLanes;
                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  requestEventTime();
                  markRootPinged(root3, suspendedLanes);
                  break;
                }
                root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), msUntilTimeout);
                break;
              }
            }
            commitRoot(root3);
            break;
          }
          case RootSuspendedWithDelay: {
            markRootSuspended$1(root3, lanes);
            if (includesOnlyTransitions(lanes)) {
              break;
            }
            {
              var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
              var eventTimeMs = mostRecentEventTime;
              var timeElapsedMs = now() - eventTimeMs;
              var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
              if (_msUntilTimeout > 10) {
                root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), _msUntilTimeout);
                break;
              }
            }
            commitRoot(root3);
            break;
          }
          case RootCompleted: {
            commitRoot(root3);
            break;
          }
          default: {
            {
              {
                throw Error("Unknown root exit status.");
              }
            }
          }
        }
      }
      function markRootSuspended$1(root3, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
        markRootSuspended(root3, suspendedLanes);
      }
      function performSyncWorkOnRoot(root3) {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          {
            throw Error("Should not already be working.");
          }
        }
        flushPassiveEffects();
        var lanes;
        var exitStatus;
        if (root3 === workInProgressRoot && includesSomeLane(root3.expiredLanes, workInProgressRootRenderLanes)) {
          lanes = workInProgressRootRenderLanes;
          exitStatus = renderRootSync(root3, lanes);
          if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
            lanes = getNextLanes(root3, lanes);
            exitStatus = renderRootSync(root3, lanes);
          }
        } else {
          lanes = getNextLanes(root3, NoLanes);
          exitStatus = renderRootSync(root3, lanes);
        }
        if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
          executionContext |= RetryAfterError;
          if (root3.hydrate) {
            root3.hydrate = false;
            clearContainer(root3.containerInfo);
          }
          lanes = getLanesToRetrySynchronouslyOnError(root3);
          if (lanes !== NoLanes) {
            exitStatus = renderRootSync(root3, lanes);
          }
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root3, NoLanes);
          markRootSuspended$1(root3, lanes);
          ensureRootIsScheduled(root3, now());
          throw fatalError;
        }
        var finishedWork = root3.current.alternate;
        root3.finishedWork = finishedWork;
        root3.finishedLanes = lanes;
        commitRoot(root3);
        ensureRootIsScheduled(root3, now());
        return null;
      }
      function flushDiscreteUpdates() {
        if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
            }
          }
          return;
        }
        flushPendingDiscreteUpdates();
        flushPassiveEffects();
      }
      function flushPendingDiscreteUpdates() {
        if (rootsWithPendingDiscreteUpdates !== null) {
          var roots = rootsWithPendingDiscreteUpdates;
          rootsWithPendingDiscreteUpdates = null;
          roots.forEach(function(root3) {
            markDiscreteUpdatesExpired(root3);
            ensureRootIsScheduled(root3, now());
          });
        }
        flushSyncCallbackQueue();
      }
      function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            resetRenderTimer();
            flushSyncCallbackQueue();
          }
        }
      }
      function batchedEventUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= EventContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            resetRenderTimer();
            flushSyncCallbackQueue();
          }
        }
      }
      function discreteUpdates$1(fn, a, b, c, d) {
        var prevExecutionContext = executionContext;
        executionContext |= DiscreteEventContext;
        {
          try {
            return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
      }
      function unbatchedUpdates(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext &= ~BatchedContext;
        executionContext |= LegacyUnbatchedContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext) {
            resetRenderTimer();
            flushSyncCallbackQueue();
          }
        }
      }
      function flushSync(fn, a) {
        var prevExecutionContext = executionContext;
        if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
          {
            error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
          }
          return fn(a);
        }
        executionContext |= BatchedContext;
        {
          try {
            if (fn) {
              return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
            } else {
              return void 0;
            }
          } finally {
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
          }
        }
      }
      function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
      }
      function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
      }
      function prepareFreshStack(root3, lanes) {
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        var timeoutHandle = root3.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
          root3.timeoutHandle = noTimeout;
          cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
          var interruptedWork = workInProgress.return;
          while (interruptedWork !== null) {
            unwindInterruptedWork(interruptedWork);
            interruptedWork = interruptedWork.return;
          }
        }
        workInProgressRoot = root3;
        workInProgress = createWorkInProgress(root3.current, null);
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        {
          spawnedWorkDuringRender = null;
        }
        {
          ReactStrictModeWarnings.discardPendingWarnings();
        }
      }
      function handleError(root3, thrownValue) {
        do {
          var erroredWork = workInProgress;
          try {
            resetContextDependencies();
            resetHooksAfterThrow();
            resetCurrentFiber();
            ReactCurrentOwner$2.current = null;
            if (erroredWork === null || erroredWork.return === null) {
              workInProgressRootExitStatus = RootFatalErrored;
              workInProgressRootFatalError = thrownValue;
              workInProgress = null;
              return;
            }
            if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
              stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
            }
            throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
            completeUnitOfWork(erroredWork);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue;
            if (workInProgress === erroredWork && erroredWork !== null) {
              erroredWork = erroredWork.return;
              workInProgress = erroredWork;
            } else {
              erroredWork = workInProgress;
            }
            continue;
          }
          return;
        } while (true);
      }
      function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) {
          return ContextOnlyDispatcher;
        } else {
          return prevDispatcher;
        }
      }
      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
      }
      function pushInteractions(root3) {
        {
          var prevInteractions = tracing$1.__interactionsRef.current;
          tracing$1.__interactionsRef.current = root3.memoizedInteractions;
          return prevInteractions;
        }
      }
      function popInteractions(prevInteractions) {
        {
          tracing$1.__interactionsRef.current = prevInteractions;
        }
      }
      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
      }
      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
      }
      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootSuspended;
        }
      }
      function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
        }
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
          markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
        }
      }
      function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) {
          workInProgressRootExitStatus = RootErrored;
        }
      }
      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootIncomplete;
      }
      function renderRootSync(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
          prepareFreshStack(root3, lanes);
          startWorkOnPendingInteractions(root3, lanes);
        }
        var prevInteractions = pushInteractions(root3);
        do {
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root3, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        {
          popInteractions(prevInteractions);
        }
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) {
          {
            {
              throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
      }
      function workLoopSync() {
        while (workInProgress !== null) {
          performUnitOfWork(workInProgress);
        }
      }
      function renderRootConcurrent(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
          resetRenderTimer();
          prepareFreshStack(root3, lanes);
          startWorkOnPendingInteractions(root3, lanes);
        }
        var prevInteractions = pushInteractions(root3);
        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root3, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        {
          popInteractions(prevInteractions);
        }
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) {
          return RootIncomplete;
        } else {
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
      }
      function workLoopConcurrent() {
        while (workInProgress !== null && !shouldYield()) {
          performUnitOfWork(workInProgress);
        }
      }
      function performUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork);
          next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else {
          next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
        }
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) {
          completeUnitOfWork(unitOfWork);
        } else {
          workInProgress = next;
        }
        ReactCurrentOwner$2.current = null;
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          var current2 = completedWork.alternate;
          var returnFiber = completedWork.return;
          if ((completedWork.flags & Incomplete) === NoFlags) {
            setCurrentFiber(completedWork);
            var next = void 0;
            if ((completedWork.mode & ProfileMode) === NoMode) {
              next = completeWork(current2, completedWork, subtreeRenderLanes);
            } else {
              startProfilerTimer(completedWork);
              next = completeWork(current2, completedWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            }
            resetCurrentFiber();
            if (next !== null) {
              workInProgress = next;
              return;
            }
            resetChildLanes(completedWork);
            if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
              if (returnFiber.firstEffect === null) {
                returnFiber.firstEffect = completedWork.firstEffect;
              }
              if (completedWork.lastEffect !== null) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                }
                returnFiber.lastEffect = completedWork.lastEffect;
              }
              var flags2 = completedWork.flags;
              if (flags2 > PerformedWork) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = completedWork;
                } else {
                  returnFiber.firstEffect = completedWork;
                }
                returnFiber.lastEffect = completedWork;
              }
            }
          } else {
            var _next = unwindWork(completedWork);
            if (_next !== null) {
              _next.flags &= HostEffectMask;
              workInProgress = _next;
              return;
            }
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              var actualDuration = completedWork.actualDuration;
              var child = completedWork.child;
              while (child !== null) {
                actualDuration += child.actualDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
            }
            if (returnFiber !== null) {
              returnFiber.firstEffect = returnFiber.lastEffect = null;
              returnFiber.flags |= Incomplete;
            }
          }
          var siblingFiber = completedWork.sibling;
          if (siblingFiber !== null) {
            workInProgress = siblingFiber;
            return;
          }
          completedWork = returnFiber;
          workInProgress = completedWork;
        } while (completedWork !== null);
        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootCompleted;
        }
      }
      function resetChildLanes(completedWork) {
        if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
          return;
        }
        var newChildLanes = NoLanes;
        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var actualDuration = completedWork.actualDuration;
          var treeBaseDuration = completedWork.selfBaseDuration;
          var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
          var child = completedWork.child;
          while (child !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
            if (shouldBubbleActualDurations) {
              actualDuration += child.actualDuration;
            }
            treeBaseDuration += child.treeBaseDuration;
            child = child.sibling;
          }
          var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
          if (isTimedOutSuspense) {
            var primaryChildFragment = completedWork.child;
            if (primaryChildFragment !== null) {
              treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
          }
          completedWork.actualDuration = actualDuration;
          completedWork.treeBaseDuration = treeBaseDuration;
        } else {
          var _child = completedWork.child;
          while (_child !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
            _child = _child.sibling;
          }
        }
        completedWork.childLanes = newChildLanes;
      }
      function commitRoot(root3) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root3, renderPriorityLevel));
        return null;
      }
      function commitRootImpl(root3, renderPriorityLevel) {
        do {
          flushPassiveEffects();
        } while (rootWithPendingPassiveEffects !== null);
        flushRenderPhaseStrictModeWarningsInDEV();
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          {
            throw Error("Should not already be working.");
          }
        }
        var finishedWork = root3.finishedWork;
        var lanes = root3.finishedLanes;
        if (finishedWork === null) {
          return null;
        }
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        if (!(finishedWork !== root3.current)) {
          {
            throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        root3.callbackNode = null;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root3, remainingLanes);
        if (rootsWithPendingDiscreteUpdates !== null) {
          if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root3)) {
            rootsWithPendingDiscreteUpdates.delete(root3);
          }
        }
        if (root3 === workInProgressRoot) {
          workInProgressRoot = null;
          workInProgress = null;
          workInProgressRootRenderLanes = NoLanes;
        }
        var firstEffect;
        if (finishedWork.flags > PerformedWork) {
          if (finishedWork.lastEffect !== null) {
            finishedWork.lastEffect.nextEffect = finishedWork;
            firstEffect = finishedWork.firstEffect;
          } else {
            firstEffect = finishedWork;
          }
        } else {
          firstEffect = finishedWork.firstEffect;
        }
        if (firstEffect !== null) {
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root3);
          ReactCurrentOwner$2.current = null;
          focusedInstanceHandle = prepareForCommit(root3.containerInfo);
          shouldFireAfterActiveInstanceBlur = false;
          nextEffect = firstEffect;
          do {
            {
              invokeGuardedCallback(null, commitBeforeMutationEffects, null);
              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var error2 = clearCaughtError();
                captureCommitPhaseError(nextEffect, error2);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);
          focusedInstanceHandle = null;
          {
            recordCommitTime();
          }
          nextEffect = firstEffect;
          do {
            {
              invokeGuardedCallback(null, commitMutationEffects, null, root3, renderPriorityLevel);
              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var _error = clearCaughtError();
                captureCommitPhaseError(nextEffect, _error);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);
          resetAfterCommit(root3.containerInfo);
          root3.current = finishedWork;
          nextEffect = firstEffect;
          do {
            {
              invokeGuardedCallback(null, commitLayoutEffects, null, root3, lanes);
              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var _error2 = clearCaughtError();
                captureCommitPhaseError(nextEffect, _error2);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);
          nextEffect = null;
          requestPaint();
          {
            popInteractions(prevInteractions);
          }
          executionContext = prevExecutionContext;
        } else {
          root3.current = finishedWork;
          {
            recordCommitTime();
          }
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = false;
          rootWithPendingPassiveEffects = root3;
          pendingPassiveEffectsLanes = lanes;
          pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
          nextEffect = firstEffect;
          while (nextEffect !== null) {
            var nextNextEffect = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            if (nextEffect.flags & Deletion) {
              detachFiberAfterEffects(nextEffect);
            }
            nextEffect = nextNextEffect;
          }
        }
        remainingLanes = root3.pendingLanes;
        if (remainingLanes !== NoLanes) {
          {
            if (spawnedWorkDuringRender !== null) {
              var expirationTimes = spawnedWorkDuringRender;
              spawnedWorkDuringRender = null;
              for (var i2 = 0; i2 < expirationTimes.length; i2++) {
                scheduleInteractions(root3, expirationTimes[i2], root3.memoizedInteractions);
              }
            }
            schedulePendingInteractions(root3, remainingLanes);
          }
        } else {
          legacyErrorBoundariesThatAlreadyFailed = null;
        }
        {
          if (!rootDidHavePassiveEffects) {
            finishPendingInteractions(root3, lanes);
          }
        }
        if (remainingLanes === SyncLane) {
          if (root3 === rootWithNestedUpdates) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = root3;
          }
        } else {
          nestedUpdateCount = 0;
        }
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        {
          onCommitRoot$1();
        }
        ensureRootIsScheduled(root3, now());
        if (hasUncaughtError) {
          hasUncaughtError = false;
          var _error3 = firstUncaughtError;
          firstUncaughtError = null;
          throw _error3;
        }
        if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
          return null;
        }
        flushSyncCallbackQueue();
        return null;
      }
      function commitBeforeMutationEffects() {
        while (nextEffect !== null) {
          var current2 = nextEffect.alternate;
          if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
            if ((nextEffect.flags & Deletion) !== NoFlags) {
              if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                shouldFireAfterActiveInstanceBlur = true;
              }
            } else {
              if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                shouldFireAfterActiveInstanceBlur = true;
              }
            }
          }
          var flags2 = nextEffect.flags;
          if ((flags2 & Snapshot) !== NoFlags) {
            setCurrentFiber(nextEffect);
            commitBeforeMutationLifeCycles(current2, nextEffect);
            resetCurrentFiber();
          }
          if ((flags2 & Passive) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          nextEffect = nextEffect.nextEffect;
        }
      }
      function commitMutationEffects(root3, renderPriorityLevel) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect);
          var flags2 = nextEffect.flags;
          if (flags2 & ContentReset) {
            commitResetTextContent(nextEffect);
          }
          if (flags2 & Ref) {
            var current2 = nextEffect.alternate;
            if (current2 !== null) {
              commitDetachRef(current2);
            }
          }
          var primaryFlags = flags2 & (Placement | Update | Deletion | Hydrating);
          switch (primaryFlags) {
            case Placement: {
              commitPlacement(nextEffect);
              nextEffect.flags &= ~Placement;
              break;
            }
            case PlacementAndUpdate: {
              commitPlacement(nextEffect);
              nextEffect.flags &= ~Placement;
              var _current = nextEffect.alternate;
              commitWork(_current, nextEffect);
              break;
            }
            case Hydrating: {
              nextEffect.flags &= ~Hydrating;
              break;
            }
            case HydratingAndUpdate: {
              nextEffect.flags &= ~Hydrating;
              var _current2 = nextEffect.alternate;
              commitWork(_current2, nextEffect);
              break;
            }
            case Update: {
              var _current3 = nextEffect.alternate;
              commitWork(_current3, nextEffect);
              break;
            }
            case Deletion: {
              commitDeletion(root3, nextEffect);
              break;
            }
          }
          resetCurrentFiber();
          nextEffect = nextEffect.nextEffect;
        }
      }
      function commitLayoutEffects(root3, committedLanes) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect);
          var flags2 = nextEffect.flags;
          if (flags2 & (Update | Callback)) {
            var current2 = nextEffect.alternate;
            commitLifeCycles(root3, current2, nextEffect);
          }
          {
            if (flags2 & Ref) {
              commitAttachRef(nextEffect);
            }
          }
          resetCurrentFiber();
          nextEffect = nextEffect.nextEffect;
        }
      }
      function flushPassiveEffects() {
        if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
          var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
          pendingPassiveEffectsRenderPriority = NoPriority$1;
          {
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
          }
        }
        return false;
      }
      function enqueuePendingPassiveHookEffectMount(fiber, effect) {
        pendingPassiveHookEffectsMount.push(effect, fiber);
        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          scheduleCallback(NormalPriority$1, function() {
            flushPassiveEffects();
            return null;
          });
        }
      }
      function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
        pendingPassiveHookEffectsUnmount.push(effect, fiber);
        {
          fiber.flags |= PassiveUnmountPendingDev;
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.flags |= PassiveUnmountPendingDev;
          }
        }
        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          scheduleCallback(NormalPriority$1, function() {
            flushPassiveEffects();
            return null;
          });
        }
      }
      function invokePassiveEffectCreate(effect) {
        var create2 = effect.create;
        effect.destroy = create2();
      }
      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false;
        }
        var root3 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          {
            throw Error("Cannot flush passive effects while already rendering.");
          }
        }
        {
          isFlushingPassiveEffects = true;
        }
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root3);
        var unmountEffects = pendingPassiveHookEffectsUnmount;
        pendingPassiveHookEffectsUnmount = [];
        for (var i2 = 0; i2 < unmountEffects.length; i2 += 2) {
          var _effect = unmountEffects[i2];
          var fiber = unmountEffects[i2 + 1];
          var destroy = _effect.destroy;
          _effect.destroy = void 0;
          {
            fiber.flags &= ~PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.flags &= ~PassiveUnmountPendingDev;
            }
          }
          if (typeof destroy === "function") {
            {
              setCurrentFiber(fiber);
              {
                invokeGuardedCallback(null, destroy, null);
              }
              if (hasCaughtError()) {
                if (!(fiber !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var error2 = clearCaughtError();
                captureCommitPhaseError(fiber, error2);
              }
              resetCurrentFiber();
            }
          }
        }
        var mountEffects = pendingPassiveHookEffectsMount;
        pendingPassiveHookEffectsMount = [];
        for (var _i = 0; _i < mountEffects.length; _i += 2) {
          var _effect2 = mountEffects[_i];
          var _fiber = mountEffects[_i + 1];
          {
            setCurrentFiber(_fiber);
            {
              invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
            }
            if (hasCaughtError()) {
              if (!(_fiber !== null)) {
                {
                  throw Error("Should be working on an effect.");
                }
              }
              var _error4 = clearCaughtError();
              captureCommitPhaseError(_fiber, _error4);
            }
            resetCurrentFiber();
          }
        }
        var effect = root3.current.firstEffect;
        while (effect !== null) {
          var nextNextEffect = effect.nextEffect;
          effect.nextEffect = null;
          if (effect.flags & Deletion) {
            detachFiberAfterEffects(effect);
          }
          effect = nextNextEffect;
        }
        {
          popInteractions(prevInteractions);
          finishPendingInteractions(root3, lanes);
        }
        {
          isFlushingPassiveEffects = false;
        }
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue();
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
      }
      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }
      function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance);
        }
      }
      function prepareToThrowUncaughtError(error2) {
        if (!hasUncaughtError) {
          hasUncaughtError = true;
          firstUncaughtError = error2;
        }
      }
      var onUncaughtError = prepareToThrowUncaughtError;
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
        var errorInfo = createCapturedValue(error2, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        enqueueUpdate(rootFiber, update);
        var eventTime = requestEventTime();
        var root3 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
        if (root3 !== null) {
          markRootUpdated(root3, SyncLane, eventTime);
          ensureRootIsScheduled(root3, eventTime);
          schedulePendingInteractions(root3, SyncLane);
        }
      }
      function captureCommitPhaseError(sourceFiber, error2) {
        if (sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
          return;
        }
        var fiber = sourceFiber.return;
        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type;
            var instance = fiber.stateNode;
            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValue(error2, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
              enqueueUpdate(fiber, update);
              var eventTime = requestEventTime();
              var root3 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
              if (root3 !== null) {
                markRootUpdated(root3, SyncLane, eventTime);
                ensureRootIsScheduled(root3, eventTime);
                schedulePendingInteractions(root3, SyncLane);
              } else {
                if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  try {
                    instance.componentDidCatch(error2, errorInfo);
                  } catch (errorToIgnore) {
                  }
                }
              }
              return;
            }
          }
          fiber = fiber.return;
        }
      }
      function pingSuspendedRoot(root3, wakeable, pingedLanes) {
        var pingCache = root3.pingCache;
        if (pingCache !== null) {
          pingCache.delete(wakeable);
        }
        var eventTime = requestEventTime();
        markRootPinged(root3, pingedLanes);
        if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
          if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
            prepareFreshStack(root3, NoLanes);
          } else {
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
          }
        }
        ensureRootIsScheduled(root3, eventTime);
        schedulePendingInteractions(root3, pingedLanes);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        if (retryLane === NoLane) {
          retryLane = requestRetryLane(boundaryFiber);
        }
        var eventTime = requestEventTime();
        var root3 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
        if (root3 !== null) {
          markRootUpdated(root3, retryLane, eventTime);
          ensureRootIsScheduled(root3, eventTime);
          schedulePendingInteractions(root3, retryLane);
        }
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane;
        var retryCache;
        {
          retryCache = boundaryFiber.stateNode;
        }
        if (retryCache !== null) {
          retryCache.delete(wakeable);
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }
      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = null;
          {
            {
              throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
          }
        }
        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
          }
        }
      }
      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning();
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
        }
      }
      var didWarnStateUpdateForNotYetMountedComponent = null;
      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            return;
          }
          if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
            return;
          }
          var tag = fiber.tag;
          if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
            return;
          }
          var componentName = getComponentName(fiber.type) || "ReactComponent";
          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
              return;
            }
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
          }
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
      var didWarnStateUpdateForUnmountedComponent = null;
      function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        {
          var tag = fiber.tag;
          if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
            return;
          }
          if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
            return;
          }
          var componentName = getComponentName(fiber.type) || "ReactComponent";
          if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
              return;
            }
            didWarnStateUpdateForUnmountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
          }
          if (isFlushingPassiveEffects)
            ;
          else {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }
      var beginWork$1;
      {
        var dummyFiber = null;
        beginWork$1 = function(current2, unitOfWork, lanes) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
          try {
            return beginWork(current2, unitOfWork, lanes);
          } catch (originalError) {
            if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
              throw originalError;
            }
            resetContextDependencies();
            resetHooksAfterThrow();
            unwindInterruptedWork(unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) {
              startProfilerTimer(unitOfWork);
            }
            invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
            if (hasCaughtError()) {
              var replayError = clearCaughtError();
              throw replayError;
            } else {
              throw originalError;
            }
          }
        };
      }
      var didWarnAboutUpdateInRender = false;
      var didWarnAboutUpdateInRenderForAnotherComponent;
      {
        didWarnAboutUpdateInRenderForAnotherComponent = new Set();
      }
      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        {
          if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                  var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                  error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
              }
              case ClassComponent: {
                if (!didWarnAboutUpdateInRender) {
                  error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                  didWarnAboutUpdateInRender = true;
                }
                break;
              }
            }
          }
        }
      }
      var IsThisRendererActing = {
        current: false
      };
      function warnIfNotScopedWithMatchingAct(fiber) {
        {
          if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }
      function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        {
          if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
          }
        }
      }
      function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        {
          if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }
      var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
      var didWarnAboutUnmockedScheduler = false;
      function warnIfUnmockedScheduler(fiber) {
        {
          if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
              didWarnAboutUnmockedScheduler = true;
              error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
            }
          }
        }
      }
      function computeThreadID(root3, lane) {
        return lane * 1e3 + root3.interactionThreadID;
      }
      function markSpawnedWork(lane) {
        if (spawnedWorkDuringRender === null) {
          spawnedWorkDuringRender = [lane];
        } else {
          spawnedWorkDuringRender.push(lane);
        }
      }
      function scheduleInteractions(root3, lane, interactions) {
        if (interactions.size > 0) {
          var pendingInteractionMap = root3.pendingInteractionMap;
          var pendingInteractions = pendingInteractionMap.get(lane);
          if (pendingInteractions != null) {
            interactions.forEach(function(interaction) {
              if (!pendingInteractions.has(interaction)) {
                interaction.__count++;
              }
              pendingInteractions.add(interaction);
            });
          } else {
            pendingInteractionMap.set(lane, new Set(interactions));
            interactions.forEach(function(interaction) {
              interaction.__count++;
            });
          }
          var subscriber = tracing$1.__subscriberRef.current;
          if (subscriber !== null) {
            var threadID = computeThreadID(root3, lane);
            subscriber.onWorkScheduled(interactions, threadID);
          }
        }
      }
      function schedulePendingInteractions(root3, lane) {
        scheduleInteractions(root3, lane, tracing$1.__interactionsRef.current);
      }
      function startWorkOnPendingInteractions(root3, lanes) {
        var interactions = new Set();
        root3.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
          if (includesSomeLane(lanes, scheduledLane)) {
            scheduledInteractions.forEach(function(interaction) {
              return interactions.add(interaction);
            });
          }
        });
        root3.memoizedInteractions = interactions;
        if (interactions.size > 0) {
          var subscriber = tracing$1.__subscriberRef.current;
          if (subscriber !== null) {
            var threadID = computeThreadID(root3, lanes);
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error2) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error2;
              });
            }
          }
        }
      }
      function finishPendingInteractions(root3, committedLanes) {
        var remainingLanesAfterCommit = root3.pendingLanes;
        var subscriber;
        try {
          subscriber = tracing$1.__subscriberRef.current;
          if (subscriber !== null && root3.memoizedInteractions.size > 0) {
            var threadID = computeThreadID(root3, committedLanes);
            subscriber.onWorkStopped(root3.memoizedInteractions, threadID);
          }
        } catch (error2) {
          scheduleCallback(ImmediatePriority$1, function() {
            throw error2;
          });
        } finally {
          var pendingInteractionMap = root3.pendingInteractionMap;
          pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
            if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
              pendingInteractionMap.delete(lane);
              scheduledInteractions.forEach(function(interaction) {
                interaction.__count--;
                if (subscriber !== null && interaction.__count === 0) {
                  try {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  } catch (error2) {
                    scheduleCallback(ImmediatePriority$1, function() {
                      throw error2;
                    });
                  }
                }
              });
            }
          });
        }
      }
      function shouldForceFlushFallbacksInDEV() {
        return actingUpdatesScopeDepth > 0;
      }
      var actingUpdatesScopeDepth = 0;
      function detachFiberAfterEffects(fiber) {
        fiber.sibling = null;
        fiber.stateNode = null;
      }
      var resolveFamily = null;
      var failedBoundaries = null;
      var setRefreshHandler = function(handler) {
        {
          resolveFamily = handler;
        }
      };
      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === void 0) {
            return type;
          }
          return family.current;
        }
      }
      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }
      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === void 0) {
            if (type !== null && type !== void 0 && typeof type.render === "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);
              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };
                if (type.displayName !== void 0) {
                  syntheticType.displayName = type.displayName;
                }
                return syntheticType;
              }
            }
            return type;
          }
          return family.current;
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            return false;
          }
          var prevType = fiber.elementType;
          var nextType = element.type;
          var needsCompareFamilies = false;
          var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
          switch (fiber.tag) {
            case ClassComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              }
              break;
            }
            case FunctionComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case ForwardRef: {
              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case MemoComponent:
            case SimpleMemoComponent: {
              if ($$typeofNextType === REACT_MEMO_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            default:
              return false;
          }
          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
              return true;
            }
          }
          return false;
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            return;
          }
          if (typeof WeakSet !== "function") {
            return;
          }
          if (failedBoundaries === null) {
            failedBoundaries = new WeakSet();
          }
          failedBoundaries.add(fiber);
        }
      }
      var scheduleRefresh = function(root3, update) {
        {
          if (resolveFamily === null) {
            return;
          }
          var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
          flushPassiveEffects();
          flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
          });
        }
      };
      var scheduleRoot = function(root3, element) {
        {
          if (root3.context !== emptyContextObject) {
            return;
          }
          flushPassiveEffects();
          flushSync(function() {
            updateContainer(element, root3, null, null);
          });
        }
      };
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          if (resolveFamily === null) {
            throw new Error("Expected resolveFamily to be set during hot reload.");
          }
          var needsRender = false;
          var needsRemount = false;
          if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== void 0) {
              if (staleFamilies.has(family)) {
                needsRemount = true;
              } else if (updatedFamilies.has(family)) {
                if (tag === ClassComponent) {
                  needsRemount = true;
                } else {
                  needsRender = true;
                }
              }
            }
          }
          if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
              needsRemount = true;
            }
          }
          if (needsRemount) {
            fiber._debugNeedsRemount = true;
          }
          if (needsRemount || needsRender) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
          if (child !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
          }
          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
      }
      var findHostInstancesForRefresh = function(root3, families) {
        {
          var hostInstances = new Set();
          var types = new Set(families.map(function(family) {
            return family.current;
          }));
          findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
          return hostInstances;
        }
      };
      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          var didMatch = false;
          if (candidateType !== null) {
            if (types.has(candidateType)) {
              didMatch = true;
            }
          }
          if (didMatch) {
            findHostInstancesForFiberShallowly(fiber, hostInstances);
          } else {
            if (child !== null) {
              findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
            }
          }
          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
        }
      }
      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
          if (foundHostInstances) {
            return;
          }
          var node = fiber;
          while (true) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;
              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;
              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }
            if (node.return === null) {
              throw new Error("Expected to reach root first.");
            }
            node = node.return;
          }
        }
      }
      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node = fiber;
          var foundHostInstances = false;
          while (true) {
            if (node.tag === HostComponent) {
              foundHostInstances = true;
              hostInstances.add(node.stateNode);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === fiber) {
              return foundHostInstances;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === fiber) {
                return foundHostInstances;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        return false;
      }
      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
          new Map([[nonExtensibleObject, null]]);
          new Set([nonExtensibleObject]);
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      var debugCounter = 1;
      function FiberNode(tag, pendingProps, key2, mode) {
        this.tag = tag;
        this.key = key2;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.flags = NoFlags;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        {
          this.actualDuration = Number.NaN;
          this.actualStartTime = Number.NaN;
          this.selfBaseDuration = Number.NaN;
          this.treeBaseDuration = Number.NaN;
          this.actualDuration = 0;
          this.actualStartTime = -1;
          this.selfBaseDuration = 0;
          this.treeBaseDuration = 0;
        }
        {
          this._debugID = debugCounter++;
          this._debugSource = null;
          this._debugOwner = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;
          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }
      var createFiber = function(tag, pendingProps, key2, mode) {
        return new FiberNode(tag, pendingProps, key2, mode);
      };
      function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
      }
      function resolveLazyComponentTag(Component) {
        if (typeof Component === "function") {
          return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        } else if (Component !== void 0 && Component !== null) {
          var $$typeof = Component.$$typeof;
          if ($$typeof === REACT_FORWARD_REF_TYPE) {
            return ForwardRef;
          }
          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent;
          }
        }
        return IndeterminateComponent;
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        if (workInProgress2 === null) {
          workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
          workInProgress2.elementType = current2.elementType;
          workInProgress2.type = current2.type;
          workInProgress2.stateNode = current2.stateNode;
          {
            workInProgress2._debugID = current2._debugID;
            workInProgress2._debugSource = current2._debugSource;
            workInProgress2._debugOwner = current2._debugOwner;
            workInProgress2._debugHookTypes = current2._debugHookTypes;
          }
          workInProgress2.alternate = current2;
          current2.alternate = workInProgress2;
        } else {
          workInProgress2.pendingProps = pendingProps;
          workInProgress2.type = current2.type;
          workInProgress2.flags = NoFlags;
          workInProgress2.nextEffect = null;
          workInProgress2.firstEffect = null;
          workInProgress2.lastEffect = null;
          {
            workInProgress2.actualDuration = 0;
            workInProgress2.actualStartTime = -1;
          }
        }
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        var currentDependencies = current2.dependencies;
        workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        workInProgress2.sibling = current2.sibling;
        workInProgress2.index = current2.index;
        workInProgress2.ref = current2.ref;
        {
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
        {
          workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case ClassComponent:
              workInProgress2.type = resolveClassForHotReloading(current2.type);
              break;
            case ForwardRef:
              workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
              break;
          }
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= Placement;
        workInProgress2.nextEffect = null;
        workInProgress2.firstEffect = null;
        workInProgress2.lastEffect = null;
        var current2 = workInProgress2.alternate;
        if (current2 === null) {
          workInProgress2.childLanes = NoLanes;
          workInProgress2.lanes = renderLanes2;
          workInProgress2.child = null;
          workInProgress2.memoizedProps = null;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.dependencies = null;
          workInProgress2.stateNode = null;
          {
            workInProgress2.selfBaseDuration = 0;
            workInProgress2.treeBaseDuration = 0;
          }
        } else {
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.type = current2.type;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
        }
        return workInProgress2;
      }
      function createHostRootFiber(tag) {
        var mode;
        if (tag === ConcurrentRoot) {
          mode = ConcurrentMode | BlockingMode | StrictMode;
        } else if (tag === BlockingRoot) {
          mode = BlockingMode | StrictMode;
        } else {
          mode = NoMode;
        }
        if (isDevToolsPresent) {
          mode |= ProfileMode;
        }
        return createFiber(HostRoot, null, null, mode);
      }
      function createFiberFromTypeAndProps(type, key2, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;
        if (typeof type === "function") {
          if (shouldConstruct$1(type)) {
            fiberTag = ClassComponent;
            {
              resolvedType = resolveClassForHotReloading(resolvedType);
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType);
            }
          }
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          getTag:
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key2);
              case REACT_DEBUG_TRACING_MODE_TYPE:
                fiberTag = Mode;
                mode |= DebugTracingMode;
                break;
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictMode;
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key2);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key2);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key2);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key2);
              case REACT_LEGACY_HIDDEN_TYPE:
                return createFiberFromLegacyHidden(pendingProps, mode, lanes, key2);
              case REACT_SCOPE_TYPE:
              default: {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                    case REACT_BLOCK_TYPE:
                      fiberTag = Block;
                      break getTag;
                  }
                }
                var info = "";
                {
                  if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var ownerName = owner ? getComponentName(owner.type) : null;
                  if (ownerName) {
                    info += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                {
                  {
                    throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                  }
                }
              }
            }
        }
        var fiber = createFiber(fiberTag, pendingProps, key2, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        {
          fiber._debugOwner = owner;
        }
        return fiber;
      }
      function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        {
          owner = element._owner;
        }
        var type = element.type;
        var key2 = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key2, pendingProps, owner, mode, lanes);
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }
      function createFiberFromFragment(elements, mode, lanes, key2) {
        var fiber = createFiber(Fragment, elements, key2, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromProfiler(pendingProps, mode, lanes, key2) {
        {
          if (typeof pendingProps.id !== "string") {
            error('Profiler must specify an "id" as a prop');
          }
        }
        var fiber = createFiber(Profiler, pendingProps, key2, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        {
          fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
          };
        }
        return fiber;
      }
      function createFiberFromSuspense(pendingProps, mode, lanes, key2) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key2, mode);
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromSuspenseList(pendingProps, mode, lanes, key2) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key2, mode);
        {
          fiber.type = REACT_SUSPENSE_LIST_TYPE;
        }
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromOffscreen(pendingProps, mode, lanes, key2) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key2, mode);
        {
          fiber.type = REACT_OFFSCREEN_TYPE;
        }
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromLegacyHidden(pendingProps, mode, lanes, key2) {
        var fiber = createFiber(LegacyHiddenComponent, pendingProps, key2, mode);
        {
          fiber.type = REACT_LEGACY_HIDDEN_TYPE;
        }
        fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = "DELETED";
        fiber.type = "DELETED";
        return fiber;
      }
      function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }
      function assignFiberPropertiesInDEV(target, source2) {
        if (target === null) {
          target = createFiber(IndeterminateComponent, null, null, NoMode);
        }
        target.tag = source2.tag;
        target.key = source2.key;
        target.elementType = source2.elementType;
        target.type = source2.type;
        target.stateNode = source2.stateNode;
        target.return = source2.return;
        target.child = source2.child;
        target.sibling = source2.sibling;
        target.index = source2.index;
        target.ref = source2.ref;
        target.pendingProps = source2.pendingProps;
        target.memoizedProps = source2.memoizedProps;
        target.updateQueue = source2.updateQueue;
        target.memoizedState = source2.memoizedState;
        target.dependencies = source2.dependencies;
        target.mode = source2.mode;
        target.flags = source2.flags;
        target.nextEffect = source2.nextEffect;
        target.firstEffect = source2.firstEffect;
        target.lastEffect = source2.lastEffect;
        target.lanes = source2.lanes;
        target.childLanes = source2.childLanes;
        target.alternate = source2.alternate;
        {
          target.actualDuration = source2.actualDuration;
          target.actualStartTime = source2.actualStartTime;
          target.selfBaseDuration = source2.selfBaseDuration;
          target.treeBaseDuration = source2.treeBaseDuration;
        }
        target._debugID = source2._debugID;
        target._debugSource = source2._debugSource;
        target._debugOwner = source2._debugOwner;
        target._debugNeedsRemount = source2._debugNeedsRemount;
        target._debugHookTypes = source2._debugHookTypes;
        return target;
      }
      function FiberRootNode(containerInfo, tag, hydrate2) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate2;
        this.callbackNode = null;
        this.callbackPriority = NoLanePriority;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        {
          this.mutableSourceEagerHydrationData = null;
        }
        {
          this.interactionThreadID = tracing$1.unstable_getThreadID();
          this.memoizedInteractions = new Set();
          this.pendingInteractionMap = new Map();
        }
        {
          switch (tag) {
            case BlockingRoot:
              this._debugRootType = "createBlockingRoot()";
              break;
            case ConcurrentRoot:
              this._debugRootType = "createRoot()";
              break;
            case LegacyRoot:
              this._debugRootType = "createLegacyRoot()";
              break;
          }
        }
      }
      function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
        var root3 = new FiberRootNode(containerInfo, tag, hydrate2);
        var uninitializedFiber = createHostRootFiber(tag);
        root3.current = uninitializedFiber;
        uninitializedFiber.stateNode = root3;
        initializeUpdateQueue(uninitializedFiber);
        return root3;
      }
      function registerMutableSourceForHydration(root3, mutableSource) {
        var getVersion2 = mutableSource._getVersion;
        var version = getVersion2(mutableSource._source);
        if (root3.mutableSourceEagerHydrationData == null) {
          root3.mutableSourceEagerHydrationData = [mutableSource, version];
        } else {
          root3.mutableSourceEagerHydrationData.push(mutableSource, version);
        }
      }
      function createPortal(children, containerInfo, implementation) {
        var key2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key2 == null ? null : "" + key2,
          children,
          containerInfo,
          implementation
        };
      }
      var didWarnAboutNestedUpdates;
      var didWarnAboutFindNodeInStrictMode;
      {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
      }
      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject;
        }
        var fiber = get2(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
          var Component = fiber.type;
          if (isContextProvider(Component)) {
            return processChildContext(fiber, Component, parentContext);
          }
        }
        return parentContext;
      }
      function findHostInstanceWithWarning(component2, methodName) {
        {
          var fiber = get2(component2);
          if (fiber === void 0) {
            if (typeof component2.render === "function") {
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            } else {
              {
                {
                  throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component2));
                }
              }
            }
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;
              var previousFiber = current;
              try {
                setCurrentFiber(hostFiber);
                if (fiber.mode & StrictMode) {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } else {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                }
              } finally {
                if (previousFiber) {
                  setCurrentFiber(previousFiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          return hostFiber.stateNode;
        }
      }
      function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate2);
      }
      function updateContainer(element, container, parentComponent, callback) {
        {
          onScheduleRoot(container, element);
        }
        var current$1 = container.current;
        var eventTime = requestEventTime();
        {
          if (typeof jest !== "undefined") {
            warnIfUnmockedScheduler(current$1);
            warnIfNotScopedWithMatchingAct(current$1);
          }
        }
        var lane = requestUpdateLane(current$1);
        var context2 = getContextForSubtree(parentComponent);
        if (container.context === null) {
          container.context = context2;
        } else {
          container.pendingContext = context2;
        }
        {
          if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
          }
        }
        var update = createUpdate(eventTime, lane);
        update.payload = {
          element
        };
        callback = callback === void 0 ? null : callback;
        if (callback !== null) {
          {
            if (typeof callback !== "function") {
              error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            }
          }
          update.callback = callback;
        }
        enqueueUpdate(current$1, update);
        scheduleUpdateOnFiber(current$1, lane, eventTime);
        return lane;
      }
      function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) {
          return null;
        }
        switch (containerFiber.child.tag) {
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode);
          default:
            return containerFiber.child.stateNode;
        }
      }
      function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) {
          suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
        }
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) {
          markRetryLaneImpl(alternate, retryLane);
        }
      }
      function attemptUserBlockingHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var eventTime = requestEventTime();
        var lane = InputDiscreteHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var eventTime = requestEventTime();
        var lane = SelectiveHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function runWithPriority$2(priority, fn) {
        try {
          setCurrentUpdateLanePriority(priority);
          return fn();
        } finally {
        }
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) {
          return null;
        }
        if (hostFiber.tag === FundamentalComponent) {
          return hostFiber.stateNode.instance;
        }
        return hostFiber.stateNode;
      }
      var shouldSuspendImpl = function(fiber) {
        return false;
      };
      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }
      var overrideHookState = null;
      var overrideHookStateDeletePath = null;
      var overrideHookStateRenamePath = null;
      var overrideProps = null;
      var overridePropsDeletePath = null;
      var overridePropsRenamePath = null;
      var scheduleUpdate = null;
      var setSuspenseHandler = null;
      {
        var copyWithDeleteImpl = function(obj, path, index3) {
          var key2 = path[index3];
          var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
          if (index3 + 1 === path.length) {
            if (Array.isArray(updated)) {
              updated.splice(key2, 1);
            } else {
              delete updated[key2];
            }
            return updated;
          }
          updated[key2] = copyWithDeleteImpl(obj[key2], path, index3 + 1);
          return updated;
        };
        var copyWithDelete = function(obj, path) {
          return copyWithDeleteImpl(obj, path, 0);
        };
        var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
          var oldKey = oldPath[index3];
          var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
          if (index3 + 1 === oldPath.length) {
            var newKey = newPath[index3];
            updated[newKey] = updated[oldKey];
            if (Array.isArray(updated)) {
              updated.splice(oldKey, 1);
            } else {
              delete updated[oldKey];
            }
          } else {
            updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index3 + 1);
          }
          return updated;
        };
        var copyWithRename = function(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
          } else {
            for (var i2 = 0; i2 < newPath.length - 1; i2++) {
              if (oldPath[i2] !== newPath[i2]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
              }
            }
          }
          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        };
        var copyWithSetImpl = function(obj, path, index3, value) {
          if (index3 >= path.length) {
            return value;
          }
          var key2 = path[index3];
          var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
          updated[key2] = copyWithSetImpl(obj[key2], path, index3 + 1, value);
          return updated;
        };
        var copyWithSet = function(obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        };
        var findHook = function(fiber, id) {
          var currentHook2 = fiber.memoizedState;
          while (currentHook2 !== null && id > 0) {
            currentHook2 = currentHook2.next;
            id--;
          }
          return currentHook2;
        };
        overrideHookState = function(fiber, id, path, value) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = _assign({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
        };
        overrideHookStateDeletePath = function(fiber, id, path) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = _assign({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
        };
        overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = _assign({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
        };
        overrideProps = function(fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };
        overridePropsDeletePath = function(fiber, path) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };
        overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };
        scheduleUpdate = function(fiber) {
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };
        setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }
      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      function emptyFindFiberByHostInstance(instance) {
        return null;
      }
      function getCurrentFiberForDevTools() {
        return current;
      }
      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState,
          overrideHookStateDeletePath,
          overrideHookStateRenamePath,
          overrideProps,
          overridePropsDeletePath,
          overridePropsRenamePath,
          setSuspenseHandler,
          scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher2,
          findHostInstanceByFiber,
          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
          findHostInstancesForRefresh,
          scheduleRefresh,
          scheduleRoot,
          setRefreshHandler,
          getCurrentFiber: getCurrentFiberForDevTools
        });
      }
      function ReactDOMBlockingRoot(container, tag, options2) {
        this._internalRoot = createRootImpl(container, tag, options2);
      }
      ReactDOMBlockingRoot.prototype.render = function(children) {
        var root3 = this._internalRoot;
        {
          if (typeof arguments[1] === "function") {
            error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          }
          var container = root3.containerInfo;
          if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root3.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
              }
            }
          }
        }
        updateContainer(children, root3, null, null);
      };
      ReactDOMBlockingRoot.prototype.unmount = function() {
        {
          if (typeof arguments[0] === "function") {
            error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          }
        }
        var root3 = this._internalRoot;
        var container = root3.containerInfo;
        updateContainer(null, root3, null, function() {
          unmarkContainerAsRoot(container);
        });
      };
      function createRootImpl(container, tag, options2) {
        var hydrate2 = options2 != null && options2.hydrate === true;
        options2 != null && options2.hydrationOptions || null;
        var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
        var root3 = createContainer(container, tag, hydrate2);
        markContainerAsRoot(root3.current, container);
        container.nodeType;
        {
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
        }
        if (mutableSources) {
          for (var i2 = 0; i2 < mutableSources.length; i2++) {
            var mutableSource = mutableSources[i2];
            registerMutableSourceForHydration(root3, mutableSource);
          }
        }
        return root3;
      }
      function createLegacyRoot(container, options2) {
        return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
      }
      function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
      var topLevelUpdateWarnings;
      var warnedAboutHydrateAPI = false;
      {
        topLevelUpdateWarnings = function(container) {
          if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
              }
            }
          }
          var isRootRenderedBySomeReact = !!container._reactRootContainer;
          var rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
          if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
            error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
          }
          if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
            error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
          }
        };
      }
      function getReactRootElementInContainer(container) {
        if (!container) {
          return null;
        }
        if (container.nodeType === DOCUMENT_NODE) {
          return container.documentElement;
        } else {
          return container.firstChild;
        }
      }
      function shouldHydrateDueToLegacyHeuristic(container) {
        var rootElement = getReactRootElementInContainer(container);
        return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
      }
      function legacyCreateRootFromDOMContainer(container, forceHydrate) {
        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
        if (!shouldHydrate) {
          var warned = false;
          var rootSibling;
          while (rootSibling = container.lastChild) {
            {
              if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                warned = true;
                error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
              }
            }
            container.removeChild(rootSibling);
          }
        }
        {
          if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
            warnedAboutHydrateAPI = true;
            warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
          }
        }
        return createLegacyRoot(container, shouldHydrate ? {
          hydrate: true
        } : void 0);
      }
      function warnOnInvalidCallback$1(callback, callerName) {
        {
          if (callback !== null && typeof callback !== "function") {
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        }
      }
      function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        {
          topLevelUpdateWarnings(container);
          warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
        }
        var root3 = container._reactRootContainer;
        var fiberRoot;
        if (!root3) {
          root3 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
          fiberRoot = root3._internalRoot;
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(fiberRoot);
              originalCallback.call(instance);
            };
          }
          unbatchedUpdates(function() {
            updateContainer(children, fiberRoot, parentComponent, callback);
          });
        } else {
          fiberRoot = root3._internalRoot;
          if (typeof callback === "function") {
            var _originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(fiberRoot);
              _originalCallback.call(instance);
            };
          }
          updateContainer(children, fiberRoot, parentComponent, callback);
        }
        return getPublicRootInstance(fiberRoot);
      }
      function findDOMNode(componentOrElement) {
        {
          var owner = ReactCurrentOwner$3.current;
          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) {
              error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
            }
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }
        if (componentOrElement == null) {
          return null;
        }
        if (componentOrElement.nodeType === ELEMENT_NODE) {
          return componentOrElement;
        }
        {
          return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
        }
      }
      function hydrate(element, container, callback) {
        if (!isValidContainer(container)) {
          {
            throw Error("Target container is not a DOM element.");
          }
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          if (isModernRoot) {
            error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
      }
      function render(element, container, callback) {
        if (!isValidContainer(container)) {
          {
            throw Error("Target container is not a DOM element.");
          }
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          if (isModernRoot) {
            error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
      }
      function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        if (!isValidContainer(containerNode)) {
          {
            throw Error("Target container is not a DOM element.");
          }
        }
        if (!(parentComponent != null && has2(parentComponent))) {
          {
            throw Error("parentComponent must be a valid React Component");
          }
        }
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      }
      function unmountComponentAtNode(container) {
        if (!isValidContainer(container)) {
          {
            throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          if (isModernRoot) {
            error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
          }
        }
        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) {
              error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            }
          }
          unbatchedUpdates(function() {
            legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
              container._reactRootContainer = null;
              unmarkContainerAsRoot(container);
            });
          });
          return true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) {
              error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            }
          }
          return false;
        }
      }
      setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
      setAttemptContinuousHydration(attemptContinuousHydration$1);
      setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
      setAttemptHydrationAtPriority(runWithPriority$2);
      var didWarnAboutUnstableCreatePortal = false;
      {
        if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
          error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
      }
      setRestoreImplementation(restoreControlledState$3);
      setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
      function createPortal$1(children, container) {
        var key2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        if (!isValidContainer(container)) {
          {
            throw Error("Target container is not a DOM element.");
          }
        }
        return createPortal(children, container, null, key2);
      }
      function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
      }
      function unstable_createPortal(children, container) {
        var key2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        {
          if (!didWarnAboutUnstableCreatePortal) {
            didWarnAboutUnstableCreatePortal = true;
            warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
          }
        }
        return createPortal$1(children, container, key2);
      }
      var Internals = {
        Events: [
          getInstanceFromNode,
          getNodeFromInstance,
          getFiberCurrentPropsFromNode,
          enqueueStateRestore,
          restoreStateIfNeeded,
          flushPassiveEffects,
          IsThisRendererActing
        ]
      };
      var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
      });
      {
        if (!foundDevTools && canUseDOM2 && window.top === window.self) {
          if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
            var protocol = window.location.protocol;
            if (/^(https?|file):$/.test(protocol)) {
              console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
            }
          }
        }
      }
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
      exports.createPortal = createPortal$1;
      exports.findDOMNode = findDOMNode;
      exports.flushSync = flushSync;
      exports.hydrate = hydrate;
      exports.render = render;
      exports.unmountComponentAtNode = unmountComponentAtNode;
      exports.unstable_batchedUpdates = batchedUpdates$1;
      exports.unstable_createPortal = unstable_createPortal;
      exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
      exports.version = ReactVersion;
    })();
  }
});
var reactDom = createCommonjsModule(function(module) {
  {
    module.exports = reactDom_development;
  }
});
function Service(props) {
  const [timer, setTimer] = react.useState(120);
  const [service, setService] = react.useState(false);
  const [TimerID, setTimerID] = react.useState(null);
  react.useEffect(async () => {
    let req = await axios({
      method: "GET",
      url: "/data/getstatus"
    });
    setService(req.data.service === 1);
    props.serviceUpade(req.data.service === 1);
  }, []);
  const TimerFunction = () => {
    const id = setInterval(() => {
      setTimer((prev) => {
        if (prev === 0) {
          clearInterval(TimerID);
          return prev;
        } else {
          return prev - 1;
        }
      });
    }, 1e3);
    setTimerID(id);
  };
  const onserviceClicked = () => {
    setTimer(120);
    setService(false);
    TimerFunction();
    dbRequest().then(() => {
      props.serviceUpade(false);
    });
  };
  const offserviceClicked = () => {
    setTimer(120);
    setService(true);
    TimerFunction();
    dbRequest().then(() => {
      props.serviceUpade(true);
    });
  };
  const dbRequest = async () => {
    await axios({
      method: "PUT",
      url: "/data/setstatus"
    });
  };
  if (timer !== 0 && timer !== 120) {
    return /* @__PURE__ */ react.createElement("button", {
      type: "button",
      disabled: true,
      id: "service",
      className: "CountDownService"
    }, timer, " sec");
  } else {
    if (service) {
      return /* @__PURE__ */ react.createElement("button", {
        type: "button",
        id: "service",
        className: "OnService",
        onClick: onserviceClicked
      }, "En service");
    } else {
      return /* @__PURE__ */ react.createElement("button", {
        type: "button",
        id: "service",
        className: "OffService",
        onClick: offserviceClicked
      }, "Hors Service");
    }
  }
}
class Personnel extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      facture: false,
      vols: true
    };
  }
  componentDidUpdate(prevProps, prevState, snapshot) {
    if (this.props.service !== prevProps.service) {
      if (this.props.service === true) {
        if (this.props.user.pilote) {
          this.setState({vols: true});
        } else {
          this.setState({vols: false});
        }
        this.setState({facture: true});
      }
    }
    if (this.props.perm !== prevProps.perm && this.props.perm !== null) {
      if (!this.props.service) {
        if (this.props.perm["HS_facture"]) {
          this.setState({facture: true});
        } else {
          this.setState({facture: false});
        }
      }
    }
    if (this.props.user !== prevProps.user && this.props.user !== null) {
      if (this.props.user.pilote) {
        this.setState({vols: true});
      } else {
        this.setState({vols: false});
      }
    }
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "Menu-Item"
    }, /* @__PURE__ */ react.createElement("h2", {
      className: "Menu_title"
    }, /* @__PURE__ */ react.createElement("span", null, "Personnel")), /* @__PURE__ */ react.createElement("ul", {
      className: "Menu-list"
    }, /* @__PURE__ */ react.createElement("li", {
      className: "mobildisabled"
    }, /* @__PURE__ */ react.createElement(NavLink, {
      to: "/personnel/service"
    }, "Service")), this.state.facture && /* @__PURE__ */ react.createElement("li", null, /* @__PURE__ */ react.createElement(NavLink, {
      to: "/personnel/factures"
    }, "Factures")), /* @__PURE__ */ react.createElement("li", null, /* @__PURE__ */ react.createElement(NavLink, {
      to: "/personnel/remboursement"
    }, "Remboursement")), /* @__PURE__ */ react.createElement("li", null, /* @__PURE__ */ react.createElement(NavLink, {
      to: "/personnel/moncompte"
    }, "Mon Compte")), /* @__PURE__ */ react.createElement("li", null, /* @__PURE__ */ react.createElement(NavLink, {
      to: "/personnel/livret"
    }, "Mes formations")), this.state.vols && /* @__PURE__ */ react.createElement("li", null, /* @__PURE__ */ react.createElement(NavLink, {
      to: "/personnel/vols"
    }, "Carnet de vol"))));
  }
}
class Patient extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      rapport: false,
      BC: false,
      dossier: false
    };
  }
  componentDidMount() {
    if (this.props.service) {
      this.setState({rapport: true});
    }
    if (this.props.perm["HS_rapport"]) {
      this.setState({rapport: true});
    }
    if (this.props.service) {
      this.setState({BC: true});
    }
    if (this.props.perm["HS_BC"]) {
      this.setState({BC: true});
    }
    if (this.props.service) {
      this.setState({dossier: true});
    }
    if (this.props.perm["HS_dossier"]) {
      this.setState({dossier: true});
    }
  }
  componentDidUpdate(prevProps, prevState, snapshot) {
    if (this.props.perm !== prevProps.perm) {
      if (this.props.perm["HS_rapport"]) {
        this.setState({rapport: true});
      }
      if (this.props.perm["HS_BC"]) {
        this.setState({BC: true});
      }
      if (this.props.perm["HS_dossier"]) {
        this.setState({dossier: true});
      }
    }
    if (this.props.service !== prevProps.service) {
      if (this.props.service === true) {
        this.setState({dossier: true});
        this.setState({BC: true});
        this.setState({rapport: true});
      } else {
        if (!this.props.perm["HS_rapport"]) {
          this.setState({rapport: false});
        }
        if (!this.props.perm["HS_BC"]) {
          this.setState({BC: false});
        }
        if (!this.props.perm["HS_dossier"]) {
          this.setState({dossier: false});
        }
      }
    }
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "Menu-Item",
      id: "Patient"
    }, /* @__PURE__ */ react.createElement("h2", {
      className: "Menu_title"
    }, /* @__PURE__ */ react.createElement("span", null, "Patient")), /* @__PURE__ */ react.createElement("ul", {
      className: "Menu-list"
    }, this.state.rapport && /* @__PURE__ */ react.createElement("li", null, /* @__PURE__ */ react.createElement(NavLink, {
      to: "/patient/rapport"
    }, "Rapport  patient")), this.state.BC && /* @__PURE__ */ react.createElement("li", null, /* @__PURE__ */ react.createElement(NavLink, {
      to: "/patient/blackcode"
    }, "Black code")), this.state.dossier && /* @__PURE__ */ react.createElement("li", null, /* @__PURE__ */ react.createElement(NavLink, {
      to: "/patient/dossiers"
    }, "Dossiers"))));
  }
}
class Gestion extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      total: false,
      forma: false,
      logs: false,
      content: false,
      personnel: false,
      infos: false,
      time: false
    };
  }
  componentDidMount() {
    if (this.props.perm["rapport_horaire"]) {
      this.setState({time: true, total: true});
    }
    if (this.props.perm["perso_list"]) {
      this.setState({personnel: true, total: true});
    }
    if (this.props.perm["post_annonces"]) {
      this.setState({content: true, total: true});
    }
    if (this.props.perm["log_acces"]) {
      this.setState({logs: true, total: true});
    }
    if (this.props.perm["validate_forma"]) {
      this.setState({forma: true, total: true});
    }
    if (this.props.perm["content_mgt"]) {
      this.setState({content: true, total: true});
    }
    if (this.props.perm["infos_edit"]) {
      this.setState({infos: true, total: true});
    }
  }
  componentDidUpdate(prevProps, prevState, snapshot) {
    if (this.props !== prevProps) {
      if (this.props.perm["rapport_horaire"]) {
        this.setState({time: true, total: true});
      }
      if (this.props.perm["perso_list"]) {
        this.setState({personnel: true, total: true});
      }
      if (this.props.perm["post_annonces"]) {
        this.setState({content: true, total: true});
      }
      if (this.props.perm["logs_acces"]) {
        this.setState({logs: true, total: true});
      }
      if (this.props.perm["validate_forma"]) {
        this.setState({forma: true, total: true});
      }
      if (this.props.perm["content_mgt"]) {
        this.setState({content: true, total: true});
      }
      if (this.props.perm["infos_edit"]) {
        this.setState({infos: true, total: true});
      }
    }
  }
  render() {
    return this.state.total && /* @__PURE__ */ react.createElement("div", {
      className: "Menu-Item",
      id: "Administration"
    }, /* @__PURE__ */ react.createElement("h2", {
      className: "Menu_title"
    }, /* @__PURE__ */ react.createElement("span", null, "Gestion")), /* @__PURE__ */ react.createElement("ul", {
      className: "Menu-list"
    }, this.state.time && /* @__PURE__ */ react.createElement("li", {
      className: "mobildisabled"
    }, /* @__PURE__ */ react.createElement(NavLink, {
      to: "/gestion/rapport"
    }, "Rapport horaire")), this.state.content && /* @__PURE__ */ react.createElement("li", null, /* @__PURE__ */ react.createElement(NavLink, {
      to: "/gestion/content"
    }, "Gestion contenu")), this.state.personnel && /* @__PURE__ */ react.createElement("li", null, /* @__PURE__ */ react.createElement(NavLink, {
      to: "/gestion/personnel"
    }, "Personnel")), this.state.logs && /* @__PURE__ */ react.createElement("li", null, /* @__PURE__ */ react.createElement(NavLink, {
      to: "/gestion/log"
    }, "Logs")), this.state.forma && /* @__PURE__ */ react.createElement("li", null, /* @__PURE__ */ react.createElement(NavLink, {
      to: "/gestion/formation"
    }, "Formations")), this.state.infos && /* @__PURE__ */ react.createElement("li", null, /* @__PURE__ */ react.createElement(NavLink, {
      to: "/gestion/utils"
    }, "Gestions infos"))));
  }
}
class AnnonceCard extends react.Component {
  constructor(props) {
    super(props);
    this.props.date.split("-");
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "Annonce-Card"
    }, /* @__PURE__ */ react.createElement("h3", {
      className: "Title",
      dangerouslySetInnerHTML: {__html: this.props.title}
    }), /* @__PURE__ */ react.createElement("div", {
      className: "Separator"
    }), /* @__PURE__ */ react.createElement("p", {
      className: "Text",
      dangerouslySetInnerHTML: {__html: this.props.content}
    }), /* @__PURE__ */ react.createElement("div", {
      className: "Separator"
    }), /* @__PURE__ */ react.createElement("h4", {
      className: "Date"
    }, this.props.date));
  }
}
var PermsContext = react.createContext({
  perms: {}
});
class PersonnelCard extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      moused: false
    };
    this.BtnClick = this.BtnClick.bind(this);
  }
  async BtnClick(id) {
    await axios({
      method: "PUT",
      url: "/data/user/" + this.props.user.id + "/changestate/" + id
    }).then(() => {
      this.props.update();
    });
  }
  render() {
    let perm = this.context;
    return /* @__PURE__ */ react.createElement("div", {
      className: "Personnel-card",
      onMouseEnter: () => {
        this.setState({moused: true});
      },
      onMouseLeave: () => {
        this.setState({moused: false});
      }
    }, /* @__PURE__ */ react.createElement("h5", null, this.props.name), this.props.user.get_service_state !== null && /* @__PURE__ */ react.createElement("div", {
      className: "tag",
      style: {backgroundColor: this.props.user.get_service_state.color}
    }), this.state.moused && (perm.service_modify === 1 || perm.user_id === this.props.user.id) && /* @__PURE__ */ react.createElement("div", {
      className: "tag-selector"
    }, this.props.states && this.props.states.map((item) => /* @__PURE__ */ react.createElement("button", {
      onClick: () => {
        this.BtnClick(item.id);
      },
      key: item.id
    }, /* @__PURE__ */ react.createElement("label", null, item.name), /* @__PURE__ */ react.createElement("div", {
      className: "tag",
      style: {backgroundColor: item.color}
    }))), /* @__PURE__ */ react.createElement("button", {
      onClick: () => {
        this.BtnClick(null);
      }
    }, /* @__PURE__ */ react.createElement("label", null, "N/A"), /* @__PURE__ */ react.createElement("div", {
      className: "tag"
    }))));
  }
}
PersonnelCard.contextType = PermsContext;
class PersonnelList$1 extends react.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date(), users: [], states: [], displayed: [], data: false};
    this.request = this.request.bind(this);
  }
  componentDidMount() {
    this.request();
    this.timerID = setInterval(() => this.tick(), 2 * 60 * 1e3);
  }
  componentWillUnmount() {
    clearInterval(this.timerID);
  }
  async tick() {
    this.request();
    this.setState({
      date: new Date()
    });
  }
  async request() {
    this.hasdata(false);
    var req = await axios({
      url: "/data/AllInService",
      method: "GET"
    });
    this.setState({users: req.data.users, states: req.data.states, displayed: req.data.userStates, data: true});
  }
  hasdata(bool) {
    this.setState({data: bool});
  }
  render() {
    if (this.state.data === true) {
      return /* @__PURE__ */ react.createElement("div", {
        className: "Personnel_service"
      }, /* @__PURE__ */ react.createElement("h1", null, "Personnel en service : "), /* @__PURE__ */ react.createElement("div", {
        className: "Personnel-list"
      }, this.state.users.map((user) => /* @__PURE__ */ react.createElement(PersonnelCard, {
        key: user.id,
        name: user.name,
        user,
        states: this.state.states,
        update: this.request
      }))), /* @__PURE__ */ react.createElement("div", {
        className: "bottom"
      }, /* @__PURE__ */ react.createElement("div", {
        className: "groupcard"
      }, /* @__PURE__ */ react.createElement("div", {
        className: "contain"
      }, this.state.data === true && this.state.displayed.length > 0 && this.state.displayed.map((item) => /* @__PURE__ */ react.createElement("div", {
        className: "tag",
        key: item.id
      }, /* @__PURE__ */ react.createElement("label", null, item.name), /* @__PURE__ */ react.createElement("div", {
        style: {backgroundColor: item.color}
      })))))));
    } else {
      return /* @__PURE__ */ react.createElement("div", {
        className: "Personnel_service"
      }, /* @__PURE__ */ react.createElement("h1", null, "Personnel en service : "), /* @__PURE__ */ react.createElement("div", {
        className: "Personnel-list"
      }, !this.state.data && /* @__PURE__ */ react.createElement("div", {
        className: "load"
      }, /* @__PURE__ */ react.createElement("img", {
        src: "/assets/images/loading.svg",
        alt: ""
      }))));
    }
  }
}
var dateformat = createCommonjsModule(function(module, exports) {
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof2 = function _typeof3(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof2 = function _typeof3(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof2(obj);
  }
  (function(global2) {
    var _arguments = arguments;
    var dateFormat = function() {
      var token = /d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|W{1,2}|[LlopSZN]|"[^"]*"|'[^']*'/g;
      var timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g;
      var timezoneClip = /[^-+\dA-Z]/g;
      return function(date, mask, utc, gmt) {
        if (_arguments.length === 1 && kindOf(date) === "string" && !/\d/.test(date)) {
          mask = date;
          date = void 0;
        }
        date = date || date === 0 ? date : new Date();
        if (!(date instanceof Date)) {
          date = new Date(date);
        }
        if (isNaN(date)) {
          throw TypeError("Invalid date");
        }
        mask = String(dateFormat.masks[mask] || mask || dateFormat.masks["default"]);
        var maskSlice = mask.slice(0, 4);
        if (maskSlice === "UTC:" || maskSlice === "GMT:") {
          mask = mask.slice(4);
          utc = true;
          if (maskSlice === "GMT:") {
            gmt = true;
          }
        }
        var _ = function _2() {
          return utc ? "getUTC" : "get";
        };
        var _d = function d() {
          return date[_() + "Date"]();
        };
        var D = function D2() {
          return date[_() + "Day"]();
        };
        var _m = function m() {
          return date[_() + "Month"]();
        };
        var y = function y2() {
          return date[_() + "FullYear"]();
        };
        var _H = function H() {
          return date[_() + "Hours"]();
        };
        var _M = function M() {
          return date[_() + "Minutes"]();
        };
        var _s = function s() {
          return date[_() + "Seconds"]();
        };
        var _L = function L() {
          return date[_() + "Milliseconds"]();
        };
        var _o = function o() {
          return utc ? 0 : date.getTimezoneOffset();
        };
        var _W = function W() {
          return getWeek(date);
        };
        var _N = function N() {
          return getDayOfWeek(date);
        };
        var flags2 = {d: function d() {
          return _d();
        }, dd: function dd() {
          return pad(_d());
        }, ddd: function ddd() {
          return dateFormat.i18n.dayNames[D()];
        }, DDD: function DDD() {
          return getDayName({y: y(), m: _m(), d: _d(), _: _(), dayName: dateFormat.i18n.dayNames[D()], short: true});
        }, dddd: function dddd() {
          return dateFormat.i18n.dayNames[D() + 7];
        }, DDDD: function DDDD() {
          return getDayName({y: y(), m: _m(), d: _d(), _: _(), dayName: dateFormat.i18n.dayNames[D() + 7]});
        }, m: function m() {
          return _m() + 1;
        }, mm: function mm() {
          return pad(_m() + 1);
        }, mmm: function mmm() {
          return dateFormat.i18n.monthNames[_m()];
        }, mmmm: function mmmm() {
          return dateFormat.i18n.monthNames[_m() + 12];
        }, yy: function yy() {
          return String(y()).slice(2);
        }, yyyy: function yyyy() {
          return pad(y(), 4);
        }, h: function h() {
          return _H() % 12 || 12;
        }, hh: function hh() {
          return pad(_H() % 12 || 12);
        }, H: function H() {
          return _H();
        }, HH: function HH() {
          return pad(_H());
        }, M: function M() {
          return _M();
        }, MM: function MM() {
          return pad(_M());
        }, s: function s() {
          return _s();
        }, ss: function ss() {
          return pad(_s());
        }, l: function l() {
          return pad(_L(), 3);
        }, L: function L() {
          return pad(Math.floor(_L() / 10));
        }, t: function t() {
          return _H() < 12 ? dateFormat.i18n.timeNames[0] : dateFormat.i18n.timeNames[1];
        }, tt: function tt() {
          return _H() < 12 ? dateFormat.i18n.timeNames[2] : dateFormat.i18n.timeNames[3];
        }, T: function T() {
          return _H() < 12 ? dateFormat.i18n.timeNames[4] : dateFormat.i18n.timeNames[5];
        }, TT: function TT() {
          return _H() < 12 ? dateFormat.i18n.timeNames[6] : dateFormat.i18n.timeNames[7];
        }, Z: function Z() {
          return gmt ? "GMT" : utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, "").replace(/GMT\+0000/g, "UTC");
        }, o: function o() {
          return (_o() > 0 ? "-" : "+") + pad(Math.floor(Math.abs(_o()) / 60) * 100 + Math.abs(_o()) % 60, 4);
        }, p: function p() {
          return (_o() > 0 ? "-" : "+") + pad(Math.floor(Math.abs(_o()) / 60), 2) + ":" + pad(Math.floor(Math.abs(_o()) % 60), 2);
        }, S: function S() {
          return ["th", "st", "nd", "rd"][_d() % 10 > 3 ? 0 : (_d() % 100 - _d() % 10 != 10) * _d() % 10];
        }, W: function W() {
          return _W();
        }, WW: function WW() {
          return pad(_W());
        }, N: function N() {
          return _N();
        }};
        return mask.replace(token, function(match) {
          if (match in flags2) {
            return flags2[match]();
          }
          return match.slice(1, match.length - 1);
        });
      };
    }();
    dateFormat.masks = {default: "ddd mmm dd yyyy HH:MM:ss", shortDate: "m/d/yy", paddedShortDate: "mm/dd/yyyy", mediumDate: "mmm d, yyyy", longDate: "mmmm d, yyyy", fullDate: "dddd, mmmm d, yyyy", shortTime: "h:MM TT", mediumTime: "h:MM:ss TT", longTime: "h:MM:ss TT Z", isoDate: "yyyy-mm-dd", isoTime: "HH:MM:ss", isoDateTime: "yyyy-mm-dd'T'HH:MM:sso", isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'", expiresHeaderFormat: "ddd, dd mmm yyyy HH:MM:ss Z"};
    dateFormat.i18n = {dayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], monthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], timeNames: ["a", "p", "am", "pm", "A", "P", "AM", "PM"]};
    var pad = function pad2(val, len) {
      val = String(val);
      len = len || 2;
      while (val.length < len) {
        val = "0" + val;
      }
      return val;
    };
    var getDayName = function getDayName2(_ref) {
      var y = _ref.y, m = _ref.m, d = _ref.d, _ = _ref._, dayName = _ref.dayName, _ref$short = _ref["short"], _short = _ref$short === void 0 ? false : _ref$short;
      var today = new Date();
      var yesterday = new Date();
      yesterday.setDate(yesterday[_ + "Date"]() - 1);
      var tomorrow = new Date();
      tomorrow.setDate(tomorrow[_ + "Date"]() + 1);
      var today_d = function today_d2() {
        return today[_ + "Date"]();
      };
      var today_m = function today_m2() {
        return today[_ + "Month"]();
      };
      var today_y = function today_y2() {
        return today[_ + "FullYear"]();
      };
      var yesterday_d = function yesterday_d2() {
        return yesterday[_ + "Date"]();
      };
      var yesterday_m = function yesterday_m2() {
        return yesterday[_ + "Month"]();
      };
      var yesterday_y = function yesterday_y2() {
        return yesterday[_ + "FullYear"]();
      };
      var tomorrow_d = function tomorrow_d2() {
        return tomorrow[_ + "Date"]();
      };
      var tomorrow_m = function tomorrow_m2() {
        return tomorrow[_ + "Month"]();
      };
      var tomorrow_y = function tomorrow_y2() {
        return tomorrow[_ + "FullYear"]();
      };
      if (today_y() === y && today_m() === m && today_d() === d) {
        return _short ? "Tdy" : "Today";
      } else if (yesterday_y() === y && yesterday_m() === m && yesterday_d() === d) {
        return _short ? "Ysd" : "Yesterday";
      } else if (tomorrow_y() === y && tomorrow_m() === m && tomorrow_d() === d) {
        return _short ? "Tmw" : "Tomorrow";
      }
      return dayName;
    };
    var getWeek = function getWeek2(date) {
      var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());
      targetThursday.setDate(targetThursday.getDate() - (targetThursday.getDay() + 6) % 7 + 3);
      var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);
      firstThursday.setDate(firstThursday.getDate() - (firstThursday.getDay() + 6) % 7 + 3);
      var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();
      targetThursday.setHours(targetThursday.getHours() - ds);
      var weekDiff = (targetThursday - firstThursday) / (864e5 * 7);
      return 1 + Math.floor(weekDiff);
    };
    var getDayOfWeek = function getDayOfWeek2(date) {
      var dow = date.getDay();
      if (dow === 0) {
        dow = 7;
      }
      return dow;
    };
    var kindOf = function kindOf2(val) {
      if (val === null) {
        return "null";
      }
      if (val === void 0) {
        return "undefined";
      }
      if (_typeof2(val) !== "object") {
        return _typeof2(val);
      }
      if (Array.isArray(val)) {
        return "array";
      }
      return {}.toString.call(val).slice(8, -1).toLowerCase();
    };
    if (_typeof2(exports) === "object") {
      module.exports = dateFormat;
    } else {
      global2.dateFormat = dateFormat;
    }
  })(void 0);
});
class Main extends react.Component {
  constructor(props) {
    super(props);
    this.state = {annonces: [], data: false, text: ""};
  }
  async componentDidMount() {
    this.hasdata(false);
    var req = await axios({
      url: "/data/annonces",
      method: "GET"
    });
    await axios({
      method: "GET",
      url: "/data/infosutils/get"
    }).then((response) => {
      this.setState({text: response.data.infos});
    });
    this.setState({annonces: req.data.annonces});
    this.hasdata(true);
  }
  hasdata(bool) {
    this.setState({data: bool});
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      id: "Main-Page"
    }, /* @__PURE__ */ react.createElement(PersonnelList$1, null), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "Annonces"
    }, /* @__PURE__ */ react.createElement("h1", null, "Annonces : "), /* @__PURE__ */ react.createElement("div", {
      className: "Annonces-List"
    }, !this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    })), this.state.data && this.state.annonces.map((annonce) => /* @__PURE__ */ react.createElement(AnnonceCard, {
      title: annonce.title,
      key: annonce.id,
      content: annonce.content,
      date: dateformat(annonce.updated_at, "yyyy/mm/dd ") + "[FR]"
    })))), /* @__PURE__ */ react.createElement("div", {
      className: "Links"
    }, /* @__PURE__ */ react.createElement("h1", {
      className: "utilsName"
    }, "Liens utiles"), !this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    })), this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "render",
      id: "UtilsRendering",
      dangerouslySetInnerHTML: {__html: this.state.text}
    }))));
  }
}
class Intervention extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      transportlist: "",
      interlist: ""
    };
  }
  async componentDidMount() {
    var req = await axios({
      url: "/data/rapport/getforinter",
      method: "GET"
    });
    this.setState({transportlist: req.data.transport, interlist: req.data.intertype});
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "Rapport-Card Intervention"
    }, /* @__PURE__ */ react.createElement("h1", null, "Intervention"), /* @__PURE__ */ react.createElement("div", {
      className: "Form-Group"
    }, /* @__PURE__ */ react.createElement("select", {
      value: this.props.type,
      onChange: (e) => this.props.onTypeChange(e.target.value)
    }, /* @__PURE__ */ react.createElement("option", {
      disabled: true,
      value: 0
    }, "type d'intervention"), this.state.interlist !== "" && this.state.interlist.map((inter) => /* @__PURE__ */ react.createElement("option", {
      key: inter.id,
      value: inter.id
    }, inter.name))), /* @__PURE__ */ react.createElement("select", {
      value: this.props.transport,
      onChange: (e) => this.props.onTransportChange(e.target.value)
    }, this.state.transportlist !== "" && this.state.transportlist.map((broum) => /* @__PURE__ */ react.createElement("option", {
      key: broum.id,
      value: broum.id
    }, " transport : ", broum.name)))), /* @__PURE__ */ react.createElement("div", {
      className: "From-Group description"
    }, /* @__PURE__ */ react.createElement("label", null, "Description"), /* @__PURE__ */ react.createElement("textarea", {
      autoComplete: "off",
      className: this.props.errors.desc ? "form-error" : "",
      rows: "4",
      maxLength: "255",
      onChange: (e) => this.props.onDescChange(e.target.value),
      value: this.props.description
    }), this.props.errors.desc && /* @__PURE__ */ react.createElement("ul", {
      className: "error-list"
    }, this.props.errors.desc.map((item) => /* @__PURE__ */ react.createElement("li", null, item)))));
  }
}
class Facturation extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      activate: null
    };
  }
  componentDidMount() {
    this.setState({activate: this.props.payed});
  }
  onchange(e) {
    if (this.state.activate) {
      this.setState({activate: false});
      this.props.onPayedChange(false);
    } else {
      this.setState({activate: true});
      this.props.onPayedChange(true);
    }
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "Rapport-Card"
    }, /* @__PURE__ */ react.createElement("h1", null, "Facturation"), /* @__PURE__ */ react.createElement("div", {
      className: "Form-Group facture"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "number",
      className: this.props.errors.montant ? "form-error" : "",
      autoComplete: "off",
      placeholder: "montant en $",
      value: this.props.montant,
      onChange: (e) => this.props.onMotantChange(e.target.value)
    }), this.props.errors.montant && /* @__PURE__ */ react.createElement("ul", {
      className: "error-list"
    }, this.props.errors.montant.map((item) => /* @__PURE__ */ react.createElement("li", null, item))), /* @__PURE__ */ react.createElement("input", {
      id: "facture_checkbox",
      className: "switch",
      type: "checkbox",
      checked: this.state.activate,
      onChange: (e) => this.onchange(e)
    }), /* @__PURE__ */ react.createElement("label", {
      htmlFor: "facture_checkbox",
      id: "switch"
    }, "a")));
  }
}
class Informations$1 extends react.Component {
  constructor(props) {
    super(props);
    this.nomchange = this.nomchange.bind(this);
    this.telchange = this.telchange.bind(this);
    this.prenomchange = this.prenomchange.bind(this);
    this.starttimechange = this.starttimechange.bind(this);
    this.startdatechange = this.startdatechange.bind(this);
    this.state = {
      list: null
    };
  }
  telchange(e) {
    this.props.onTelChange(e.target.value);
  }
  async nomchange(e) {
    this.props.onNameChange(e.target.value);
    var req = await axios({
      url: "/data/patient/search/" + e.target.value,
      method: "GET"
    });
    this.setState({list: req.data.list});
  }
  prenomchange(e) {
    this.props.onPrenomChange(e.target.value);
  }
  starttimechange(e) {
    const startinter = this.props.startinter.split(" ");
    this.props.onStartChange(startinter[0] + " " + e.target.value);
  }
  startdatechange(e) {
    const startinter = this.props.startinter.split(" ");
    this.props.onStartChange(e.target.value + " " + startinter[1]);
  }
  render() {
    const name = this.props.name;
    this.props.prenom;
    const tel = this.props.tel;
    const b = " ";
    const startinter = this.props.startinter ? this.props.startinter.split(" ") : b.split(" ");
    return /* @__PURE__ */ react.createElement("div", {
      className: "Rapport-Card"
    }, /* @__PURE__ */ react.createElement("h1", null, "Informations"), /* @__PURE__ */ react.createElement("div", {
      className: "Form-Group"
    }, /* @__PURE__ */ react.createElement("input", {
      required: true,
      type: "text",
      className: this.props.errors.name ? "form-error" : "",
      list: "autocomplete",
      autoComplete: "off",
      placeholder: "pr\xE9nom nom",
      value: name,
      onChange: this.nomchange
    }), this.state.list && /* @__PURE__ */ react.createElement("datalist", {
      id: "autocomplete"
    }, this.state.list.map((item) => /* @__PURE__ */ react.createElement("option", null, item.vorname, " ", item.name))), this.props.errors.name && /* @__PURE__ */ react.createElement("ul", {
      className: "error-list"
    }, this.props.errors.name.map((item) => /* @__PURE__ */ react.createElement("li", null, item))), /* @__PURE__ */ react.createElement("input", {
      type: "text",
      autoComplete: "off",
      className: this.props.errors.tel ? "form-error" : "",
      placeholder: "n\xB0 de tel",
      value: tel,
      onChange: this.telchange
    }), this.props.errors.tel && /* @__PURE__ */ react.createElement("ul", {
      className: "error-list"
    }, this.props.errors.tel.map((item) => /* @__PURE__ */ react.createElement("li", null, item))), /* @__PURE__ */ react.createElement("label", null, "D\xE9but d'intervention"), /* @__PURE__ */ react.createElement("input", {
      required: true,
      type: "date",
      autoComplete: "off",
      value: startinter[0],
      onChange: this.startdatechange
    }), /* @__PURE__ */ react.createElement("input", {
      required: true,
      type: "time",
      autoComplete: "off",
      value: startinter[1],
      onChange: this.starttimechange
    })));
  }
}
class ATA extends react.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "Rapport-Card"
    }, /* @__PURE__ */ react.createElement("h1", null, "ATA"), /* @__PURE__ */ react.createElement("div", {
      className: "Form-Group ATA"
    }, /* @__PURE__ */ react.createElement("label", null, "Du"), /* @__PURE__ */ react.createElement("input", {
      type: "date",
      value: this.props.startDate,
      onChange: (e) => this.props.onStartDateChange(e.target.value)
    }), /* @__PURE__ */ react.createElement("label", null, "\xE0"), /* @__PURE__ */ react.createElement("input", {
      type: "time",
      value: this.props.startTime,
      onChange: (e) => this.props.onStartTimeChange(e.target.value)
    })), /* @__PURE__ */ react.createElement("div", {
      className: "Form-Group ATA"
    }, /* @__PURE__ */ react.createElement("label", null, "Au"), /* @__PURE__ */ react.createElement("input", {
      type: "date",
      value: this.props.endDate,
      onChange: (e) => this.props.onEndDateChange(e.target.value)
    }), /* @__PURE__ */ react.createElement("label", null, "\xE0"), /* @__PURE__ */ react.createElement("input", {
      type: "time",
      value: this.props.endTime,
      onChange: (e) => this.props.onEndTimeChange(e.target.value)
    })));
  }
}
class PagesTitle extends react.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "title-contain"
    }, /* @__PURE__ */ react.createElement("h1", {
      dangerouslySetInnerHTML: {__html: this.props.title}
    }));
  }
}
class Rapport extends react.Component {
  constructor(props) {
    super(props);
    this.handleSubmit = this.handleSubmit.bind(this);
    this.state = {
      name: "",
      tel: "",
      type: 0,
      transport: 1,
      desc: "",
      montant: null,
      payed: true,
      startdate: "",
      starttime: "",
      enddate: "",
      endtime: "",
      pdf: null,
      error: false,
      succsess: false,
      req: null,
      startinter: "",
      errors: []
    };
  }
  async handleSubmit(event) {
    event.preventDefault();
    await axios({
      url: "/data/rapport/post",
      method: "POST",
      data: {
        name: this.state.name,
        startinter: this.state.startinter,
        tel: this.state.tel,
        type: this.state.type,
        transport: this.state.transport,
        desc: this.state.desc,
        montant: this.state.montant,
        payed: this.state.payed,
        startdate: this.state.startdate,
        starttime: this.state.starttime,
        enddate: this.state.enddate,
        endtime: this.state.endtime
      }
    }).then((response) => {
      this.setState({
        succsess: true,
        req: response,
        name: "",
        startinter: "",
        tel: "",
        type: 1,
        transport: 1,
        desc: "",
        montant: 0,
        payed: true,
        startdate: "",
        starttime: "",
        enddate: "",
        endtime: ""
      });
    }).catch((error) => {
      error = Object.assign({}, error);
      this.setState({error: true});
      if (error.response.status === 422) {
        this.setState({errors: error.response.data.errors});
      }
    });
    console.log("test");
  }
  render() {
    let perm = this.context;
    return /* @__PURE__ */ react.createElement("div", {
      id: "Rapport-Patient"
    }, /* @__PURE__ */ react.createElement("form", {
      method: "POST",
      onSubmit: this.handleSubmit
    }, /* @__PURE__ */ react.createElement("div", {
      className: "Header"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "submit"
    }, perm.rapport_create && /* @__PURE__ */ react.createElement("button", {
      type: "submit"
    }, " Enregistrer"), !perm.rapport_create && /* @__PURE__ */ react.createElement("button", {
      type: "submit",
      disabled: true
    }, " Enregistrer")), /* @__PURE__ */ react.createElement(PagesTitle, {
      title: "Rapport patient"
    })), /* @__PURE__ */ react.createElement("div", {
      className: "content"
    }, /* @__PURE__ */ react.createElement(Informations$1, {
      name: this.state.name,
      startinter: this.state.startinter,
      tel: this.state.tel,
      onStartChange: (str) => {
        this.setState({startinter: str});
      },
      onNameChange: (str) => {
        this.setState({name: str});
      },
      onTelChange: (str) => {
        this.setState({tel: str});
      },
      errors: this.state.errors
    }), /* @__PURE__ */ react.createElement(Intervention, {
      type: this.state.type,
      transport: this.state.transport,
      description: this.state.desc,
      onTypeChange: (str) => {
        this.setState({type: str});
      },
      onTransportChange: (str) => {
        this.setState({transport: str});
      },
      onDescChange: (str) => {
        this.setState({desc: str});
      },
      errors: this.state.errors
    }), /* @__PURE__ */ react.createElement(Facturation, {
      payed: this.state.payed,
      montant: this.state.montant,
      onPayedChange: (str) => {
        this.setState({payed: str});
      },
      onMotantChange: (str) => {
        this.setState({montant: str});
      },
      errors: this.state.errors
    }), /* @__PURE__ */ react.createElement(ATA, {
      startDate: this.state.startdate,
      startTime: this.state.starttime,
      endDate: this.state.enddate,
      endTime: this.state.endtime,
      onStartDateChange: (str) => {
        this.setState({startdate: str});
      },
      onStartTimeChange: (str) => {
        this.setState({starttime: str});
      },
      onEndDateChange: (str) => {
        this.setState({enddate: str});
      },
      onEndTimeChange: (str) => {
        this.setState({endtime: str});
      },
      errors: this.state.errors
    }))));
  }
}
Rapport.contextType = PermsContext;
class PatientInfos extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      rapport: null,
      id: null,
      name: null,
      prenom: null,
      tel: null,
      type: null,
      transport: null,
      desc: null,
      montant: null,
      payed: null,
      startdate: null,
      starttime: null,
      enddate: null,
      endtime: null,
      error: false,
      succsess: false
    };
    this.post = this.post.bind(this);
  }
  async componentDidMount() {
    this.setState({id: this.props.id});
    var req = await axios({
      url: "/data/rapport/get/" + this.props.id
    });
    this.setState({
      types: req.data.types,
      broum: req.data.broum,
      rapport: req.data.rapport,
      type: req.data.rapport.get_type.id,
      transport: req.data.rapport.get_transport.id,
      desc: req.data.rapport.description,
      montant: req.data.rapport.price
    });
    if (req.data.rapport.ATA_start != null) {
      this.setState({
        startdate: dateformat(req.data.rapport.ATA_start, "yyyy-mm-dd"),
        starttime: dateformat(req.data.rapport.ATA_start, "H:MM"),
        enddate: dateformat(req.data.rapport.ATA_end, "yyyy-mm-dd"),
        endtime: dateformat(req.data.rapport.ATA_end, "H:MM")
      });
    } else {
      this.setState({
        startdate: "0000-00-00",
        starttime: "00:00",
        enddate: "0000-00-00",
        endtime: "00:00"
      });
    }
  }
  componentDidUpdate(prevProps, prevState, snapshot) {
    if (this.props.id !== this.state.id) {
      this.componentDidMount();
    }
  }
  async post(e) {
    e.preventDefault();
    var req = await axios({
      url: "/data/rapport/update/" + this.state.id,
      method: "PUT",
      data: {
        type: this.state.type,
        transport: this.state.transport,
        desc: this.state.desc,
        montant: this.state.montant,
        startdate: this.state.startdate,
        starttime: this.state.starttime,
        enddate: this.state.enddate,
        endtime: this.state.endtime
      }
    });
    if (req.status === 201) {
      this.setState({succsess: true, req});
    } else {
      this.setState({error: true});
    }
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "PatientInfos"
    }, this.state.rapport && /* @__PURE__ */ react.createElement("section", {
      className: "form"
    }, /* @__PURE__ */ react.createElement("form", {
      method: "POST",
      onSubmit: this.post
    }, /* @__PURE__ */ react.createElement("label", {
      className: "DescLabel"
    }, "Description :"), /* @__PURE__ */ react.createElement("textarea", {
      autoComplete: "off",
      className: "DescInput",
      value: this.state.desc,
      onChange: (e) => {
        this.setState({desc: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("div", {
      className: "InterTypeLabel"
    }, /* @__PURE__ */ react.createElement("label", null, "Type d'intervention :")), /* @__PURE__ */ react.createElement("select", {
      value: this.state.type,
      className: "InterInput",
      onChange: (e) => {
        this.setState({type: e.target.value});
      }
    }, this.state.types.map((type) => /* @__PURE__ */ react.createElement("option", {
      key: type.id,
      value: type.id
    }, type.name))), /* @__PURE__ */ react.createElement("div", {
      className: "BroumLabel"
    }, /* @__PURE__ */ react.createElement("label", null, "Transport :")), /* @__PURE__ */ react.createElement("select", {
      value: this.state.transport,
      className: "BroumInput",
      onChange: (e) => {
        this.setState({transport: e.target.value});
      }
    }, this.state.broum.map((type) => /* @__PURE__ */ react.createElement("option", {
      key: type.id,
      value: type.id
    }, type.name))), /* @__PURE__ */ react.createElement("div", {
      className: "TarifLabel"
    }, /* @__PURE__ */ react.createElement("label", null, "Montant de la facture :")), /* @__PURE__ */ react.createElement("input", {
      autoComplete: "off",
      className: "TarifInput",
      value: this.state.montant,
      onChange: (e) => {
        this.setState({montant: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("div", {
      className: "ATA"
    }, /* @__PURE__ */ react.createElement("label", {
      className: "ATA_Label"
    }, "ATA du"), /* @__PURE__ */ react.createElement("input", {
      type: "date",
      className: "date-aInput",
      value: this.state.startdate,
      onChange: (e) => {
        this.setState({startdate: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "ATA-b_Label"
    }, "\xE0"), /* @__PURE__ */ react.createElement("input", {
      type: "time",
      className: "time-aInput",
      value: this.state.starttime,
      onChange: (e) => {
        this.setState({starttime: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "ATA-c_Label"
    }, "Au"), /* @__PURE__ */ react.createElement("input", {
      type: "date",
      className: "date-bInput",
      value: this.state.enddate,
      onChange: (e) => {
        this.setState({enddate: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "ATA-d_Label"
    }, "\xE0"), /* @__PURE__ */ react.createElement("input", {
      type: "time",
      className: "time-bInput",
      value: this.state.endtime,
      onChange: (e) => {
        this.setState({endtime: e.target.value});
      }
    })), /* @__PURE__ */ react.createElement("button", {
      type: "submit",
      className: "btn submit"
    }, "Sauvegarder"), /* @__PURE__ */ react.createElement("a", {
      target: "_blank",
      href: "/pdf/rapport/" + this.state.rapport.id,
      className: "PDF btn"
    }, "G\xE9n\xE9rer PDF"))));
  }
}
class InterventionItem extends react.Component {
  constructor(props) {
    super(props);
    this.OnClicked = this.OnClicked.bind(this);
  }
  OnClicked(event) {
    this.props.CallBack(this.props.id);
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "InterventionItem"
    }, /* @__PURE__ */ react.createElement("button", {
      onClick: this.OnClicked
    }, this.props.inter));
  }
}
new Proxy({}, {
  get() {
    throw new Error('Module "querystring" has been externalized for browser compatibility and cannot be accessed in client code.');
  }
});
const rootUrl$2 = document.querySelector("body").getAttribute("data-root-url");
class RecherchePatient extends react.Component {
  constructor(props) {
    super(props);
    this.state = {inshearch: false, recherche: "", interid: 0, name: null, inter: null, error: false, patient: null, tel: "", pprenom: "", pname: ""};
    this.ShearshSubmit = this.ShearshSubmit.bind(this);
    this.ShearshChange = this.ShearshChange.bind(this);
    this.InterventionCallback = this.InterventionCallback.bind(this);
    this.updatetel = this.updatetel.bind(this);
  }
  async ShearshChange(event) {
    this.setState({recherche: event.target.value});
    if (event.target.value !== "") {
      var req = await axios({
        url: "/data/patient/search/" + event.target.value,
        method: "GET"
      });
      this.setState({name: req.data.list});
    }
  }
  async updatetel(e) {
    e.preventDefault();
    await axios({
      url: "/data/patient/" + this.state.patientid + "/update",
      method: "post",
      data: {
        tel: this.state.tel,
        nom: this.state.pname,
        prenom: this.state.pprenom
      }
    });
  }
  async ShearshSubmit(event) {
    this.setState({recherche: event.target.value});
    event.preventDefault();
    if (this.state.recherche !== "") {
      var req = await axios({
        url: "/data/patient/interlist/" + this.state.recherche,
        method: "GET"
      });
      if (req.data.status !== "OK") {
        this.setState({error: true});
      } else {
        this.setState({error: false});
      }
      this.setState({
        inter: req.data.inter,
        tel: req.data.patient.tel,
        patient: req.data.patient,
        patientid: req.data.patient.id,
        pname: req.data.patient.name,
        pprenom: req.data.patient.vorname
      });
    }
  }
  InterventionCallback(id) {
    this.setState({interid: id});
  }
  async componentDidMount() {
    let url = this.props.location.search;
    let id = url.substr(4, 12);
    if (id.length > 0) {
      var req = await axios({
        url: "/data/rapport/get/" + id,
        method: "GET"
      });
      this.setState({
        recherche: req.data.patient.vorname + " " + req.data.patient.name,
        patient: req.data.patient,
        tel: req.data.patient.tel,
        pname: req.data.patient.name,
        pprenom: req.data.patient.vorname,
        interid: id,
        inter: req.data.rapportlist,
        patientid: req.data.patient.id
      });
    }
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "RecherchePatient"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "header"
    }, /* @__PURE__ */ react.createElement(PagesTitle, {
      title: "Dossiers patients"
    })), /* @__PURE__ */ react.createElement("section", {
      className: "PatientRechercheContent"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "Recherche"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "FormRecherche"
    }, /* @__PURE__ */ react.createElement("form", {
      method: "post",
      onSubmit: this.ShearshSubmit
    }, /* @__PURE__ */ react.createElement("input", {
      autoComplete: "off",
      list: "autocomplete",
      type: "text",
      value: this.state.recherche,
      placeholder: "rechercher",
      name: "recherhce",
      onChange: this.ShearshChange
    }), /* @__PURE__ */ react.createElement("datalist", {
      id: "autocomplete"
    }, this.state.name && this.state.name.map((option) => /* @__PURE__ */ react.createElement("option", {
      key: option.id,
      value: option.vorname + " " + option.name
    }))), /* @__PURE__ */ react.createElement("button", {
      type: "submit",
      className: "btn"
    }, /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: rootUrl$2 + "assets/images/shearch.png"
    })))), this.state.error && /* @__PURE__ */ react.createElement("div", {
      className: "form-error"
    }, /* @__PURE__ */ react.createElement("p", {
      style: {textAlign: "center"}
    }, "impossible de trouver le patient")), /* @__PURE__ */ react.createElement("div", {
      className: "Interventions"
    }, /* @__PURE__ */ react.createElement("h3", null, "Liste des interventions"), /* @__PURE__ */ react.createElement("div", {
      className: "InterventionsList"
    }, this.state.inter && this.state.inter.map((inter) => /* @__PURE__ */ react.createElement(InterventionItem, {
      key: inter.id,
      inter: "Intervention du " + dateformat(inter.created_at, "dd/mm/yyyy \xE0 H:MM:ss"),
      id: inter.id,
      CallBack: this.InterventionCallback
    })))), this.state.inter && /* @__PURE__ */ react.createElement("div", {
      className: "infos"
    }, /* @__PURE__ */ react.createElement("form", {
      onSubmit: this.updatetel
    }, /* @__PURE__ */ react.createElement("div", {
      className: "inline"
    }, /* @__PURE__ */ react.createElement("label", null, "n\xB0 de tel"), /* @__PURE__ */ react.createElement("input", {
      type: "text",
      placeholder: "n\xB0 de tel patient",
      value: this.state.tel,
      onChange: (e) => {
        this.setState({tel: e.target.value});
      }
    })), /* @__PURE__ */ react.createElement("div", {
      className: "inline"
    }, /* @__PURE__ */ react.createElement("label", null, "Pr\xE9nom"), /* @__PURE__ */ react.createElement("input", {
      type: "text",
      placeholder: "pr\xE9nom",
      value: this.state.pprenom,
      onChange: (e) => {
        this.setState({pprenom: e.target.value});
      }
    })), /* @__PURE__ */ react.createElement("div", {
      className: "inline"
    }, /* @__PURE__ */ react.createElement("label", null, "Nom"), /* @__PURE__ */ react.createElement("input", {
      type: "text",
      placeholder: "nom",
      value: this.state.pname,
      onChange: (e) => {
        this.setState({pname: e.target.value});
      }
    })), /* @__PURE__ */ react.createElement("button", {
      type: "text",
      className: "btn"
    }, "Valider")))), this.state.interid !== 0 ? /* @__PURE__ */ react.createElement(PatientInfos, {
      CanModify: true,
      id: this.state.interid
    }) : /* @__PURE__ */ react.createElement("div", {
      className: "PatientInfos"
    })));
  }
}
class Services extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      week: null,
      services: null,
      data: false
    };
  }
  async componentDidMount() {
    var req = await axios({
      url: "/data/service/user",
      method: "GET"
    });
    this.setState({
      week: req.data.week,
      services: req.data.services,
      data: true
    });
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "Services"
    }, /* @__PURE__ */ react.createElement(PagesTitle, {
      title: "Services"
    }), /* @__PURE__ */ react.createElement("section", {
      className: "week"
    }, !this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    })), this.state.data && /* @__PURE__ */ react.createElement("table", null, /* @__PURE__ */ react.createElement("thead", {
      className: "header"
    }, /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("td", {
      className: "head"
    }, "date"), /* @__PURE__ */ react.createElement("td", {
      className: "head"
    }, "d\xE9but"), /* @__PURE__ */ react.createElement("td", {
      className: "head"
    }, "fin"), /* @__PURE__ */ react.createElement("td", {
      className: "head"
    }, "temps en service"))), /* @__PURE__ */ react.createElement("tbody", {
      className: "body"
    }, this.state.services && this.state.services.map((service) => /* @__PURE__ */ react.createElement("tr", {
      key: service.id
    }, /* @__PURE__ */ react.createElement("td", null, dateformat(service.created_at, "dd/mm/yyyy")), /* @__PURE__ */ react.createElement("td", null, service.started_at.split(" ")[1].split(":")[0] + ":" + service.started_at.split(" ")[1].split(":")[1]), service.ended_at ? /* @__PURE__ */ react.createElement("td", null, service.ended_at.split(":")[0] + ":" + service.ended_at.split(":")[1]) : /* @__PURE__ */ react.createElement("td", null, "En service"), service.total ? /* @__PURE__ */ react.createElement("td", null, service.total.split(":")[0] + ":" + service.total.split(":")[1]) : /* @__PURE__ */ react.createElement("td", null, "En service")))))), /* @__PURE__ */ react.createElement("section", {
      className: "week-list"
    }, !this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    })), this.state.data && /* @__PURE__ */ react.createElement("table", null, /* @__PURE__ */ react.createElement("thead", {
      className: "header"
    }, /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("td", null, "semaine"), /* @__PURE__ */ react.createElement("td", null, "dimanche"), /* @__PURE__ */ react.createElement("td", null, "lundi"), /* @__PURE__ */ react.createElement("td", null, "mardi"), /* @__PURE__ */ react.createElement("td", null, "mercredi"), /* @__PURE__ */ react.createElement("td", null, "jeudi"), /* @__PURE__ */ react.createElement("td", null, "vendredi"), /* @__PURE__ */ react.createElement("td", null, "samedi"), /* @__PURE__ */ react.createElement("td", null, "Total"))), /* @__PURE__ */ react.createElement("tbody", {
      className: "body"
    }, this.state.week && this.state.week.map((oneweek) => /* @__PURE__ */ react.createElement("tr", {
      key: oneweek.id
    }, /* @__PURE__ */ react.createElement("td", null, oneweek.week, " | ", dateformat(oneweek.created_at, "yyyy")), /* @__PURE__ */ react.createElement("td", null, oneweek.dimanche.split(":")[0] + ":" + oneweek.dimanche.split(":")[1]), /* @__PURE__ */ react.createElement("td", null, oneweek.lundi.split(":")[0] + ":" + oneweek.lundi.split(":")[1]), /* @__PURE__ */ react.createElement("td", null, oneweek.mardi.split(":")[0] + ":" + oneweek.mardi.split(":")[1]), /* @__PURE__ */ react.createElement("td", null, oneweek.mercredi.split(":")[0] + ":" + oneweek.mercredi.split(":")[1]), /* @__PURE__ */ react.createElement("td", null, oneweek.jeudi.split(":")[0] + ":" + oneweek.jeudi.split(":")[1]), /* @__PURE__ */ react.createElement("td", null, oneweek.vendredi.split(":")[0] + ":" + oneweek.vendredi.split(":")[1]), /* @__PURE__ */ react.createElement("td", null, oneweek.samedi.split(":")[0] + ":" + oneweek.samedi.split(":")[1]), /* @__PURE__ */ react.createElement("td", null, oneweek.total.split(":")[0] + ":" + oneweek.total.split(":")[1])))))));
  }
}
class Factures extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      list: null,
      addfacture: false,
      payed: false,
      name: "",
      prix: null,
      names: null,
      data: false,
      pdfstart: "",
      pdfend: "",
      errors: []
    };
    this.paye = this.paye.bind(this);
    this.OnPost = this.OnPost.bind(this);
  }
  async componentDidMount() {
    this.setdata(false);
    var req = await axios({
      url: "/data/facture/list",
      method: "GET"
    });
    this.setState({list: req.data.impaye});
    this.setdata(true);
  }
  async paye(id) {
    await axios({
      url: "/data/facture/" + id + "/paye",
      method: "PUT"
    });
    this.componentDidMount();
  }
  async ShearshChange(event) {
    this.setState({name: event.target.value});
    if (event.target.value !== "") {
      var req = await axios({
        url: "/data/patient/search/" + event.target.value,
        method: "GET"
      });
      this.setState({names: req.data.list});
    }
  }
  onchange(e) {
    if (this.state.payed) {
      this.setState({payed: false});
    } else {
      this.setState({payed: true});
    }
  }
  async OnPost(e) {
    e.preventDefault();
    await axios({
      url: "/data/facture/add",
      method: "POST",
      data: {
        payed: this.state.payed,
        name: this.state.name,
        montant: this.state.prix
      }
    }).then((response) => {
      if (response.status === 201) {
        this.setState({addfacture: false, name: "", payed: false, prix: null});
        this.componentDidMount();
      }
    }).catch((error) => {
      error = Object.assign({}, error);
      this.setState({error: true});
      if (error.response.status === 422) {
        this.setState({errors: error.response.data.errors});
      }
    });
  }
  setdata(bool) {
    this.setState({data: bool});
  }
  render() {
    const perm = this.context;
    return /* @__PURE__ */ react.createElement("div", {
      className: "impayes"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "header",
      style: {filter: this.state.addfacture ? "blur(5px)" : "none"}
    }, /* @__PURE__ */ react.createElement("div", {
      className: "title-contain"
    }, /* @__PURE__ */ react.createElement(PagesTitle, {
      title: "Factures"
    })), /* @__PURE__ */ react.createElement("div", {
      className: "Add-facture"
    }, /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      disabled: perm.add_factures !== 1,
      onClick: () => {
        this.setState({addfacture: true});
      }
    }, "Ajouter une facture")), perm.factures_PDF === 1 && /* @__PURE__ */ react.createElement("div", {
      className: "pdf_Generator mobildisabled"
    }, /* @__PURE__ */ react.createElement("form", {
      onSubmit: (e) => {
        e.preventDefault();
        window.open("/PDF/facture/" + this.state.pdfstart + "/" + this.state.pdfend);
      }
    }, /* @__PURE__ */ react.createElement("label", null, "Liste des impay\xE9s du"), /* @__PURE__ */ react.createElement("input", {
      type: "date",
      value: this.state.pdfstart,
      onChange: (e) => {
        this.setState({pdfstart: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("label", null, "au"), /* @__PURE__ */ react.createElement("input", {
      type: "date",
      value: this.state.pdfend,
      onChange: (e) => {
        this.setState({pdfend: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("button", {
      type: "submit",
      className: "btn"
    }, "g\xE9n\xE9rer")))), this.state.addfacture && /* @__PURE__ */ react.createElement("div", {
      className: "add-facture-form"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "card-facture"
    }, /* @__PURE__ */ react.createElement("h1", null, "Ajouter une facture :"), /* @__PURE__ */ react.createElement("form", {
      onSubmit: this.OnPost
    }, /* @__PURE__ */ react.createElement("div", {
      className: "content"
    }, /* @__PURE__ */ react.createElement("input", {
      list: "autocomplete",
      autoComplete: "off",
      className: this.state.errors.name ? "form-error" : "",
      value: this.state.name,
      type: "text",
      placeholder: "Patient",
      onChange: (event) => {
        this.ShearshChange(event);
      }
    }), /* @__PURE__ */ react.createElement("datalist", {
      id: "autocomplete"
    }, this.state.names && this.state.names.map((option) => /* @__PURE__ */ react.createElement("option", {
      key: option.id,
      value: option.vorname + " " + option.name
    }))), this.state.errors.name && /* @__PURE__ */ react.createElement("ul", {
      className: "error-list"
    }, this.state.errors.name.map((item) => /* @__PURE__ */ react.createElement("li", null, item))), /* @__PURE__ */ react.createElement("input", {
      type: "number",
      placeholder: "prix en $",
      className: this.state.errors.montant ? "form-error" : "",
      value: this.state.prix,
      onChange: (event) => {
        this.setState({prix: event.target.value});
      }
    }), this.state.errors.montant && /* @__PURE__ */ react.createElement("ul", {
      className: "error-list"
    }, this.state.errors.montant.map((item) => /* @__PURE__ */ react.createElement("li", null, item))), /* @__PURE__ */ react.createElement("div", {
      className: "switch-container"
    }, /* @__PURE__ */ react.createElement("input", {
      id: "switch1",
      checked: this.state.payed,
      className: "payed_switch",
      type: "checkbox",
      onChange: (event) => {
        this.onchange(event);
      }
    }), /* @__PURE__ */ react.createElement("label", {
      htmlFor: "switch1",
      className: "payed_switchLabel"
    }))), /* @__PURE__ */ react.createElement("div", {
      className: "footer"
    }, /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      onClick: () => this.setState({addfacture: false})
    }, "fermer"), /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      type: "submit"
    }, "Ajouter"))))), /* @__PURE__ */ react.createElement("section", {
      className: "impayelist",
      style: {filter: this.state.addfacture ? "blur(5px)" : "none"}
    }, !this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    })), this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "ImpayeTableContainer"
    }, /* @__PURE__ */ react.createElement("table", null, /* @__PURE__ */ react.createElement("thead", null, /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("td", {
      className: "head"
    }, "Date"), /* @__PURE__ */ react.createElement("td", {
      className: "head"
    }, "Nom pr\xE9nom"), /* @__PURE__ */ react.createElement("td", {
      className: "head"
    }, "heure"), /* @__PURE__ */ react.createElement("td", {
      className: "head"
    }, "Montant"), /* @__PURE__ */ react.createElement("td", {
      className: "head"
    }, "pay\xE9"))), /* @__PURE__ */ react.createElement("tbody", null, this.state.list && this.state.list.map((item) => /* @__PURE__ */ react.createElement("tr", {
      key: item.id
    }, /* @__PURE__ */ react.createElement("td", null, dateformat(item.created_at, "dd/mm/yyyy")), /* @__PURE__ */ react.createElement("td", null, item.get_patient.vorname + " " + item.get_patient.name), /* @__PURE__ */ react.createElement("td", null, dateformat(item.created_at, "H:MM")), /* @__PURE__ */ react.createElement("td", null, item.price, "$"), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "switch-container"
    }, /* @__PURE__ */ react.createElement("input", {
      id: "switch" + item.id,
      className: "payed_switch",
      type: "checkbox",
      onChange: (e) => {
        this.paye(item.id);
      }
    }), /* @__PURE__ */ react.createElement("label", {
      htmlFor: "switch" + item.id,
      className: "payed_switchLabel"
    }))))))))));
  }
}
Factures.contextType = PermsContext;
class Row extends react.Component {
  constructor(props) {
    super(props);
    this.update = this.update.bind(this);
    this.state = {
      inService: false
    };
  }
  async update() {
    if (this.state.inService) {
      this.setState({inService: false});
    } else {
      this.setState({inService: true});
    }
    await axios({
      url: "/data/service/setbyadmin/" + this.props.userid,
      method: "PUT"
    });
  }
  componentDidMount() {
    if (this.props.inService === 1) {
      this.setState({inService: true});
    } else {
      this.setState({inService: false});
    }
  }
  render() {
    var perm = this.context;
    return /* @__PURE__ */ react.createElement("div", {
      className: "row"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "cell column-1"
    }, /* @__PURE__ */ react.createElement("p", null, this.props.name)), /* @__PURE__ */ react.createElement("div", {
      className: "cell column-8"
    }, /* @__PURE__ */ react.createElement("p", null, this.props.dimanche)), /* @__PURE__ */ react.createElement("div", {
      className: "cell column-2"
    }, /* @__PURE__ */ react.createElement("p", null, this.props.lundi)), /* @__PURE__ */ react.createElement("div", {
      className: "cell column-3"
    }, /* @__PURE__ */ react.createElement("p", null, this.props.mardi)), /* @__PURE__ */ react.createElement("div", {
      className: "cell column-4"
    }, /* @__PURE__ */ react.createElement("p", null, this.props.mercredi)), /* @__PURE__ */ react.createElement("div", {
      className: "cell column-5"
    }, /* @__PURE__ */ react.createElement("p", null, this.props.jeudi)), /* @__PURE__ */ react.createElement("div", {
      className: "cell column-6"
    }, /* @__PURE__ */ react.createElement("p", null, this.props.vendredi)), /* @__PURE__ */ react.createElement("div", {
      className: "cell column-7"
    }, /* @__PURE__ */ react.createElement("p", null, this.props.samedi)), /* @__PURE__ */ react.createElement("div", {
      className: "cell column-8"
    }, /* @__PURE__ */ react.createElement("p", null, this.props.ajustement)), /* @__PURE__ */ react.createElement("div", {
      className: "cell column-9"
    }, /* @__PURE__ */ react.createElement("p", null, this.props.total)), /* @__PURE__ */ react.createElement("div", {
      className: "cell en service"
    }, perm.service_modify === 1 && /* @__PURE__ */ react.createElement("div", {
      className: "switch-container"
    }, /* @__PURE__ */ react.createElement("input", {
      id: "switch" + this.props.itemid,
      checked: this.state.inService,
      className: "payed_switch",
      type: "checkbox",
      onChange: (e) => {
        this.update();
      }
    }), /* @__PURE__ */ react.createElement("label", {
      htmlFor: "switch" + this.props.itemid,
      className: "payed_switchLabel"
    })), perm.service_modify === 0 && /* @__PURE__ */ react.createElement("div", {
      className: "switch-container"
    }, /* @__PURE__ */ react.createElement("input", {
      id: "switch" + this.props.itemid,
      checked: this.state.inService,
      className: "payed_switch",
      type: "checkbox",
      disabled: true
    }), /* @__PURE__ */ react.createElement("label", {
      htmlFor: "switch" + this.props.itemid,
      className: "payed_switchLabel"
    }))));
  }
}
Row.contextType = PermsContext;
class TableBottom extends react.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "TableBottom"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "searsh"
    }, /* @__PURE__ */ react.createElement("input", {
      autoComplete: "off",
      list: "autocomplete",
      type: "text",
      placeholder: this.props.placeholder,
      onChange: (e) => this.props.typing(e)
    }), this.props.list && /* @__PURE__ */ react.createElement("datalist", {
      id: "autocomplete"
    }, this.props.list.map((obj) => /* @__PURE__ */ react.createElement("option", null, obj.name)))), /* @__PURE__ */ react.createElement("div", {
      className: "pages"
    }, /* @__PURE__ */ react.createElement("button", {
      onClick: () => this.props.prev()
    }, "\u2039"), /* @__PURE__ */ react.createElement("h5", null, this.props.page, "/", this.props.pages), /* @__PURE__ */ react.createElement("button", {
      onClick: () => this.props.next()
    }, "\u203A")));
  }
}
class RapportHoraire extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      popup: false,
      service: null,
      maxwwek: 0,
      wek: 0,
      data: false,
      name: "",
      namelist: [],
      action: 0,
      time: ""
    };
    this.update = this.update.bind(this);
    this.submit = this.submit.bind(this);
    this.modifyTime = this.modifyTime.bind(this);
    this.search = this.search.bind(this);
  }
  setdata(bool) {
    this.setState({data: bool});
  }
  async componentDidMount() {
    this.setdata(false);
    var req = await axios({
      url: "/data/service/alluser",
      method: "get"
    });
    this.setState({
      service: req.data.service,
      maxweek: req.data.maxweek,
      wek: req.data.maxweek
    });
    this.setdata(true);
  }
  async update() {
    this.setdata(false);
    var req = await axios({
      url: "/data/service/alluser/" + this.state.wek,
      method: "get"
    });
    this.setState({
      service: req.data.service
    });
    this.setdata(true);
  }
  submit(e) {
    e.preventDefault();
    this.update();
  }
  async modifyTime(e) {
    e.preventDefault();
    var req = await axios({
      method: "PUT",
      url: "/data/service/admin/modify",
      data: {
        name: this.state.name,
        action: this.state.action,
        time: this.state.time
      }
    });
    if (req.status === 201) {
      this.update();
      this.setState({
        name: "",
        action: 0,
        time: "",
        popup: false
      });
    }
  }
  async search(e) {
    var req = await axios({
      url: "/data/users/search/" + e.target.value,
      method: "GET"
    });
    if (req.status === 200) {
      this.setState({namelist: req.data.users});
    }
  }
  render() {
    let perm = this.context;
    if (this.state.data) {
      return /* @__PURE__ */ react.createElement("div", {
        className: "RapportHorraire"
      }, /* @__PURE__ */ react.createElement("section", {
        className: "header",
        style: {filter: this.state.popup ? "blur(5px)" : "none"}
      }, /* @__PURE__ */ react.createElement(PagesTitle, {
        title: "Rapport horaire"
      }), /* @__PURE__ */ react.createElement("div", {
        className: "semaine-select"
      }, /* @__PURE__ */ react.createElement("form", {
        onSubmit: this.submit
      }, /* @__PURE__ */ react.createElement("label", null, "Semaine :"), /* @__PURE__ */ react.createElement("input", {
        type: "number",
        min: "1",
        max: this.state.maxweek,
        step: "1",
        value: this.state.wek,
        onChange: (e) => {
          this.setState({wek: e.target.value});
        }
      }), /* @__PURE__ */ react.createElement("button", {
        type: "submit",
        className: "btn"
      }, "Valider"))), /* @__PURE__ */ react.createElement("a", {
        className: "btn add-perso",
        target: "_blank",
        href: "/data/service/admin/exel/" + this.state.wek
      }, "Exporter en exel"), perm.time_modify === 1 && /* @__PURE__ */ react.createElement("button", {
        className: "btn add-perso",
        onClick: () => this.setState({popup: true})
      }, "Modifier le temps de service")), /* @__PURE__ */ react.createElement("section", {
        className: "rapport-table-container",
        style: {filter: this.state.popup ? "blur(5px)" : "none"}
      }, /* @__PURE__ */ react.createElement("div", {
        className: "rapport-table"
      }, /* @__PURE__ */ react.createElement("div", {
        className: "row table-header"
      }, /* @__PURE__ */ react.createElement("div", {
        className: "cell head column-1"
      }, /* @__PURE__ */ react.createElement("p", null, "agent")), /* @__PURE__ */ react.createElement("div", {
        className: "cell head column-8"
      }, /* @__PURE__ */ react.createElement("p", null, "dimanche")), /* @__PURE__ */ react.createElement("div", {
        className: "cell head column-2"
      }, /* @__PURE__ */ react.createElement("p", null, "lundi")), /* @__PURE__ */ react.createElement("div", {
        className: "cell head column-3"
      }, /* @__PURE__ */ react.createElement("p", null, "mardi")), /* @__PURE__ */ react.createElement("div", {
        className: "cell head column-4"
      }, /* @__PURE__ */ react.createElement("p", null, "mercredi")), /* @__PURE__ */ react.createElement("div", {
        className: "cell head column-5"
      }, /* @__PURE__ */ react.createElement("p", null, "jeudi")), /* @__PURE__ */ react.createElement("div", {
        className: "cell head column-6"
      }, /* @__PURE__ */ react.createElement("p", null, "vendredi")), /* @__PURE__ */ react.createElement("div", {
        className: "cell head column-7"
      }, /* @__PURE__ */ react.createElement("p", null, "samedi")), /* @__PURE__ */ react.createElement("div", {
        className: "cell head column-7"
      }, /* @__PURE__ */ react.createElement("p", null, "ajustements")), /* @__PURE__ */ react.createElement("div", {
        className: "cell head column-9"
      }, /* @__PURE__ */ react.createElement("p", null, "total")), /* @__PURE__ */ react.createElement("div", {
        className: "cell head column-10"
      }, /* @__PURE__ */ react.createElement("p", null, "En service ?"))), this.state.service && this.state.service.map((item) => item.get_user.grade_id > 0 && /* @__PURE__ */ react.createElement(Row, {
        key: item.id,
        inService: item.get_user.service,
        itemid: item.id,
        update: this.update,
        userid: item.get_user.id,
        name: item.get_user.name,
        dimanche: item.dimanche,
        lundi: item.lundi,
        mardi: item.mardi,
        mercredi: item.mercredi,
        jeudi: item.jeudi,
        vendredi: item.vendredi,
        samedi: item.samedi,
        ajustement: item.ajustement,
        total: item.total
      })))), this.state.popup && /* @__PURE__ */ react.createElement("section", {
        className: "popup"
      }, /* @__PURE__ */ react.createElement("div", {
        className: "center"
      }, /* @__PURE__ */ react.createElement("form", {
        onSubmit: this.modifyTime
      }, /* @__PURE__ */ react.createElement("h2", null, "Ajouter/enelever du temps"), /* @__PURE__ */ react.createElement("div", {
        className: "rowed"
      }, /* @__PURE__ */ react.createElement("label", null, "nom"), /* @__PURE__ */ react.createElement("input", {
        type: "text",
        list: "autocomplete",
        value: this.state.name,
        max: 100,
        onChange: (e) => {
          this.setState({name: e.target.value});
          if (e.target.value.length > 3) {
            this.search(e);
          }
        }
      }), /* @__PURE__ */ react.createElement("datalist", {
        id: "autocomplete"
      }, this.state.namelist && this.state.namelist.map((user) => /* @__PURE__ */ react.createElement("option", {
        key: user.id
      }, user.name)))), /* @__PURE__ */ react.createElement("div", {
        className: "rowed"
      }, /* @__PURE__ */ react.createElement("label", null, "action"), /* @__PURE__ */ react.createElement("select", {
        defaultValue: this.state.action,
        onChange: (e) => this.setState({action: e.target.value})
      }, /* @__PURE__ */ react.createElement("option", {
        value: 0,
        disabled: true
      }, "choisir"), /* @__PURE__ */ react.createElement("option", {
        value: 1
      }, "ajouter"), /* @__PURE__ */ react.createElement("option", {
        value: 2
      }, "enlever"))), /* @__PURE__ */ react.createElement("div", {
        className: "rowed"
      }, /* @__PURE__ */ react.createElement("label", null, "temps"), /* @__PURE__ */ react.createElement("input", {
        type: "time",
        placeholder: "hh:mm",
        value: this.state.time,
        onChange: (e) => this.setState({time: e.target.value})
      })), /* @__PURE__ */ react.createElement("div", {
        className: "button"
      }, /* @__PURE__ */ react.createElement("button", {
        onClick: () => this.setState({popup: false}),
        className: "btn"
      }, "fermer"), /* @__PURE__ */ react.createElement("button", {
        type: "submit",
        className: "btn"
      }, "valider"))))));
    } else {
      return /* @__PURE__ */ react.createElement("div", {
        className: "load"
      }, /* @__PURE__ */ react.createElement("img", {
        src: "/assets/images/loading.svg",
        alt: ""
      }));
    }
  }
}
RapportHoraire.contextType = PermsContext;
const rootUrl$1 = document.querySelector("body").getAttribute("data-root-url");
class ContentCard extends react.Component {
  constructor(props) {
    super(props);
    this.state = {title: "", path: "", price: 0, items: [], formcontent: "", type: this.props.type, data: false};
    this.post = this.post.bind(this);
    this.delete = this.delete.bind(this);
    this.display = this.display.bind(this);
  }
  async componentDidMount() {
    switch (this.props.type) {
      case 1:
        this.setState({title: "Types d'intervention"});
        break;
      case 2:
        this.setState({title: "Liste des h\xF4pitaux"});
        break;
      case 3:
        this.setState({title: "Types de plan d'urgence"});
        break;
      case 4:
        this.setState({title: "Types de blessures"});
        break;
      case 5:
        this.setState({title: "Liste des annonces"});
        break;
      case 6:
        this.setState({title: "Vetements BC"});
        break;
      case 7:
        this.setState({title: "Lieux survols"});
        break;
      case 8:
        this.setState({title: "item remboursement"});
        break;
      case 9:
        this.setState({title: "\xE9tats de service"});
        break;
    }
    var req = await axios({
      method: "GET",
      url: "/data/gestion/content/get/" + this.props.type
    });
    this.setState({items: req.data.data, data: true});
  }
  async post(e) {
    e.preventDefault();
    if (this.state.formcontent !== "") {
      if (this.props.type === 8) {
        var req = await axios({
          url: "/data/gestion/content/add/" + this.state.type,
          method: "POST",
          data: {
            formcontent: this.state.formcontent,
            price: this.state.price
          }
        });
      } else if (this.props.type === 9) {
        var req = await axios({
          url: "/data/gestion/content/add/" + this.state.type,
          method: "POST",
          data: {
            name: this.state.formcontent,
            color: this.state.color
          }
        });
      } else {
        var req = await axios({
          url: "/data/gestion/content/add/" + this.state.type,
          method: "POST",
          data: {
            formcontent: this.state.formcontent
          }
        });
      }
      if (req.status === 201) {
        this.setState({formcontent: ""});
        if (this.props.type === 8) {
          this.setState({price: 0});
        }
        if (this.props.type === 9) {
          this.setState({color: ""});
        }
        this.componentDidMount();
      }
    }
  }
  async delete(e) {
    var infos = e.target.getAttribute("data").split("_");
    var req = await axios({
      method: "delete",
      url: "/data/gestion/content/delete/" + infos[0] + "/" + infos[1]
    });
    if (req.status === 204) {
      this.componentDidMount();
    }
  }
  display(id) {
    if (this.props.type === 1) {
      if (id === 1) {
        return "none";
      }
    }
    if (this.props.type === 2) {
      if (id === 1) {
        return "none";
      }
    }
    return "block";
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "ContentCard"
    }, /* @__PURE__ */ react.createElement("h1", null, this.state.title), /* @__PURE__ */ react.createElement("div", {
      className: "item-list"
    }, this.state.data && this.state.items.map((item) => /* @__PURE__ */ react.createElement("div", {
      className: "item",
      key: item.id
    }, this.props.type === 8 && /* @__PURE__ */ react.createElement("p", null, item.name, " $", item.price), this.props.type !== 8 && item.name && /* @__PURE__ */ react.createElement("p", null, item.name), this.props.type === 9 && item.color && /* @__PURE__ */ react.createElement("div", {
      className: "colorTag",
      style: {backgroundColor: item.color}
    }), item.title && /* @__PURE__ */ react.createElement("p", null, item.title), /* @__PURE__ */ react.createElement("button", {
      style: {display: this.display(item.id)},
      onClick: this.delete
    }, /* @__PURE__ */ react.createElement("img", {
      alt: "",
      data: this.state.type + "_" + item.id,
      src: rootUrl$1 + "assets/images/cancel.png"
    })))), !this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    }))), this.state.type !== 5 && /* @__PURE__ */ react.createElement("form", {
      method: "POST",
      onSubmit: this.post
    }, /* @__PURE__ */ react.createElement("input", {
      type: "text",
      value: this.state.formcontent,
      maxLength: "30",
      onChange: (e) => {
        this.setState({formcontent: e.target.value});
      }
    }), this.props.type === 8 && /* @__PURE__ */ react.createElement("input", {
      type: "number",
      value: this.state.price,
      onChange: (e) => {
        this.setState({price: e.target.value});
      }
    }), this.props.type === 9 && /* @__PURE__ */ react.createElement("input", {
      type: "text",
      value: this.state.color,
      placeholder: "#ffffff",
      onChange: (e) => {
        this.setState({color: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("button", {
      type: "submit",
      className: "btn"
    }, "Ajouter")));
  }
}
class ContentManagement extends react.Component {
  constructor(props) {
    super(props);
    this.state = {content: "", title: ""};
  }
  async submit(e) {
    e.preventDefault();
    if (this.state.content !== "" && this.state.title !== "") {
      await axios({
        method: "post",
        url: "/data/gestion/content/add/5",
        data: {
          title: this.state.title,
          formcontent: this.state.content
        }
      });
      this.setState({
        content: "",
        title: ""
      });
    }
  }
  render() {
    let perm = this.context;
    return /* @__PURE__ */ react.createElement("div", {
      className: "ContentManagement"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "header"
    }, /* @__PURE__ */ react.createElement(PagesTitle, {
      title: "Gestion de contenu"
    })), /* @__PURE__ */ react.createElement("section", {
      className: "content-mgt"
    }, perm.content_mgt === 1 && /* @__PURE__ */ react.createElement(ContentCard, {
      type: 1
    }), perm.content_mgt === 1 && /* @__PURE__ */ react.createElement(ContentCard, {
      type: 2
    }), perm.content_mgt === 1 && /* @__PURE__ */ react.createElement(ContentCard, {
      type: 3
    }), perm.content_mgt === 1 && /* @__PURE__ */ react.createElement(ContentCard, {
      type: 4
    }), perm.post_annonces === 1 && /* @__PURE__ */ react.createElement(ContentCard, {
      type: 5
    }), perm.content_mgt === 1 && /* @__PURE__ */ react.createElement(ContentCard, {
      type: 6
    }), perm.content_mgt === 1 && /* @__PURE__ */ react.createElement(ContentCard, {
      type: 7
    }), perm.content_mgt === 1 && /* @__PURE__ */ react.createElement(ContentCard, {
      type: 8
    }), perm.content_mgt === 1 && /* @__PURE__ */ react.createElement(ContentCard, {
      type: 9
    }), perm.post_annonces === 1 && /* @__PURE__ */ react.createElement("div", {
      className: "ContentCard annonces"
    }, /* @__PURE__ */ react.createElement("h1", null, "Ajouter une annonce"), /* @__PURE__ */ react.createElement("form", {
      method: "POST",
      onSubmit: (e) => this.submit(e)
    }, /* @__PURE__ */ react.createElement("section", {
      className: "left"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "text",
      placeholder: "titre",
      value: this.state.title,
      onChange: (e) => {
        this.setState({title: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("textarea", {
      value: this.state.content,
      onChange: (e) => {
        this.setState({content: e.target.value});
      }
    })), /* @__PURE__ */ react.createElement("button", {
      type: "submit",
      className: "btn"
    }, "Ajouter")))));
  }
}
ContentManagement.contextType = PermsContext;
class PersonnelLine extends react.Component {
  constructor(props) {
    super(props);
    this.state = {id: this.props.id, name: this.props.name, grade: this.props.grade};
    this.isupdate = this.isupdate.bind(this);
  }
  async isupdate(e) {
    e.preventDefault();
    await axios({
      url: "/data/users/setgrade/" + this.state.grade + "/" + this.state.id,
      method: "POST"
    });
    this.props.update();
  }
  render() {
    let perm = this.context;
    return /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("td", {
      className: "id"
    }, this.state.id), /* @__PURE__ */ react.createElement("td", {
      className: "name"
    }, this.state.name), /* @__PURE__ */ react.createElement("td", {
      className: "tel"
    }, this.props.tel), /* @__PURE__ */ react.createElement("td", {
      className: "compte"
    }, this.props.compte), /* @__PURE__ */ react.createElement("td", {
      className: "grade"
    }, /* @__PURE__ */ react.createElement("form", {
      onSubmit: this.isupdate
    }, /* @__PURE__ */ react.createElement("select", {
      value: this.state.grade,
      onChange: (e) => {
        this.setState({grade: e.target.value});
      }
    }, /* @__PURE__ */ react.createElement("optgroup", {
      label: "pas d'acc\xE8s"
    }, /* @__PURE__ */ react.createElement("option", {
      value: 1
    }, "user")), /* @__PURE__ */ react.createElement("optgroup", {
      label: "membre"
    }, /* @__PURE__ */ react.createElement("option", {
      value: 2
    }, "Probies"), /* @__PURE__ */ react.createElement("option", {
      value: 3
    }, "Engineer"), /* @__PURE__ */ react.createElement("option", {
      value: 4
    }, "Firefighter"), /* @__PURE__ */ react.createElement("option", {
      value: 5
    }, "Senior Firefighter")), /* @__PURE__ */ react.createElement("optgroup", {
      label: "r\xE9f\xE9rents"
    }, /* @__PURE__ */ react.createElement("option", {
      value: 6
    }, "Lead Firefighter"), /* @__PURE__ */ react.createElement("option", {
      value: 7
    }, "Fire Marshall")), /* @__PURE__ */ react.createElement("optgroup", {
      label: "direction"
    }, /* @__PURE__ */ react.createElement("option", {
      value: 8
    }, "Assistant Chief"), /* @__PURE__ */ react.createElement("option", {
      value: 9
    }, "Chief")), /* @__PURE__ */ react.createElement("optgroup", {
      label: "autre"
    }, /* @__PURE__ */ react.createElement("option", {
      value: 10
    }, "Inspecteur"), /* @__PURE__ */ react.createElement("option", {
      value: 11
    }, "D\xE9veloppeur"))), perm.edit_perm === 1 && /* @__PURE__ */ react.createElement("button", {
      type: "submit",
      className: "btn"
    }, "valider"))), /* @__PURE__ */ react.createElement("td", {
      className: "pilote"
    }, perm.set_pilot === 1 && /* @__PURE__ */ react.createElement("div", {
      className: "pilote-btn"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      checked: this.props.pilote === 1,
      id: "toggle" + this.props.id,
      onClick: async () => {
        await axios({
          url: "/data/users/pilote/" + this.state.id,
          method: "PUT"
        });
        this.props.update();
      }
    }), /* @__PURE__ */ react.createElement("div", null, /* @__PURE__ */ react.createElement("label", {
      htmlFor: "toggle" + this.props.id
    }))), perm.set_pilot === 0 && /* @__PURE__ */ react.createElement("div", {
      className: "pilote-btn"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      disabled: true,
      id: "toggle" + this.props.id
    }), /* @__PURE__ */ react.createElement("div", null, /* @__PURE__ */ react.createElement("label", {
      htmlFor: "toggle" + this.props.id
    })))));
  }
}
PersonnelLine.contextType = PermsContext;
class PersonnelList extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      userlist: null,
      data: false
    };
    this.getdata = this.getdata.bind(this);
  }
  async componentDidMount() {
    this.getdata();
  }
  async getdata() {
    var req = await axios({
      url: "/data/users/getall",
      method: "GET"
    });
    this.setState({
      userlist: req.data.users,
      data: true
    });
  }
  render() {
    const perm = this.context;
    if (this.state.data) {
      return /* @__PURE__ */ react.createElement("div", {
        className: "PersonnelList"
      }, /* @__PURE__ */ react.createElement("section", {
        className: "header"
      }, /* @__PURE__ */ react.createElement(PagesTitle, {
        title: "Liste du personnel"
      }), perm.edit_perm === 1 && /* @__PURE__ */ react.createElement(Link, {
        to: "/gestion/perm",
        className: "btn"
      }, "g\xE9rer les permissions")), /* @__PURE__ */ react.createElement("section", {
        className: "list-personnel"
      }, /* @__PURE__ */ react.createElement("table", null, /* @__PURE__ */ react.createElement("thead", null, /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("th", {
        className: "id"
      }, "id"), /* @__PURE__ */ react.createElement("th", {
        className: "name"
      }, "nom pr\xE9nom"), /* @__PURE__ */ react.createElement("th", {
        className: "tel"
      }, "n\xB0 de tel"), /* @__PURE__ */ react.createElement("th", {
        className: "compte"
      }, "n\xB0 de compte"), /* @__PURE__ */ react.createElement("th", {
        className: "grade"
      }, "grade"), /* @__PURE__ */ react.createElement("th", {
        className: "pilote"
      }, "pilote"))), /* @__PURE__ */ react.createElement("tbody", null, this.state.userlist && this.state.userlist.map((user) => /* @__PURE__ */ react.createElement(PersonnelLine, {
        id: user.id,
        key: user.id,
        pilote: user.pilote,
        name: user.name,
        compte: user.compte,
        tel: user.tel,
        grade: user.grade_id,
        update: this.getdata
      }))))));
    } else {
      return /* @__PURE__ */ react.createElement("div", {
        className: "load"
      }, /* @__PURE__ */ react.createElement("img", {
        src: "/assets/images/loading.svg",
        alt: ""
      }));
    }
  }
}
PersonnelList.contextType = PermsContext;
class Logs extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: false,
      range: 25,
      page: 1,
      type: 1,
      nbrpages: "?",
      datas: null,
      nbrlignes: "?"
    };
    this.request = this.request.bind(this);
    this.suspense = this.suspense.bind(this);
  }
  componentDidMount() {
    this.request(this.state.range, this.state.page, this.state.type);
  }
  async request(range, page, type) {
    this.suspense(true);
    var req = await axios({
      url: "/data/logs/" + range + "/" + page + "/" + type,
      method: "GET"
    });
    this.setState({
      datas: req.data.datas,
      data: true,
      nbrpages: req.data.pages,
      nbrlignes: req.data.lignes
    });
  }
  suspense(bool) {
    this.setState({data: !bool});
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "Logs"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "header"
    }, /* @__PURE__ */ react.createElement(PagesTitle, {
      title: "Logs"
    }), /* @__PURE__ */ react.createElement("div", {
      className: "logs-select"
    }, /* @__PURE__ */ react.createElement("select", {
      value: this.state.type,
      onChange: (e) => {
        this.setState({type: e.target.value});
        this.request(this.state.range, 1, e.target.value);
      }
    }, /* @__PURE__ */ react.createElement("option", {
      value: 1
    }, "Rapports"), /* @__PURE__ */ react.createElement("option", {
      value: 2
    }, "Services"), /* @__PURE__ */ react.createElement("option", {
      value: 3
    }, "Factures"), /* @__PURE__ */ react.createElement("option", {
      value: 4
    }, "black codes")))), /* @__PURE__ */ react.createElement("section", {
      className: "log-list"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "logs-header"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "left"
    }, /* @__PURE__ */ react.createElement("p", null, "Il y a ", this.state.nbrlignes, " lignes")), /* @__PURE__ */ react.createElement("div", {
      className: "pages"
    }, /* @__PURE__ */ react.createElement("label", null, "R\xE9sultats par pages : "), /* @__PURE__ */ react.createElement("select", {
      value: this.state.range,
      onChange: (e) => {
        this.setState({range: e.target.value});
        this.request(e.target.value, this.state.page, this.state.type);
      }
    }, /* @__PURE__ */ react.createElement("option", {
      value: 25
    }, "25"), /* @__PURE__ */ react.createElement("option", {
      value: 50
    }, "50"), /* @__PURE__ */ react.createElement("option", {
      value: 60
    }, "100")), /* @__PURE__ */ react.createElement("button", {
      onClick: (e) => {
        if (this.state.page !== 1) {
          this.setState({page: this.state.page - 1});
          this.request(this.state.range, this.state.page - 1, this.state.type);
        }
      }
    }, "<"), /* @__PURE__ */ react.createElement("p", null, this.state.page, "/", this.state.nbrpages), /* @__PURE__ */ react.createElement("button", {
      onClick: (e) => {
        if (this.state.page !== this.state.nbrpages) {
          this.setState({page: this.state.page + 1});
          this.request(this.state.range, this.state.page + 1, this.state.type);
        }
      }
    }, ">"))), !this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    })), this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "table"
    }, this.state.type == 1 && /* @__PURE__ */ react.createElement("table", null, /* @__PURE__ */ react.createElement("thead", null, /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("th", null, "id"), /* @__PURE__ */ react.createElement("th", null, "patient"), /* @__PURE__ */ react.createElement("th", null, "prix"), /* @__PURE__ */ react.createElement("th", null, "pay\xE9"), /* @__PURE__ */ react.createElement("th", null, "ajout\xE9 le"), /* @__PURE__ */ react.createElement("th", null, "modifi\xE9 le"))), /* @__PURE__ */ react.createElement("tbody", null, this.state.datas.map((data) => /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("td", null, data.id), /* @__PURE__ */ react.createElement("td", null, data.get_patient.vorname, " ", data.get_patient.name), /* @__PURE__ */ react.createElement("td", null, data.price), /* @__PURE__ */ react.createElement("td", null, data.get_facture ? data.get_facture.payed ? "oui" : "non" : "pas de facture"), /* @__PURE__ */ react.createElement("td", null, dateformat(data.created_at, "dd/mm/yyyy \xE0 H:MM")), /* @__PURE__ */ react.createElement("td", null, dateformat(data.updated_at, "dd/mm/yyyy \xE0 H:MM")))))), this.state.type == 2 && /* @__PURE__ */ react.createElement("table", null, /* @__PURE__ */ react.createElement("thead", null, /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("th", null, "id"), /* @__PURE__ */ react.createElement("th", null, "personnel"), /* @__PURE__ */ react.createElement("th", null, "debut"), /* @__PURE__ */ react.createElement("th", null, "fin"), /* @__PURE__ */ react.createElement("th", null, "total"))), /* @__PURE__ */ react.createElement("tbody", null, this.state.datas.map((data) => /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("td", null, data.id), /* @__PURE__ */ react.createElement("td", null, data.get_user.name), /* @__PURE__ */ react.createElement("td", null, dateformat(data.created_at, "dd/mm/yyyy \xE0 H:MM")), /* @__PURE__ */ react.createElement("td", null, data.EndedAt ? data.EndedAt : "en service"), /* @__PURE__ */ react.createElement("td", null, data.Total ? data.Total : "en service"))))), this.state.type == 3 && /* @__PURE__ */ react.createElement("table", null, /* @__PURE__ */ react.createElement("thead", null, /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("th", null, "id"), /* @__PURE__ */ react.createElement("th", null, "patient"), /* @__PURE__ */ react.createElement("th", null, "id rapport"), /* @__PURE__ */ react.createElement("th", null, "payed"), /* @__PURE__ */ react.createElement("th", null, "prix"), /* @__PURE__ */ react.createElement("th", null, "modifi\xE9 le"), /* @__PURE__ */ react.createElement("th", null, "cr\xE9\xE9 le"))), /* @__PURE__ */ react.createElement("tbody", null, this.state.datas.map((data) => /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("td", null, data.id), /* @__PURE__ */ react.createElement("td", null, data.get_patient.vorname, " ", data.get_patient.name), /* @__PURE__ */ react.createElement("td", null, data.rapport_id ? data.rapport_id : "pas de rapport"), /* @__PURE__ */ react.createElement("td", null, data.payed ? "oui" : "non"), /* @__PURE__ */ react.createElement("td", null, data.price), /* @__PURE__ */ react.createElement("td", null, dateformat(data.updated_at, "dd/mm/yyyy \xE0 H:MM")), /* @__PURE__ */ react.createElement("td", null, dateformat(data.created_at, "dd/mm/yyyy \xE0 H:MM")))))), this.state.type == 4 && /* @__PURE__ */ react.createElement("table", null, /* @__PURE__ */ react.createElement("thead", null, /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("th", null, "id"), /* @__PURE__ */ react.createElement("th", null, "cr\xE9ateur"), /* @__PURE__ */ react.createElement("th", null, "termin\xE9"), /* @__PURE__ */ react.createElement("th", null, "cr\xE9\xE9 le"), /* @__PURE__ */ react.createElement("th", null, "modifier le"))), /* @__PURE__ */ react.createElement("tbody", null, this.state.datas.map((data) => /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("td", null, data.id), /* @__PURE__ */ react.createElement("td", null, data.get_user.name), /* @__PURE__ */ react.createElement("td", null, data.ended ? "oui" : "non"), /* @__PURE__ */ react.createElement("td", null, dateformat(data.created_at, "dd/mm/yyyy \xE0 H:MM")), /* @__PURE__ */ react.createElement("td", null, dateformat(data.updated_at, "dd/mm/yyyy \xE0 H:MM")))))))));
  }
}
class Permissions extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      obj: [],
      data: false
    };
  }
  async componentDidMount() {
    var req = await axios({
      url: "/data/admin/grades/get",
      method: "GET"
    });
    if (req.status === 200) {
      this.setState({obj: req.data.grades, data: true});
    }
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      class: "perm"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "header"
    }, /* @__PURE__ */ react.createElement(PagesTitle, {
      title: "Gestion des permissions"
    }), /* @__PURE__ */ react.createElement(Link, {
      to: "/gestion/personnel",
      className: "btn"
    }, "Retour")), /* @__PURE__ */ react.createElement("div", {
      className: "content"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "tablecontainer"
    }, !this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    })), this.state.data && /* @__PURE__ */ react.createElement("table", null, /* @__PURE__ */ react.createElement("thead", null, /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("th", {
      className: "p-grade p-head"
    }, "grade"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "acceder au site"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "faire des rapports hors service"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "acceder au dossier hors service"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "voir les Bc hors service"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "sortir les pdf (factures / BC)"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "ajouter des factures"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "cr\xE9er un rapport"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "cr\xE9er un BC"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "acceder au r\xE9capitulatif des remboursement"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "\xE9diter les informations"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "acceder au carnet de vol (sans \xEAtre pilote)"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "accerder au rapport horaire"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "modifier le service d'un membre"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "modifier le temps de service d'un membre"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "voir la liste du personnel"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "mettre la capacit\xE9 de pilote"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "modifier les grade"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "g\xE9rer les permissions"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "poster des annonces"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "acceder au logs"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "valider les formations"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "cr\xE9er des formation"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "rendre public les formations"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "supprimer des formation"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "acceder au statisques admins"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "Acceder au facture hors service"), /* @__PURE__ */ react.createElement("th", {
      className: "p-perm p-head"
    }, "acceder \xE0 la page gestion de contenu"))), /* @__PURE__ */ react.createElement("tbody", null, this.state.obj.map((ob) => /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("td", {
      className: "grade"
    }, ob.name), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_0,
      id: "myonoffswitch_A" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_0/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_A" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_1,
      id: "myonoffswitch_B" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_1/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_B" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_2,
      id: "myonoffswitch_C" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_2/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_C" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_3,
      id: "myonoffswitch_D" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_3/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_D" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_4,
      id: "myonoffswitch_E" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_4/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_E" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_5,
      id: "myonoffswitch_F" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_5/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_F" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_6,
      id: "myonoffswitch_G" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_6/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_G" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_7,
      id: "myonoffswitch_H" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_7/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_H" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_8,
      id: "myonoffswitch_I" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_8/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_I" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_9,
      id: "myonoffswitch_J" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_9/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_J" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_10,
      id: "myonoffswitch_K" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_10/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_K" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_11,
      id: "myonoffswitch_L" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_11/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_L" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_12,
      id: "myonoffswitch_M" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_12/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_M" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_13,
      id: "myonoffswitch_N" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_13/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_N" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_14,
      id: "myonoffswitch_O" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_14/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_O" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_15,
      id: "myonoffswitch_P" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_15/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_P" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_16,
      id: "myonoffswitch_Q" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_16/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_Q" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_17,
      id: "myonoffswitch_R" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_17/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_R" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_18,
      id: "myonoffswitch_S" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_18/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_S" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_19,
      id: "myonoffswitch_T" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_19/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_T" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_20,
      id: "myonoffswitch_U" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_20/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_U" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_21,
      id: "myonoffswitch_V" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_21/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_V" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_22,
      id: "myonoffswitch_W" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_22/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_W" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_23,
      id: "myonoffswitch_X" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_23/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_X" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_24,
      id: "myonoffswitch_Y" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_24/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_Y" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_25,
      id: "myonoffswitch_Z" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_25/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_Z" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "onoffswitch-checkbox",
      checked: ob.perm_26,
      id: "myonoffswitch_ZA" + ob.id,
      tabIndex: "0",
      onClick: async () => {
        var req = await axios({
          url: "/data/admin/grades/perm_26/" + ob.id,
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch_ZA" + ob.id
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    })))))))))));
  }
}
class PatientListPU extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      redirect: false
    };
  }
  render() {
    if (this.state.redirect) {
      return /* @__PURE__ */ react.createElement(Redirect, {
        to: this.state.redirect
      });
    } else {
      return /* @__PURE__ */ react.createElement("div", {
        className: "Patient-list-card"
      }, this.props.idcard === true || this.props.idcard === 1 && /* @__PURE__ */ react.createElement("h5", {
        className: "id"
      }, "[ID]"), /* @__PURE__ */ react.createElement("h5", {
        className: "name"
      }, this.props.name), /* @__PURE__ */ react.createElement("h5", {
        className: "date"
      }, "[", this.props.date, "]"), /* @__PURE__ */ react.createElement("h5", {
        className: "color"
      }, this.props.color), /* @__PURE__ */ react.createElement("button", {
        onClick: (e) => {
          this.setState({redirect: "/patient/dossiers?id=" + this.props.urlid});
        },
        className: "edit"
      }, /* @__PURE__ */ react.createElement("img", {
        src: "/assets/images/editer.png",
        alt: ""
      })), /* @__PURE__ */ react.createElement("button", {
        onClick: async (e) => {
          await axios({
            method: "DELETE",
            url: "/data/blackcode/delete/patient/" + this.props.urlid
          });
          this.props.update();
        },
        className: "delete"
      }, /* @__PURE__ */ react.createElement("img", {
        src: "/assets/images/cancel.png",
        alt: ""
      })));
    }
  }
}
class ListPatient extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      patients: this.props.patients
    };
  }
  componentDidUpdate(prevProps, prevState, snapshot) {
    if (this.props.patients !== prevState.patients) {
      this.setState({patients: this.props.patients});
    }
  }
  render() {
    return /* @__PURE__ */ react.createElement("section", {
      className: "list-container",
      style: {filter: this.props.blur ? "blur(5px)" : "none"}
    }, /* @__PURE__ */ react.createElement("div", {
      className: "list-content"
    }, /* @__PURE__ */ react.createElement("h1", null, "Liste des patients (", this.state.patients ? this.state.patients.length : "?", ")"), /* @__PURE__ */ react.createElement("div", {
      className: "list"
    }, this.state.patients !== null && this.state.patients.map((patient) => /* @__PURE__ */ react.createElement(PatientListPU, {
      name: patient.name,
      date: dateformat(patient.created_at, "hh:mm"),
      urlid: patient.rapport_id,
      color: patient.get_color.name,
      idcard: patient.idcard
    })))));
  }
}
class BCBase extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      add: false,
      active: void 0,
      types: void 0,
      ended: void 0,
      data: false,
      clicked: false,
      place: "",
      type: 0,
      errors: [],
      pdfstart: "",
      pdfend: ""
    };
    this.addbc = this.addbc.bind(this);
  }
  async componentDidMount() {
    var req = await axios({
      method: "GET",
      url: "/data/blackcode/load"
    });
    if (req.status === 200) {
      this.setState({active: req.data.active, ended: req.data.ended, types: req.data.types, data: true});
    }
  }
  async addbc(e) {
    e.preventDefault();
    if (this.state.type !== 0) {
      await axios({
        method: "POST",
        url: "/data/blackcode/create",
        data: {
          type: this.state.type,
          place: this.state.place
        }
      }).then((response) => {
        this.setState({place: "", type: 0});
        this.props.update(1, response.data.bc_id);
      }).catch((error) => {
        error = Object.assign({}, error);
        if (error.response.status === 422) {
          this.setState({errors: error.response.data.errors});
        }
      });
    }
    this.setState({cliked: false});
  }
  render() {
    var perm = this.context;
    return /* @__PURE__ */ react.createElement("div", {
      className: "BC-base"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "header",
      style: {filter: this.state.add ? "blur(5px)" : "none"}
    }, /* @__PURE__ */ react.createElement(PagesTitle, {
      title: "Black Codes"
    }), perm.add_BC === 1 && /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      onClick: () => this.setState({add: true})
    }, "Ajouter un BC"), perm.factures_PDF === 1 && /* @__PURE__ */ react.createElement("div", {
      className: "pdf_Generator mobildisabled"
    }, /* @__PURE__ */ react.createElement("form", {
      onSubmit: (e) => {
        e.preventDefault();
        window.open("/exel/allPList/" + this.state.pdfstart + "/" + this.state.pdfend);
      }
    }, /* @__PURE__ */ react.createElement("label", null, "Liste des patients du"), /* @__PURE__ */ react.createElement("input", {
      type: "date",
      value: this.state.pdfstart,
      onChange: (e) => {
        this.setState({pdfstart: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("label", null, "au"), /* @__PURE__ */ react.createElement("input", {
      type: "date",
      value: this.state.pdfend,
      onChange: (e) => {
        this.setState({pdfend: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("button", {
      type: "submit",
      className: "btn"
    }, "g\xE9n\xE9rer")))), /* @__PURE__ */ react.createElement("section", {
      className: "contain",
      style: {filter: this.state.add ? "blur(5px)" : "none"}
    }, /* @__PURE__ */ react.createElement("div", {
      className: "BC-List"
    }, /* @__PURE__ */ react.createElement("h1", null, "En cours"), !this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    })), this.state.active && this.state.active.map((bc) => /* @__PURE__ */ react.createElement("div", {
      className: "card",
      onClick: async () => {
        var req = await axios({
          method: "post",
          url: "/data/blackcode/" + bc.id + "/add/personnel"
        });
        if (req.status === 201) {
          this.props.update(1, bc.id);
        }
      }
    }, /* @__PURE__ */ react.createElement("h3", null, bc.get_type.name, " #", bc.id), /* @__PURE__ */ react.createElement("h4", null, bc.place), /* @__PURE__ */ react.createElement("div", {
      className: "separator"
    }), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("h5", null, "Secouristes : "), /* @__PURE__ */ react.createElement("h5", null, bc.secouristes)), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("h5", null, "Victimes : "), /* @__PURE__ */ react.createElement("h5", null, bc.patients)), /* @__PURE__ */ react.createElement("div", {
      className: "separator"
    }), /* @__PURE__ */ react.createElement("h4", null, dateformat(bc.created_at, "yyyy/mm/dd H:MM"), " [FR]"), /* @__PURE__ */ react.createElement("h4", null, "alerte de ", bc.get_user.name)))), /* @__PURE__ */ react.createElement("div", {
      className: "BC-List"
    }, /* @__PURE__ */ react.createElement("h1", null, "Anciens"), !this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    })), this.state.ended && this.state.ended.map((bc) => /* @__PURE__ */ react.createElement("div", {
      className: "card",
      onClick: () => {
        this.props.update(2, bc.id);
      }
    }, /* @__PURE__ */ react.createElement("h3", null, bc.get_type.name, " #", bc.id), /* @__PURE__ */ react.createElement("h4", null, bc.place), /* @__PURE__ */ react.createElement("div", {
      className: "separator"
    }), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("h5", null, "Secouristes : "), /* @__PURE__ */ react.createElement("h5", null, bc.secouristes)), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("h5", null, "Victimes : "), /* @__PURE__ */ react.createElement("h5", null, bc.patients)), /* @__PURE__ */ react.createElement("div", {
      className: "separator"
    }), /* @__PURE__ */ react.createElement("h4", null, dateformat(bc.created_at, "yyyy/mm/dd H:MM"), " [FR]"), /* @__PURE__ */ react.createElement("h4", null, dateformat(bc.updated_at, "yyyy/mm/dd H:MM"), " [FR]"), /* @__PURE__ */ react.createElement("h4", null, "alerte de ", bc.get_user.name))))), this.state.add && /* @__PURE__ */ react.createElement("section", {
      className: "popup"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "popup-content"
    }, /* @__PURE__ */ react.createElement("h1", null, "Ajouter un BC"), /* @__PURE__ */ react.createElement("form", {
      onSubmit: (e) => {
        this.setState({clicked: true});
        this.addbc(e);
      }
    }, /* @__PURE__ */ react.createElement("div", {
      className: "row"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "text",
      placeholder: "lieux",
      className: this.state.errors.place ? "form-error" : "",
      value: this.state.place,
      onChange: (e) => {
        this.setState({place: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("ul", {
      className: "error-list"
    }, this.state.errors.place && this.state.errors.place.map((item) => /* @__PURE__ */ react.createElement("li", null, item))), /* @__PURE__ */ react.createElement("select", {
      defaultValue: this.state.type,
      onChange: (e) => {
        this.setState({type: e.target.value});
      }
    }, /* @__PURE__ */ react.createElement("option", {
      value: 0,
      disabled: true
    }, "choisir"), this.state.types && this.state.types.map((type) => /* @__PURE__ */ react.createElement("option", {
      key: type.id,
      value: type.id
    }, type.name)))), /* @__PURE__ */ react.createElement("div", {
      className: "btn-contain"
    }, /* @__PURE__ */ react.createElement("button", {
      onClick: () => this.setState({add: false}),
      className: "btn"
    }, "fermer"), /* @__PURE__ */ react.createElement("button", {
      type: "submit",
      disabled: this.state.clicked === true,
      className: "btn"
    }, "Ajouter"))))));
  }
}
BCBase.contextType = PermsContext;
class BCLast extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      bc: [],
      data: false
    };
  }
  async componentDidMount() {
    var req = await axios({
      url: "/data/blackcode/" + this.props.id + "/infos",
      method: "GET"
    });
    if (req.status === 200) {
      this.setState({data: true, bc: req.data.bc});
    }
  }
  render() {
    if (this.state.data) {
      const bc = this.state.bc;
      let perm = this.context;
      return /* @__PURE__ */ react.createElement("div", {
        className: "BC-Last"
      }, /* @__PURE__ */ react.createElement("section", {
        className: "left"
      }, /* @__PURE__ */ react.createElement("div", {
        className: "header"
      }, /* @__PURE__ */ react.createElement(PagesTitle, {
        title: bc.get_type.name + " " + bc.place
      }), /* @__PURE__ */ react.createElement("div", {
        className: "btn-contain"
      }, /* @__PURE__ */ react.createElement("div", {
        className: "bgforbtn"
      }, perm.factures_PDF === 1 && /* @__PURE__ */ react.createElement("a", {
        className: "btn",
        target: "_blank",
        href: "/data/bc/rapport/" + bc.id
      }, "rapport"), /* @__PURE__ */ react.createElement("button", {
        className: "btn",
        onClick: () => this.props.update(0)
      }, "Retour")))), /* @__PURE__ */ react.createElement("div", {
        className: "infos"
      }, /* @__PURE__ */ react.createElement("h2", null, "Informations"), /* @__PURE__ */ react.createElement("div", {
        className: "row-spaced"
      }, /* @__PURE__ */ react.createElement("label", null, "date de d\xE9but"), /* @__PURE__ */ react.createElement("label", null, dateformat(bc.created_at, "yyyy/mm/dd H:MM"), " [FR]")), /* @__PURE__ */ react.createElement("div", {
        className: "row-spaced"
      }, /* @__PURE__ */ react.createElement("label", null, "date de fin"), /* @__PURE__ */ react.createElement("label", null, dateformat(bc.updated_at, "yyyy/mm/dd H:MM"), " [FR]")), /* @__PURE__ */ react.createElement("div", {
        className: "row-spaced"
      }, /* @__PURE__ */ react.createElement("label", null, "Patients secourus"), /* @__PURE__ */ react.createElement("label", null, bc.get_patients.length)), /* @__PURE__ */ react.createElement("div", {
        className: "row-spaced"
      }, /* @__PURE__ */ react.createElement("label", null, "Personnel engag\xE9"), /* @__PURE__ */ react.createElement("label", null, bc.get_personnel.length)), /* @__PURE__ */ react.createElement("div", {
        className: "row-spaced"
      }, /* @__PURE__ */ react.createElement("label", null, "Bc engag\xE9 par"), /* @__PURE__ */ react.createElement("label", null, bc.get_user.name))), /* @__PURE__ */ react.createElement("div", {
        className: "personnel-list"
      }, bc.get_personnel.map((user) => /* @__PURE__ */ react.createElement("div", {
        className: "tag"
      }, user.name)))), /* @__PURE__ */ react.createElement(ListPatient, {
        patients: this.state.bc.get_patients
      }));
    } else {
      return /* @__PURE__ */ react.createElement("div", {
        className: "load"
      }, /* @__PURE__ */ react.createElement("img", {
        src: "/assets/images/loading.svg",
        alt: ""
      }));
    }
  }
}
BCLast.contextType = PermsContext;
class BCView extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      CloseMenuOpen: false,
      id: this.props.id,
      data: null,
      patients: null,
      bc: null,
      personnels: null,
      blessures: null,
      couleurs: null,
      nom: "",
      color: 0,
      blessure: 0,
      payed: false,
      carteid: false,
      searsh: null,
      clicked: false,
      correctid: true,
      realname: "",
      errors: []
    };
    this.quitbc = this.quitbc.bind(this);
    this.check = this.check.bind(this);
    this.update = this.update.bind(this);
    this.searsh = this.searsh.bind(this);
    this.post = this.post.bind(this);
  }
  async quitbc() {
    var req = await axios({
      method: "delete",
      url: "/data/blackcode/" + this.props.id + "/delete/personnel"
    });
    if (req.status === 202) {
      this.props.update(0);
    }
  }
  componentDidUpdate(prevProps, prevState, snapshot) {
    if (prevProps.id !== this.props.id) {
      this.setState({id: this.props.id});
      this.update();
    }
  }
  async update() {
    let req = await axios({
      method: "GET",
      url: "/data/blackcode/" + this.props.id + "/infos"
    });
    if (req.status === 200) {
      this.setState({
        data: true,
        bc: req.data.bc,
        patients: req.data.bc.get_patients,
        personnels: req.data.bc.get_personnel,
        blessures: req.data.blessures,
        couleurs: req.data.colors
      });
    }
  }
  async check() {
    let req = await axios({
      method: "GET",
      url: "/data/blackcode/" + this.props.id + "/status"
    });
    if (req.status === 200 && req.data.ended) {
      this.props.update(0);
    }
  }
  async searsh(nom) {
    this.setState({nom});
    var len = nom.length;
    if (len > 3) {
      let req = await axios({
        method: "GET",
        url: "/data/patient/search/" + nom
      });
      if (req.status === 200) {
        this.setState({searsh: req.data.list});
      }
    }
  }
  async post(e) {
    this.setState({clicked: true});
    e.preventDefault();
    if (this.state.blessure !== 0 && this.state.color !== 0) {
      await axios({
        url: "/data/blackcode/" + this.props.id + "/add/patient",
        method: "post",
        data: {
          name: this.state.nom,
          color: this.state.color,
          blessure: this.state.blessure,
          payed: this.state.payed,
          carteid: this.state.carteid,
          correctid: this.state.correctid,
          realname: this.state.realname
        }
      }).then((response) => {
        if (response.status === 201) {
          this.setState({
            nom: "",
            color: 0,
            blessure: 0,
            payed: false,
            carteid: false,
            correctid: true,
            realname: ""
          });
        }
      }).catch((error) => {
        error = Object.assign({}, error);
        if (error.response.status === 422) {
          this.setState({errors: error.response.data.errors});
        }
      });
    }
    this.setState({clicked: false});
  }
  componentDidMount() {
    this.update();
    this.check();
    this.updator = setInterval(() => this.update(), 2e4);
    this.checker = setInterval(() => this.check(), 1e4);
  }
  componentWillUnmount() {
    clearInterval(this.updator);
    clearInterval(this.checker);
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "BC-View"
    }, /* @__PURE__ */ react.createElement("section", {
      style: {filter: this.state.CloseMenuOpen ? "blur(5px)" : "none"},
      className: "left"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "header"
    }, this.state.data && /* @__PURE__ */ react.createElement(PagesTitle, {
      title: this.state.bc.get_type.name + " " + this.state.bc.place
    }), /* @__PURE__ */ react.createElement("div", {
      className: "btn-contain"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "bgforquibtn"
    }, /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      onClick: this.quitbc
    }, "Quitter le BC")), /* @__PURE__ */ react.createElement("div", {
      className: "bgforbtn"
    }, /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      onClick: () => this.setState({CloseMenuOpen: true})
    }, "Fermer le BC")))), /* @__PURE__ */ react.createElement("div", {
      className: "addpatient"
    }, /* @__PURE__ */ react.createElement("form", {
      onSubmit: (e) => {
        this.post(e);
      }
    }, /* @__PURE__ */ react.createElement("div", {
      className: "top"
    }, /* @__PURE__ */ react.createElement("button", {
      type: "submit",
      className: "btn",
      disabled: this.state.clicked === true
    }, "ajouter"), /* @__PURE__ */ react.createElement("h2", null, "Ajouter un patient")), /* @__PURE__ */ react.createElement("div", {
      className: "row-spaced"
    }, /* @__PURE__ */ react.createElement("label", null, "pr\xE9nom nom :"), /* @__PURE__ */ react.createElement("input", {
      list: "autocomplete",
      autoComplete: "off",
      className: "input " + (this.state.errors.name ? "form-error" : ""),
      type: "text",
      value: this.state.nom,
      onChange: (e) => {
        this.searsh(e.target.value);
      }
    }), /* @__PURE__ */ react.createElement("datalist", {
      id: "autocomplete"
    }, this.state.searsh && this.state.searsh.map((patient) => /* @__PURE__ */ react.createElement("option", {
      key: patient.id,
      value: patient.vorname + " " + patient.name
    }))), this.state.errors.name && /* @__PURE__ */ react.createElement("ul", {
      className: "error-list"
    }, this.state.errors.name.map((item) => /* @__PURE__ */ react.createElement("li", null, item)))), /* @__PURE__ */ react.createElement("div", {
      className: "row-spaced"
    }, /* @__PURE__ */ react.createElement("label", null, "Couleur dominante :"), /* @__PURE__ */ react.createElement("select", {
      className: "input",
      value: this.state.color,
      onChange: (e) => {
        this.setState({color: e.target.value});
      }
    }, /* @__PURE__ */ react.createElement("option", {
      value: 0,
      disabled: true
    }, "choisir"), this.state.data && this.state.couleurs.map((item) => /* @__PURE__ */ react.createElement("option", {
      key: item.id,
      value: item.id
    }, item.name)))), /* @__PURE__ */ react.createElement("div", {
      className: "row-spaced"
    }, /* @__PURE__ */ react.createElement("label", null, "Type de blessure :"), /* @__PURE__ */ react.createElement("select", {
      className: "input",
      value: this.state.blessure,
      onChange: (e) => {
        this.setState({blessure: e.target.value});
      }
    }, /* @__PURE__ */ react.createElement("option", {
      value: 0,
      disabled: true
    }, "choisir"), this.state.data && this.state.blessures.map((item) => /* @__PURE__ */ react.createElement("option", {
      key: item.id,
      value: item.id
    }, item.name)))), /* @__PURE__ */ react.createElement("div", {
      className: "idCheck"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "row-spaced"
    }, /* @__PURE__ */ react.createElement("label", null, "HRP identit\xE9 correcte:"), /* @__PURE__ */ react.createElement("div", {
      className: "switch-container"
    }, /* @__PURE__ */ react.createElement("input", {
      id: "switch" + 12,
      className: "payed_switch " + (this.state.errors.correctid ? "form-error" : ""),
      type: "checkbox",
      checked: this.state.correctid,
      onChange: (e) => {
        if (this.state.correctid) {
          this.setState({correctid: false});
        } else {
          this.setState({correctid: true});
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      htmlFor: "switch" + 12,
      className: "payed_switchLabel"
    }))), this.state.correctid === false && /* @__PURE__ */ react.createElement("div", {
      className: "row-spaced"
    }, /* @__PURE__ */ react.createElement("label", null, "HRP nom pr\xE9nom  : "), /* @__PURE__ */ react.createElement("input", {
      autoComplete: "off",
      placeholder: "pr\xE9nom nom r\xE9els",
      className: "input",
      type: "text",
      value: this.state.realname,
      onChange: (e) => {
        this.setState({realname: e.target.value});
      }
    }), this.state.errors.realname && /* @__PURE__ */ react.createElement("ul", {
      className: "error-list"
    }, this.state.errors.realname.map((item) => /* @__PURE__ */ react.createElement("li", null, item))))), /* @__PURE__ */ react.createElement("div", {
      className: "bottom"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "paye"
    }, /* @__PURE__ */ react.createElement("label", null, "Pay\xE9 : "), /* @__PURE__ */ react.createElement("div", {
      className: "switch-container"
    }, /* @__PURE__ */ react.createElement("input", {
      id: "switch" + 1,
      className: "payed_switch",
      type: "checkbox",
      checked: this.state.payed,
      onChange: (e) => {
        if (this.state.payed) {
          this.setState({payed: false});
        } else {
          this.setState({payed: true});
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      htmlFor: "switch" + 1,
      className: "payed_switchLabel"
    }))), /* @__PURE__ */ react.createElement("div", {
      className: "idcard"
    }, /* @__PURE__ */ react.createElement("label", null, "carte d'identit\xE9 : "), /* @__PURE__ */ react.createElement("div", {
      className: "onoffswitch"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      name: "onoffswitch",
      className: "onoffswitch-checkbox",
      id: "myonoffswitch",
      tabIndex: "0",
      checked: this.state.carteid,
      onChange: (e) => {
        if (this.state.carteid) {
          this.setState({carteid: false});
        } else {
          this.setState({carteid: true});
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      className: "onoffswitch-label",
      htmlFor: "myonoffswitch"
    }, /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-inner"
    }), /* @__PURE__ */ react.createElement("span", {
      className: "onoffswitch-switch"
    }))))))), /* @__PURE__ */ react.createElement("div", {
      className: "personnel-list"
    }, !this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    })), this.state.data && this.state.personnels.map((user) => /* @__PURE__ */ react.createElement("div", {
      className: "tag"
    }, user.name)))), /* @__PURE__ */ react.createElement(ListPatient, {
      blur: this.state.CloseMenuOpen,
      patients: this.state.patients
    }), this.state.CloseMenuOpen && /* @__PURE__ */ react.createElement("section", {
      className: "popup"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "popup-content"
    }, /* @__PURE__ */ react.createElement("h1", null, "Fermer le BC"), /* @__PURE__ */ react.createElement("div", {
      className: "close"
    }, /* @__PURE__ */ react.createElement("button", {
      onClick: () => this.setState({CloseMenuOpen: false}),
      className: "btn"
    }, "annuler"), /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      onClick: async () => {
        var req = await axios({
          method: "PUT",
          url: "/data/blackcode/" + this.props.id + "/close"
        });
        if (req.status === 201) {
          this.props.update(0);
        }
      }
    }, "Oui")))));
  }
}
class BCController extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      status: null,
      bc_id: void 0
    };
    this.updatestatus = this.updatestatus.bind(this);
  }
  async componentDidMount() {
    var req = await axios({
      method: "GET",
      url: "/data/blackcode/mystatus"
    });
    if (req.status === 200) {
      if (req.data.bc !== null) {
        this.updatestatus(1, req.data.bc);
      } else {
        this.updatestatus(0);
      }
    } else {
      this.updatestatus(0);
    }
  }
  updatestatus(status, id = void 0) {
    this.setState({status});
    if (id !== void 0) {
      this.setState({bc_id: id});
    }
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "BC-Container"
    }, this.state.status === 0 && /* @__PURE__ */ react.createElement(BCBase, {
      update: (status, id) => {
        this.updatestatus(status, id);
      }
    }), this.state.status === 1 && /* @__PURE__ */ react.createElement(BCView, {
      id: this.state.bc_id,
      update: (status, id) => {
        this.updatestatus(status, id);
      }
    }), this.state.status === 2 && /* @__PURE__ */ react.createElement(BCLast, {
      id: this.state.bc_id,
      update: (status, id) => {
        this.updatestatus(status, id);
      }
    }), this.state.status === null && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    })));
  }
}
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}
var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
function validate(uuid) {
  return typeof uuid === "string" && REGEX.test(uuid);
}
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).substr(1));
}
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i2 = 0; i2 < 16; ++i2) {
      buf[offset + i2] = rnds[i2];
    }
    return buf;
  }
  return stringify(rnds);
}
var invariant = function(condition, format, a, b, c, d, e, f) {
  {
    if (format === void 0) {
      throw new Error("invariant requires an error message argument");
    }
  }
  if (!condition) {
    var error;
    if (format === void 0) {
      error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function() {
        return args[argIndex++];
      }));
      error.name = "Invariant Violation";
    }
    error.framesToPop = 1;
    throw error;
  }
};
var browser = invariant;
var justThrottle = throttle;
function throttle(fn, interval, callFirst) {
  var wait = false;
  var callNow = false;
  return function() {
    callNow = callFirst && !wait;
    var context2 = this;
    var args = arguments;
    if (!wait) {
      wait = true;
      setTimeout(function() {
        wait = false;
        if (!callFirst) {
          return fn.apply(context2, args);
        }
      }, interval);
    }
    if (callNow) {
      callNow = false;
      return fn.apply(this, arguments);
    }
  };
}
var DEBUG_LOG_KEY = "__rpldy-logger-debug__";
var BATCH_STATES = {
  PENDING: "pending",
  ADDED: "added",
  PROCESSING: "processing",
  UPLOADING: "uploading",
  CANCELLED: "cancelled",
  FINISHED: "finished",
  ABORTED: "aborted"
};
var FILE_STATES = {
  PENDING: "pending",
  ADDED: "added",
  UPLOADING: "uploading",
  CANCELLED: "cancelled",
  FINISHED: "finished",
  ERROR: "error",
  ABORTED: "aborted"
};
function _typeof$4(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$4 = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$4 = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$4(obj);
}
var hasWindow = function() {
  return (typeof window === "undefined" ? "undefined" : _typeof$4(window)) === "object" && !!window.document;
};
function isFunction$1(f) {
  return typeof f === "function";
}
var isFunction_1$1 = isFunction$1;
var getPropsExtractor = function(prop) {
  var props = [].concat(prop);
  return function(arr) {
    return arr.map(function(i2) {
      return props.map(function(p) {
        return i2[p];
      }).join();
    });
  };
};
var isSamePropInArrays = function(arr1, arr2, prop) {
  var diff = true;
  var propsExtractor = getPropsExtractor(prop);
  if (arr1 && arr2 && arr1.length === arr2.length) {
    var props1 = propsExtractor(arr1), props2 = propsExtractor(arr2);
    diff = !!props1.find(function(p, i2) {
      return p !== props2[i2];
    });
  }
  return !diff;
};
var isProduction = function() {
  var _process, _process$env;
  return ((_process = process) === null || _process === void 0 ? void 0 : (_process$env = _process.env) === null || _process$env === void 0 ? void 0 : _process$env.NODE_ENV) === "production";
};
var devFreeze = function(obj) {
  return isProduction() ? obj : Object.freeze(obj);
};
function _typeof$3(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$3 = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$3 = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$3(obj);
}
var isPlainObject = function(obj) {
  var _Object$getPrototypeO;
  return !!obj && _typeof$3(obj) === "object" && (((_Object$getPrototypeO = Object.getPrototypeOf(obj)) === null || _Object$getPrototypeO === void 0 ? void 0 : _Object$getPrototypeO.constructor.name) === "Object" || Object.getPrototypeOf(obj) === null);
};
var isMergeObj = function(obj) {
  return isPlainObject(obj) || Array.isArray(obj);
};
var getKeys = function(obj, options) {
  var keys2 = Object.keys(obj);
  return options.withSymbols ? keys2.concat(Object.getOwnPropertySymbols(obj)) : keys2;
};
var getMerge = function() {
  var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var merge2 = function(target) {
    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      sources[_key - 1] = arguments[_key];
    }
    if (target && sources.length) {
      sources.forEach(function(source2) {
        if (source2) {
          getKeys(source2, options).forEach(function(key2) {
            var prop = source2[key2];
            if (!options.predicate || options.predicate(key2, prop)) {
              if (typeof prop !== "undefined" || options.undefinedOverwrites) {
                if (isMergeObj(prop)) {
                  if (typeof target[key2] === "undefined" || !isPlainObject(target[key2])) {
                    target[key2] = Array.isArray(prop) ? [] : {};
                  }
                  merge2(target[key2], prop);
                } else {
                  target[key2] = prop;
                }
              }
            }
          });
        }
      });
    }
    return target;
  };
  return merge2;
};
var merge = getMerge();
var clone = function(obj) {
  var mergeFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : merge;
  return isMergeObj(obj) ? mergeFn(Array.isArray(obj) ? [] : {}, obj) : obj;
};
var pick = function(obj, props) {
  return obj && Object.keys(obj).reduce(function(res, key2) {
    if (~props.indexOf(key2)) {
      res[key2] = obj[key2];
    }
    return res;
  }, {});
};
var isDebug;
var isEnvDebug = function() {
  var _process, _process$env;
  return !isProduction() && ((_process = process) === null || _process === void 0 ? void 0 : (_process$env = _process.env) === null || _process$env === void 0 ? void 0 : _process$env.DEBUG);
};
var isDebugOn = function() {
  if (typeof isDebug !== "boolean") {
    isDebug = isEnvDebug() || hasWindow() && ("location" in window && !!~window.location.search.indexOf("rpldy_debug=true") || window[DEBUG_LOG_KEY] === true);
  }
  return isDebug;
};
var setDebug = function(debugOn) {
  if (hasWindow()) {
    window[DEBUG_LOG_KEY] = debugOn;
  }
  isDebug = debugOn ? true : null;
};
var debugLog = function() {
  if (isDebugOn()) {
    var _console;
    (_console = console).log.apply(_console, arguments);
  }
};
var triggerCancellable = function(trigger2, event) {
  var doTrigger = function(event2) {
    for (var _len2 = arguments.length, args2 = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args2[_key2 - 1] = arguments[_key2];
    }
    return new Promise(function(resolve, reject) {
      var results = trigger2.apply(void 0, [event2].concat(args2));
      if (results && results.length) {
        Promise.all(results)["catch"](reject).then(function(resolvedResults) {
          return resolvedResults && resolve(!!~resolvedResults.findIndex(function(r) {
            return r === false;
          }));
        });
      } else {
        resolve(false);
      }
    });
  };
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }
  return event ? doTrigger.apply(void 0, [event].concat(args)) : doTrigger;
};
var isEmpty = function(val) {
  return val === null || val === void 0;
};
var triggerUpdater = function(trigger2, event) {
  var doTrigger = function(event2) {
    for (var _len2 = arguments.length, args2 = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args2[_key2 - 1] = arguments[_key2];
    }
    return new Promise(function(resolve, reject) {
      var results = trigger2.apply(void 0, [event2].concat(args2));
      if (results && results.length) {
        Promise.all(results)["catch"](reject).then(function(resolvedResults) {
          var result;
          if (resolvedResults) {
            while (isEmpty(result) && resolvedResults.length) {
              result = resolvedResults.pop();
            }
          }
          resolve(isEmpty(result) ? void 0 : result);
        });
      } else {
        resolve();
      }
    });
  };
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }
  return event ? doTrigger.apply(void 0, [event].concat(args)) : doTrigger;
};
function _typeof$2(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$2 = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$2 = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$2(obj);
}
var BISYM = Symbol["for"]("__rpldy-bi__");
var iCounter = 0;
var getBatchItemWithUrl = function(batchItem, url) {
  batchItem.url = url;
  return batchItem;
};
var getBatchItemWithFile = function(batchItem, file) {
  batchItem.file = file;
  return batchItem;
};
var isLikeFile = function(f) {
  return f && (f instanceof Blob || f instanceof File || _typeof$2(f) === "object" && f.name && f.type);
};
var createBatchItem = function(f, batchId) {
  var isPending = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  iCounter += f.id && f.batchId ? 0 : 1;
  var id = f.id && f.batchId ? f.id : "".concat(batchId, ".item-").concat(iCounter), state = isPending ? FILE_STATES.PENDING : FILE_STATES.ADDED;
  var batchItem = {
    id,
    batchId,
    state,
    uploadStatus: 0,
    completed: 0,
    loaded: 0,
    aborted: false,
    recycled: false,
    previousBatch: null
  };
  Object.defineProperty(batchItem, BISYM, {
    value: true,
    writable: true
  });
  if (_typeof$2(f) === "object" && f[BISYM] === true) {
    batchItem.recycled = true;
    batchItem.previousBatch = f.batchId;
    f = f.file || f.url;
  }
  if (typeof f === "string") {
    batchItem = getBatchItemWithUrl(batchItem, f);
  } else if (isLikeFile(f)) {
    batchItem = getBatchItemWithFile(batchItem, f);
  } else {
    throw new Error("Unknown type of file added: ".concat(_typeof$2(f)));
  }
  return batchItem;
};
var setHeaders = function(req, headers) {
  if (headers) {
    Object.keys(headers).forEach(function(name) {
      if (headers[name] !== void 0) {
        req.setRequestHeader(name, headers[name]);
      }
    });
  }
};
var request = function(url, data) {
  var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  var req = new XMLHttpRequest();
  var pXhr = new Promise(function(resolve, reject) {
    req.onerror = function() {
      return reject(req);
    };
    req.ontimeout = function() {
      return reject(req);
    };
    req.onabort = function() {
      return reject(req);
    };
    req.onload = function() {
      return resolve(req);
    };
    req.open(options.method || "GET", url);
    setHeaders(req, options.headers);
    req.withCredentials = !!options.withCredentials;
    if (options.preSend) {
      options.preSend(req);
    }
    req.send(data);
  });
  pXhr.xhr = req;
  return pXhr;
};
function _slicedToArray$5(arr, i2) {
  return _arrayWithHoles$5(arr) || _iterableToArrayLimit$5(arr, i2) || _unsupportedIterableToArray$5(arr, i2) || _nonIterableRest$5();
}
function _nonIterableRest$5() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$5(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$5(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$5(o, minLen);
}
function _arrayLikeToArray$5(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _iterableToArrayLimit$5(arr, i2) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$5(arr) {
  if (Array.isArray(arr))
    return arr;
}
var parseResponseHeaders = function(xhr2) {
  var resHeaders;
  try {
    resHeaders = xhr2.getAllResponseHeaders().trim().split(/[\r\n]+/).reduce(function(res, line) {
      var _line$split = line.split(": "), _line$split2 = _slicedToArray$5(_line$split, 2), key2 = _line$split2[0], val = _line$split2[1];
      res[key2] = val;
      return res;
    }, {});
  } catch (ex) {
    debugLog("uploady.request: failed to read response headers", xhr2);
  }
  return resHeaders;
};
function isPromise(obj) {
  return !!obj && (typeof obj === "object" || typeof obj === "function") && typeof obj.then === "function";
}
var defaults = devFreeze({
  allowRegisterNonExistent: true,
  canAddEvents: true,
  canRemoveEvents: true,
  collectStats: false
});
var validateFunction = function(f, name) {
  if (!isFunction_1$1(f)) {
    throw new Error("'".concat(name, "' is not a valid function"));
  }
};
var isUndefined = function(val) {
  return typeof val === "undefined";
};
var LESYM = Symbol["for"]("__le__");
var LE_PACK_SYM = Symbol["for"]("__le__pack__");
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$4(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$4(arr);
}
function ownKeys$7(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$7(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys$7(Object(source2), true).forEach(function(key2) {
        _defineProperty$9(target, key2, source2[key2]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2));
    } else {
      ownKeys$7(Object(source2)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source2, key2));
      });
    }
  }
  return target;
}
function _defineProperty$9(obj, key2, value) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key2] = value;
  }
  return obj;
}
function _slicedToArray$4(arr, i2) {
  return _arrayWithHoles$4(arr) || _iterableToArrayLimit$4(arr, i2) || _unsupportedIterableToArray$4(arr, i2) || _nonIterableRest$4();
}
function _nonIterableRest$4() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$4(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$4(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$4(o, minLen);
}
function _arrayLikeToArray$4(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _iterableToArrayLimit$4(arr, i2) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$4(arr) {
  if (Array.isArray(arr))
    return arr;
}
var getLE = function(obj) {
  return obj ? obj[LESYM] : null;
};
var getValidLE = function(obj) {
  var le = getLE(obj);
  if (!le) {
    throw new Error("Didnt find LE internal object. Something very bad happened!");
  }
  return le;
};
var isLE = function(obj) {
  return !!getLE(obj);
};
var addRegistration = function(obj, name, cb) {
  var once = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  validateFunction(cb, "cb");
  var le = getValidLE(obj);
  if (!le.options.allowRegisterNonExistent && !~le.events.indexOf(name)) {
    throw new Error("Cannot register for event ".concat(name.toString(), " that wasn't already defined (allowRegisterNonExistent = false)"));
  }
  var namedRegistry = le.registry[name] || [];
  if (!namedRegistry.find(function(r) {
    return r.cb === cb;
  })) {
    namedRegistry.push({
      name,
      cb,
      once
    });
    le.registry[name] = namedRegistry;
  }
  return function() {
    return unregister.call(obj, name, cb);
  };
};
var findRegistrations = function(obj, name) {
  var registry = getValidLE(obj).registry;
  return name ? registry[name] ? registry[name].slice() : [] : Object.values(registry).flat();
};
var publicMethods = {
  on: register,
  once: registerOnce,
  off: unregister,
  getEvents
};
var getPublicMethods = function() {
  return Object.entries(publicMethods).reduce(function(res, _ref) {
    var _ref2 = _slicedToArray$4(_ref, 2), key2 = _ref2[0], m = _ref2[1];
    res[key2] = {
      value: m
    };
    return res;
  }, {});
};
var apiMethods = {
  trigger,
  addEvent,
  removeEvent,
  hasEvent,
  hasEventRegistrations,
  assign
};
var createApi = function(target) {
  return Object.keys(apiMethods).reduce(function(res, name) {
    res[name] = apiMethods[name].bind(target);
    return res;
  }, _objectSpread$7({
    target
  }, apiMethods));
};
var cleanRegistryForName = function(obj, name) {
  var force = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var registry = getValidLE(obj).registry;
  if (registry[name] && (force || !registry[name].length)) {
    delete registry[name];
  }
};
var removeRegItem = function(obj, name, cb) {
  var registry = getValidLE(obj).registry;
  if (registry[name]) {
    if (!cb) {
      cleanRegistryForName(obj, name, true);
    } else {
      registry[name] = registry[name].filter(function(reg) {
        return reg.cb !== cb;
      });
      cleanRegistryForName(obj, name);
    }
  }
};
function register(name, cb) {
  return addRegistration(this, name, cb);
}
function registerOnce(name, cb) {
  return addRegistration(this, name, cb, true);
}
function unregister(name, cb) {
  removeRegItem(this, name, cb);
}
function getEvents() {
  return getValidLE(this).events.slice();
}
function trigger(name) {
  var _this = this;
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  var regs = findRegistrations(this, name);
  var results;
  if (regs.length) {
    var _args$;
    var packValue;
    if (args.length === 1 && ((_args$ = args[0]) === null || _args$ === void 0 ? void 0 : _args$[LE_PACK_SYM]) === true) {
      packValue = args[0].resolve();
    }
    results = regs.map(function(r) {
      var result;
      if (r.once) {
        removeRegItem(_this, name, r.cb);
      }
      if (packValue) {
        result = r.cb.apply(r, _toConsumableArray(packValue));
      } else if (!args.length) {
        result = r.cb();
      } else if (args.length === 1) {
        result = r.cb(args[0]);
      } else if (args.length === 2) {
        result = r.cb(args[0], args[1]);
      } else if (args.length === 3) {
        result = r.cb(args[0], args[1], args[2]);
      } else {
        result = r.cb.apply(r, args);
      }
      return result;
    }).filter(function(result) {
      return !isUndefined(result);
    }).map(function(result) {
      return isPromise(result) ? result : Promise.resolve(result);
    });
  }
  return results && (results.length ? results : void 0);
}
function assign(toObj) {
  var le = getValidLE(this);
  defineLifeData(toObj, le.options, le.events, le.registry, le.stats);
  return createApi(toObj);
}
function addEvent(name) {
  var le = getValidLE(this);
  if (le.options.canAddEvents) {
    var index2 = le.events.indexOf(name);
    if (!~index2) {
      le.events.push(name);
    } else {
      throw new Error("Event '".concat(name, "' already defined"));
    }
  } else {
    throw new Error("Cannot add new events (canAddEvents = false)");
  }
}
function removeEvent(name) {
  var le = getValidLE(this);
  if (le.options.canRemoveEvents) {
    var index2 = le.events.indexOf(name);
    le.events.splice(index2, 1);
  } else {
    throw new Error("Cannot remove events (canRemoveEvents = false)");
  }
}
function hasEvent(name) {
  var le = getValidLE(this);
  return !!~le.events.indexOf(name);
}
function hasEventRegistrations(name) {
  return !!findRegistrations(this, name).length;
}
var defineLifeData = function(target, options) {
  var events = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
  var registry = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  var stats = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
  Object.defineProperties(target, _objectSpread$7(_defineProperty$9({}, LESYM, {
    value: Object.seal({
      registry,
      events,
      options,
      stats
    })
  }), getPublicMethods()));
};
var addLife = function(target) {
  var events = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var options = arguments.length > 2 ? arguments[2] : void 0;
  target = target || {};
  options = _objectSpread$7(_objectSpread$7({}, defaults), options);
  if (!isLE(target)) {
    defineLifeData(target, options, events);
  }
  return createApi(target);
};
var createLifePack = function(creator) {
  var lp = {
    resolve: function resolve() {
      return [].concat(creator());
    }
  };
  Object.defineProperty(lp, LE_PACK_SYM, {
    value: true,
    configurable: false
  });
  return lp;
};
var PROXY_SYM = Symbol["for"]("__rpldy-sstt-proxy__");
var STATE_SYM = Symbol["for"]("__rpldy-sstt-state__");
var isProxy = function(obj) {
  return !isProduction() && !!obj && !!~Object.getOwnPropertySymbols(obj).indexOf(PROXY_SYM);
};
var isNativeFile = function(obj) {
  return hasWindow() && obj instanceof File || obj.name && obj.size && obj.uri;
};
var isProxiable = function(obj) {
  return Array.isArray(obj) || isPlainObject(obj) && !isNativeFile(obj);
};
var mergeWithSymbols = getMerge({
  withSymbols: true,
  predicate: function predicate(key2) {
    return key2 !== PROXY_SYM && key2 !== STATE_SYM;
  }
});
var getIsUpdateable = function(proxy) {
  return isProduction() ? true : proxy[STATE_SYM].isUpdateable;
};
var setIsUpdateable = function(proxy, value) {
  if (!isProduction()) {
    proxy[STATE_SYM].isUpdateable = value;
  }
};
var deepProxy = function(obj, traps) {
  var proxy;
  if (isProxiable(obj)) {
    if (!isProxy(obj)) {
      obj[PROXY_SYM] = true;
      proxy = new Proxy(obj, traps);
    }
    Object.keys(obj).forEach(function(key2) {
      obj[key2] = deepProxy(obj[key2], traps);
    });
  }
  return proxy || obj;
};
var unwrapProxy = function(proxy) {
  return isProxy(proxy) ? clone(proxy, mergeWithSymbols) : proxy;
};
var createState = function(obj) {
  var traps = {
    set: function set(obj2, key2, value) {
      if (getIsUpdateable(proxy)) {
        obj2[key2] = deepProxy(value, traps);
      }
      return true;
    },
    get: function get2(obj2, key2) {
      return key2 === PROXY_SYM ? unwrapProxy(obj2) : obj2[key2];
    },
    defineProperty: function defineProperty() {
      throw new Error("Simple State doesnt support defining property");
    },
    setPrototypeOf: function setPrototypeOf() {
      throw new Error("Simple State doesnt support setting prototype");
    },
    deleteProperty: function deleteProperty(obj2, key2) {
      if (getIsUpdateable(proxy)) {
        delete obj2[key2];
      }
      return true;
    }
  };
  if (!isProduction() && !isProxy(obj)) {
    Object.defineProperty(obj, STATE_SYM, {
      value: {
        isUpdateable: false
      },
      configurable: true
    });
  }
  var proxy = !isProduction() ? deepProxy(obj, traps) : obj;
  return {
    state: proxy,
    update: function update(fn) {
      if (!isProduction() && getIsUpdateable(proxy)) {
        throw new Error("Can't call update on State already being updated!");
      }
      try {
        setIsUpdateable(proxy, true);
        fn(proxy);
      } finally {
        setIsUpdateable(proxy, false);
      }
      return proxy;
    },
    unwrap: function unwrap(entry) {
      return entry ? unwrapProxy(entry) : isProxy(proxy) ? unwrapProxy(proxy) : proxy;
    }
  };
};
var UPLOADER_EVENTS = devFreeze({
  BATCH_ADD: "BATCH-ADD",
  BATCH_START: "BATCH-START",
  BATCH_PROGRESS: "BATCH_PROGRESS",
  BATCH_FINISH: "BATCH-FINISH",
  BATCH_ABORT: "BATCH-ABORT",
  BATCH_CANCEL: "BATCH-CANCEL",
  ITEM_START: "FILE-START",
  ITEM_CANCEL: "FILE-CANCEL",
  ITEM_PROGRESS: "FILE-PROGRESS",
  ITEM_FINISH: "FILE-FINISH",
  ITEM_ABORT: "FILE-ABORT",
  ITEM_ERROR: "FILE-ERROR",
  ITEM_FINALIZE: "FILE-FINALIZE",
  REQUEST_PRE_SEND: "REQUEST_PRE_SEND",
  ALL_ABORT: "ALL_ABORT"
});
var PROGRESS_DELAY = 50;
var SENDER_EVENTS = devFreeze({
  ITEM_PROGRESS: "ITEM_PROGRESS",
  BATCH_PROGRESS: "BATCH_PROGRESS"
});
var ITEM_FINALIZE_STATES = [FILE_STATES.FINISHED, FILE_STATES.ERROR, FILE_STATES.CANCELLED, FILE_STATES.ABORTED];
function ownKeys$6(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$6(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys$6(Object(source2), true).forEach(function(key2) {
        _defineProperty$8(target, key2, source2[key2]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2));
    } else {
      ownKeys$6(Object(source2)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source2, key2));
      });
    }
  }
  return target;
}
function _defineProperty$8(obj, key2, value) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key2] = value;
  }
  return obj;
}
var BATCH_READY_STATES = [BATCH_STATES.ADDED, BATCH_STATES.PROCESSING, BATCH_STATES.UPLOADING];
var BATCH_FINISHED_STATES = [BATCH_STATES.ABORTED, BATCH_STATES.CANCELLED, BATCH_STATES.FINISHED];
var getBatchFromState = function(state, id) {
  return state.batches[id].batch;
};
var getBatch = function(queue, id) {
  return getBatchFromState(queue.getState(), id);
};
var isItemBelongsToBatch = function(queue, itemId, batchId) {
  return queue.getState().items[itemId].batchId === batchId;
};
var getBatchDataFromItemId = function(queue, itemId) {
  var state = queue.getState();
  var item = state.items[itemId];
  return state.batches[item.batchId];
};
var getBatchFromItemId = function(queue, itemId) {
  return getBatchDataFromItemId(queue, itemId).batch;
};
var removeBatchItems = function(queue, batchId) {
  var batch = getBatch(queue, batchId);
  queue.updateState(function(state) {
    batch.items.forEach(function(_ref) {
      var id = _ref.id;
      delete state.items[id];
      var index2 = state.itemQueue.indexOf(id);
      if (~index2) {
        state.itemQueue.splice(index2, 1);
      }
    });
  });
};
var removeBatch = function(queue, batchId) {
  queue.updateState(function(state) {
    delete state.batches[batchId];
  });
};
var cancelBatchForItem = function(queue, itemId) {
  var batch = getBatchFromItemId(queue, itemId), batchId = batch.id;
  debugLog("uploady.uploader.batchHelpers: cancelling batch: ", {
    batch
  });
  queue.updateState(function(state) {
    var batch2 = getBatchFromState(state, batchId);
    batch2.state = BATCH_STATES.CANCELLED;
  });
  triggerUploaderBatchEvent(queue, batchId, UPLOADER_EVENTS.BATCH_CANCEL);
  removeBatchItems(queue, batchId);
  removeBatch(queue, batchId);
};
var isNewBatchStarting = function(queue, itemId) {
  var batch = getBatchFromItemId(queue, itemId);
  return queue.getState().currentBatch !== batch.id;
};
var loadNewBatchForItem = function(queue, itemId) {
  var batch = getBatchFromItemId(queue, itemId);
  return queue.runCancellable(UPLOADER_EVENTS.BATCH_START, batch).then(function(isCancelled) {
    if (!isCancelled) {
      queue.updateState(function(state) {
        state.currentBatch = batch.id;
      });
    }
    return !isCancelled;
  });
};
var cleanUpFinishedBatches = function(queue) {
  var state = queue.getState();
  Object.keys(state.batches).forEach(function(batchId) {
    var _state$batches$batchI = state.batches[batchId], batch = _state$batches$batchI.batch, finishedCounter = _state$batches$batchI.finishedCounter;
    var orgItemCount = batch.orgItemCount;
    var alreadyFinalized = getIsBatchFinalized(batch);
    if (orgItemCount === finishedCounter) {
      queue.updateState(function(state2) {
        var batch2 = getBatchFromState(state2, batchId);
        batch2.state = alreadyFinalized ? batch2.state : BATCH_STATES.FINISHED;
        if (state2.currentBatch === batchId) {
          state2.currentBatch = null;
        }
      });
      debugLog("uploady.uploader.batchHelpers: cleaning up batch: ".concat(batch.id));
      if (!alreadyFinalized) {
        triggerUploaderBatchEvent(queue, batchId, UPLOADER_EVENTS.BATCH_FINISH);
      }
      removeBatchItems(queue, batchId);
      removeBatch(queue, batchId);
    }
  });
};
var triggerUploaderBatchEvent = function(queue, batchId, event) {
  var state = queue.getState(), batch = getBatchFromState(state, batchId), stateItems = state.items;
  var eventBatch = _objectSpread$6(_objectSpread$6({}, unwrapProxy(batch)), {}, {
    items: batch.items.map(function(_ref2) {
      var id = _ref2.id;
      return unwrapProxy(stateItems[id]);
    })
  });
  queue.trigger(event, eventBatch);
};
var getIsItemBatchReady = function(queue, itemId) {
  var batch = getBatchFromItemId(queue, itemId);
  return BATCH_READY_STATES.includes(batch.state);
};
var detachRecycledFromPreviousBatch = function(queue, item) {
  var previousBatch = item.previousBatch;
  if (item.recycled && previousBatch && queue.getState().batches[previousBatch]) {
    var _getBatchFromItemId = getBatchFromItemId(queue, item.id), batchId = _getBatchFromItemId.id;
    if (batchId === previousBatch) {
      queue.updateState(function(state) {
        var batch = getBatchFromState(state, batchId);
        var index2 = batch.items.findIndex(function(_ref3) {
          var id = _ref3.id;
          return id === item.id;
        });
        if (~index2) {
          batch.items.splice(index2, 1);
        }
      });
    }
  }
};
var preparePendingForUpload = function(queue, uploadOptions) {
  queue.updateState(function(state) {
    Object.keys(state.batches).forEach(function(batchId) {
      var batchData = state.batches[batchId];
      var batch = batchData.batch, batchOptions = batchData.batchOptions;
      if (batch.state === BATCH_STATES.PENDING) {
        batch.items.forEach(function(item) {
          item.state = FILE_STATES.ADDED;
        });
        batch.state = BATCH_STATES.ADDED;
        batchData.batchOptions = merge({}, batchOptions, uploadOptions);
      }
    });
  });
};
var removePendingBatches = function(queue) {
  var batches = queue.getState().batches;
  Object.keys(batches).filter(function(batchId) {
    return batches[batchId].batch.state === BATCH_STATES.PENDING;
  }).forEach(function(batchId) {
    removeBatchItems(queue, batchId);
    removeBatch(queue, batchId);
  });
};
var incrementBatchFinishedCounter = function(queue, batchId) {
  queue.updateState(function(state) {
    state.batches[batchId].finishedCounter += 1;
  });
};
var getIsBatchFinalized = function(batch) {
  return BATCH_FINISHED_STATES.includes(batch.state);
};
var _FILE_STATE_TO_EVENT_;
function _defineProperty$7(obj, key2, value) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key2] = value;
  }
  return obj;
}
var FILE_STATE_TO_EVENT_MAP = (_FILE_STATE_TO_EVENT_ = {}, _defineProperty$7(_FILE_STATE_TO_EVENT_, FILE_STATES.PENDING, null), _defineProperty$7(_FILE_STATE_TO_EVENT_, FILE_STATES.ADDED, UPLOADER_EVENTS.ITEM_START), _defineProperty$7(_FILE_STATE_TO_EVENT_, FILE_STATES.FINISHED, UPLOADER_EVENTS.ITEM_FINISH), _defineProperty$7(_FILE_STATE_TO_EVENT_, FILE_STATES.ERROR, UPLOADER_EVENTS.ITEM_ERROR), _defineProperty$7(_FILE_STATE_TO_EVENT_, FILE_STATES.CANCELLED, UPLOADER_EVENTS.ITEM_CANCEL), _defineProperty$7(_FILE_STATE_TO_EVENT_, FILE_STATES.ABORTED, UPLOADER_EVENTS.ITEM_ABORT), _defineProperty$7(_FILE_STATE_TO_EVENT_, FILE_STATES.UPLOADING, UPLOADER_EVENTS.ITEM_PROGRESS), _FILE_STATE_TO_EVENT_);
var getIsFinalized = function(item) {
  return !!~ITEM_FINALIZE_STATES.indexOf(item.state);
};
var processFinishedRequest = function(queue, finishedData, next) {
  finishedData.forEach(function(itemData) {
    var state = queue.getState();
    var id = itemData.id, info = itemData.info;
    debugLog("uploader.processor.queue: request finished for item - ", {
      id,
      info
    });
    if (state.items[id]) {
      queue.updateState(function(state2) {
        var item2 = state2.items[id];
        item2.state = info.state;
        item2.uploadResponse = info.response;
        item2.uploadStatus = info.status;
        if (getIsFinalized(item2)) {
          delete state2.aborts[id];
        }
      });
      var item = queue.getState().items[id];
      if (info.state === FILE_STATES.FINISHED && item.completed < 100) {
        queue.handleItemProgress(item, 100, item.file ? item.file.size : 0);
      }
      if (FILE_STATE_TO_EVENT_MAP[item.state]) {
        queue.trigger(FILE_STATE_TO_EVENT_MAP[item.state], item);
      }
      if (getIsFinalized(item)) {
        incrementBatchFinishedCounter(queue, item.batchId);
        queue.trigger(UPLOADER_EVENTS.ITEM_FINALIZE, item);
      }
    }
    var index2 = state.itemQueue.indexOf(id);
    if (~index2) {
      queue.updateState(function(state2) {
        state2.itemQueue.splice(index2, 1);
        var activeIndex = state2.activeIds.indexOf(id);
        if (~activeIndex) {
          state2.activeIds.splice(activeIndex, 1);
        }
      });
    }
  });
  cleanUpFinishedBatches(queue);
  return next(queue);
};
var mergeWithUndefined$1 = getMerge({
  undefinedOverwrites: true
});
var triggerPreSendUpdate = function(queue, items, options) {
  return triggerUpdater(queue.trigger, UPLOADER_EVENTS.REQUEST_PRE_SEND, {
    items,
    options
  }).then(function(updated) {
    if (updated) {
      debugLog("uploader.queue: REQUEST_PRE_SEND event returned updated items/options", updated);
      if (updated.items) {
        if (updated.items.length !== items.length || !isSamePropInArrays(updated.items, items, ["id", "batchId", "recycled"])) {
          throw new Error("REQUEST_PRE_SEND event handlers must return same items with same ids");
        }
        items = updated.items;
      }
      if (updated.options) {
        options = mergeWithUndefined$1({}, options, updated.options);
      }
    }
    return {
      items,
      options,
      cancelled: updated === false
    };
  });
};
var prepareAllowedItems = function(queue, items) {
  var allowedIds = items.map(function(item) {
    return item.id;
  });
  queue.updateState(function(state) {
    state.activeIds = state.activeIds.concat(allowedIds);
  });
  return triggerPreSendUpdate(queue, items, queue.getState().batches[items[0].batchId].batchOptions).then(function(prepared) {
    if (!prepared.cancelled) {
      queue.updateState(function(state) {
        prepared.items.forEach(function(i2) {
          state.items[i2.id] = i2;
        });
        state.batches[items[0].batchId].batchOptions = prepared.options;
      });
      var updatedState = queue.getState();
      prepared.items = prepared.items.map(function(item) {
        return updatedState.items[item.id];
      });
      prepared.options = updatedState.batches[items[0].batchId].batchOptions;
    }
    return prepared;
  });
};
var updateUploadingState = function(queue, items, sendResult) {
  queue.updateState(function(state) {
    items.forEach(function(bi) {
      var item = state.items[bi.id];
      item.state = FILE_STATES.UPLOADING;
      state.aborts[bi.id] = sendResult.abort;
    });
  });
};
var sendAllowedItems = function(queue, itemsSendData, next) {
  var items = itemsSendData.items, options = itemsSendData.options;
  var batch = queue.getState().batches[items[0].batchId].batch;
  var sendResult;
  try {
    sendResult = queue.sender.send(items, batch, options);
  } catch (ex) {
    debugLog("uploader.queue: sender failed with unexpected error", ex);
    sendResult = {
      request: Promise.resolve({
        status: 0,
        state: FILE_STATES.ERROR,
        response: ex.message
      }),
      abort: function abort() {
        return false;
      },
      senderType: "exception-handler"
    };
  }
  var _sendResult = sendResult, request3 = _sendResult.request;
  updateUploadingState(queue, items, sendResult);
  return request3.then(function(requestInfo) {
    var finishedData = items.map(function(item) {
      return {
        id: item.id,
        info: requestInfo
      };
    });
    processFinishedRequest(queue, finishedData, next);
  });
};
var reportCancelledItems = function(queue, items, cancelledResults, next) {
  var cancelledItemsIds = cancelledResults.map(function(isCancelled, index2) {
    return isCancelled ? items[index2].id : null;
  }).filter(Boolean);
  if (cancelledItemsIds.length) {
    var finishedData = cancelledItemsIds.map(function(id) {
      return {
        id,
        info: {
          status: 0,
          state: FILE_STATES.CANCELLED,
          response: "cancel"
        }
      };
    });
    processFinishedRequest(queue, finishedData, next);
  }
  return !!cancelledItemsIds.length;
};
var getAllowedItem = function(id, queue) {
  return queue.getState().items[id];
};
var processBatchItems = function(queue, ids, next) {
  var state = queue.getState();
  var items = Object.values(state.items);
  items = items.filter(function(item) {
    return !!~ids.indexOf(item.id);
  });
  return Promise.all(items.map(function(i2) {
    return queue.runCancellable(UPLOADER_EVENTS.ITEM_START, i2);
  })).then(function(cancelledResults) {
    var allowedItems = cancelledResults.map(function(isCancelled, index2) {
      return isCancelled ? null : getAllowedItem(items[index2].id, queue);
    }).filter(Boolean);
    return {
      allowedItems,
      cancelledResults
    };
  }).then(function(_ref) {
    var allowedItems = _ref.allowedItems, cancelledResults = _ref.cancelledResults;
    var afterPreparePromise = allowedItems.length ? prepareAllowedItems(queue, allowedItems).then() : Promise.resolve();
    return afterPreparePromise.then(function(itemsSendData) {
      var nextP;
      if (itemsSendData) {
        if (itemsSendData.cancelled) {
          cancelledResults = ids.map(function() {
            return true;
          });
        } else {
          sendAllowedItems(queue, itemsSendData, next);
        }
      }
      if (!reportCancelledItems(queue, items, cancelledResults, next)) {
        nextP = next(queue);
      }
      return nextP;
    });
  });
};
var getIsItemInActiveRequest = function(queue, itemId) {
  return !!~queue.getState().activeIds.flat().indexOf(itemId);
};
var getIsItemReady = function(item) {
  return item.state === FILE_STATES.ADDED;
};
var findNextItemIndex = function(queue) {
  var state = queue.getState(), itemQueue = state.itemQueue, items = state.items;
  var index2 = 0, nextId = itemQueue[index2];
  while (nextId && (getIsItemInActiveRequest(queue, nextId) || !getIsItemBatchReady(queue, nextId) || !getIsItemReady(items[nextId]))) {
    index2 += 1;
    nextId = itemQueue[index2];
  }
  return nextId ? index2 : -1;
};
var getNextIdGroup = function(queue) {
  var itemQueue = queue.getState().itemQueue;
  var nextItemIndex = findNextItemIndex(queue);
  var nextId = itemQueue[nextItemIndex], nextGroup;
  if (nextId) {
    var batchData = getBatchDataFromItemId(queue, nextId);
    var batchId = batchData.batch.id, groupMax = batchData.batchOptions.maxGroupSize || 0;
    if (batchData.batchOptions.grouped && groupMax > 1) {
      nextGroup = [];
      var nextBelongsToSameBatch = true;
      while (nextGroup.length < groupMax && nextBelongsToSameBatch) {
        nextGroup.push(nextId);
        nextId = itemQueue[nextItemIndex + nextGroup.length];
        nextBelongsToSameBatch = nextId && isItemBelongsToBatch(queue, nextId, batchId);
      }
    } else {
      nextGroup = [nextId];
    }
  }
  return nextGroup;
};
var processNext = function(queue) {
  var ids = getNextIdGroup(queue);
  var resultP = Promise.resolve();
  if (ids) {
    var currentCount = queue.getCurrentActiveCount(), _queue$getOptions = queue.getOptions(), _queue$getOptions$con = _queue$getOptions.concurrent, concurrent = _queue$getOptions$con === void 0 ? 0 : _queue$getOptions$con, _queue$getOptions$max = _queue$getOptions.maxConcurrent, maxConcurrent = _queue$getOptions$max === void 0 ? 0 : _queue$getOptions$max;
    if (!currentCount || concurrent && currentCount < maxConcurrent) {
      debugLog("uploader.processor: Processing next upload - ", {
        ids,
        state: queue.getState(),
        currentCount
      });
      var cancelled = false;
      var newBatchP = Promise.resolve(false);
      if (isNewBatchStarting(queue, ids[0])) {
        newBatchP = loadNewBatchForItem(queue, ids[0]).then(function(allowBatch) {
          cancelled = !allowBatch;
          if (cancelled) {
            cancelBatchForItem(queue, ids[0]);
            processNext(queue);
          }
          return cancelled;
        });
      }
      resultP = newBatchP.then(function(cancelled2) {
        if (!cancelled2) {
          processBatchItems(queue, ids, processNext);
        }
      });
    }
  }
  return resultP;
};
var _ITEM_STATE_ABORTS;
function _defineProperty$6(obj, key2, value) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key2] = value;
  }
  return obj;
}
var abortNonUploadingItem = function(queue, item, next) {
  debugLog("uploader.queue: aborting ".concat(item.state, " item  - "), item);
  processFinishedRequest(queue, [{
    id: item.id,
    info: {
      status: 0,
      state: FILE_STATES.ABORTED,
      response: "aborted"
    }
  }], next);
  return true;
};
var ITEM_STATE_ABORTS = (_ITEM_STATE_ABORTS = {}, _defineProperty$6(_ITEM_STATE_ABORTS, FILE_STATES.UPLOADING, function(queue, item) {
  debugLog("uploader.queue: aborting uploading item  - ", item);
  return queue.getState().aborts[item.id]();
}), _defineProperty$6(_ITEM_STATE_ABORTS, FILE_STATES.ADDED, abortNonUploadingItem), _defineProperty$6(_ITEM_STATE_ABORTS, FILE_STATES.PENDING, abortNonUploadingItem), _ITEM_STATE_ABORTS);
var callAbortOnItem = function(queue, id, next) {
  var state = queue.getState(), item = state.items[id], itemState = item === null || item === void 0 ? void 0 : item.state;
  return ITEM_STATE_ABORTS[itemState] ? ITEM_STATE_ABORTS[itemState](queue, item, next) : false;
};
var abortAll = function(queue, next) {
  var items = queue.getState().items;
  Object.keys(items).forEach(function(id) {
    return callAbortOnItem(queue, id, next);
  });
  queue.trigger(UPLOADER_EVENTS.ALL_ABORT);
};
var abortItem = function(queue, id, next) {
  return callAbortOnItem(queue, id, next);
};
var abortBatch = function(queue, id, next) {
  var state = queue.getState(), batchData = state.batches[id], batch = batchData === null || batchData === void 0 ? void 0 : batchData.batch;
  if (batch && !getIsBatchFinalized(batch)) {
    queue.updateState(function(state2) {
      getBatchFromState(state2, id).state = BATCH_STATES.ABORTED;
    });
    triggerUploaderBatchEvent(queue, id, UPLOADER_EVENTS.BATCH_ABORT);
    batch.items.forEach(function(bi) {
      return callAbortOnItem(queue, bi.id, next);
    });
  }
};
function _slicedToArray$3(arr, i2) {
  return _arrayWithHoles$3(arr) || _iterableToArrayLimit$3(arr, i2) || _unsupportedIterableToArray$3(arr, i2) || _nonIterableRest$3();
}
function _nonIterableRest$3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$3(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$3(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$3(o, minLen);
}
function _arrayLikeToArray$3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _iterableToArrayLimit$3(arr, i2) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$3(arr) {
  if (Array.isArray(arr))
    return arr;
}
var createUploaderQueue = function(options, trigger2, cancellable, sender, uploaderId) {
  var _createState = createState({
    itemQueue: [],
    currentBatch: null,
    batches: {},
    items: {},
    activeIds: [],
    aborts: {}
  }), state = _createState.state, update = _createState.update;
  var getState = function() {
    return state;
  };
  var updateState = function(updater) {
    update(updater);
  };
  var add = function(item) {
    if (state.items[item.id] && !item.recycled) {
      throw new Error("Uploader queue conflict - item ".concat(item.id, " already exists"));
    }
    if (item.recycled) {
      detachRecycledFromPreviousBatch(queueState, item);
    }
    updateState(function(state2) {
      state2.items[item.id] = item;
      state2.itemQueue.push(item.id);
    });
  };
  var handleItemProgress = function(item, completed, loaded) {
    if (state.items[item.id]) {
      updateState(function(state2) {
        var stateItem = state2.items[item.id];
        stateItem.loaded = loaded;
        stateItem.completed = completed;
      });
      trigger2(UPLOADER_EVENTS.ITEM_PROGRESS, getState().items[item.id]);
    }
  };
  sender.on(SENDER_EVENTS.ITEM_PROGRESS, handleItemProgress);
  sender.on(SENDER_EVENTS.BATCH_PROGRESS, function(batch) {
    var _state$batches$batch$;
    var batchItems = (_state$batches$batch$ = state.batches[batch.id]) === null || _state$batches$batch$ === void 0 ? void 0 : _state$batches$batch$.batch.items;
    if (batchItems) {
      var _batchItems$reduce = batchItems.reduce(function(res, item) {
        res[0] += item.completed;
        res[1] += item.loaded;
        return res;
      }, [0, 0]), _batchItems$reduce2 = _slicedToArray$3(_batchItems$reduce, 2), completed = _batchItems$reduce2[0], loaded = _batchItems$reduce2[1];
      updateState(function(state2) {
        var stateBatch = state2.batches[batch.id].batch;
        stateBatch.completed = completed / batchItems.length;
        stateBatch.loaded = loaded;
      });
      trigger2(UPLOADER_EVENTS.BATCH_PROGRESS, state.batches[batch.id].batch);
    }
  });
  var queueState = {
    uploaderId,
    getOptions: function getOptions() {
      return options;
    },
    getCurrentActiveCount: function getCurrentActiveCount() {
      return state.activeIds.length;
    },
    getState,
    updateState,
    trigger: trigger2,
    runCancellable: function runCancellable(name) {
      if (!isFunction_1$1(cancellable)) {
        throw new Error("cancellable is of wrong type");
      }
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return cancellable.apply(void 0, [name].concat(args));
    },
    sender,
    handleItemProgress
  };
  if (hasWindow() && isDebugOn()) {
    window["__rpldy_".concat(uploaderId, "_queue_state")] = queueState;
  }
  return {
    updateState,
    getState: queueState.getState,
    runCancellable: queueState.runCancellable,
    uploadBatch: function uploadBatch(batch, batchOptions) {
      if (batchOptions) {
        updateState(function(state2) {
          state2.batches[batch.id].batchOptions = batchOptions;
        });
      }
      processNext(queueState);
    },
    addBatch: function addBatch(batch, batchOptions) {
      updateState(function(state2) {
        state2.batches[batch.id] = {
          batch,
          batchOptions,
          finishedCounter: 0
        };
      });
      batch.items.forEach(add);
      return getBatchFromState(state, batch.id);
    },
    abortItem: function abortItem$1(id) {
      return abortItem(queueState, id, processNext);
    },
    abortBatch: function abortBatch$1(id) {
      abortBatch(queueState, id, processNext);
    },
    abortAll: function abortAll$1() {
      abortAll(queueState, processNext);
    },
    clearPendingBatches: function clearPendingBatches() {
      removePendingBatches(queueState);
    },
    uploadPendingBatches: function uploadPendingBatches(uploadOptions) {
      preparePendingForUpload(queueState, uploadOptions);
      processNext(queueState);
    }
  };
};
var XHR_SENDER_TYPE = "rpldy-sender";
function _typeof$1(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$1 = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$1 = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$1(obj);
}
function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _inherits$1(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  if (superClass)
    _setPrototypeOf$1(subClass, superClass);
}
function _createSuper$1(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
  return function() {
    var Super = _getPrototypeOf$1(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$1(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$1(this, result);
  };
}
function _possibleConstructorReturn$1(self2, call) {
  if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized$1(self2);
}
function _assertThisInitialized$1(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _wrapNativeSuper$1(Class) {
  var _cache = typeof Map === "function" ? new Map() : void 0;
  _wrapNativeSuper$1 = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction$1(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct$1(Class2, arguments, _getPrototypeOf$1(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, {constructor: {value: Wrapper, enumerable: false, writable: true, configurable: true}});
    return _setPrototypeOf$1(Wrapper, Class2);
  };
  return _wrapNativeSuper$1(Class);
}
function _construct$1() {
  if (_isNativeReflectConstruct$1()) {
    _construct$1 = Reflect.construct;
  } else {
    _construct$1 = function _construct2(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class)
        _setPrototypeOf$1(instance, Class.prototype);
      return instance;
    };
  }
  return _construct$1.apply(null, arguments);
}
function _isNativeReflectConstruct$1() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _isNativeFunction$1(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _setPrototypeOf$1(o, p) {
  _setPrototypeOf$1 = Object.setPrototypeOf || function(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf$1(o, p);
}
function _getPrototypeOf$1(o) {
  _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf$1(o);
}
var MissingUrlError = /* @__PURE__ */ function(_Error) {
  _inherits$1(MissingUrlError2, _Error);
  var _super = _createSuper$1(MissingUrlError2);
  function MissingUrlError2(senderType) {
    var _this;
    _classCallCheck$1(this, MissingUrlError2);
    _this = _super.call(this, "".concat(senderType, " didn't receive upload URL"));
    _this.name = "MissingUrlError";
    return _this;
  }
  return MissingUrlError2;
}(/* @__PURE__ */ _wrapNativeSuper$1(Error));
function _slicedToArray$2(arr, i2) {
  return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i2) || _unsupportedIterableToArray$2(arr, i2) || _nonIterableRest$2();
}
function _nonIterableRest$2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$2(o, minLen);
}
function _arrayLikeToArray$2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _iterableToArrayLimit$2(arr, i2) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$2(arr) {
  if (Array.isArray(arr))
    return arr;
}
var addToFormData = function(fd, name) {
  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    rest[_key - 2] = arguments[_key];
  }
  if (fd.set) {
    fd.set.apply(fd, [name].concat(rest));
  } else {
    if (fd["delete"]) {
      fd["delete"](name);
    }
    fd.append.apply(fd, [name].concat(rest));
  }
};
var getFormFileField = function(fd, items, options) {
  var single = items.length === 1;
  items.forEach(function(item, i2) {
    var name = single ? options.paramName : isFunction_1$1(options.formatGroupParamName) ? options.formatGroupParamName(i2, options.paramName) : "".concat(options.paramName, "[").concat(i2, "]");
    if (item.file) {
      addToFormData(fd, name, item.file, item.file.name);
    } else if (item.url) {
      addToFormData(fd, name, item.url);
    }
  });
};
var prepareFormData = function(items, options) {
  var fd = new FormData();
  if (options.params) {
    Object.entries(options.params).forEach(function(_ref) {
      var _ref2 = _slicedToArray$2(_ref, 2), key2 = _ref2[0], val = _ref2[1];
      return addToFormData(fd, key2, val);
    });
  }
  getFormFileField(fd, items, options);
  return fd;
};
function ownKeys$5(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$5(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys$5(Object(source2), true).forEach(function(key2) {
        _defineProperty$5(target, key2, source2[key2]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2));
    } else {
      ownKeys$5(Object(source2)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source2, key2));
      });
    }
  }
  return target;
}
function _defineProperty$5(obj, key2, value) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key2] = value;
  }
  return obj;
}
var SUCCESS_CODES = [200, 201, 202, 203, 204];
var getRequestData = function(items, options) {
  var data;
  if (options.sendWithFormData) {
    debugLog("uploady.sender: sending ".concat(items.length, " item(s) as form data"));
    data = prepareFormData(items, options);
  } else {
    if (items.length > 1) {
      throw new Error("XHR Sender - Request without form data can only contain 1 item. received ".concat(items.length));
    }
    var item = items[0];
    debugLog("uploady.sender: sending item ".concat(item.id, " as request body"));
    data = item.file || item.url;
  }
  return data;
};
var makeRequest = function(items, url, options, onProgress, config) {
  var xhr2;
  var data = (config === null || config === void 0 ? void 0 : config.getRequestData) ? config.getRequestData(items, options) : getRequestData(items, options);
  var issueRequest = function() {
    var requestUrl = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : url;
    var requestData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : data;
    var requestOptions = arguments.length > 2 ? arguments[2] : void 0;
    requestOptions = merge(_objectSpread$5(_objectSpread$5({}, pick(options, ["method", "headers", "withCredentials"])), {}, {
      preSend: function preSend(req) {
        req.upload.onprogress = function(e) {
          if (e.lengthComputable && onProgress) {
            onProgress(e, items.slice());
          }
        };
      }
    }), requestOptions);
    var realPXhr = request(requestUrl, requestData, requestOptions);
    xhr2 = realPXhr.xhr;
    return realPXhr;
  };
  var pXhr = (config === null || config === void 0 ? void 0 : config.preRequestHandler) ? config.preRequestHandler(issueRequest, items, url, options, onProgress, config) : issueRequest();
  return {
    url,
    count: items.length,
    pXhr,
    getXhr: function getXhr() {
      return xhr2;
    },
    aborted: false
  };
};
var parseResponseJson = function(response, headers, options) {
  var parsed = response;
  var ct = headers === null || headers === void 0 ? void 0 : headers["content-type"];
  if (options.forceJsonResponse || (ct === null || ct === void 0 ? void 0 : ct.includes("json"))) {
    try {
      parsed = JSON.parse(response);
    } catch (_unused) {
    }
  }
  return parsed;
};
var processResponse = function(sendRequest, options) {
  return sendRequest.pXhr.then(function(xhr2) {
    var _options$formatServer, _options$formatServer2;
    var state, response, status;
    debugLog("uploady.sender: received upload response ", xhr2);
    state = ~SUCCESS_CODES.indexOf(xhr2.status) ? FILE_STATES.FINISHED : FILE_STATES.ERROR;
    status = xhr2.status;
    var resHeaders = parseResponseHeaders(xhr2);
    response = {
      data: (_options$formatServer = (_options$formatServer2 = options.formatServerResponse) === null || _options$formatServer2 === void 0 ? void 0 : _options$formatServer2.call(options, xhr2.response, status, resHeaders)) !== null && _options$formatServer !== void 0 ? _options$formatServer : parseResponseJson(xhr2.response, resHeaders, options),
      headers: resHeaders
    };
    return {
      status,
      state,
      response
    };
  })["catch"](function(error) {
    var state, response;
    if (sendRequest.aborted) {
      state = FILE_STATES.ABORTED;
      response = "aborted";
    } else {
      debugLog("uploady.sender: upload failed: ", error);
      state = FILE_STATES.ERROR;
      response = error;
    }
    return {
      error: true,
      state,
      response,
      status: 0
    };
  });
};
var abortRequest = function(sendRequest) {
  var abortCalled = false;
  var aborted = sendRequest.aborted, getXhr = sendRequest.getXhr;
  var xhr2 = getXhr();
  if (!aborted && xhr2 && xhr2.readyState && xhr2.readyState !== 4) {
    debugLog("uploady.sender: cancelling request with ".concat(sendRequest.count, " items to: ").concat(sendRequest.url));
    xhr2.abort();
    sendRequest.aborted = true;
    abortCalled = true;
  }
  return abortCalled;
};
var getXhrSend = function(config) {
  return function(items, url, options, onProgress) {
    if (!url) {
      throw new MissingUrlError(XHR_SENDER_TYPE);
    }
    debugLog("uploady.sender: sending file: ", {
      items,
      url,
      options
    });
    var sendRequest = makeRequest(items, url, options, onProgress, config);
    return {
      request: processResponse(sendRequest, options),
      abort: function abort() {
        return abortRequest(sendRequest);
      },
      senderType: XHR_SENDER_TYPE
    };
  };
};
var send = getXhrSend();
var DEFAULT_PARAM_NAME = "file";
var DEFAULT_FILTER = function() {
  return true;
};
var DEFAULT_OPTIONS$1 = devFreeze({
  autoUpload: true,
  clearPendingOnAdd: false,
  inputFieldName: "file",
  concurrent: false,
  maxConcurrent: 2,
  grouped: false,
  maxGroupSize: 5,
  method: "POST",
  params: {},
  fileFilter: DEFAULT_FILTER,
  forceJsonResponse: false,
  withCredentials: false,
  destination: {},
  send: null,
  sendWithFormData: true
});
function ownKeys$4(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$4(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys$4(Object(source2), true).forEach(function(key2) {
        _defineProperty$4(target, key2, source2[key2]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2));
    } else {
      ownKeys$4(Object(source2)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source2, key2));
      });
    }
  }
  return target;
}
function _defineProperty$4(obj, key2, value) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key2] = value;
  }
  return obj;
}
var reportItemsProgress = function(items, completed, loaded, trigger2) {
  items.forEach(function(item) {
    debugLog("uploady.uploader.processor: file: ".concat(item.id, " progress event: loaded(").concat(loaded, ") - completed(").concat(completed, ")"));
    trigger2(SENDER_EVENTS.ITEM_PROGRESS, item, completed, loaded);
  });
};
var onItemUploadProgress = function(items, batch, e, trigger2) {
  var completed = Math.min(e.loaded / e.total * 100, 100), completedPerItem = completed / items.length, loadedAverage = e.loaded / items.length;
  reportItemsProgress(items, completedPerItem, loadedAverage, trigger2);
  trigger2(SENDER_EVENTS.BATCH_PROGRESS, batch);
};
var createBatchItemsSender = function() {
  var _addLife = addLife({
    send: function(items, batch, batchOptions) {
      var destination = batchOptions.destination, url = destination === null || destination === void 0 ? void 0 : destination.url;
      var throttledProgress = justThrottle(function(e) {
        return onItemUploadProgress(items, batch, e, trigger2);
      }, PROGRESS_DELAY, true);
      var send$1 = isFunction_1$1(batchOptions.send) ? batchOptions.send : send;
      return send$1(items, url, {
        method: (destination === null || destination === void 0 ? void 0 : destination.method) || batchOptions.method || DEFAULT_OPTIONS$1.method,
        paramName: (destination === null || destination === void 0 ? void 0 : destination.filesParamName) || batchOptions.inputFieldName || DEFAULT_PARAM_NAME,
        params: _objectSpread$4(_objectSpread$4({}, batchOptions.params), destination === null || destination === void 0 ? void 0 : destination.params),
        forceJsonResponse: batchOptions.forceJsonResponse,
        withCredentials: batchOptions.withCredentials,
        formatGroupParamName: batchOptions.formatGroupParamName,
        headers: destination === null || destination === void 0 ? void 0 : destination.headers,
        sendWithFormData: batchOptions.sendWithFormData,
        formatServerResponse: batchOptions.formatServerResponse
      }, throttledProgress);
    }
  }, Object.values(SENDER_EVENTS)), trigger2 = _addLife.trigger, sender = _addLife.target;
  return sender;
};
function ownKeys$3(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$3(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys$3(Object(source2), true).forEach(function(key2) {
        _defineProperty$3(target, key2, source2[key2]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2));
    } else {
      ownKeys$3(Object(source2)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source2, key2));
      });
    }
  }
  return target;
}
function _defineProperty$3(obj, key2, value) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key2] = value;
  }
  return obj;
}
var FILE_LIST_SUPPORT = hasWindow() && "FileList" in window;
var getMandatoryDestination = function(dest) {
  return _objectSpread$3({
    params: {}
  }, dest);
};
var getMandatoryOptions$1 = function(options) {
  return _objectSpread$3(_objectSpread$3(_objectSpread$3({}, DEFAULT_OPTIONS$1), options), {}, {
    destination: options && options.destination ? getMandatoryDestination(options.destination) : null
  });
};
var getIsFileList = function(files) {
  return FILE_LIST_SUPPORT && files instanceof FileList || files.toString() === "[object FileList]";
};
var deepProxyUnwrap = function(obj) {
  var level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var result = obj;
  if (!isProduction()) {
    if (level < 3 && isProxy(obj)) {
      result = unwrapProxy(obj);
    } else if (level < 3 && isProxiable(obj)) {
      result = Array.isArray(obj) ? Object.keys(obj).map(function(key2) {
        return deepProxyUnwrap(obj[key2]);
      }) : Object.keys(obj).reduce(function(res, key2) {
        res[key2] = deepProxyUnwrap(obj[key2], level + 1);
        return res;
      }, {});
    }
  }
  return result;
};
var bCounter = 0;
var processFiles = function(batchId, files, isPending, fileFilter) {
  return Array.prototype.filter.call(files, fileFilter || DEFAULT_FILTER).map(function(f) {
    return createBatchItem(f, batchId, isPending);
  });
};
var createBatch = function(files, uploaderId, options) {
  bCounter += 1;
  var id = "batch-".concat(bCounter);
  var isFileList = getIsFileList(files);
  files = Array.isArray(files) || isFileList ? files : [files];
  var isPending = !options.autoUpload;
  var items = processFiles(id, files, isPending, options.fileFilter);
  return {
    id,
    uploaderId,
    items,
    state: isPending ? BATCH_STATES.PENDING : BATCH_STATES.ADDED,
    completed: 0,
    loaded: 0,
    orgItemCount: items.length
  };
};
var getProcessor = function(trigger2, cancellable, options, uploaderId) {
  var sender = createBatchItemsSender(), queue = createUploaderQueue(options, trigger2, cancellable, sender, uploaderId);
  var runCancellable = queue.runCancellable;
  return {
    process: function process2(batch, batchOptions) {
      queue.uploadBatch(batch, batchOptions);
    },
    abortBatch: function abortBatch2(batchId) {
      queue.abortBatch(batchId);
    },
    abort: function abort(id) {
      if (id) {
        queue.abortItem(id);
      } else {
        queue.abortAll();
      }
    },
    addNewBatch: function addNewBatch(files, uploaderId2, processOptions) {
      var batch = createBatch(files, uploaderId2, processOptions);
      return queue.addBatch(batch, processOptions);
    },
    runCancellable,
    clearPendingBatches: function clearPendingBatches() {
      queue.clearPendingBatches();
    },
    processPendingBatches: function processPendingBatches(uploadOptions) {
      queue.uploadPendingBatches(uploadOptions);
    }
  };
};
var EVENT_NAMES = Object.values(UPLOADER_EVENTS);
var EXT_OUTSIDE_ENHANCER_TIME = "Uploady - uploader extensions can only be registered by enhancers", EXT_ALREADY_EXISTS = "Uploady - uploader extension by this name [%s] already exists";
var counter = 0;
var createUploader = function(options) {
  counter += 1;
  var uploaderId = "uploader-".concat(counter);
  var enhancerTime = false;
  var extensions = {};
  debugLog("uploady.uploader: creating new instance (".concat(uploaderId, ")"), {
    options,
    counter
  });
  var uploaderOptions = getMandatoryOptions$1(options);
  var update = function(updateOptions) {
    uploaderOptions = merge({}, uploaderOptions, updateOptions);
    return uploader;
  };
  var add = function(files, addOptions) {
    var processOptions = merge({}, uploaderOptions, addOptions);
    if (processOptions.clearPendingOnAdd) {
      clearPending();
    }
    var batch = processor.addNewBatch(files, uploader.id, processOptions);
    var resultP;
    if (batch.items.length) {
      resultP = processor.runCancellable(UPLOADER_EVENTS.BATCH_ADD, batch, processOptions).then(function(isCancelled) {
        if (!isCancelled) {
          debugLog("uploady.uploader [".concat(uploader.id, "]: new items added - auto upload =\n                        ").concat(String(processOptions.autoUpload)), batch.items);
          if (processOptions.autoUpload) {
            processor.process(batch);
          }
        } else {
          batch.state = BATCH_STATES.CANCELLED;
          triggerWithUnwrap(UPLOADER_EVENTS.BATCH_CANCEL, batch);
        }
      });
    } else {
      debugLog("uploady.uploader: no items to add. batch ".concat(batch.id, " is empty. check fileFilter if this isn't intended"));
    }
    return resultP || Promise.resolve();
  };
  var clearPending = function() {
    processor.clearPendingBatches();
  };
  var getOptions = function() {
    return clone(uploaderOptions);
  };
  var registerExtension = function(name, methods) {
    browser(enhancerTime, EXT_OUTSIDE_ENHANCER_TIME);
    browser(!extensions[name], EXT_ALREADY_EXISTS, name);
    debugLog("uploady.uploader: registering extension: ".concat(name.toString()), methods);
    extensions[name] = methods;
  };
  var _addLife = addLife({
    id: uploaderId,
    update,
    add,
    upload: function upload(uploadOptions) {
      processor.processPendingBatches(uploadOptions);
    },
    abort: function abort(id) {
      processor.abort(id);
    },
    abortBatch: function abortBatch2(id) {
      processor.abortBatch(id);
    },
    getOptions,
    clearPending,
    registerExtension,
    getExtension: function getExtension(name) {
      return extensions[name];
    }
  }, EVENT_NAMES, {
    canAddEvents: false,
    canRemoveEvents: false
  }), trigger2 = _addLife.trigger, uploader = _addLife.target;
  var triggerWithUnwrap = function(name) {
    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      data[_key - 1] = arguments[_key];
    }
    var lp = createLifePack(function() {
      return data.map(deepProxyUnwrap);
    });
    return trigger2(name, lp);
  };
  var cancellable = triggerCancellable(triggerWithUnwrap);
  if (uploaderOptions.enhancer) {
    enhancerTime = true;
    var enhanced = uploaderOptions.enhancer(uploader, triggerWithUnwrap);
    enhancerTime = false;
    uploader = enhanced || uploader;
  }
  var processor = getProcessor(triggerWithUnwrap, cancellable, uploaderOptions, uploader.id);
  return devFreeze(uploader);
};
var composeEnhancers = function() {
  for (var _len = arguments.length, enhancers = new Array(_len), _key = 0; _key < _len; _key++) {
    enhancers[_key] = arguments[_key];
  }
  return function(uploader) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    return enhancers.reduce(function(enhanced, e) {
      return e.apply(void 0, [enhanced].concat(args)) || enhanced;
    }, uploader);
  };
};
var GLOBAL_VERSION_SYM = Symbol["for"]("_rpldy-version_");
var getVersion = function() {
  return "0.11.4";
};
var getRegisteredVersion = function() {
  var global2 = hasWindow() ? window : process;
  return global2[GLOBAL_VERSION_SYM];
};
var registerUploadyContextVersion = function() {
  var global2 = hasWindow() ? window : process;
  global2[GLOBAL_VERSION_SYM] = getVersion();
};
var getIsVersionRegisteredAndDifferent = function() {
  var registeredVersion = getRegisteredVersion();
  return !!registeredVersion && registeredVersion !== getVersion();
};
var UploadyContext = /* @__PURE__ */ react.createContext(null);
var NO_INPUT_ERROR_MSG = "Uploady - Context. File input isn't available";
var createContextApi = function(uploader, internalInputRef) {
  var fileInputRef, showFileUploadOptions;
  if (internalInputRef) {
    fileInputRef = internalInputRef;
  } else {
    debugLog("Uploady context - didn't receive input field ref - waiting for external ref");
  }
  var getInputField = function() {
    var _fileInputRef;
    return (_fileInputRef = fileInputRef) === null || _fileInputRef === void 0 ? void 0 : _fileInputRef.current;
  };
  var onFileInputChange = function() {
    var input = getInputField();
    browser(input, NO_INPUT_ERROR_MSG);
    input.removeEventListener("change", onFileInputChange);
    var addOptions = showFileUploadOptions;
    showFileUploadOptions = null;
    upload(input.files, addOptions);
  };
  var upload = function(files, addOptions) {
    uploader.add(files, addOptions);
  };
  registerUploadyContextVersion();
  return {
    hasUploader: function hasUploader() {
      return !!uploader;
    },
    setExternalFileInput: function setExternalFileInput(extRef) {
      fileInputRef = extRef;
    },
    showFileUpload: function showFileUpload(addOptions) {
      var input = getInputField();
      browser(input, NO_INPUT_ERROR_MSG);
      showFileUploadOptions = addOptions;
      input.removeEventListener("change", onFileInputChange);
      input.addEventListener("change", onFileInputChange);
      input.value = "";
      input.click();
    },
    upload,
    processPending: function processPending(uploadOptions) {
      uploader.upload(uploadOptions);
    },
    clearPending: function clearPending() {
      uploader.clearPending();
    },
    setOptions: function setOptions(options) {
      uploader.update(options);
    },
    getOptions: function getOptions() {
      return uploader.getOptions();
    },
    getExtension: function getExtension(name) {
      return uploader.getExtension(name);
    },
    abort: function abort(itemId) {
      uploader.abort(itemId);
    },
    abortBatch: function abortBatch2(batchId) {
      uploader.abortBatch(batchId);
    },
    on: function on(name, cb) {
      return uploader.on(name, cb);
    },
    once: function once(name, cb) {
      return uploader.once(name, cb);
    },
    off: function off(name, cb) {
      return uploader.off(name, cb);
    }
  };
};
var ERROR_MSG = "Uploady - Valid UploadyContext not found. Make sure you render inside <Uploady>";
var DIFFERENT_VERSION_ERROR_MSG = "Uploady - Valid UploadyContext not found.\nYou may be using packages of different Uploady versions. <Uploady> and all other packages using the context provider must be of the same version: %s";
var assertContext = function(context2) {
  browser(!getIsVersionRegisteredAndDifferent(), DIFFERENT_VERSION_ERROR_MSG, getRegisteredVersion());
  browser(context2 && context2.hasUploader(), ERROR_MSG);
  return context2;
};
var useUploadyContext = function() {
  return assertContext(react.useContext(UploadyContext));
};
function _slicedToArray$1(arr, i2) {
  return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i2) || _unsupportedIterableToArray$1(arr, i2) || _nonIterableRest$1();
}
function _nonIterableRest$1() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$1(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$1(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$1(o, minLen);
}
function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _iterableToArrayLimit$1(arr, i2) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$1(arr) {
  if (Array.isArray(arr))
    return arr;
}
var useEventEffect = function(event, fn) {
  var context2 = useUploadyContext();
  var on = context2.on, off = context2.off;
  react.useEffect(function() {
    on(event, fn);
    return function() {
      off(event, fn);
    };
  }, [event, fn, on, off]);
};
var generateUploaderEventHookWithState = function(event, stateCalculator) {
  return function(fn, id) {
    var _useState = react.useState(null), _useState2 = _slicedToArray$1(_useState, 2), eventState = _useState2[0], setEventState = _useState2[1];
    var eventCallback = react.useCallback(function(eventObj) {
      if (!id || eventObj.id === id) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        setEventState(stateCalculator.apply(void 0, [eventObj].concat(args)));
        if (fn) {
          fn.apply(void 0, [eventObj].concat(args));
        }
      }
    }, [fn, id]);
    useEventEffect(event, eventCallback);
    return eventState;
  };
};
var generateUploaderEventHook = function(event) {
  var canScope = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  return function(fn, id) {
    var eventCallback = react.useCallback(function(eventObj) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      return fn && (!canScope || !id || eventObj.id === id) ? fn.apply(void 0, [eventObj].concat(args)) : void 0;
    }, [fn, id]);
    useEventEffect(event, eventCallback);
  };
};
var logWarning = function(condition, msg) {
  if (!isProduction() && !condition) {
    console.warn(msg);
  }
};
function ownKeys$2(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys$2(Object(source2), true).forEach(function(key2) {
        _defineProperty$2(target, key2, source2[key2]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2));
    } else {
      ownKeys$2(Object(source2)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source2, key2));
      });
    }
  }
  return target;
}
function _defineProperty$2(obj, key2, value) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key2] = value;
  }
  return obj;
}
generateUploaderEventHook(UPLOADER_EVENTS.BATCH_ADD, false);
generateUploaderEventHook(UPLOADER_EVENTS.BATCH_START);
var useBatchFinishListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_FINISH);
generateUploaderEventHook(UPLOADER_EVENTS.BATCH_CANCEL);
generateUploaderEventHook(UPLOADER_EVENTS.BATCH_ABORT);
generateUploaderEventHookWithState(UPLOADER_EVENTS.BATCH_PROGRESS, function(batch) {
  return _objectSpread$2({}, batch);
});
generateUploaderEventHook(UPLOADER_EVENTS.ITEM_START);
generateUploaderEventHook(UPLOADER_EVENTS.ITEM_FINISH);
generateUploaderEventHook(UPLOADER_EVENTS.ITEM_CANCEL);
generateUploaderEventHook(UPLOADER_EVENTS.ITEM_ERROR);
generateUploaderEventHook(UPLOADER_EVENTS.ITEM_ABORT);
generateUploaderEventHook(UPLOADER_EVENTS.ITEM_FINALIZE);
var useItemProgressListener = generateUploaderEventHookWithState(UPLOADER_EVENTS.ITEM_PROGRESS, function(item) {
  return _objectSpread$2({}, item);
});
generateUploaderEventHook(UPLOADER_EVENTS.REQUEST_PRE_SEND, false);
generateUploaderEventHook(UPLOADER_EVENTS.ALL_ABORT, false);
var useUploadOptions = function(options) {
  var context2 = useUploadyContext();
  if (options) {
    context2.setOptions(options);
  }
  return context2.getOptions();
};
function _slicedToArray(arr, i2) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i2) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
var useUploader = function(options, listeners) {
  var uploader = react.useMemo(function() {
    debugLog("Uploady creating a new uploader instance", options);
    return createUploader(options);
  }, [options.enhancer]);
  uploader.update(options);
  react.useEffect(function() {
    if (listeners) {
      debugLog("Uploady setting event listeners", listeners);
      Object.entries(listeners).forEach(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 2), name = _ref2[0], m = _ref2[1];
        uploader.on(name, m);
      });
    }
    return function() {
      if (listeners) {
        debugLog("Uploady removing event listeners", listeners);
        Object.entries(listeners).forEach(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), name = _ref4[0], m = _ref4[1];
          return uploader.off(name, m);
        });
      }
    };
  }, [listeners, uploader]);
  return uploader;
};
function _objectWithoutProperties$2(source2, excluded) {
  if (source2 == null)
    return {};
  var target = _objectWithoutPropertiesLoose$2(source2, excluded);
  var key2, i2;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
    for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
      key2 = sourceSymbolKeys[i2];
      if (excluded.indexOf(key2) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source2, key2))
        continue;
      target[key2] = source2[key2];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose$2(source2, excluded) {
  if (source2 == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source2);
  var key2, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key2 = sourceKeys[i2];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source2[key2];
  }
  return target;
}
var NoDomUploady = function(props) {
  var listeners = props.listeners, debug = props.debug, children = props.children, inputRef = props.inputRef, uploadOptions = _objectWithoutProperties$2(props, ["listeners", "debug", "children", "inputRef"]);
  setDebug(!!debug);
  debugLog("@@@@@@ Uploady Rendering @@@@@@", props);
  var uploader = useUploader(uploadOptions, listeners);
  var api = react.useMemo(function() {
    return createContextApi(uploader, inputRef);
  }, [uploader, inputRef]);
  return /* @__PURE__ */ react.createElement(UploadyContext.Provider, {
    value: api
  }, children);
};
function _objectWithoutProperties$1(source2, excluded) {
  if (source2 == null)
    return {};
  var target = _objectWithoutPropertiesLoose$1(source2, excluded);
  var key2, i2;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
    for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
      key2 = sourceSymbolKeys[i2];
      if (excluded.indexOf(key2) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source2, key2))
        continue;
      target[key2] = source2[key2];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose$1(source2, excluded) {
  if (source2 == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source2);
  var key2, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key2 = sourceKeys[i2];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source2[key2];
  }
  return target;
}
function _extends$1() {
  _extends$1 = Object.assign || function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source2 = arguments[i2];
      for (var key2 in source2) {
        if (Object.prototype.hasOwnProperty.call(source2, key2)) {
          target[key2] = source2[key2];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
var NO_CONTAINER_ERROR_MSG = "Uploady - Container for file input must be a valid dom element";
var renderInput = function(inputProps, instanceOptions, ref) {
  return /* @__PURE__ */ react.createElement("input", _extends$1({}, inputProps, {
    name: instanceOptions.inputFieldName,
    type: "file",
    ref
  }));
};
var renderInPortal = function(container, isValidContainer, inputProps, instanceOptions, ref) {
  return container && isValidContainer ? /* @__PURE__ */ reactDom.createPortal(renderInput(inputProps, instanceOptions, ref), container) : null;
};
var FileInputField = /* @__PURE__ */ react.memo(/* @__PURE__ */ react.forwardRef(function(_ref, ref) {
  var container = _ref.container, noPortal = _ref.noPortal, inputProps = _objectWithoutProperties$1(_ref, ["container", "noPortal"]);
  var instanceOptions = useUploadOptions();
  var isValidContainer = container && container.nodeType === 1;
  browser(isValidContainer || !hasWindow(), NO_CONTAINER_ERROR_MSG);
  return noPortal ? renderInput(inputProps, instanceOptions, ref) : renderInPortal(container, isValidContainer, inputProps, instanceOptions, ref);
}));
var Uploady = function(props) {
  var _props$multiple = props.multiple, multiple = _props$multiple === void 0 ? true : _props$multiple, capture = props.capture, accept = props.accept, webkitdirectory = props.webkitdirectory, children = props.children, inputFieldContainer = props.inputFieldContainer, customInput = props.customInput, fileInputId = props.fileInputId, _props$noPortal = props.noPortal, noPortal = _props$noPortal === void 0 ? false : _props$noPortal, noDomProps = _objectWithoutProperties$1(props, ["multiple", "capture", "accept", "webkitdirectory", "children", "inputFieldContainer", "customInput", "fileInputId", "noPortal"]);
  var container = !customInput ? inputFieldContainer || (hasWindow() ? document.body : null) : null;
  var internalInputFieldRef = react.useRef();
  return /* @__PURE__ */ react.createElement(NoDomUploady, _extends$1({}, noDomProps, {
    inputRef: internalInputFieldRef
  }), !customInput ? /* @__PURE__ */ react.createElement(FileInputField, {
    container,
    multiple,
    capture,
    accept,
    webkitdirectory,
    style: {
      display: "none"
    },
    ref: internalInputFieldRef,
    id: fileInputId,
    noPortal
  }) : null, children);
};
var getUrl = function(form) {
  var loc = window.location;
  var url = form.getAttribute("action") || "";
  url = url.replace(/\s/g, "");
  var path;
  switch (true) {
    case url === "":
      url = loc.href;
      break;
    case url.startsWith("/"):
      url = "".concat(loc.protocol, "//").concat(loc.host).concat(url);
      break;
    case !/:\/\//.test(url):
      path = loc.pathname.split("/").slice(0, -1).concat("").join("/");
      url = "".concat(loc.protocol, "//").concat(loc.host).concat(path).concat(url);
      break;
  }
  return url;
};
var getDestinationFromInput = function(input) {
  var form = input.closest("form");
  var destination = {
    filesParamName: input.getAttribute("name"),
    method: void 0,
    url: void 0
  };
  if (form) {
    var method = form.getAttribute("method"), url = getUrl(form);
    destination.method = method ? method.toUpperCase() : void 0;
    destination.url = url;
    debugLog("Uploady.useFileInput: using custom input's parent form url ".concat(destination.url, " and method ").concat(destination.method || ""));
  }
  return destination;
};
var useFileInput = function(fileInputRef) {
  var context2 = useUploadyContext();
  context2.setExternalFileInput(fileInputRef);
  react.useEffect(function() {
    if (fileInputRef.current && fileInputRef.current.closest) {
      var input = fileInputRef.current;
      var uploaderOptions = context2.getOptions();
      if (!uploaderOptions.destination || !uploaderOptions.destination.url) {
        var domDestination = getDestinationFromInput(input);
        context2.setOptions({
          destination: domDestination
        });
      }
    }
  }, [fileInputRef, context2]);
};
var DEFAULT_OPTIONS = devFreeze({
  chunked: true,
  chunkSize: 5242880,
  retries: 0,
  parallel: 1
});
var getMandatoryOptions = function(options) {
  return merge({}, DEFAULT_OPTIONS, options);
};
var sliceMethod = null;
var isChunkingSupported = function() {
  sliceMethod = null;
  if (hasWindow() && "Blob" in window) {
    sliceMethod = Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice;
  }
  return !!sliceMethod;
};
var CHUNKING_SUPPORT = isChunkingSupported();
var getChunkDataFromFile = function(file, start, end) {
  var _sliceMethod;
  var blob = (_sliceMethod = sliceMethod) === null || _sliceMethod === void 0 ? void 0 : _sliceMethod.call(file, start, end, file.type);
  if (blob) {
    blob.name = file.name;
    blob.lastModified = file.lastModified;
  }
  return blob;
};
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self2);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, {constructor: {value: Wrapper, enumerable: false, writable: true, configurable: true}});
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
function _construct() {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct2(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class)
        _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
var ChunkedSendError = /* @__PURE__ */ function(_Error) {
  _inherits(ChunkedSendError2, _Error);
  var _super = _createSuper(ChunkedSendError2);
  function ChunkedSendError2(message) {
    var _this;
    _classCallCheck(this, ChunkedSendError2);
    _this = _super.call(this, message);
    _this.name = "ChunkedSendError";
    return _this;
  }
  return ChunkedSendError2;
}(/* @__PURE__ */ _wrapNativeSuper(Error));
var getChunks = function(item, options) {
  var startByte = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  var chunkSize = options.chunkSize;
  var size = startByte ? item.file.size - startByte : item.file.size;
  if (size <= 0) {
    throw new ChunkedSendError("start byte ".concat(startByte, " is invalid. File size: ").concat(item.file.size));
  }
  var count = size <= chunkSize ? 1 : Math.ceil(size / chunkSize);
  return new Array(count).fill(null).map(function(n, index2) {
    var start = chunkSize * index2 + (startByte || 0);
    return {
      id: "".concat(item.id, "_chunk-").concat(index2),
      start,
      end: Math.min(start + chunkSize, item.file.size),
      data: null,
      attempt: 0,
      uploaded: 0,
      index: index2
    };
  });
};
var CHUNK_EVENTS = devFreeze({
  CHUNK_START: "CHUNK_START",
  CHUNK_FINISH: "CHUNK_FINISH"
});
var CHUNKED_SENDER_TYPE = "rpldy-chunked-sender";
var handleChunkRequest = function(state, item, chunkId, chunkSendResult, trigger2) {
  state.requests[chunkId] = {
    id: chunkId,
    abort: chunkSendResult.abort
  };
  return chunkSendResult.request.then(function(result) {
    debugLog("chunkedSender: request finished for chunk: ".concat(chunkId, " - "), result);
    delete state.requests[chunkId];
    var index2 = state.chunks.findIndex(function(c) {
      return c.id === chunkId;
    });
    if (~index2) {
      if (result.state === FILE_STATES.FINISHED) {
        var spliced = state.chunks.splice(index2, 1);
        trigger2(CHUNK_EVENTS.CHUNK_FINISH, {
          chunk: pick(spliced[0], ["id", "start", "end", "index", "attempt"]),
          item: unwrapProxy(item),
          uploadData: result
        });
      } else if (result.state !== FILE_STATES.ABORTED) {
        state.chunks[index2].attempt += 1;
      }
      state.responses.push(result.response);
    }
  });
};
var getChunksToSend = function(state) {
  var chunks = [], inProgressIds = Object.keys(state.requests), parallel = state.parallel || 1;
  for (var i2 = 0; i2 < state.chunks.length && inProgressIds.length < parallel && chunks.length < parallel; i2++) {
    var chunk = state.chunks[i2];
    if (!inProgressIds.includes(chunk.id)) {
      if (!chunk.attempt || chunk.attempt < state.retries) {
        chunks.push(chunk);
      } else {
        throw new ChunkedSendError("chunk failure");
      }
    }
  }
  return chunks;
};
function ownKeys$1(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys$1(Object(source2), true).forEach(function(key2) {
        _defineProperty$1(target, key2, source2[key2]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2));
    } else {
      ownKeys$1(Object(source2)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source2, key2));
      });
    }
  }
  return target;
}
function _defineProperty$1(obj, key2, value) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key2] = value;
  }
  return obj;
}
var getContentRangeValue = function(chunk, data, item) {
  return data && "bytes ".concat(chunk.start, "-").concat(chunk.start + data.size - 1, "/").concat(item.file.size);
};
var mergeWithUndefined = getMerge({
  undefinedOverwrites: true
});
var getSkippedResult = function() {
  return {
    request: Promise.resolve({
      state: FILE_STATES.FINISHED,
      response: "skipping chunk as instructed by CHUNK_START handler",
      status: 200
    }),
    abort: function abort() {
      return true;
    },
    senderType: "chunk-skipped-sender"
  };
};
var uploadChunkWithUpdatedData = function(chunk, state, item, onProgress, trigger2) {
  var sendOptions = _objectSpread$1(_objectSpread$1({}, unwrapProxy(state.sendOptions)), {}, {
    headers: _objectSpread$1(_objectSpread$1({}, state.sendOptions.headers), {}, {
      "Content-Range": getContentRangeValue(chunk, chunk.data, item)
    })
  });
  var chunkItem = createBatchItem(chunk.data, chunk.id);
  var onChunkProgress = function(e) {
    onProgress(e, [chunk]);
  };
  var chunkIndex = state.chunks.indexOf(chunk);
  return triggerUpdater(trigger2, CHUNK_EVENTS.CHUNK_START, {
    item: unwrapProxy(item),
    chunk: pick(chunk, ["id", "start", "end", "index", "attempt"]),
    chunkItem,
    sendOptions,
    url: state.url,
    chunkIndex,
    chunkCount: state.chunks.length,
    onProgress
  }).then(function(updatedData) {
    var skipChunk = updatedData === false;
    if (skipChunk) {
      debugLog("chunkedSender.sendChunk: received false from CHUNK_START handler - skipping chunk ".concat(chunkIndex, ", item ").concat(item.id));
    }
    return skipChunk ? getSkippedResult() : send([chunkItem], (updatedData === null || updatedData === void 0 ? void 0 : updatedData.url) || state.url, mergeWithUndefined({}, sendOptions, updatedData && updatedData.sendOptions), onChunkProgress);
  });
};
var sendChunk = function(chunk, state, item, onProgress, trigger2) {
  if (!chunk.data) {
    chunk.data = getChunkDataFromFile(item.file, chunk.start, chunk.end);
  }
  if (!chunk.data) {
    throw new ChunkedSendError("chunk failure - failed to slice");
  }
  debugLog("chunkedSender.sendChunk: about to send chunk ".concat(chunk.id, " [").concat(chunk.start, "-").concat(chunk.end, "] to: ").concat(state.url || ""));
  var chunkXhrRequest = uploadChunkWithUpdatedData(chunk, state, item, onProgress, trigger2);
  return {
    request: chunkXhrRequest.then(function(_ref2) {
      var request3 = _ref2.request;
      return request3;
    }),
    abort: function abort() {
      chunkXhrRequest.then(function(_ref) {
        var abort2 = _ref.abort;
        return abort2();
      });
      return true;
    },
    senderType: "chunk-passthrough-sender"
  };
};
var resolveOnError = function(resolve, ex) {
  if (ex instanceof ChunkedSendError) {
    resolve({
      state: FILE_STATES.ERROR,
      response: "At least one chunk failed"
    });
  } else {
    resolve({
      state: FILE_STATES.ERROR,
      response: ex.message
    });
  }
};
var finalizeOnFinish = function(state, item, resolve, status) {
  state.finished = true;
  resolve({
    state: status,
    response: {
      results: state.responses
    }
  });
};
var resolveOnAllChunksFinished = function(state, item, resolve) {
  var finished = !state.chunks.length;
  if (state.aborted) {
    debugLog("chunkedSender: chunked upload aborted for item: ".concat(item.id));
    finalizeOnFinish(state, item, resolve, FILE_STATES.ABORTED);
  } else if (finished && !state.error) {
    debugLog("chunkedSender: chunked upload finished for item: ".concat(item.id), state.responses);
    finalizeOnFinish(state, item, resolve, FILE_STATES.FINISHED);
  }
  return finished || state.error;
};
var handleChunk = function(state, item, onProgress, chunkResolve, chunk, trigger2) {
  return new Promise(function(resolve, reject) {
    try {
      var chunkSendResult = sendChunk(chunk, state, item, onProgress, trigger2);
      handleChunkRequest(state, item, chunk.id, chunkSendResult, trigger2).then(function() {
        resolve();
        if (!resolveOnAllChunksFinished(state, item, chunkResolve)) {
          sendChunks(state, item, onProgress, chunkResolve, trigger2);
        }
      });
    } catch (ex) {
      reject(ex);
    }
  });
};
var sendChunks = function(state, item, onProgress, resolve, trigger2) {
  if (!state.finished && !state.aborted) {
    var inProgress = Object.keys(state.requests).length;
    if (!inProgress || state.parallel && state.parallel > inProgress) {
      var chunks;
      try {
        chunks = getChunksToSend(state);
      } catch (ex) {
        resolveOnError(resolve, ex);
      }
      if (chunks) {
        chunks.forEach(function(chunk) {
          handleChunk(state, item, onProgress, resolve, chunk, trigger2)["catch"](function(ex) {
            state.error = true;
            resolveOnError(resolve, ex);
          });
        });
      }
    }
  }
};
function ownKeys(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys(Object(source2), true).forEach(function(key2) {
        _defineProperty(target, key2, source2[key2]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2));
    } else {
      ownKeys(Object(source2)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source2, key2));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key2, value) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key2] = value;
  }
  return obj;
}
var abortChunkedRequest = function(state, item) {
  debugLog("chunkedSender: aborting chunked upload for item: ".concat(item.id));
  if (!state.finished && !state.aborted) {
    Object.keys(state.requests).forEach(function(chunkId) {
      debugLog("chunkedSender: aborting chunk: ".concat(chunkId));
      state.requests[chunkId].abort();
    });
    state.aborted = true;
  }
  return state.aborted;
};
var process$1 = function(state, item, onProgress, trigger2) {
  var onChunkProgress = justThrottle(function(e, chunks) {
    var id = chunks[0].id;
    state.uploaded[id] = e.loaded;
    var loaded = Object.keys(state.uploaded).reduce(function(res, id2) {
      return res + state.uploaded[id2];
    }, state.chunks[0].start);
    onProgress({
      loaded,
      total: item.file.size
    }, [item]);
  }, 100, true);
  var sendPromise = new Promise(function(resolve) {
    sendChunks(state, item, onChunkProgress, resolve, trigger2);
  });
  return {
    sendPromise,
    abort: function abort() {
      return abortChunkedRequest(state, item);
    }
  };
};
var processChunks = function(item, chunkedOptions, url, sendOptions, onProgress, trigger2) {
  var chunks = getChunks(item, chunkedOptions, sendOptions.startByte);
  debugLog("chunkedSender: created ".concat(chunks.length, " chunks for: ").concat(item.file.name));
  var state = _objectSpread({
    finished: false,
    aborted: false,
    error: false,
    uploaded: {},
    requests: {},
    responses: [],
    chunks,
    url,
    sendOptions
  }, chunkedOptions);
  var _process = process$1(state, item, onProgress, trigger2), sendPromise = _process.sendPromise, abort = _process.abort;
  return {
    request: sendPromise,
    abort,
    senderType: CHUNKED_SENDER_TYPE
  };
};
var createChunkedSender = function(chunkedOptions, trigger2) {
  var options = getMandatoryOptions(chunkedOptions);
  return {
    send: function send$1(items, url, sendOptions, onProgress) {
      var result;
      if (!options.chunked || items.length > 1 || items[0].url || !items[0].file.size) {
        result = send(items, url, sendOptions, onProgress);
        debugLog("chunkedSender: sending items as normal, un-chunked requests");
      } else {
        debugLog("chunkedSender: sending file as a chunked request");
        result = processChunks(items[0], options, url, sendOptions, onProgress, trigger2);
      }
      return result;
    }
  };
};
var getChunkedEnhancer = function(options) {
  return function(uploader, trigger2) {
    var sender = createChunkedSender(options, trigger2);
    uploader.update({
      send: sender.send
    });
    return uploader;
  };
};
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source2 = arguments[i2];
      for (var key2 in source2) {
        if (Object.prototype.hasOwnProperty.call(source2, key2)) {
          target[key2] = source2[key2];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source2, excluded) {
  if (source2 == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source2, excluded);
  var key2, i2;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
    for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
      key2 = sourceSymbolKeys[i2];
      if (excluded.indexOf(key2) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source2, key2))
        continue;
      target[key2] = source2[key2];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source2, excluded) {
  if (source2 == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source2);
  var key2, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key2 = sourceKeys[i2];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source2[key2];
  }
  return target;
}
var getEnhancer = function(options, enhancer) {
  var chunkedEnhancer = getChunkedEnhancer(options);
  return enhancer ? composeEnhancers(chunkedEnhancer, enhancer) : chunkedEnhancer;
};
var ChunkedUploady = function(props) {
  var chunked = props.chunked, chunkSize = props.chunkSize, retries = props.retries, parallel = props.parallel, uploadyProps = _objectWithoutProperties(props, ["chunked", "chunkSize", "retries", "parallel"]);
  var enhancer = react.useMemo(function() {
    return CHUNKING_SUPPORT ? getEnhancer({
      chunked,
      chunkSize,
      retries,
      parallel
    }, props.enhancer) : void 0;
  }, [props.enhancer, chunked, chunkSize, retries, parallel]);
  return /* @__PURE__ */ react.createElement(Uploady, _extends({}, uploadyProps, {
    enhancer
  }));
};
logWarning(CHUNKING_SUPPORT || !hasWindow(), "This browser doesn't support chunking. Consider using @rpldy/uploady instead");
var useChunkStartListener = generateUploaderEventHook(CHUNK_EVENTS.CHUNK_START, false);
generateUploaderEventHook(CHUNK_EVENTS.CHUNK_FINISH, false);
const CustomButton = (props) => {
  const uploady = react.useContext(UploadyContext);
  const hanldeUpload = react.useCallback(() => {
    uploady.showFileUpload();
  }, [uploady]);
  return /* @__PURE__ */ react.createElement("button", {
    onClick: hanldeUpload,
    type: "button",
    className: "upload-btn " + (props.hasFile === true ? "hasFile" : ""),
    disabled: props.disabled
  }, "Ajouter une image");
};
function Uploader(props) {
  const [file, setFile] = react.useState(false);
  const [FileId, setFileId] = react.useState(v4());
  const [disabled, setDisabled] = react.useState(false);
  const [imgUrl, setImgUrl] = react.useState(null);
  const UploadFinished = async (type, id) => {
    await axios({
      method: "PUT",
      url: "/data/finish/tempupload/" + id,
      data: {
        type
      }
    }).then((response) => {
      if (response.status === 200) {
        setImgUrl(response.data.image);
        if (props && props.images) {
          props.images(response.data.image);
        }
        setDisabled(false);
      }
    }).catch((error) => {
      setDisabled(false);
    });
  };
  const FileAdded = (e) => {
    setFile(true);
    setDisabled(true);
    setFileId(v4);
  };
  const deleteFile = async () => {
    if (props && props.image) {
      props.images(null);
    }
    setFile(false);
    setDisabled(false);
    setImgUrl(null);
    setFileId(v4);
    await axios({
      url: "/data/delete/tempupload",
      method: "DELETE",
      data: {
        image: imgUrl
      }
    });
  };
  return /* @__PURE__ */ react.createElement("div", {
    className: "uploader--container"
  }, /* @__PURE__ */ react.createElement(ChunkedUploady, {
    showFileUpload: true,
    chunkSize: 1e5,
    sendWithFormData: true,
    retries: 2,
    debug: false,
    chunked: true,
    params: {id: FileId},
    customInput: true,
    inputFieldName: "file",
    destination: {url: "/data/tempupload", headers: {"X-CSRF-TOKEN": csrf}}
  }, /* @__PURE__ */ react.createElement("div", {
    className: "Uploader"
  }, imgUrl === null && /* @__PURE__ */ react.createElement("img", {
    className: "img",
    src: props.default,
    alt: ""
  }), imgUrl !== null && /* @__PURE__ */ react.createElement("img", {
    className: "img",
    src: "/storage/temp_upload/" + imgUrl,
    alt: ""
  }), /* @__PURE__ */ react.createElement("label", {
    className: file === true ? "hasFile" : ""
  }, props.text ? props.text : "1920*1080 2MO"), /* @__PURE__ */ react.createElement("button", {
    disabled,
    className: "delete " + (file === true ? "" : "anyFile"),
    onClick: deleteFile
  }, /* @__PURE__ */ react.createElement("img", {
    src: "/assets/images/cancel.png",
    alt: ""
  })), /* @__PURE__ */ react.createElement(CustomButton, {
    disabled,
    hasFile: file
  }), /* @__PURE__ */ react.createElement(CustomFrom, {
    disabled,
    fileadded: FileAdded
  }), /* @__PURE__ */ react.createElement(UploadProgress, {
    uploadfinished: UploadFinished
  }))));
}
const UploadProgress = (props) => {
  const [progress, setProgess] = react.useState(0);
  const [first, setFirst] = react.useState(0);
  const [inRun, setRun] = react.useState(false);
  const [imgId, setimgId] = react.useState(null);
  const progressData = useItemProgressListener();
  useChunkStartListener((data) => {
    if (data.chunkCount) {
      if (!inRun) {
        setFirst(data.chunkCount);
        setRun(true);
      } else {
        setProgess(Math.abs(data.chunkCount / first * 100 - 100));
        if (!imgId) {
          setimgId(data.sendOptions.params.id);
        }
      }
    }
  });
  useBatchFinishListener((batch) => {
    setRun(false);
    setProgess(100);
    console.log(imgId);
    props.uploadfinished(batch.items[0].file.type, imgId);
    setimgId(null);
  });
  return progressData && /* @__PURE__ */ react.createElement("div", {
    className: "bar"
  }, /* @__PURE__ */ react.createElement("div", {
    style: {width: progress + "%"},
    className: "bar--filler"
  }));
};
const CustomFrom = (props) => {
  const inputRef = react.useRef();
  useFileInput(inputRef);
  return /* @__PURE__ */ react.createElement("input", {
    type: "file",
    name: "testFile",
    style: {display: "none"},
    ref: inputRef,
    disabled: props.disabled,
    onChange: props.fileadded
  });
};
class FormaUserList extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: false,
      formations: [],
      certifs: [],
      nbrForma: 0,
      arraybis: []
    };
    this.updateCertif = this.updateCertif.bind(this);
  }
  async componentDidMount() {
    let req = await axios({
      url: "/data/certifications/admin/get",
      method: "GET"
    });
    if (req.status === 200) {
      this.setState({
        data: true,
        formations: req.data.certifs
      });
    }
    let array = this.state.arraybis;
    let usernbr = 0;
    while (usernbr < req.data.users.length) {
      const user = req.data.users[usernbr];
      const certifs = user.get_certifications;
      let formations = req.data.certifs;
      let validatedid = [];
      certifs.map((certif) => {
        validatedid.push(certif.formation_id);
      });
      let allfomartions = [];
      formations.map((formation) => {
        allfomartions.push({
          id: formation.id,
          validate: validatedid.includes(formation.id)
        });
      });
      var obj = {
        name: user.name,
        id: user.id,
        formations: allfomartions
      };
      array.push(obj);
      usernbr++;
    }
    this.setState({arraybis: array});
  }
  async updateCertif(userid, formaid) {
    let array = this.state.arraybis;
    array.map((user) => {
      if (user.id === userid) {
        let formations = user.formations;
        formations.map((forma) => {
          if (forma.id === formaid) {
            forma.validate = !forma.validate;
          }
        });
      }
    });
    this.setState({arraybis: array});
    await axios({
      url: "/data/certifications/admin/" + formaid + "/change/" + userid,
      method: "PUT"
    });
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "f-userlist"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "header"
    }, /* @__PURE__ */ react.createElement(PagesTitle, {
      title: "Certifications des utilisateurs"
    }), /* @__PURE__ */ react.createElement("button", {
      onClick: () => this.props.change(1),
      className: "btn"
    }, "Liste des formations")), /* @__PURE__ */ react.createElement("section", {
      className: "user-list"
    }, /* @__PURE__ */ react.createElement("table", null, /* @__PURE__ */ react.createElement("thead", null, /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("th", {
      className: "name"
    }, "nom"), this.state.data && this.state.formations.map((formation) => /* @__PURE__ */ react.createElement("th", {
      key: formation.id,
      className: "forma clicable",
      onClick: () => {
        this.props.change(3, formation.id);
      }
    }, formation.name)))), /* @__PURE__ */ react.createElement("tbody", null, this.state.data && this.state.arraybis && this.state.arraybis.map((user) => /* @__PURE__ */ react.createElement("tr", {
      key: user.id
    }, /* @__PURE__ */ react.createElement("td", {
      className: "name"
    }, user.name), user.formations.map((forma) => /* @__PURE__ */ react.createElement("td", {
      className: "forma"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "pilote-btn"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      id: "toggle_" + user.id + "_" + forma.id,
      checked: forma.validate === true,
      onClick: () => {
        this.updateCertif(user.id, forma.id);
      }
    }), /* @__PURE__ */ react.createElement("div", null, /* @__PURE__ */ react.createElement("label", {
      htmlFor: "toggle_" + user.id + "_" + forma.id
    })))))))))));
  }
}
class FormaList extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      formations: [],
      data: false
    };
  }
  async componentDidMount() {
    var req = await axios({
      url: "/data/formations/get",
      method: "GET"
    });
    if (req.status === 200) {
      this.setState({formations: req.data.formations, data: true});
    }
  }
  render() {
    let perm = this.context;
    return /* @__PURE__ */ react.createElement("div", {
      className: "f-formalist"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "header"
    }, /* @__PURE__ */ react.createElement(PagesTitle, {
      title: "Liste des formations"
    }), /* @__PURE__ */ react.createElement("button", {
      onClick: () => this.props.change(0),
      className: "btn"
    }, "Certifications"), /* @__PURE__ */ react.createElement("button", {
      disabled: !perm.create_forma,
      onClick: () => {
        this.props.change(2);
      },
      className: "btn"
    }, "Creer une formation")), /* @__PURE__ */ react.createElement("section", {
      className: "f-list"
    }, this.state.data === true && this.state.formations.map((forma) => /* @__PURE__ */ react.createElement("div", {
      className: "item"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "columns img"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/storage/formations/front_img/" + forma.id + "/" + forma.image,
      alt: ""
    })), /* @__PURE__ */ react.createElement("div", {
      className: "columns text"
    }, /* @__PURE__ */ react.createElement("h2", null, forma.name), /* @__PURE__ */ react.createElement("p", null, forma.desc)), /* @__PURE__ */ react.createElement("div", {
      className: "columns infos"
    }, /* @__PURE__ */ react.createElement("h5", null, "R\xE9ussites : ", forma.success), /* @__PURE__ */ react.createElement("h5", null, "Essais : ", forma.try), /* @__PURE__ */ react.createElement("h5", null, "Echecs : ", forma.try - forma.success)), /* @__PURE__ */ react.createElement("div", {
      className: "columns actions"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "row"
    }, /* @__PURE__ */ react.createElement("button", {
      disabled: !perm.create_forma,
      onClick: () => this.props.change(2, forma.id)
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/editer.png",
      alt: ""
    })), /* @__PURE__ */ react.createElement("button", {
      disabled: !perm.forma_delete,
      onClick: async () => {
        let req = await axios({
          url: "/data/formations/admin/" + forma.id + "/delete",
          method: "DELETE"
        });
        if (req.status === 200) {
          this.componentDidMount();
        }
      }
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/cancel.png",
      alt: ""
    }))), /* @__PURE__ */ react.createElement("h5", null, "public"), /* @__PURE__ */ react.createElement("div", {
      className: "switch-container"
    }, /* @__PURE__ */ react.createElement("input", {
      id: "switch_" + forma.id,
      checked: forma.public,
      disabled: !perm.forma_publi,
      className: "payed_switch",
      type: "checkbox",
      onChange: async () => {
        let req = await axios({
          url: "/data/formations/admin/" + forma.id + "/visibylity",
          method: "PUT"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    }), /* @__PURE__ */ react.createElement("label", {
      htmlFor: "switch_" + forma.id,
      className: "payed_switchLabel"
    })))))));
  }
}
FormaList.contextType = PermsContext;
class CreatorItem extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      img: null,
      responses: [],
      lasresponseid: 0,
      image: "",
      questionid: null,
      updated: false,
      text: "",
      desc: "",
      correction: "",
      needcorect: false
    };
    this.save = this.save.bind(this);
    this.addResponse = this.addResponse.bind(this);
    this.deleteResponse = this.deleteResponse.bind(this);
    this.changeBtnResponseState = this.changeBtnResponseState.bind(this);
    this.changeContentResponseState = this.changeContentResponseState.bind(this);
  }
  addResponse() {
    let resp = this.state.responses;
    let id = this.state.lasresponseid + 1;
    var b = {
      id,
      content: "",
      active: false
    };
    resp.push(b);
    this.setState({responses: resp, lasresponseid: id});
  }
  deleteResponse(id) {
    let array = this.state.responses;
    let lenght = array.length;
    let a = 0;
    let obj = 0;
    while (a < lenght) {
      if (array[a].id === id) {
        obj = a;
      }
      a++;
    }
    array.splice(obj, 1);
    this.setState({responses: array, updated: true});
  }
  changeBtnResponseState(id) {
    let array = this.state.responses;
    let lenght = array.length;
    let a = 0;
    while (a < lenght) {
      if (array[a].id === id) {
        array[a].active = !array[a].active;
      }
      a++;
    }
    this.setState({responses: array, updated: true});
  }
  changeContentResponseState(id, content) {
    let array = this.state.responses;
    let lenght = array.length;
    let a = 0;
    while (a < lenght) {
      if (array[a].id === id) {
        array[a].content = content;
      }
      a++;
    }
    this.setState({responses: array, updated: true});
  }
  async componentDidMount() {
    if (this.props.questionid) {
      var req = await axios({
        method: "GET",
        url: "/data/formations/question/" + this.props.questionid
      });
      if (req.status === 200) {
        this.setState({
          questionid: this.props.questionid,
          image: "/storage/formations/question_img/" + this.props.formationid + "/" + req.data.question.img,
          correction: req.data.correction,
          desc: req.data.question.desc,
          text: req.data.question.name,
          responses: req.data.question.responses
        });
      }
    }
    window.addEventListener("saveAll", this.save);
  }
  async save() {
    if (this.state.questionid) {
      if (this.state.updated) {
        var req = await axios({
          method: "PUT",
          url: "/data/formations/admin/question/" + this.state.questionid + "/update",
          data: {
            img: this.state.img,
            correction: this.state.correction,
            description: this.state.desc,
            name: this.state.text,
            responses: this.state.responses
          }
        });
        if (req.status === 201) {
          this.setState({updated: false});
          this.postBg();
        }
      }
    } else {
      var req = await axios({
        method: "POST",
        url: "/data/formations/" + this.props.formationid + "/admin/question/post",
        data: {
          img: this.state.img,
          correction: this.state.correction,
          description: this.state.desc,
          name: this.state.text,
          responses: this.state.responses
        }
      });
      if (req.status === 201) {
        this.setState({questionid: req.data.questionid, updated: false});
        this.postBg();
      }
    }
  }
  async postBg() {
    await axios({
      method: "POST",
      url: "/data/formations/question/" + this.state.questionid + "/image",
      data: {
        image: this.state.img
      }
    });
  }
  render() {
    return /* @__PURE__ */ react.createElement("section", {
      id: "page_" + this.props.id,
      className: "creator-item " + (this.props.current ? "current" : "hidden")
    }, /* @__PURE__ */ react.createElement("form", {
      className: "questionadder"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "question-title"
    }, /* @__PURE__ */ react.createElement("h1", null, "Question n\xB0", this.props.id)), /* @__PURE__ */ react.createElement("div", {
      className: "question-main"
    }, /* @__PURE__ */ react.createElement("label", null, "Question"), /* @__PURE__ */ react.createElement("input", {
      type: "text",
      maxLength: 255,
      value: this.state.text,
      onChange: (e) => {
        this.setState({text: e.target.value, updated: true});
      }
    })), /* @__PURE__ */ react.createElement("div", {
      className: "add-image"
    }, /* @__PURE__ */ react.createElement(Uploader, {
      text: "1920*1080 2MO",
      images: (image) => {
        this.setState({img: image, updated: true});
      }
    })), /* @__PURE__ */ react.createElement("div", {
      className: "response-info"
    }, /* @__PURE__ */ react.createElement("label", {
      className: "label-titel"
    }, "R\xE9ponses"), /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      onClick: (e) => {
        this.addResponse();
        e.preventDefault();
      }
    }, "ajouter")), /* @__PURE__ */ react.createElement("div", {
      className: "responses-list"
    }, this.state.responses && this.state.responses.map((resp) => /* @__PURE__ */ react.createElement("div", {
      key: resp.ip,
      className: "response"
    }, /* @__PURE__ */ react.createElement("button", {
      id: "btn_" + resp.id,
      onClick: (e) => {
        this.deleteResponse(resp.id);
        e.preventDefault();
      }
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/cancel.png",
      alt: ""
    })), /* @__PURE__ */ react.createElement("input", {
      type: "text",
      value: resp.content,
      maxLength: 255,
      onChange: (e) => {
        this.changeContentResponseState(resp.id, e.target.value);
      }
    }), /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      checked: resp.active,
      className: "user",
      onClick: (e) => {
        this.changeBtnResponseState(resp.id);
      }
    })))), /* @__PURE__ */ react.createElement("div", {
      className: "description"
    }, /* @__PURE__ */ react.createElement("label", null, "Description"), /* @__PURE__ */ react.createElement("textarea", {
      value: this.state.desc,
      onChange: (e) => {
        this.setState({desc: e.target.value, updated: true});
      }
    })), this.props.correct && /* @__PURE__ */ react.createElement("div", {
      className: "correction"
    }, /* @__PURE__ */ react.createElement("label", null, "Phrase de correction"), /* @__PURE__ */ react.createElement("input", {
      type: "text",
      maxLength: 255,
      value: this.state.correction,
      onChange: (e) => {
        this.setState({correction: e.target.value, updated: true});
      }
    }))));
  }
}
class FormaCreate extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      updated: true,
      item: [{id: 0}],
      formationid: null,
      itemid: 0,
      data: true,
      time: false,
      unic_try: false,
      retry_soon: true,
      total: true,
      question: false,
      img: null,
      correction: true,
      getcertif: true,
      saveondeco: true,
      getfinalnote: false,
      name: "",
      time_str: "",
      desc: "",
      max_try: "",
      time_btw: ""
    };
    this.nextSlide = this.nextSlide.bind(this);
    this.prevSlide = this.prevSlide.bind(this);
    this.addSlide = this.addSlide.bind(this);
    this.save = this.save.bind(this);
  }
  nextSlide() {
    const lastIndex = this.state.item.length - 1;
    const resetIndex = this.state.itemid === lastIndex;
    const index2 = resetIndex ? 0 : this.state.itemid + 1;
    this.setState({
      itemid: index2
    });
  }
  prevSlide() {
    const lastIndex = this.state.item.length - 1;
    const resetIndex = this.state.itemid === 0;
    const index2 = resetIndex ? lastIndex : this.state.itemid - 1;
    this.setState({
      itemid: index2
    });
  }
  addSlide() {
    var list = this.state.item;
    if (this.state.formationid) {
      list.push({
        id: list.length
      });
      this.setState({item: list});
    } else {
      this.save(true);
    }
  }
  async componentDidMount() {
    if (this.props.id === null) {
      this.setState({formationid: null});
    } else {
      var req = await axios({
        method: "GET",
        url: "/data/formations/admin/" + this.props.id + "/get"
      });
      if (req.status === 200) {
        let a = 0;
        let item = this.state.item;
        while (a < req.data.responses.length) {
          item.push({id: item.length, itemid: req.data.responses[a].id});
          a++;
        }
        let timer = Math.floor(req.data.formation.timer / 60);
        let reste = req.data.formation.timer % 60;
        const final_timer = (timer < 10 ? "0" : "") + timer + ":" + (reste < 10 ? "0" : "") + reste;
        let time = req.data.formation.time_btw_try;
        let time_btw = Math.trunc(time / 86400);
        let rest = time % 86400 / 3600;
        time_btw = (time_btw < 10 ? "0" : "") + time_btw + " " + (rest < 10 ? "0" : "") + rest;
        this.setState({
          formationid: this.props.id,
          updated: false,
          img: void 0,
          item,
          correction: req.data.formation.correction,
          desc: req.data.formation.desc,
          name: req.data.formation.name,
          getcertif: req.data.formation.certify,
          getfinalnote: req.data.formation.displaynote,
          max_try: req.data.formation.max_try,
          time: req.data.formation.timer !== null,
          time_str: final_timer,
          total: req.data.formation.timed,
          question: req.data.formation.question_timed,
          retry_soon: req.data.formation.can_retry_later,
          time_btw,
          unic_try: req.data.formation.unic_try,
          save: req.data.formation.save_on_deco,
          image: "/storage/formations/front_img/" + this.props.id + "/" + req.data.formation.image
        });
      }
    }
    window.addEventListener("saveAll", this.save);
  }
  async save(add = null) {
    if (this.state.formationid === null && this.state.img !== null) {
      var req = await axios({
        url: "/data/formations/admin/post",
        method: "post",
        data: {
          correction: this.state.correction,
          desc: this.state.desc,
          name: this.state.name,
          certif: this.state.getcertif,
          finalnote: this.state.getfinalnote,
          max_try: this.state.max_try,
          time: this.state.time,
          total: this.state.total,
          question: this.state.question,
          time_str: this.state.time_str,
          time_btw: this.state.retry_soon,
          time_btw_str: this.state.time_btw,
          unic_try: this.state.unic_try,
          save: this.state.saveondeco
        }
      });
      if (req.status === 201) {
        this.setState({updated: false, formationid: req.data.formation.id});
        this.postBg();
        if (add) {
          var list = this.state.item;
          list.push({
            id: list.length
          });
          this.setState({item: list, updated: false});
        }
      }
    } else if (this.state.formationid !== null && this.state.updated) {
      var req = await axios({
        method: "PUT",
        url: "/data/formations/admin/" + this.state.formationid + "/update",
        data: {
          correction: this.state.correction,
          desc: this.state.desc,
          name: this.state.name,
          certif: this.state.getcertif,
          finalnote: this.state.getfinalnote,
          img: this.state.img,
          max_try: this.state.max_try,
          time: this.state.time,
          total: this.state.total,
          question: this.state.question,
          time_str: this.state.time_str,
          time_btw: this.state.retry_soon,
          time_btw_str: this.state.time_btw,
          unic_try: this.state.unic_try,
          save: this.state.saveondeco
        }
      });
      if (req.status === 201) {
        this.setState({updated: false});
        this.postBg();
      }
    }
  }
  async postBg() {
    await axios({
      method: "POST",
      url: "/data/formations/" + this.state.formationid + "/image",
      data: {
        image: this.state.img
      }
    });
  }
  createImage(file) {
    let reader = new FileReader();
    reader.onload = (e) => {
      this.setState({
        img: e.target.result
      });
    };
    reader.readAsDataURL(file);
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "formationCretor"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "header"
    }, /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      onClick: () => {
        this.props.change(1);
      }
    }, "Quitter"), /* @__PURE__ */ react.createElement(PagesTitle, {
      title: "creer une formation"
    }), /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      disabled: this.state.formationid ? false : true,
      onClick: () => {
        window.dispatchEvent(new CustomEvent("saveAll", {}));
      }
    }, "Enregistrer")), /* @__PURE__ */ react.createElement("section", {
      className: "creator"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "creator-items"
    }, !this.state.data && /* @__PURE__ */ react.createElement("section", {
      id: "loader"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    }))), this.state.data && /* @__PURE__ */ react.createElement("section", {
      id: "page_0",
      className: "creator-item " + (this.state.itemid === 0 ? "current" : "hidden")
    }, /* @__PURE__ */ react.createElement("form", {
      className: "infos",
      onSubmit: (e) => {
        e.preventDefault();
        this.save();
      }
    }, /* @__PURE__ */ react.createElement("div", {
      className: "name"
    }, /* @__PURE__ */ react.createElement("label", null, "nom de la formation"), /* @__PURE__ */ react.createElement("input", {
      required: true,
      type: "text",
      value: this.state.name,
      onChange: (e) => this.setState({name: e.target.value, updated: true})
    })), /* @__PURE__ */ react.createElement("div", {
      className: "time"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("label", null, "Temps "), /* @__PURE__ */ react.createElement("div", {
      className: "pilote-btn"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      checked: this.state.time,
      id: "time_switch",
      onChange: () => {
        this.setState({time: !this.state.time, updated: true});
      }
    }), /* @__PURE__ */ react.createElement("div", null, /* @__PURE__ */ react.createElement("label", {
      htmlFor: "time_switch"
    })))), /* @__PURE__ */ react.createElement("div", {
      className: "time-data-container"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "row time-data " + (this.state.time ? "item-current" : "item-hidden")
    }, /* @__PURE__ */ react.createElement("div", {
      className: "t-q-t-switch"
    }, /* @__PURE__ */ react.createElement("label", {
      className: "item " + (this.state.total ? "" : "disabled"),
      onClick: () => {
        if (!this.state.total) {
          this.setState({total: true, question: false, updated: true});
        }
      }
    }, "total"), /* @__PURE__ */ react.createElement("label", {
      className: "item " + (this.state.question ? "" : "disabled"),
      onClick: () => {
        if (!this.state.question) {
          this.setState({question: true, total: false, updated: true});
        }
      }
    }, "question")), /* @__PURE__ */ react.createElement("input", {
      type: "time",
      value: this.state.time_str,
      onChange: (e) => this.setState({time_str: e.target.value, updated: true})
    })))), /* @__PURE__ */ react.createElement("div", {
      className: "image"
    }, /* @__PURE__ */ react.createElement(Uploader, {
      text: "1920*1080 2MO",
      images: (image) => {
        this.setState({img: image, updated: true});
      }
    })), /* @__PURE__ */ react.createElement("div", {
      className: "desc"
    }, /* @__PURE__ */ react.createElement("label", null, "Description :"), /* @__PURE__ */ react.createElement("textarea", {
      required: true,
      value: this.state.desc,
      onChange: (e) => this.setState({desc: e.target.value, updated: true})
    })), /* @__PURE__ */ react.createElement("div", {
      className: "correction rowed"
    }, /* @__PURE__ */ react.createElement("label", null, "correction"), /* @__PURE__ */ react.createElement("div", {
      className: "pilote-btn"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      checked: this.state.correction,
      id: "correct_switch",
      onChange: () => {
        this.setState({correction: !this.state.correction, updated: true});
      }
    }), /* @__PURE__ */ react.createElement("div", null, /* @__PURE__ */ react.createElement("label", {
      htmlFor: "correct_switch"
    })))), /* @__PURE__ */ react.createElement("div", {
      className: "try"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("label", null, "Essai unique"), /* @__PURE__ */ react.createElement("div", {
      className: "pilote-btn"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      checked: this.state.unic_try,
      id: "unic_switch",
      onChange: () => {
        this.setState({unic_try: !this.state.unic_try, updated: true});
      }
    }), /* @__PURE__ */ react.createElement("div", null, /* @__PURE__ */ react.createElement("label", {
      htmlFor: "unic_switch"
    })))), /* @__PURE__ */ react.createElement("div", {
      className: "try-data-container"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "try-data " + (!this.state.unic_try ? "item-current" : "item-hidden")
    }, /* @__PURE__ */ react.createElement("div", {
      className: "max-try"
    }, /* @__PURE__ */ react.createElement("label", null, "Nombre d'essai max"), /* @__PURE__ */ react.createElement("input", {
      type: "number",
      placeholder: "0 pour infini",
      value: this.state.max_try,
      onChange: (e) => this.setState({max_try: e.target.value, updated: true})
    })), /* @__PURE__ */ react.createElement("div", {
      className: "btwtry"
    }, /* @__PURE__ */ react.createElement("label", null, "Temps entre chaque essai"), /* @__PURE__ */ react.createElement("div", {
      className: "row"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "pilote-btn"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      checked: this.state.retry_soon,
      id: "time_btw_try_switch",
      onChange: () => {
        this.setState({retry_soon: !this.state.retry_soon, updated: true});
      }
    }), /* @__PURE__ */ react.createElement("div", null, /* @__PURE__ */ react.createElement("label", {
      htmlFor: "time_btw_try_switch"
    }))), this.state.retry_soon && /* @__PURE__ */ react.createElement("div", {
      className: "time-btw-try"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "text",
      placeholder: "jj hh",
      value: this.state.time_btw,
      onChange: (e) => this.setState({time_btw: e.target.value, updated: true})
    }))))))), /* @__PURE__ */ react.createElement("div", {
      className: "infos"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("label", null, "Donner la certification"), /* @__PURE__ */ react.createElement("div", {
      className: "pilote-btn"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      checked: this.state.getcertif,
      id: "certif_switch",
      onChange: () => {
        this.setState({getcertif: !this.state.getcertif, updated: true});
      }
    }), /* @__PURE__ */ react.createElement("div", null, /* @__PURE__ */ react.createElement("label", {
      htmlFor: "certif_switch"
    })))), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("label", null, "Enregistrer \xE0 la d\xE9connexion"), /* @__PURE__ */ react.createElement("div", {
      className: "pilote-btn"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      checked: this.state.saveondeco,
      id: "deco_switch",
      onChange: () => {
        this.setState({saveondeco: !this.state.saveondeco, updated: true});
      }
    }), /* @__PURE__ */ react.createElement("div", null, /* @__PURE__ */ react.createElement("label", {
      htmlFor: "deco_switch"
    })))), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("label", null, "Afficher le score \xE0 la fin"), /* @__PURE__ */ react.createElement("div", {
      className: "pilote-btn"
    }, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      checked: this.state.getfinalnote,
      id: "final_switch",
      onChange: () => {
        this.setState({getfinalnote: !this.state.getfinalnote, updated: true});
      }
    }), /* @__PURE__ */ react.createElement("div", null, /* @__PURE__ */ react.createElement("label", {
      htmlFor: "final_switch"
    }))))))), this.state.data && this.state.formationid && this.state.item.map((it) => it.id !== 0 && /* @__PURE__ */ react.createElement(CreatorItem, {
      key: it.id,
      id: it.id,
      current: it.id === this.state.itemid,
      correct: this.state.correction,
      formationid: this.state.formationid,
      questionid: it.itemid
    }))), /* @__PURE__ */ react.createElement("section", {
      className: "creator-bottom"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "items-list"
    }, this.state.item.map((it) => /* @__PURE__ */ react.createElement("div", {
      key: it.id,
      id: "page_" + it.id,
      className: "bottom-item" + (it.id === this.state.itemid ? " active" : "")
    }))), /* @__PURE__ */ react.createElement("div", {
      className: "btn-contain"
    }, /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      disabled: this.state.formationid ? false : true,
      onClick: this.prevSlide
    }, "<"), /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      onClick: this.addSlide
    }, "Ajouter une question"), /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      disabled: this.state.formationid ? false : true,
      onClick: this.nextSlide
    }, ">")))));
  }
}
class AFormaController extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      status: 0,
      formationid: null
    };
    this.change = this.change.bind(this);
  }
  change(page, formationid = null) {
    this.setState({status: page, formationid});
  }
  render() {
    switch (this.state.status) {
      case 0:
        return /* @__PURE__ */ react.createElement(FormaUserList, {
          change: this.change
        });
      case 1:
        return /* @__PURE__ */ react.createElement(FormaList, {
          change: this.change
        });
      case 2:
        return /* @__PURE__ */ react.createElement(FormaCreate, {
          change: this.change,
          id: this.state.formationid
        });
      case 3:
        return /* @__PURE__ */ react.createElement(FormaViewResponse, {
          change: this.change,
          id: this.state.formationid
        });
    }
  }
}
class FormaViewResponse extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: false,
      formation: []
    };
  }
  async componentDidMount() {
    var req = await axios({
      method: "GET",
      url: "/data/formations/" + this.props.id + "/responses"
    });
    this.setState({formation: req.data.formation, data: true});
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "ViewFormaResponse"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "header"
    }, /* @__PURE__ */ react.createElement("button", {
      onClick: () => this.props.change(0),
      className: "btn"
    }, "retour"), /* @__PURE__ */ react.createElement(PagesTitle, {
      title: "R\xE9ponses | " + this.state.formation.name
    })), /* @__PURE__ */ react.createElement("section", {
      className: "response-list"
    }, this.state.data === true && /* @__PURE__ */ react.createElement("table", null, /* @__PURE__ */ react.createElement("thead", null, /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("th", null, "nom"), /* @__PURE__ */ react.createElement("th", null, "termin\xE9e"), /* @__PURE__ */ react.createElement("th", null, "note actuelle"), /* @__PURE__ */ react.createElement("th", null, "commenc\xE9 le"), /* @__PURE__ */ react.createElement("th", null, "derni\xE8re mise \xE0 jour"), /* @__PURE__ */ react.createElement("th", null, "actions"))), /* @__PURE__ */ react.createElement("tbody", null, this.state.formation.get_responses && this.state.formation.get_responses.map((response) => /* @__PURE__ */ react.createElement("tr", {
      key: response.id
    }, /* @__PURE__ */ react.createElement("td", null, response.get_user.name), /* @__PURE__ */ react.createElement("td", null, response.finished ? "oui" : "non"), /* @__PURE__ */ react.createElement("td", null, response.note, "/", this.state.formation.max_note), /* @__PURE__ */ react.createElement("td", null, dateformat(response.created_at, "dd/mm/yyyy \xE0 H:MM")), /* @__PURE__ */ react.createElement("td", null, dateformat(response.updated_at, "dd/mm/yyyy \xE0 H:MM")), /* @__PURE__ */ react.createElement("td", null, /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/assets/images/cancel.png",
      onClick: async () => {
        let req = await axios({
          method: "delete",
          url: "/data/formations/responses/" + response.id + "/delete"
        });
        if (req.status === 201) {
          this.componentDidMount();
        }
      }
    })))))), !this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    }))));
  }
}
class InfoGestion extends react.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      class: ""
    });
  }
}
class Informations extends react.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      class: ""
    });
  }
}
class Stats extends react.Component {
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "acc-content"
    });
  }
}
class Account extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: false,
      email: "",
      name: "",
      compte: "0000",
      tel: "00000000",
      liveplace: "BC",
      popup: false,
      mdp: "",
      mdprepet: "",
      lastmdp: "",
      image: null,
      errors: [],
      id: null
    };
    this.postInfos = this.postInfos.bind(this);
    this.changeMdp = this.changeMdp.bind(this);
    this.postBg = this.postBg.bind(this);
  }
  async componentDidMount() {
    var req = await axios({
      url: "/data/user/infos/get",
      method: "get"
    });
    if (req.status === 200) {
      this.setState({
        data: true,
        email: req.data.user.email,
        name: req.data.user.name,
        compte: req.data.user.compte,
        tel: req.data.user.tel,
        liveplace: req.data.user.liveplace,
        image: req.data.user.bg_img,
        id: req.data.user.id
      });
    }
  }
  async postInfos(e) {
    e.preventDefault();
    await axios({
      url: "/data/user/infos/put",
      method: "PUT",
      data: {
        email: this.state.email,
        name: this.state.name,
        compte: this.state.compte,
        tel: this.state.tel,
        liveplace: this.state.liveplace
      }
    }).catch((error) => {
      error = Object.assign({}, error);
      if (error.response.status === 422) {
        this.setState({errors: error.response.data.errors});
      }
    });
  }
  async changeMdp(e) {
    e.preventDefault();
    var req = await axios({
      url: "/data/user/mdp/put",
      method: "put",
      data: {
        last: this.state.lastmdp,
        newmdp: this.state.mdp,
        mdprepet: this.state.mdprepet
      }
    });
    if (req.status === 201) {
      this.setState({
        lastmdp: "",
        mdp: "",
        mdprepet: "",
        popup: false
      });
    }
  }
  async postBg() {
    await axios({
      method: "POST",
      url: "/data/user/bg/post",
      data: {
        image: this.state.image
      }
    });
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "acc-content"
    }, !this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    })), this.state.data && /* @__PURE__ */ react.createElement("section", {
      className: "changedata",
      style: {filter: this.state.popup ? "blur(5px)" : "none"}
    }, /* @__PURE__ */ react.createElement("form", {
      onSubmit: this.postInfos
    }, /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("label", null, "nom pr\xE9nom"), /* @__PURE__ */ react.createElement("input", {
      required: true,
      type: "text",
      className: this.state.errors.name ? "form-error" : "",
      value: this.state.name,
      onChange: (e) => {
        this.setState({name: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("ul", {
      className: "error-list"
    }, this.state.errors.name && this.state.errors.name.map((item) => /* @__PURE__ */ react.createElement("li", null, item)))), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("label", null, "email"), /* @__PURE__ */ react.createElement("input", {
      required: true,
      type: "email",
      className: this.state.errors.email ? "form-error" : "",
      value: this.state.email,
      onChange: (e) => {
        this.setState({email: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("ul", {
      className: "error-list"
    }, this.state.errors.email && this.state.errors.email.map((item) => /* @__PURE__ */ react.createElement("li", null, item)))), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("label", null, "num\xE9ro de tel"), /* @__PURE__ */ react.createElement("input", {
      required: true,
      type: "number",
      className: this.state.errors.tel ? "form-error" : "",
      max: "99999999",
      value: this.state.tel,
      onChange: (e) => {
        this.setState({tel: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("ul", {
      className: "error-list"
    }, this.state.errors.tel && this.state.errors.tel.map((item) => /* @__PURE__ */ react.createElement("li", null, item)))), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("label", null, "num\xE9ro de compte"), /* @__PURE__ */ react.createElement("input", {
      required: true,
      type: "number",
      className: this.state.errors.compte ? "form-error" : "",
      value: this.state.compte,
      onChange: (e) => {
        this.setState({compte: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("ul", {
      className: "error-list"
    }, this.state.errors.compte && this.state.errors.compte.map((item) => /* @__PURE__ */ react.createElement("li", null, item)))), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("label", null, "Cont\xE9 habit\xE9"), /* @__PURE__ */ react.createElement("select", {
      value: this.state.liveplace,
      onChange: (e) => {
        this.setState({liveplace: e.target.value});
      }
    }, /* @__PURE__ */ react.createElement("option", null, "BC"), /* @__PURE__ */ react.createElement("option", null, "LS"))), /* @__PURE__ */ react.createElement("button", {
      type: "submit",
      className: "btn"
    }, "valider"))), this.state.data && /* @__PURE__ */ react.createElement("section", {
      className: "bigchange",
      style: {filter: this.state.popup ? "blur(5px)" : "none"}
    }, /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      onClick: () => this.setState({popup: true})
    }, "changer de mot de passe"), /* @__PURE__ */ react.createElement("div", {
      className: "img"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("h2", null, "Arri\xE8re plan du site (Affet\xE9 \xE0 la prochainne connexion)"), /* @__PURE__ */ react.createElement("div", {
      className: "beta"
    })), /* @__PURE__ */ react.createElement(Uploader, {
      text: "1920*1080 2MO",
      images: (image) => {
        this.setState({image});
        this.postBg();
      },
      default: "/storage/user_background/" + this.state.id + "/" + this.state.image
    }), /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      onClick: async (e) => {
        e.preventDefault();
        await axios({
          method: "DELETE",
          url: "/data/user/bg/delete"
        });
      }
    }, "supprimer"))), this.state.popup && /* @__PURE__ */ react.createElement("section", {
      className: "popup"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "center"
    }, /* @__PURE__ */ react.createElement("form", {
      onSubmit: this.changeMdp
    }, /* @__PURE__ */ react.createElement("h1", null, "Changer de mot de passe"), /* @__PURE__ */ react.createElement("div", {
      className: "row"
    }, /* @__PURE__ */ react.createElement("label", null, "Ancien mot de passe"), /* @__PURE__ */ react.createElement("input", {
      type: "password",
      value: this.state.lastmdp,
      onChange: (e) => {
        this.setState({lastmdp: e.target.value});
      }
    })), /* @__PURE__ */ react.createElement("div", {
      className: "row"
    }, /* @__PURE__ */ react.createElement("label", null, "Nouveau mot de passe"), /* @__PURE__ */ react.createElement("input", {
      type: "password",
      value: this.state.mdp,
      onChange: (e) => {
        this.setState({mdp: e.target.value});
      }
    })), /* @__PURE__ */ react.createElement("div", {
      className: "row"
    }, /* @__PURE__ */ react.createElement("label", null, "R\xE9p\xE9ter le mot de passe"), /* @__PURE__ */ react.createElement("input", {
      type: "password",
      value: this.state.mdprepet,
      onChange: (e) => {
        this.setState({mdprepet: e.target.value});
      }
    })), /* @__PURE__ */ react.createElement("div", {
      className: "row-evenly"
    }, /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      onClick: () => this.setState({popup: false})
    }, "Fermer"), /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      type: "submit"
    }, "Envoyer"))))));
  }
}
class MonCompte extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      stats: false,
      account: true,
      grade: "chargement"
    };
  }
  async componentDidMount() {
    var req = await axios({
      url: "/data/getperm",
      method: "get"
    });
    if (req.status === 200) {
      this.setState({grade: req.data.user.get_grade.name});
    }
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "moncompte"
    }, /* @__PURE__ */ react.createElement(PagesTitle, {
      title: "Mon Compte <br> <span>" + this.state.grade + "</span>"
    }), /* @__PURE__ */ react.createElement("div", {
      className: "account-container"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "header"
    }, /* @__PURE__ */ react.createElement("button", {
      onClick: () => this.setState({stats: false, account: true}),
      className: this.state.account ? "" : "unselected"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/settings.svg",
      alt: ""
    }), " mes informations")), this.state.stats && /* @__PURE__ */ react.createElement(Stats, null), this.state.account && /* @__PURE__ */ react.createElement(Account, null)));
  }
}
/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
createCommonjsModule(function(module, exports) {
  var n = 60103, p = 60106;
  exports.Fragment = 60107;
  exports.StrictMode = 60108;
  exports.Profiler = 60114;
  var q = 60109, r = 60110, t = 60112;
  exports.Suspense = 60113;
  var u = 60115, v = 60116;
  if (typeof Symbol === "function" && Symbol.for) {
    var w = Symbol.for;
    n = w("react.element");
    p = w("react.portal");
    exports.Fragment = w("react.fragment");
    exports.StrictMode = w("react.strict_mode");
    exports.Profiler = w("react.profiler");
    q = w("react.provider");
    r = w("react.context");
    t = w("react.forward_ref");
    exports.Suspense = w("react.suspense");
    u = w("react.memo");
    v = w("react.lazy");
  }
  var x = typeof Symbol === "function" && Symbol.iterator;
  function y(a) {
    if (a === null || typeof a !== "object")
      return null;
    a = x && a[x] || a["@@iterator"];
    return typeof a === "function" ? a : null;
  }
  function z(a) {
    for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)
      b += "&args[]=" + encodeURIComponent(arguments[c]);
    return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  var A = {isMounted: function() {
    return false;
  }, enqueueForceUpdate: function() {
  }, enqueueReplaceState: function() {
  }, enqueueSetState: function() {
  }}, B = {};
  function C(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = B;
    this.updater = c || A;
  }
  C.prototype.isReactComponent = {};
  C.prototype.setState = function(a, b) {
    if (typeof a !== "object" && typeof a !== "function" && a != null)
      throw Error(z(85));
    this.updater.enqueueSetState(this, a, b, "setState");
  };
  C.prototype.forceUpdate = function(a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };
  function D() {
  }
  D.prototype = C.prototype;
  function E(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = B;
    this.updater = c || A;
  }
  var F = E.prototype = new D();
  F.constructor = E;
  objectAssign(F, C.prototype);
  F.isPureReactComponent = true;
  var G = {current: null}, H = Object.prototype.hasOwnProperty, I = {key: true, ref: true, __self: true, __source: true};
  function J(a, b, c) {
    var e, d = {}, k = null, h = null;
    if (b != null)
      for (e in b.ref !== void 0 && (h = b.ref), b.key !== void 0 && (k = "" + b.key), b)
        H.call(b, e) && !I.hasOwnProperty(e) && (d[e] = b[e]);
    var g = arguments.length - 2;
    if (g === 1)
      d.children = c;
    else if (1 < g) {
      for (var f = Array(g), m = 0; m < g; m++)
        f[m] = arguments[m + 2];
      d.children = f;
    }
    if (a && a.defaultProps)
      for (e in g = a.defaultProps, g)
        d[e] === void 0 && (d[e] = g[e]);
    return {$$typeof: n, type: a, key: k, ref: h, props: d, _owner: G.current};
  }
  function K(a, b) {
    return {$$typeof: n, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner};
  }
  function L(a) {
    return typeof a === "object" && a !== null && a.$$typeof === n;
  }
  function escape(a) {
    var b = {"=": "=0", ":": "=2"};
    return "$" + a.replace(/[=:]/g, function(a2) {
      return b[a2];
    });
  }
  var M = /\/+/g;
  function N(a, b) {
    return typeof a === "object" && a !== null && a.key != null ? escape("" + a.key) : b.toString(36);
  }
  function O(a, b, c, e, d) {
    var k = typeof a;
    if (k === "undefined" || k === "boolean")
      a = null;
    var h = false;
    if (a === null)
      h = true;
    else
      switch (k) {
        case "string":
        case "number":
          h = true;
          break;
        case "object":
          switch (a.$$typeof) {
            case n:
            case p:
              h = true;
          }
      }
    if (h)
      return h = a, d = d(h), a = e === "" ? "." + N(h, 0) : e, Array.isArray(d) ? (c = "", a != null && (c = a.replace(M, "$&/") + "/"), O(d, b, c, "", function(a2) {
        return a2;
      })) : d != null && (L(d) && (d = K(d, c + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace(M, "$&/") + "/") + a)), b.push(d)), 1;
    h = 0;
    e = e === "" ? "." : e + ":";
    if (Array.isArray(a))
      for (var g = 0; g < a.length; g++) {
        k = a[g];
        var f = e + N(k, g);
        h += O(k, b, c, f, d);
      }
    else if (f = y(a), typeof f === "function")
      for (a = f.call(a), g = 0; !(k = a.next()).done; )
        k = k.value, f = e + N(k, g++), h += O(k, b, c, f, d);
    else if (k === "object")
      throw b = "" + a, Error(z(31, b === "[object Object]" ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));
    return h;
  }
  function P(a, b, c) {
    if (a == null)
      return a;
    var e = [], d = 0;
    O(a, e, "", "", function(a2) {
      return b.call(c, a2, d++);
    });
    return e;
  }
  function Q(a) {
    if (a._status === -1) {
      var b = a._result;
      b = b();
      a._status = 0;
      a._result = b;
      b.then(function(b2) {
        a._status === 0 && (b2 = b2.default, a._status = 1, a._result = b2);
      }, function(b2) {
        a._status === 0 && (a._status = 2, a._result = b2);
      });
    }
    if (a._status === 1)
      return a._result;
    throw a._result;
  }
  var R = {current: null};
  function S() {
    var a = R.current;
    if (a === null)
      throw Error(z(321));
    return a;
  }
  var T = {ReactCurrentDispatcher: R, ReactCurrentBatchConfig: {transition: 0}, ReactCurrentOwner: G, IsSomeRendererActing: {current: false}, assign: objectAssign};
  exports.Children = {map: P, forEach: function(a, b, c) {
    P(a, function() {
      b.apply(this, arguments);
    }, c);
  }, count: function(a) {
    var b = 0;
    P(a, function() {
      b++;
    });
    return b;
  }, toArray: function(a) {
    return P(a, function(a2) {
      return a2;
    }) || [];
  }, only: function(a) {
    if (!L(a))
      throw Error(z(143));
    return a;
  }};
  exports.Component = C;
  exports.PureComponent = E;
  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T;
  exports.cloneElement = function(a, b, c) {
    if (a === null || a === void 0)
      throw Error(z(267, a));
    var e = objectAssign({}, a.props), d = a.key, k = a.ref, h = a._owner;
    if (b != null) {
      b.ref !== void 0 && (k = b.ref, h = G.current);
      b.key !== void 0 && (d = "" + b.key);
      if (a.type && a.type.defaultProps)
        var g = a.type.defaultProps;
      for (f in b)
        H.call(b, f) && !I.hasOwnProperty(f) && (e[f] = b[f] === void 0 && g !== void 0 ? g[f] : b[f]);
    }
    var f = arguments.length - 2;
    if (f === 1)
      e.children = c;
    else if (1 < f) {
      g = Array(f);
      for (var m = 0; m < f; m++)
        g[m] = arguments[m + 2];
      e.children = g;
    }
    return {
      $$typeof: n,
      type: a.type,
      key: d,
      ref: k,
      props: e,
      _owner: h
    };
  };
  exports.createContext = function(a, b) {
    b === void 0 && (b = null);
    a = {$$typeof: r, _calculateChangedBits: b, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null};
    a.Provider = {$$typeof: q, _context: a};
    return a.Consumer = a;
  };
  exports.createElement = J;
  exports.createFactory = function(a) {
    var b = J.bind(null, a);
    b.type = a;
    return b;
  };
  exports.createRef = function() {
    return {current: null};
  };
  exports.forwardRef = function(a) {
    return {$$typeof: t, render: a};
  };
  exports.isValidElement = L;
  exports.lazy = function(a) {
    return {$$typeof: v, _payload: {_status: -1, _result: a}, _init: Q};
  };
  exports.memo = function(a, b) {
    return {$$typeof: u, type: a, compare: b === void 0 ? null : b};
  };
  exports.useCallback = function(a, b) {
    return S().useCallback(a, b);
  };
  exports.useContext = function(a, b) {
    return S().useContext(a, b);
  };
  exports.useDebugValue = function() {
  };
  exports.useEffect = function(a, b) {
    return S().useEffect(a, b);
  };
  exports.useImperativeHandle = function(a, b, c) {
    return S().useImperativeHandle(a, b, c);
  };
  exports.useLayoutEffect = function(a, b) {
    return S().useLayoutEffect(a, b);
  };
  exports.useMemo = function(a, b) {
    return S().useMemo(a, b);
  };
  exports.useReducer = function(a, b, c) {
    return S().useReducer(a, b, c);
  };
  exports.useRef = function(a) {
    return S().useRef(a);
  };
  exports.useState = function(a) {
    return S().useState(a);
  };
  exports.version = "17.0.2";
});
class LivretFormation extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      page: 1,
      pages: 1,
      list: [],
      data: false
    };
    this.getdata = this.getdata.bind(this);
    this.prevpage = this.prevpage.bind(this);
    this.nextpage = this.nextpage.bind(this);
  }
  componentDidMount() {
    this.getdata();
  }
  async getdata() {
    let req = await axios({
      url: "/data/formations/get/" + this.state.page + "/4",
      method: "GET"
    });
    if (req.status === 200) {
      this.setState({
        list: req.data.formations,
        pages: req.data.pages,
        data: true
      });
    }
  }
  prevpage() {
    if (this.state.page > 1) {
      let page = this.state.page - 1;
      this.setState({page, data: false});
      this.getdata();
    }
  }
  nextpage() {
    if (this.state.page !== this.state.pages) {
      let page = this.state.page + 1;
      this.setState({page, data: false});
      this.getdata();
    }
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "livret-page"
    }, /* @__PURE__ */ react.createElement(PagesTitle, {
      title: "Mon livret de formation"
    }), /* @__PURE__ */ react.createElement("div", {
      className: "livret"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "livret-content"
    }, /* @__PURE__ */ react.createElement("section", null, this.state.data === true && this.state.list.map((forma) => /* @__PURE__ */ react.createElement("div", {
      className: "forma",
      onClick: () => {
        this.props.change(1, forma.id);
      }
    }, /* @__PURE__ */ react.createElement("div", {
      className: "infos"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/storage/formations/front_img/" + forma.id + "/" + forma.image,
      alt: ""
    }), /* @__PURE__ */ react.createElement("div", {
      className: "text"
    }, /* @__PURE__ */ react.createElement("h5", null, forma.name), /* @__PURE__ */ react.createElement("p", null, forma.desc))), /* @__PURE__ */ react.createElement("div", {
      className: "validation"
    }, /* @__PURE__ */ react.createElement("h3", null, "r\xE9sulat"), forma.validate ? /* @__PURE__ */ react.createElement("img", {
      src: "https://as2.ftcdn.net/jpg/00/20/19/65/500_F_20196541_1AaZysgM7wGN4HyYeXH1XCjVLLPELIWC.jpg",
      alt: ""
    }) : ""))))), /* @__PURE__ */ react.createElement("div", {
      className: "livret-footer"
    }, /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      onClick: () => {
        this.prevpage();
      },
      disabled: this.state.page === 1
    }, "Page pr\xE9c\xE9dente"), /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      onClick: () => {
        this.nextpage();
      },
      disabled: this.state.page === this.state.pages
    }, "Page suivante"))));
  }
}
class ResponsePage extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      trystart: "",
      formation: {},
      responses: {},
      length: 1,
      actuel: 0,
      incorrect: false,
      myresponses: {},
      time: 0,
      timerpaused: false,
      note: "?/?",
      data: false,
      displayQuestion: false
    };
    this.nextPage = this.nextPage.bind(this);
    this.timer = this.timer.bind(this);
    this.endPage = this.endPage.bind(this);
    this.finalSave = this.finalSave.bind(this);
    this.ScoreCouter = this.ScoreCouter.bind(this);
  }
  timer() {
    if (!this.state.timerpaused) {
      let time = this.state.time - 1;
      this.setState({time});
      if (time === 0) {
        if (this.state.formation.question_timed) {
          this.nextPage();
        }
        if (this.state.formation.timed) {
          this.endPage();
        }
        this.setState({timerpaused: true});
      }
    }
  }
  async componentDidMount() {
    var req = await axios({
      url: "/data/formations/" + this.props.id + "/get",
      method: "GET"
    });
    if (req.status === 500) {
      this.props.change(null);
    }
    if (req.status === 200) {
      let length = 0;
      length = length + req.data.formation.get_questions.length + (req.data.formation.displaynote === 1 ? 1 : 0);
      this.setState({formation: req.data.formation, responses: req.data.formation.get_questions, length, data: true});
    }
  }
  async componentWillUnmount() {
    await axios({
      url: "/data/formation/userdeco/" + this.props.id + "/save",
      method: "POST"
    });
  }
  endPage() {
    this.setState({actuel: this.state.length});
    this.ScoreCouter().then((r) => {
      this.finalSave();
    });
  }
  nextPage() {
    if (this.state.actuel === 0 || this.state.actuel === this.state.length) {
      if (this.state.actuel === 0) {
        this.setState({actuel: this.state.actuel + 1, incorrect: false});
        this.setState({time: this.state.formation.timer});
        this.interval = setInterval(this.timer, 1e3);
      }
    } else {
      if (this.state.formation.question_timed === 1) {
        this.setState({time: this.state.formation.timer});
      }
      if (this.state.formation.correction) {
        if (this.state.incorrect) {
          this.setState({actuel: this.state.actuel + 1, incorrect: false, timerpaused: false, myresponses: {}});
        } else {
          this.setState({incorrect: true, timerpaused: true});
          this.ScoreCouter();
        }
      } else {
        this.ScoreCouter();
        this.setState({actuel: this.state.actuel + 1, myresponses: {}});
      }
    }
    if (this.state.actuel === this.state.length) {
      if (this.state.formation.displaynote === 0) {
        this.ScoreCouter();
      }
      this.props.change(null);
    }
    if (this.state.actuel === this.state.formation.get_questions.length) {
      this.finalSave();
      this.setState({timerpaused: true});
    }
  }
  async finalSave() {
    var req = await axios({
      url: "/data/formation/" + this.state.formation.id + "/final",
      method: "GET"
    });
    if (req.status === 200) {
      this.setState({note: req.data.note});
    }
  }
  async ScoreCouter() {
    let point = 0;
    let responses = this.state.myresponses;
    let rightresponses = this.state.responses[this.state.actuel - 1].responses;
    let a = 0;
    while (a < rightresponses.length) {
      if (responses.hasOwnProperty(rightresponses[a].id)) {
        point = responses[rightresponses[a].id].value === rightresponses[a].active ? point + 1 : point - 1;
      } else {
        point = rightresponses[a].active === false ? point + 1 : point - 1;
      }
      a++;
    }
    if (point < 0) {
      point = 0;
    }
    let path = this.state.responses[this.state.actuel - 1].id;
    await axios({
      url: "/data/formations/response/" + path + "/save",
      method: "POST",
      data: {
        points: point
      }
    });
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "responsepage"
    }, /* @__PURE__ */ react.createElement(PagesTitle, {
      title: "formation | " + this.state.formation.name
    }), /* @__PURE__ */ react.createElement("div", {
      className: "responsecontent"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "question"
    }, this.state.actuel > 0 && this.state.actuel < this.state.length + (this.state.formation.displaynote === 0 ? 1 : 0) && /* @__PURE__ */ react.createElement("div", {
      className: "left"
    }, /* @__PURE__ */ react.createElement("h2", null, /* @__PURE__ */ react.createElement("span", null, "Question n\xB0", this.state.actuel, " :"), " ", this.state.responses[this.state.actuel - 1] !== void 0 ? this.state.responses[this.state.actuel - 1].name : "?"), /* @__PURE__ */ react.createElement("div", {
      className: "response"
    }, this.state.responses[this.state.actuel - 1].responses.map((response) => /* @__PURE__ */ react.createElement("div", {
      className: "rowed",
      key: response.id
    }, /* @__PURE__ */ react.createElement("div", {
      className: "checkbox"
    }, /* @__PURE__ */ react.createElement("label", {
      className: "container " + (this.state.incorrect ? response.active ? "right" : "" : "")
    }, response.content, /* @__PURE__ */ react.createElement("input", {
      type: "checkbox",
      className: "user ",
      disabled: this.state.incorrect,
      checked: this.state.myresponses.hasOwnProperty(response.id) ? this.state.myresponses[response.id].value : false,
      onChange: () => {
        let array = this.state.myresponses;
        if (array.hasOwnProperty(response.id)) {
          array[response.id] = {
            value: !this.state.myresponses[response.id].value
          };
        } else {
          array[response.id] = {
            value: true
          };
        }
        this.setState({myresponses: array});
      }
    }), /* @__PURE__ */ react.createElement("span", {
      className: "checkmark"
    }))))))), this.state.actuel > 0 && this.state.actuel < this.state.length + (this.state.formation.displaynote === 0 ? 1 : 0) && /* @__PURE__ */ react.createElement("div", {
      className: "infos"
    }, /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/storage/formations/question_img/" + this.props.id + "/" + this.state.responses[this.state.actuel - 1].id + "/" + this.state.responses[this.state.actuel - 1].img
    }), /* @__PURE__ */ react.createElement("p", null, this.state.responses[this.state.actuel - 1].desc), this.state.incorrect && /* @__PURE__ */ react.createElement("section", {
      className: "correction"
    }, /* @__PURE__ */ react.createElement("p", null, this.state.responses[this.state.actuel - 1].correction))), this.state.actuel === this.state.length + (this.state.formation.displaynote === 0 ? 1 : 0) && /* @__PURE__ */ react.createElement("div", {
      className: "question-end"
    }, /* @__PURE__ */ react.createElement("h1", null, "Note finale"), /* @__PURE__ */ react.createElement("h1", null, this.state.note)), this.state.actuel === 0 && this.state.data === true && /* @__PURE__ */ react.createElement("div", {
      className: "stater-page"
    }, /* @__PURE__ */ react.createElement("h1", null, "Informations"), /* @__PURE__ */ react.createElement("div", {
      className: "questions"
    }, /* @__PURE__ */ react.createElement("h3", null, (this.state.formation.get_questions ? this.state.formation.get_questions.length : "?") + " questions")), /* @__PURE__ */ react.createElement("div", {
      className: "infosList"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "illustrations"
    }, /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/assets/images/formations/chronometer.png"
    }), this.state.formation.timer === 0 && /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/assets/images/formations/cross.png"
    })), /* @__PURE__ */ react.createElement("h4", {
      className: "text"
    }, this.state.formation.timer !== 0 ? "Vous avez " + (Math.floor(this.state.formation.timer / 60) + " min(s) " + (this.state.formation.timer % 60 < 10 ? "0" + this.state.formation.timer % 60 : this.state.formation.timer % 60)) + (this.state.formation.question_timed ? " pour r\xE9ponde \xE0 chaque question" : " pour faire toute la formations") : "Cette formation n'est pas chronom\xE9tr\xE9e")), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "illustrations"
    }, /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/assets/images/formations/correction.png"
    }), this.state.formation.correction === 0 && /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/assets/images/formations/cross.png"
    })), /* @__PURE__ */ react.createElement("h4", {
      className: "text"
    }, this.state.formation.correction ? "Cette formation est corrig\xE9e " + (this.state.formation.timer !== 0 ? "et le temps est mis en pause" : "") : "Cette formation n'est pas corrig\xE9e")), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "illustrations"
    }, /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/assets/images/formations/retry.png"
    }), this.state.formation.unic_try === 1 && /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/assets/images/formations/cross.png"
    })), /* @__PURE__ */ react.createElement("h4", {
      className: "text"
    }, this.state.formation.unic_try ? "Vous n'avez qu'un seul essai" : this.state.formation.max_try === "0" ? "Vous avez un nombre d'essais infinis" : "Vous avez " + this.state.formation.max_try + " essais")), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "illustrations"
    }, /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/assets/images/formations/wait.png"
    }), this.state.formation.time_btw_try === 0 || this.state.formation.max_try === 1 && /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/assets/images/formations/cross.png"
    })), /* @__PURE__ */ react.createElement("h4", {
      className: "text"
    }, this.state.formation.max_try === 1 ? "Vous ne pourrez pas refaire cette formations" : this.state.formation.time_btw_try !== 0 ? "Vous pouvez r\xE9essayer dans " + Math.floor(this.state.formation.time_btw_try / 86400) + " jours et " + (this.state.formation.time_btw_try % 86400 / 3600 < 10 ? "0" : "") + this.state.formation.time_btw_try % 86400 / 3600 + " heure(s)" : "Vous pouvez refaire cette formation quand vous voulez")), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "illustrations"
    }, /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/assets/images/formations/certifications.png"
    }), this.state.formation.certify === 0 && /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/assets/images/formations/cross.png"
    })), /* @__PURE__ */ react.createElement("h4", {
      className: "text"
    }, " ", this.state.formation.certify ? "Vous aurez automatiquement la certifiations si vous avez plus  de 2/3 des points" : "Un r\xE9f\xE9rent dois valider votre formations"))))), /* @__PURE__ */ react.createElement("section", {
      className: "bottom"
    }, this.state.formation.timer > 0 && this.state.actuel !== this.state.length + (this.state.formation.displaynote === 0 ? 1 : 0) && this.state.actuel !== 0 && /* @__PURE__ */ react.createElement("h3", null, " ", Math.floor(this.state.time / 60), "  min(s) ", this.state.time % 60 < 10 ? "0" + this.state.time % 60 : this.state.time % 60), this.state.actuel > 0 && this.state.actuel < this.state.length && /* @__PURE__ */ react.createElement("h3", null, this.state.responses[this.state.actuel - 1].type), /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      type: "submit",
      onClick: this.nextPage
    }, "valider"))));
  }
}
class FormationsController extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      status: null,
      formaid: null
    };
    this.changePage = this.changePage.bind(this);
  }
  changePage(status, formaid = null) {
    this.setState({status, formaid});
  }
  render() {
    switch (this.state.status) {
      case null:
        return /* @__PURE__ */ react.createElement(LivretFormation, {
          change: this.changePage
        });
      case 1:
        return /* @__PURE__ */ react.createElement(ResponsePage, {
          change: this.changePage,
          id: this.state.formaid
        });
    }
  }
}
class CarnetVol extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      popup: false,
      user: null,
      page: 1,
      pages: 0,
      datas: null,
      lieux: null,
      place: 0,
      raison: null,
      name: null,
      list: null,
      errors: []
    };
    this.postdata = this.postdata.bind(this);
    this.update = this.update.bind(this);
    this.typing = this.typing.bind(this);
  }
  componentDidMount() {
    this.update();
  }
  async update() {
    let req = await axios({
      method: "GET",
      url: "/data/vol/get/" + this.state.page + "/" + this.state.name
    });
    if (req.data.status === "OK") {
      this.setState({
        datas: req.data.datas.vols,
        pages: req.data.datas.pages,
        page: req.data.datas.page,
        lieux: req.data.datas.lieux
      });
    }
  }
  async postdata(e) {
    e.preventDefault();
    await axios({
      method: "POST",
      url: "/data/vol/add",
      data: {
        lieux: this.state.place,
        raison: this.state.raison
      }
    }).then((response) => {
      if (response.status === 201) {
        this.setState({data: null, raison: "", lieux: "", popup: false});
        this.update();
      }
    }).catch((error) => {
      error = Object.assign({}, error);
      if (error.response.status === 422) {
        this.setState({errors: error.response.data.errors});
      }
    });
  }
  next() {
    if (this.state.page < this.state.pages) {
      this.setState({page: this.state.page++});
      this.setState({data: null});
      this.update();
    }
  }
  prev() {
    if (this.state.page > 1) {
      this.setState({page: this.state.page--});
      this.setState({data: null});
      this.update();
    }
  }
  async typing(e) {
    let req = await axios({
      url: "/data/vol/searsh/" + e.target.value,
      method: "GET"
    });
    if (!req.data.datas) {
      this.setState({name: "", list: []});
      this.update();
    } else {
      this.setState({list: req.data.datas.users});
      if (req.data.datas.users.length === 1) {
        this.setState({name: req.data.datas.users[0].name});
      }
    }
    this.update();
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "carnetvol"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "head",
      style: {filter: this.state.popup ? "blur(5px)" : "none"}
    }, /* @__PURE__ */ react.createElement(PagesTitle, {
      title: "carnet de vol"
    }), /* @__PURE__ */ react.createElement("button", {
      onClick: () => this.setState({popup: true}),
      className: "btn"
    }, "ajouter")), this.state.datas && /* @__PURE__ */ react.createElement("section", {
      className: "table-container",
      style: {filter: this.state.popup ? "blur(5px)" : "none"}
    }, /* @__PURE__ */ react.createElement("table", null, /* @__PURE__ */ react.createElement("thead", null, /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("th", null, "n\xB0"), /* @__PURE__ */ react.createElement("th", null, "d\xE9collage"), /* @__PURE__ */ react.createElement("th", null, "raison"), /* @__PURE__ */ react.createElement("th", null, "pilote"), /* @__PURE__ */ react.createElement("th", null, "lieux"))), /* @__PURE__ */ react.createElement("tbody", null, this.state.datas.map((vol) => /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("td", null, vol.id), /* @__PURE__ */ react.createElement("td", null, dateformat(vol.decollage, "yyyy/mm/dd H:M"), " [FR]"), /* @__PURE__ */ react.createElement("td", null, vol.raison), /* @__PURE__ */ react.createElement("td", null, vol.get_user.name), /* @__PURE__ */ react.createElement("td", null, vol.get_lieux.name))))), /* @__PURE__ */ react.createElement(TableBottom, {
      placeholder: "rechercher par pilote",
      page: this.state.page,
      pages: this.state.pages,
      next: this.next,
      prev: this.prev,
      typing: this.typing,
      list: this.state.list
    })), !this.state.datas && /* @__PURE__ */ react.createElement("section", {
      className: "table-container",
      style: {filter: this.state.popup ? "blur(5px)" : "none"}
    }, /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    }))), this.state.popup && /* @__PURE__ */ react.createElement("section", {
      className: "popup"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "center"
    }, /* @__PURE__ */ react.createElement("form", {
      onSubmit: this.postdata
    }, /* @__PURE__ */ react.createElement("h2", null, "ajouter un vol"), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("label", null, "raison du vol"), /* @__PURE__ */ react.createElement("input", {
      type: "text",
      max: 100,
      className: this.state.errors.lieux ? "form-error" : "",
      value: this.state.raison,
      onChange: (e) => {
        this.setState({raison: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("ul", {
      className: "error-list"
    }, this.state.errors.lieux && this.state.errors.lieux.map((item) => /* @__PURE__ */ react.createElement("li", null, item)))), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("label", null, "lieux"), /* @__PURE__ */ react.createElement("select", {
      defaultValue: 0,
      onChange: (e) => {
        this.setState({place: e.target.value});
      }
    }, /* @__PURE__ */ react.createElement("option", {
      value: this.state.place,
      disabled: true
    }, "choisir"), this.state.lieux && this.state.lieux.map((place) => /* @__PURE__ */ react.createElement("option", {
      key: place.id,
      value: place.id
    }, place.name)))), /* @__PURE__ */ react.createElement("div", {
      className: "button"
    }, /* @__PURE__ */ react.createElement("button", {
      onClick: () => this.setState({popup: false}),
      className: "btn"
    }, "fermer"), /* @__PURE__ */ react.createElement("button", {
      type: "submit",
      className: "btn"
    }, "valider"))))));
  }
}
class Myview extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      obj: [],
      list: [],
      itemid: 0,
      data: false
    };
    this.getdata = this.getdata.bind(this);
    this.addItem = this.addItem.bind(this);
    this.delete = this.delete.bind(this);
  }
  componentDidMount() {
    this.getdata();
  }
  async getdata() {
    var req = await axios({
      url: "/data/remboursements/get",
      method: "GET"
    });
    if (req.status === 200) {
      this.setState({
        list: req.data.remboursements,
        obj: req.data.obj,
        data: true
      });
    }
  }
  async addItem(e) {
    e.preventDefault();
    var req = await axios({
      url: "/data/remboursements/post",
      method: "post",
      data: {
        item: this.state.itemid
      }
    });
    if (req.status === 201) {
      this.setState({itemod: 0});
      this.getdata();
    }
  }
  async delete(id) {
    var req = await axios({
      url: "/data/remboursements/delete/" + id,
      method: "delete"
    });
    if (req.status === 200) {
      this.getdata();
    }
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "myview"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "add"
    }, !this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    })), this.state.data && /* @__PURE__ */ react.createElement("form", {
      onSubmit: this.addItem
    }, /* @__PURE__ */ react.createElement("h2", null, "Ajouter"), /* @__PURE__ */ react.createElement("select", {
      value: this.state.itemid,
      onChange: (e) => {
        this.setState({itemid: e.target.value});
      }
    }, /* @__PURE__ */ react.createElement("option", {
      value: 0
    }, "choisir"), this.state.obj && this.state.obj.map((ob) => /* @__PURE__ */ react.createElement("option", {
      key: ob.id,
      value: ob.id
    }, ob.name, " ($", ob.price, ")"))), /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      type: "submit"
    }, "valider"))), /* @__PURE__ */ react.createElement("section", {
      className: "list-content"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "list"
    }, !this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    })), this.state.data && this.state.list && this.state.list.map((item) => /* @__PURE__ */ react.createElement("div", {
      className: "row"
    }, /* @__PURE__ */ react.createElement("h5", null, dateformat(item.created_at, "dd/mm/yyyy"), " | ", item.get_item.name, " $", item.get_item.price), /* @__PURE__ */ react.createElement("button", {
      onClick: () => {
        this.delete(item.id);
      }
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/cancel.png",
      alt: ""
    })))))));
  }
}
class Adminview extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      list: [],
      weeknumber: null,
      maxweek: 1,
      data: false
    };
    this.getdata = this.getdata.bind(this);
    this.changeweek = this.changeweek.bind(this);
  }
  async getdata(first = false) {
    var req = await axios({
      url: "/data/remboursements/get/admin/" + (this.state.weeknumber === null ? "" : this.state.weeknumber),
      method: "get"
    });
    this.setState({
      maxweek: req.data.maxweek,
      list: req.data.list,
      data: true
    });
    if (first) {
      this.setState({weeknumber: req.data.maxweek});
    }
  }
  changeweek(e) {
    e.preventDefault();
    this.getdata();
  }
  componentDidMount() {
    this.getdata(true);
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "adminview"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "table-head"
    }, /* @__PURE__ */ react.createElement("form", {
      onSubmit: this.changeweek
    }, /* @__PURE__ */ react.createElement("label", null, "Semaine n\xB0"), /* @__PURE__ */ react.createElement("input", {
      type: "number",
      value: this.state.weeknumber,
      max: this.state.maxweek,
      min: 1,
      onChange: (e) => {
        this.setState({weeknumber: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("button", {
      className: "btn"
    }, "Valider"))), !this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "load"
    }, /* @__PURE__ */ react.createElement("img", {
      src: "/assets/images/loading.svg",
      alt: ""
    })), this.state.data && /* @__PURE__ */ react.createElement("div", {
      className: "table-container"
    }, /* @__PURE__ */ react.createElement("table", null, /* @__PURE__ */ react.createElement("thead", null, /* @__PURE__ */ react.createElement("tr", null, /* @__PURE__ */ react.createElement("td", {
      className: "head id"
    }, "id"), /* @__PURE__ */ react.createElement("td", {
      className: "head pseudo"
    }, "pseudo"), /* @__PURE__ */ react.createElement("td", {
      className: "head total"
    }, "total en $"))), /* @__PURE__ */ react.createElement("tbody", null, this.state.list && this.state.list.map((item) => /* @__PURE__ */ react.createElement("tr", {
      key: item.id
    }, /* @__PURE__ */ react.createElement("td", {
      className: "id"
    }, item.id), /* @__PURE__ */ react.createElement("td", {
      className: "pseudo"
    }, item.get_user.name), /* @__PURE__ */ react.createElement("td", {
      className: "total"
    }, "$", item.total)))))));
  }
}
class Remboursement extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      recap: false,
      me: true
    };
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "remboursement"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "title-contain"
    }, /* @__PURE__ */ react.createElement("h1", null, "remboursement")), /* @__PURE__ */ react.createElement("div", {
      className: "MainContainer"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "selector"
    }, /* @__PURE__ */ react.createElement("button", {
      onClick: () => this.setState({recap: false, me: true}),
      className: this.state.me ? "" : "unselected"
    }, "mes remboursements"), /* @__PURE__ */ react.createElement("button", {
      onClick: () => this.setState({recap: true, me: false}),
      className: this.state.recap ? "" : "unselected"
    }, "r\xE9capitulatif")), this.state.me && /* @__PURE__ */ react.createElement(Myview, null), this.state.recap && /* @__PURE__ */ react.createElement(Adminview, null)));
  }
}
class BugRepport extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      text: ""
    };
    this.submit = this.submit.bind(this);
  }
  async submit(e) {
    e.preventDefault();
    let req = await axios({
      url: "/data/bug",
      method: "POST",
      data: {
        text: this.state.text
      }
    });
    if (req.status === 201) {
      this.props.close();
    }
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "BugRepport"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "Repport-Card"
    }, /* @__PURE__ */ react.createElement("h1", null, "Signaler un bug"), /* @__PURE__ */ react.createElement("form", {
      onSubmit: this.submit
    }, /* @__PURE__ */ react.createElement("label", null, "Description : "), /* @__PURE__ */ react.createElement("textarea", {
      value: this.state.text,
      onChange: (e) => {
        this.setState({text: e.target.value});
      }
    }), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      onClick: () => this.props.close()
    }, "Fermer"), /* @__PURE__ */ react.createElement("button", {
      className: "btn",
      type: "submit"
    }, "Envoyer")))));
  }
}
var animate = `@charset "UTF-8";/*!
 * animate.css - https://animate.style/
 * Version - 4.1.1
 * Licensed under the MIT license - http://opensource.org/licenses/MIT
 *
 * Copyright (c) 2020 Animate.css
 */
:root {
  --animate-duration: 1s;
  --animate-delay: 1s;
  --animate-repeat: 1;
}
.animate__animated {
  -webkit-animation-duration: 1s;
  animation-duration: 1s;
  -webkit-animation-duration: var(--animate-duration);
  animation-duration: var(--animate-duration);
  -webkit-animation-fill-mode: both;
  animation-fill-mode: both;
}
.animate__animated.animate__infinite {
  -webkit-animation-iteration-count: infinite;
  animation-iteration-count: infinite;
}
.animate__animated.animate__repeat-1 {
  -webkit-animation-iteration-count: 1;
  animation-iteration-count: 1;
  -webkit-animation-iteration-count: var(--animate-repeat);
  animation-iteration-count: var(--animate-repeat);
}
.animate__animated.animate__repeat-2 {
  -webkit-animation-iteration-count: calc(1 * 2);
  animation-iteration-count: calc(1 * 2);
  -webkit-animation-iteration-count: calc(var(--animate-repeat) * 2);
  animation-iteration-count: calc(var(--animate-repeat) * 2);
}
.animate__animated.animate__repeat-3 {
  -webkit-animation-iteration-count: calc(1 * 3);
  animation-iteration-count: calc(1 * 3);
  -webkit-animation-iteration-count: calc(var(--animate-repeat) * 3);
  animation-iteration-count: calc(var(--animate-repeat) * 3);
}
.animate__animated.animate__delay-1s {
  -webkit-animation-delay: 1s;
  animation-delay: 1s;
  -webkit-animation-delay: var(--animate-delay);
  animation-delay: var(--animate-delay);
}
.animate__animated.animate__delay-2s {
  -webkit-animation-delay: calc(1s * 2);
  animation-delay: calc(1s * 2);
  -webkit-animation-delay: calc(var(--animate-delay) * 2);
  animation-delay: calc(var(--animate-delay) * 2);
}
.animate__animated.animate__delay-3s {
  -webkit-animation-delay: calc(1s * 3);
  animation-delay: calc(1s * 3);
  -webkit-animation-delay: calc(var(--animate-delay) * 3);
  animation-delay: calc(var(--animate-delay) * 3);
}
.animate__animated.animate__delay-4s {
  -webkit-animation-delay: calc(1s * 4);
  animation-delay: calc(1s * 4);
  -webkit-animation-delay: calc(var(--animate-delay) * 4);
  animation-delay: calc(var(--animate-delay) * 4);
}
.animate__animated.animate__delay-5s {
  -webkit-animation-delay: calc(1s * 5);
  animation-delay: calc(1s * 5);
  -webkit-animation-delay: calc(var(--animate-delay) * 5);
  animation-delay: calc(var(--animate-delay) * 5);
}
.animate__animated.animate__faster {
  -webkit-animation-duration: calc(1s / 2);
  animation-duration: calc(1s / 2);
  -webkit-animation-duration: calc(var(--animate-duration) / 2);
  animation-duration: calc(var(--animate-duration) / 2);
}
.animate__animated.animate__fast {
  -webkit-animation-duration: calc(1s * 0.8);
  animation-duration: calc(1s * 0.8);
  -webkit-animation-duration: calc(var(--animate-duration) * 0.8);
  animation-duration: calc(var(--animate-duration) * 0.8);
}
.animate__animated.animate__slow {
  -webkit-animation-duration: calc(1s * 2);
  animation-duration: calc(1s * 2);
  -webkit-animation-duration: calc(var(--animate-duration) * 2);
  animation-duration: calc(var(--animate-duration) * 2);
}
.animate__animated.animate__slower {
  -webkit-animation-duration: calc(1s * 3);
  animation-duration: calc(1s * 3);
  -webkit-animation-duration: calc(var(--animate-duration) * 3);
  animation-duration: calc(var(--animate-duration) * 3);
}
@media print, (prefers-reduced-motion: reduce) {
  .animate__animated {
    -webkit-animation-duration: 1ms !important;
    animation-duration: 1ms !important;
    -webkit-transition-duration: 1ms !important;
    transition-duration: 1ms !important;
    -webkit-animation-iteration-count: 1 !important;
    animation-iteration-count: 1 !important;
  }

  .animate__animated[class*='Out'] {
    opacity: 0;
  }
}
/* Attention seekers  */
@-webkit-keyframes bounce {
  from,
  20%,
  53%,
  to {
    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  40%,
  43% {
    -webkit-animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    -webkit-transform: translate3d(0, -30px, 0) scaleY(1.1);
    transform: translate3d(0, -30px, 0) scaleY(1.1);
  }

  70% {
    -webkit-animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    -webkit-transform: translate3d(0, -15px, 0) scaleY(1.05);
    transform: translate3d(0, -15px, 0) scaleY(1.05);
  }

  80% {
    -webkit-transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    -webkit-transform: translate3d(0, 0, 0) scaleY(0.95);
    transform: translate3d(0, 0, 0) scaleY(0.95);
  }

  90% {
    -webkit-transform: translate3d(0, -4px, 0) scaleY(1.02);
    transform: translate3d(0, -4px, 0) scaleY(1.02);
  }
}
@keyframes bounce {
  from,
  20%,
  53%,
  to {
    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  40%,
  43% {
    -webkit-animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    -webkit-transform: translate3d(0, -30px, 0) scaleY(1.1);
    transform: translate3d(0, -30px, 0) scaleY(1.1);
  }

  70% {
    -webkit-animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    -webkit-transform: translate3d(0, -15px, 0) scaleY(1.05);
    transform: translate3d(0, -15px, 0) scaleY(1.05);
  }

  80% {
    -webkit-transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    -webkit-transform: translate3d(0, 0, 0) scaleY(0.95);
    transform: translate3d(0, 0, 0) scaleY(0.95);
  }

  90% {
    -webkit-transform: translate3d(0, -4px, 0) scaleY(1.02);
    transform: translate3d(0, -4px, 0) scaleY(1.02);
  }
}
.animate__bounce {
  -webkit-animation-name: bounce;
  animation-name: bounce;
  -webkit-transform-origin: center bottom;
  transform-origin: center bottom;
}
@-webkit-keyframes flash {
  from,
  50%,
  to {
    opacity: 1;
  }

  25%,
  75% {
    opacity: 0;
  }
}
@keyframes flash {
  from,
  50%,
  to {
    opacity: 1;
  }

  25%,
  75% {
    opacity: 0;
  }
}
.animate__flash {
  -webkit-animation-name: flash;
  animation-name: flash;
}
/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */
@-webkit-keyframes pulse {
  from {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }

  50% {
    -webkit-transform: scale3d(1.05, 1.05, 1.05);
    transform: scale3d(1.05, 1.05, 1.05);
  }

  to {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }
}
@keyframes pulse {
  from {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }

  50% {
    -webkit-transform: scale3d(1.05, 1.05, 1.05);
    transform: scale3d(1.05, 1.05, 1.05);
  }

  to {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }
}
.animate__pulse {
  -webkit-animation-name: pulse;
  animation-name: pulse;
  -webkit-animation-timing-function: ease-in-out;
  animation-timing-function: ease-in-out;
}
@-webkit-keyframes rubberBand {
  from {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }

  30% {
    -webkit-transform: scale3d(1.25, 0.75, 1);
    transform: scale3d(1.25, 0.75, 1);
  }

  40% {
    -webkit-transform: scale3d(0.75, 1.25, 1);
    transform: scale3d(0.75, 1.25, 1);
  }

  50% {
    -webkit-transform: scale3d(1.15, 0.85, 1);
    transform: scale3d(1.15, 0.85, 1);
  }

  65% {
    -webkit-transform: scale3d(0.95, 1.05, 1);
    transform: scale3d(0.95, 1.05, 1);
  }

  75% {
    -webkit-transform: scale3d(1.05, 0.95, 1);
    transform: scale3d(1.05, 0.95, 1);
  }

  to {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }
}
@keyframes rubberBand {
  from {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }

  30% {
    -webkit-transform: scale3d(1.25, 0.75, 1);
    transform: scale3d(1.25, 0.75, 1);
  }

  40% {
    -webkit-transform: scale3d(0.75, 1.25, 1);
    transform: scale3d(0.75, 1.25, 1);
  }

  50% {
    -webkit-transform: scale3d(1.15, 0.85, 1);
    transform: scale3d(1.15, 0.85, 1);
  }

  65% {
    -webkit-transform: scale3d(0.95, 1.05, 1);
    transform: scale3d(0.95, 1.05, 1);
  }

  75% {
    -webkit-transform: scale3d(1.05, 0.95, 1);
    transform: scale3d(1.05, 0.95, 1);
  }

  to {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }
}
.animate__rubberBand {
  -webkit-animation-name: rubberBand;
  animation-name: rubberBand;
}
@-webkit-keyframes shakeX {
  from,
  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  10%,
  30%,
  50%,
  70%,
  90% {
    -webkit-transform: translate3d(-10px, 0, 0);
    transform: translate3d(-10px, 0, 0);
  }

  20%,
  40%,
  60%,
  80% {
    -webkit-transform: translate3d(10px, 0, 0);
    transform: translate3d(10px, 0, 0);
  }
}
@keyframes shakeX {
  from,
  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  10%,
  30%,
  50%,
  70%,
  90% {
    -webkit-transform: translate3d(-10px, 0, 0);
    transform: translate3d(-10px, 0, 0);
  }

  20%,
  40%,
  60%,
  80% {
    -webkit-transform: translate3d(10px, 0, 0);
    transform: translate3d(10px, 0, 0);
  }
}
.animate__shakeX {
  -webkit-animation-name: shakeX;
  animation-name: shakeX;
}
@-webkit-keyframes shakeY {
  from,
  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  10%,
  30%,
  50%,
  70%,
  90% {
    -webkit-transform: translate3d(0, -10px, 0);
    transform: translate3d(0, -10px, 0);
  }

  20%,
  40%,
  60%,
  80% {
    -webkit-transform: translate3d(0, 10px, 0);
    transform: translate3d(0, 10px, 0);
  }
}
@keyframes shakeY {
  from,
  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  10%,
  30%,
  50%,
  70%,
  90% {
    -webkit-transform: translate3d(0, -10px, 0);
    transform: translate3d(0, -10px, 0);
  }

  20%,
  40%,
  60%,
  80% {
    -webkit-transform: translate3d(0, 10px, 0);
    transform: translate3d(0, 10px, 0);
  }
}
.animate__shakeY {
  -webkit-animation-name: shakeY;
  animation-name: shakeY;
}
@-webkit-keyframes headShake {
  0% {
    -webkit-transform: translateX(0);
    transform: translateX(0);
  }

  6.5% {
    -webkit-transform: translateX(-6px) rotateY(-9deg);
    transform: translateX(-6px) rotateY(-9deg);
  }

  18.5% {
    -webkit-transform: translateX(5px) rotateY(7deg);
    transform: translateX(5px) rotateY(7deg);
  }

  31.5% {
    -webkit-transform: translateX(-3px) rotateY(-5deg);
    transform: translateX(-3px) rotateY(-5deg);
  }

  43.5% {
    -webkit-transform: translateX(2px) rotateY(3deg);
    transform: translateX(2px) rotateY(3deg);
  }

  50% {
    -webkit-transform: translateX(0);
    transform: translateX(0);
  }
}
@keyframes headShake {
  0% {
    -webkit-transform: translateX(0);
    transform: translateX(0);
  }

  6.5% {
    -webkit-transform: translateX(-6px) rotateY(-9deg);
    transform: translateX(-6px) rotateY(-9deg);
  }

  18.5% {
    -webkit-transform: translateX(5px) rotateY(7deg);
    transform: translateX(5px) rotateY(7deg);
  }

  31.5% {
    -webkit-transform: translateX(-3px) rotateY(-5deg);
    transform: translateX(-3px) rotateY(-5deg);
  }

  43.5% {
    -webkit-transform: translateX(2px) rotateY(3deg);
    transform: translateX(2px) rotateY(3deg);
  }

  50% {
    -webkit-transform: translateX(0);
    transform: translateX(0);
  }
}
.animate__headShake {
  -webkit-animation-timing-function: ease-in-out;
  animation-timing-function: ease-in-out;
  -webkit-animation-name: headShake;
  animation-name: headShake;
}
@-webkit-keyframes swing {
  20% {
    -webkit-transform: rotate3d(0, 0, 1, 15deg);
    transform: rotate3d(0, 0, 1, 15deg);
  }

  40% {
    -webkit-transform: rotate3d(0, 0, 1, -10deg);
    transform: rotate3d(0, 0, 1, -10deg);
  }

  60% {
    -webkit-transform: rotate3d(0, 0, 1, 5deg);
    transform: rotate3d(0, 0, 1, 5deg);
  }

  80% {
    -webkit-transform: rotate3d(0, 0, 1, -5deg);
    transform: rotate3d(0, 0, 1, -5deg);
  }

  to {
    -webkit-transform: rotate3d(0, 0, 1, 0deg);
    transform: rotate3d(0, 0, 1, 0deg);
  }
}
@keyframes swing {
  20% {
    -webkit-transform: rotate3d(0, 0, 1, 15deg);
    transform: rotate3d(0, 0, 1, 15deg);
  }

  40% {
    -webkit-transform: rotate3d(0, 0, 1, -10deg);
    transform: rotate3d(0, 0, 1, -10deg);
  }

  60% {
    -webkit-transform: rotate3d(0, 0, 1, 5deg);
    transform: rotate3d(0, 0, 1, 5deg);
  }

  80% {
    -webkit-transform: rotate3d(0, 0, 1, -5deg);
    transform: rotate3d(0, 0, 1, -5deg);
  }

  to {
    -webkit-transform: rotate3d(0, 0, 1, 0deg);
    transform: rotate3d(0, 0, 1, 0deg);
  }
}
.animate__swing {
  -webkit-transform-origin: top center;
  transform-origin: top center;
  -webkit-animation-name: swing;
  animation-name: swing;
}
@-webkit-keyframes tada {
  from {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }

  10%,
  20% {
    -webkit-transform: scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg);
    transform: scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg);
  }

  30%,
  50%,
  70%,
  90% {
    -webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);
    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);
  }

  40%,
  60%,
  80% {
    -webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);
    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);
  }

  to {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }
}
@keyframes tada {
  from {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }

  10%,
  20% {
    -webkit-transform: scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg);
    transform: scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg);
  }

  30%,
  50%,
  70%,
  90% {
    -webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);
    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);
  }

  40%,
  60%,
  80% {
    -webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);
    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);
  }

  to {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }
}
.animate__tada {
  -webkit-animation-name: tada;
  animation-name: tada;
}
/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */
@-webkit-keyframes wobble {
  from {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  15% {
    -webkit-transform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg);
    transform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg);
  }

  30% {
    -webkit-transform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg);
    transform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg);
  }

  45% {
    -webkit-transform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg);
    transform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg);
  }

  60% {
    -webkit-transform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg);
    transform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg);
  }

  75% {
    -webkit-transform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg);
    transform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg);
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes wobble {
  from {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  15% {
    -webkit-transform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg);
    transform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg);
  }

  30% {
    -webkit-transform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg);
    transform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg);
  }

  45% {
    -webkit-transform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg);
    transform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg);
  }

  60% {
    -webkit-transform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg);
    transform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg);
  }

  75% {
    -webkit-transform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg);
    transform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg);
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__wobble {
  -webkit-animation-name: wobble;
  animation-name: wobble;
}
@-webkit-keyframes jello {
  from,
  11.1%,
  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  22.2% {
    -webkit-transform: skewX(-12.5deg) skewY(-12.5deg);
    transform: skewX(-12.5deg) skewY(-12.5deg);
  }

  33.3% {
    -webkit-transform: skewX(6.25deg) skewY(6.25deg);
    transform: skewX(6.25deg) skewY(6.25deg);
  }

  44.4% {
    -webkit-transform: skewX(-3.125deg) skewY(-3.125deg);
    transform: skewX(-3.125deg) skewY(-3.125deg);
  }

  55.5% {
    -webkit-transform: skewX(1.5625deg) skewY(1.5625deg);
    transform: skewX(1.5625deg) skewY(1.5625deg);
  }

  66.6% {
    -webkit-transform: skewX(-0.78125deg) skewY(-0.78125deg);
    transform: skewX(-0.78125deg) skewY(-0.78125deg);
  }

  77.7% {
    -webkit-transform: skewX(0.390625deg) skewY(0.390625deg);
    transform: skewX(0.390625deg) skewY(0.390625deg);
  }

  88.8% {
    -webkit-transform: skewX(-0.1953125deg) skewY(-0.1953125deg);
    transform: skewX(-0.1953125deg) skewY(-0.1953125deg);
  }
}
@keyframes jello {
  from,
  11.1%,
  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  22.2% {
    -webkit-transform: skewX(-12.5deg) skewY(-12.5deg);
    transform: skewX(-12.5deg) skewY(-12.5deg);
  }

  33.3% {
    -webkit-transform: skewX(6.25deg) skewY(6.25deg);
    transform: skewX(6.25deg) skewY(6.25deg);
  }

  44.4% {
    -webkit-transform: skewX(-3.125deg) skewY(-3.125deg);
    transform: skewX(-3.125deg) skewY(-3.125deg);
  }

  55.5% {
    -webkit-transform: skewX(1.5625deg) skewY(1.5625deg);
    transform: skewX(1.5625deg) skewY(1.5625deg);
  }

  66.6% {
    -webkit-transform: skewX(-0.78125deg) skewY(-0.78125deg);
    transform: skewX(-0.78125deg) skewY(-0.78125deg);
  }

  77.7% {
    -webkit-transform: skewX(0.390625deg) skewY(0.390625deg);
    transform: skewX(0.390625deg) skewY(0.390625deg);
  }

  88.8% {
    -webkit-transform: skewX(-0.1953125deg) skewY(-0.1953125deg);
    transform: skewX(-0.1953125deg) skewY(-0.1953125deg);
  }
}
.animate__jello {
  -webkit-animation-name: jello;
  animation-name: jello;
  -webkit-transform-origin: center;
  transform-origin: center;
}
@-webkit-keyframes heartBeat {
  0% {
    -webkit-transform: scale(1);
    transform: scale(1);
  }

  14% {
    -webkit-transform: scale(1.3);
    transform: scale(1.3);
  }

  28% {
    -webkit-transform: scale(1);
    transform: scale(1);
  }

  42% {
    -webkit-transform: scale(1.3);
    transform: scale(1.3);
  }

  70% {
    -webkit-transform: scale(1);
    transform: scale(1);
  }
}
@keyframes heartBeat {
  0% {
    -webkit-transform: scale(1);
    transform: scale(1);
  }

  14% {
    -webkit-transform: scale(1.3);
    transform: scale(1.3);
  }

  28% {
    -webkit-transform: scale(1);
    transform: scale(1);
  }

  42% {
    -webkit-transform: scale(1.3);
    transform: scale(1.3);
  }

  70% {
    -webkit-transform: scale(1);
    transform: scale(1);
  }
}
.animate__heartBeat {
  -webkit-animation-name: heartBeat;
  animation-name: heartBeat;
  -webkit-animation-duration: calc(1s * 1.3);
  animation-duration: calc(1s * 1.3);
  -webkit-animation-duration: calc(var(--animate-duration) * 1.3);
  animation-duration: calc(var(--animate-duration) * 1.3);
  -webkit-animation-timing-function: ease-in-out;
  animation-timing-function: ease-in-out;
}
/* Back entrances */
@-webkit-keyframes backInDown {
  0% {
    -webkit-transform: translateY(-1200px) scale(0.7);
    transform: translateY(-1200px) scale(0.7);
    opacity: 0.7;
  }

  80% {
    -webkit-transform: translateY(0px) scale(0.7);
    transform: translateY(0px) scale(0.7);
    opacity: 0.7;
  }

  100% {
    -webkit-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }
}
@keyframes backInDown {
  0% {
    -webkit-transform: translateY(-1200px) scale(0.7);
    transform: translateY(-1200px) scale(0.7);
    opacity: 0.7;
  }

  80% {
    -webkit-transform: translateY(0px) scale(0.7);
    transform: translateY(0px) scale(0.7);
    opacity: 0.7;
  }

  100% {
    -webkit-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }
}
.animate__backInDown {
  -webkit-animation-name: backInDown;
  animation-name: backInDown;
}
@-webkit-keyframes backInLeft {
  0% {
    -webkit-transform: translateX(-2000px) scale(0.7);
    transform: translateX(-2000px) scale(0.7);
    opacity: 0.7;
  }

  80% {
    -webkit-transform: translateX(0px) scale(0.7);
    transform: translateX(0px) scale(0.7);
    opacity: 0.7;
  }

  100% {
    -webkit-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }
}
@keyframes backInLeft {
  0% {
    -webkit-transform: translateX(-2000px) scale(0.7);
    transform: translateX(-2000px) scale(0.7);
    opacity: 0.7;
  }

  80% {
    -webkit-transform: translateX(0px) scale(0.7);
    transform: translateX(0px) scale(0.7);
    opacity: 0.7;
  }

  100% {
    -webkit-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }
}
.animate__backInLeft {
  -webkit-animation-name: backInLeft;
  animation-name: backInLeft;
}
@-webkit-keyframes backInRight {
  0% {
    -webkit-transform: translateX(2000px) scale(0.7);
    transform: translateX(2000px) scale(0.7);
    opacity: 0.7;
  }

  80% {
    -webkit-transform: translateX(0px) scale(0.7);
    transform: translateX(0px) scale(0.7);
    opacity: 0.7;
  }

  100% {
    -webkit-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }
}
@keyframes backInRight {
  0% {
    -webkit-transform: translateX(2000px) scale(0.7);
    transform: translateX(2000px) scale(0.7);
    opacity: 0.7;
  }

  80% {
    -webkit-transform: translateX(0px) scale(0.7);
    transform: translateX(0px) scale(0.7);
    opacity: 0.7;
  }

  100% {
    -webkit-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }
}
.animate__backInRight {
  -webkit-animation-name: backInRight;
  animation-name: backInRight;
}
@-webkit-keyframes backInUp {
  0% {
    -webkit-transform: translateY(1200px) scale(0.7);
    transform: translateY(1200px) scale(0.7);
    opacity: 0.7;
  }

  80% {
    -webkit-transform: translateY(0px) scale(0.7);
    transform: translateY(0px) scale(0.7);
    opacity: 0.7;
  }

  100% {
    -webkit-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }
}
@keyframes backInUp {
  0% {
    -webkit-transform: translateY(1200px) scale(0.7);
    transform: translateY(1200px) scale(0.7);
    opacity: 0.7;
  }

  80% {
    -webkit-transform: translateY(0px) scale(0.7);
    transform: translateY(0px) scale(0.7);
    opacity: 0.7;
  }

  100% {
    -webkit-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }
}
.animate__backInUp {
  -webkit-animation-name: backInUp;
  animation-name: backInUp;
}
/* Back exits */
@-webkit-keyframes backOutDown {
  0% {
    -webkit-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }

  20% {
    -webkit-transform: translateY(0px) scale(0.7);
    transform: translateY(0px) scale(0.7);
    opacity: 0.7;
  }

  100% {
    -webkit-transform: translateY(700px) scale(0.7);
    transform: translateY(700px) scale(0.7);
    opacity: 0.7;
  }
}
@keyframes backOutDown {
  0% {
    -webkit-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }

  20% {
    -webkit-transform: translateY(0px) scale(0.7);
    transform: translateY(0px) scale(0.7);
    opacity: 0.7;
  }

  100% {
    -webkit-transform: translateY(700px) scale(0.7);
    transform: translateY(700px) scale(0.7);
    opacity: 0.7;
  }
}
.animate__backOutDown {
  -webkit-animation-name: backOutDown;
  animation-name: backOutDown;
}
@-webkit-keyframes backOutLeft {
  0% {
    -webkit-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }

  20% {
    -webkit-transform: translateX(0px) scale(0.7);
    transform: translateX(0px) scale(0.7);
    opacity: 0.7;
  }

  100% {
    -webkit-transform: translateX(-2000px) scale(0.7);
    transform: translateX(-2000px) scale(0.7);
    opacity: 0.7;
  }
}
@keyframes backOutLeft {
  0% {
    -webkit-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }

  20% {
    -webkit-transform: translateX(0px) scale(0.7);
    transform: translateX(0px) scale(0.7);
    opacity: 0.7;
  }

  100% {
    -webkit-transform: translateX(-2000px) scale(0.7);
    transform: translateX(-2000px) scale(0.7);
    opacity: 0.7;
  }
}
.animate__backOutLeft {
  -webkit-animation-name: backOutLeft;
  animation-name: backOutLeft;
}
@-webkit-keyframes backOutRight {
  0% {
    -webkit-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }

  20% {
    -webkit-transform: translateX(0px) scale(0.7);
    transform: translateX(0px) scale(0.7);
    opacity: 0.7;
  }

  100% {
    -webkit-transform: translateX(2000px) scale(0.7);
    transform: translateX(2000px) scale(0.7);
    opacity: 0.7;
  }
}
@keyframes backOutRight {
  0% {
    -webkit-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }

  20% {
    -webkit-transform: translateX(0px) scale(0.7);
    transform: translateX(0px) scale(0.7);
    opacity: 0.7;
  }

  100% {
    -webkit-transform: translateX(2000px) scale(0.7);
    transform: translateX(2000px) scale(0.7);
    opacity: 0.7;
  }
}
.animate__backOutRight {
  -webkit-animation-name: backOutRight;
  animation-name: backOutRight;
}
@-webkit-keyframes backOutUp {
  0% {
    -webkit-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }

  20% {
    -webkit-transform: translateY(0px) scale(0.7);
    transform: translateY(0px) scale(0.7);
    opacity: 0.7;
  }

  100% {
    -webkit-transform: translateY(-700px) scale(0.7);
    transform: translateY(-700px) scale(0.7);
    opacity: 0.7;
  }
}
@keyframes backOutUp {
  0% {
    -webkit-transform: scale(1);
    transform: scale(1);
    opacity: 1;
  }

  20% {
    -webkit-transform: translateY(0px) scale(0.7);
    transform: translateY(0px) scale(0.7);
    opacity: 0.7;
  }

  100% {
    -webkit-transform: translateY(-700px) scale(0.7);
    transform: translateY(-700px) scale(0.7);
    opacity: 0.7;
  }
}
.animate__backOutUp {
  -webkit-animation-name: backOutUp;
  animation-name: backOutUp;
}
/* Bouncing entrances  */
@-webkit-keyframes bounceIn {
  from,
  20%,
  40%,
  60%,
  80%,
  to {
    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  0% {
    opacity: 0;
    -webkit-transform: scale3d(0.3, 0.3, 0.3);
    transform: scale3d(0.3, 0.3, 0.3);
  }

  20% {
    -webkit-transform: scale3d(1.1, 1.1, 1.1);
    transform: scale3d(1.1, 1.1, 1.1);
  }

  40% {
    -webkit-transform: scale3d(0.9, 0.9, 0.9);
    transform: scale3d(0.9, 0.9, 0.9);
  }

  60% {
    opacity: 1;
    -webkit-transform: scale3d(1.03, 1.03, 1.03);
    transform: scale3d(1.03, 1.03, 1.03);
  }

  80% {
    -webkit-transform: scale3d(0.97, 0.97, 0.97);
    transform: scale3d(0.97, 0.97, 0.97);
  }

  to {
    opacity: 1;
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }
}
@keyframes bounceIn {
  from,
  20%,
  40%,
  60%,
  80%,
  to {
    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  0% {
    opacity: 0;
    -webkit-transform: scale3d(0.3, 0.3, 0.3);
    transform: scale3d(0.3, 0.3, 0.3);
  }

  20% {
    -webkit-transform: scale3d(1.1, 1.1, 1.1);
    transform: scale3d(1.1, 1.1, 1.1);
  }

  40% {
    -webkit-transform: scale3d(0.9, 0.9, 0.9);
    transform: scale3d(0.9, 0.9, 0.9);
  }

  60% {
    opacity: 1;
    -webkit-transform: scale3d(1.03, 1.03, 1.03);
    transform: scale3d(1.03, 1.03, 1.03);
  }

  80% {
    -webkit-transform: scale3d(0.97, 0.97, 0.97);
    transform: scale3d(0.97, 0.97, 0.97);
  }

  to {
    opacity: 1;
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }
}
.animate__bounceIn {
  -webkit-animation-duration: calc(1s * 0.75);
  animation-duration: calc(1s * 0.75);
  -webkit-animation-duration: calc(var(--animate-duration) * 0.75);
  animation-duration: calc(var(--animate-duration) * 0.75);
  -webkit-animation-name: bounceIn;
  animation-name: bounceIn;
}
@-webkit-keyframes bounceInDown {
  from,
  60%,
  75%,
  90%,
  to {
    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  0% {
    opacity: 0;
    -webkit-transform: translate3d(0, -3000px, 0) scaleY(3);
    transform: translate3d(0, -3000px, 0) scaleY(3);
  }

  60% {
    opacity: 1;
    -webkit-transform: translate3d(0, 25px, 0) scaleY(0.9);
    transform: translate3d(0, 25px, 0) scaleY(0.9);
  }

  75% {
    -webkit-transform: translate3d(0, -10px, 0) scaleY(0.95);
    transform: translate3d(0, -10px, 0) scaleY(0.95);
  }

  90% {
    -webkit-transform: translate3d(0, 5px, 0) scaleY(0.985);
    transform: translate3d(0, 5px, 0) scaleY(0.985);
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes bounceInDown {
  from,
  60%,
  75%,
  90%,
  to {
    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  0% {
    opacity: 0;
    -webkit-transform: translate3d(0, -3000px, 0) scaleY(3);
    transform: translate3d(0, -3000px, 0) scaleY(3);
  }

  60% {
    opacity: 1;
    -webkit-transform: translate3d(0, 25px, 0) scaleY(0.9);
    transform: translate3d(0, 25px, 0) scaleY(0.9);
  }

  75% {
    -webkit-transform: translate3d(0, -10px, 0) scaleY(0.95);
    transform: translate3d(0, -10px, 0) scaleY(0.95);
  }

  90% {
    -webkit-transform: translate3d(0, 5px, 0) scaleY(0.985);
    transform: translate3d(0, 5px, 0) scaleY(0.985);
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__bounceInDown {
  -webkit-animation-name: bounceInDown;
  animation-name: bounceInDown;
}
@-webkit-keyframes bounceInLeft {
  from,
  60%,
  75%,
  90%,
  to {
    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  0% {
    opacity: 0;
    -webkit-transform: translate3d(-3000px, 0, 0) scaleX(3);
    transform: translate3d(-3000px, 0, 0) scaleX(3);
  }

  60% {
    opacity: 1;
    -webkit-transform: translate3d(25px, 0, 0) scaleX(1);
    transform: translate3d(25px, 0, 0) scaleX(1);
  }

  75% {
    -webkit-transform: translate3d(-10px, 0, 0) scaleX(0.98);
    transform: translate3d(-10px, 0, 0) scaleX(0.98);
  }

  90% {
    -webkit-transform: translate3d(5px, 0, 0) scaleX(0.995);
    transform: translate3d(5px, 0, 0) scaleX(0.995);
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes bounceInLeft {
  from,
  60%,
  75%,
  90%,
  to {
    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  0% {
    opacity: 0;
    -webkit-transform: translate3d(-3000px, 0, 0) scaleX(3);
    transform: translate3d(-3000px, 0, 0) scaleX(3);
  }

  60% {
    opacity: 1;
    -webkit-transform: translate3d(25px, 0, 0) scaleX(1);
    transform: translate3d(25px, 0, 0) scaleX(1);
  }

  75% {
    -webkit-transform: translate3d(-10px, 0, 0) scaleX(0.98);
    transform: translate3d(-10px, 0, 0) scaleX(0.98);
  }

  90% {
    -webkit-transform: translate3d(5px, 0, 0) scaleX(0.995);
    transform: translate3d(5px, 0, 0) scaleX(0.995);
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__bounceInLeft {
  -webkit-animation-name: bounceInLeft;
  animation-name: bounceInLeft;
}
@-webkit-keyframes bounceInRight {
  from,
  60%,
  75%,
  90%,
  to {
    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  from {
    opacity: 0;
    -webkit-transform: translate3d(3000px, 0, 0) scaleX(3);
    transform: translate3d(3000px, 0, 0) scaleX(3);
  }

  60% {
    opacity: 1;
    -webkit-transform: translate3d(-25px, 0, 0) scaleX(1);
    transform: translate3d(-25px, 0, 0) scaleX(1);
  }

  75% {
    -webkit-transform: translate3d(10px, 0, 0) scaleX(0.98);
    transform: translate3d(10px, 0, 0) scaleX(0.98);
  }

  90% {
    -webkit-transform: translate3d(-5px, 0, 0) scaleX(0.995);
    transform: translate3d(-5px, 0, 0) scaleX(0.995);
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes bounceInRight {
  from,
  60%,
  75%,
  90%,
  to {
    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  from {
    opacity: 0;
    -webkit-transform: translate3d(3000px, 0, 0) scaleX(3);
    transform: translate3d(3000px, 0, 0) scaleX(3);
  }

  60% {
    opacity: 1;
    -webkit-transform: translate3d(-25px, 0, 0) scaleX(1);
    transform: translate3d(-25px, 0, 0) scaleX(1);
  }

  75% {
    -webkit-transform: translate3d(10px, 0, 0) scaleX(0.98);
    transform: translate3d(10px, 0, 0) scaleX(0.98);
  }

  90% {
    -webkit-transform: translate3d(-5px, 0, 0) scaleX(0.995);
    transform: translate3d(-5px, 0, 0) scaleX(0.995);
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__bounceInRight {
  -webkit-animation-name: bounceInRight;
  animation-name: bounceInRight;
}
@-webkit-keyframes bounceInUp {
  from,
  60%,
  75%,
  90%,
  to {
    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  from {
    opacity: 0;
    -webkit-transform: translate3d(0, 3000px, 0) scaleY(5);
    transform: translate3d(0, 3000px, 0) scaleY(5);
  }

  60% {
    opacity: 1;
    -webkit-transform: translate3d(0, -20px, 0) scaleY(0.9);
    transform: translate3d(0, -20px, 0) scaleY(0.9);
  }

  75% {
    -webkit-transform: translate3d(0, 10px, 0) scaleY(0.95);
    transform: translate3d(0, 10px, 0) scaleY(0.95);
  }

  90% {
    -webkit-transform: translate3d(0, -5px, 0) scaleY(0.985);
    transform: translate3d(0, -5px, 0) scaleY(0.985);
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes bounceInUp {
  from,
  60%,
  75%,
  90%,
  to {
    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  from {
    opacity: 0;
    -webkit-transform: translate3d(0, 3000px, 0) scaleY(5);
    transform: translate3d(0, 3000px, 0) scaleY(5);
  }

  60% {
    opacity: 1;
    -webkit-transform: translate3d(0, -20px, 0) scaleY(0.9);
    transform: translate3d(0, -20px, 0) scaleY(0.9);
  }

  75% {
    -webkit-transform: translate3d(0, 10px, 0) scaleY(0.95);
    transform: translate3d(0, 10px, 0) scaleY(0.95);
  }

  90% {
    -webkit-transform: translate3d(0, -5px, 0) scaleY(0.985);
    transform: translate3d(0, -5px, 0) scaleY(0.985);
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__bounceInUp {
  -webkit-animation-name: bounceInUp;
  animation-name: bounceInUp;
}
/* Bouncing exits  */
@-webkit-keyframes bounceOut {
  20% {
    -webkit-transform: scale3d(0.9, 0.9, 0.9);
    transform: scale3d(0.9, 0.9, 0.9);
  }

  50%,
  55% {
    opacity: 1;
    -webkit-transform: scale3d(1.1, 1.1, 1.1);
    transform: scale3d(1.1, 1.1, 1.1);
  }

  to {
    opacity: 0;
    -webkit-transform: scale3d(0.3, 0.3, 0.3);
    transform: scale3d(0.3, 0.3, 0.3);
  }
}
@keyframes bounceOut {
  20% {
    -webkit-transform: scale3d(0.9, 0.9, 0.9);
    transform: scale3d(0.9, 0.9, 0.9);
  }

  50%,
  55% {
    opacity: 1;
    -webkit-transform: scale3d(1.1, 1.1, 1.1);
    transform: scale3d(1.1, 1.1, 1.1);
  }

  to {
    opacity: 0;
    -webkit-transform: scale3d(0.3, 0.3, 0.3);
    transform: scale3d(0.3, 0.3, 0.3);
  }
}
.animate__bounceOut {
  -webkit-animation-duration: calc(1s * 0.75);
  animation-duration: calc(1s * 0.75);
  -webkit-animation-duration: calc(var(--animate-duration) * 0.75);
  animation-duration: calc(var(--animate-duration) * 0.75);
  -webkit-animation-name: bounceOut;
  animation-name: bounceOut;
}
@-webkit-keyframes bounceOutDown {
  20% {
    -webkit-transform: translate3d(0, 10px, 0) scaleY(0.985);
    transform: translate3d(0, 10px, 0) scaleY(0.985);
  }

  40%,
  45% {
    opacity: 1;
    -webkit-transform: translate3d(0, -20px, 0) scaleY(0.9);
    transform: translate3d(0, -20px, 0) scaleY(0.9);
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(0, 2000px, 0) scaleY(3);
    transform: translate3d(0, 2000px, 0) scaleY(3);
  }
}
@keyframes bounceOutDown {
  20% {
    -webkit-transform: translate3d(0, 10px, 0) scaleY(0.985);
    transform: translate3d(0, 10px, 0) scaleY(0.985);
  }

  40%,
  45% {
    opacity: 1;
    -webkit-transform: translate3d(0, -20px, 0) scaleY(0.9);
    transform: translate3d(0, -20px, 0) scaleY(0.9);
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(0, 2000px, 0) scaleY(3);
    transform: translate3d(0, 2000px, 0) scaleY(3);
  }
}
.animate__bounceOutDown {
  -webkit-animation-name: bounceOutDown;
  animation-name: bounceOutDown;
}
@-webkit-keyframes bounceOutLeft {
  20% {
    opacity: 1;
    -webkit-transform: translate3d(20px, 0, 0) scaleX(0.9);
    transform: translate3d(20px, 0, 0) scaleX(0.9);
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(-2000px, 0, 0) scaleX(2);
    transform: translate3d(-2000px, 0, 0) scaleX(2);
  }
}
@keyframes bounceOutLeft {
  20% {
    opacity: 1;
    -webkit-transform: translate3d(20px, 0, 0) scaleX(0.9);
    transform: translate3d(20px, 0, 0) scaleX(0.9);
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(-2000px, 0, 0) scaleX(2);
    transform: translate3d(-2000px, 0, 0) scaleX(2);
  }
}
.animate__bounceOutLeft {
  -webkit-animation-name: bounceOutLeft;
  animation-name: bounceOutLeft;
}
@-webkit-keyframes bounceOutRight {
  20% {
    opacity: 1;
    -webkit-transform: translate3d(-20px, 0, 0) scaleX(0.9);
    transform: translate3d(-20px, 0, 0) scaleX(0.9);
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(2000px, 0, 0) scaleX(2);
    transform: translate3d(2000px, 0, 0) scaleX(2);
  }
}
@keyframes bounceOutRight {
  20% {
    opacity: 1;
    -webkit-transform: translate3d(-20px, 0, 0) scaleX(0.9);
    transform: translate3d(-20px, 0, 0) scaleX(0.9);
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(2000px, 0, 0) scaleX(2);
    transform: translate3d(2000px, 0, 0) scaleX(2);
  }
}
.animate__bounceOutRight {
  -webkit-animation-name: bounceOutRight;
  animation-name: bounceOutRight;
}
@-webkit-keyframes bounceOutUp {
  20% {
    -webkit-transform: translate3d(0, -10px, 0) scaleY(0.985);
    transform: translate3d(0, -10px, 0) scaleY(0.985);
  }

  40%,
  45% {
    opacity: 1;
    -webkit-transform: translate3d(0, 20px, 0) scaleY(0.9);
    transform: translate3d(0, 20px, 0) scaleY(0.9);
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(0, -2000px, 0) scaleY(3);
    transform: translate3d(0, -2000px, 0) scaleY(3);
  }
}
@keyframes bounceOutUp {
  20% {
    -webkit-transform: translate3d(0, -10px, 0) scaleY(0.985);
    transform: translate3d(0, -10px, 0) scaleY(0.985);
  }

  40%,
  45% {
    opacity: 1;
    -webkit-transform: translate3d(0, 20px, 0) scaleY(0.9);
    transform: translate3d(0, 20px, 0) scaleY(0.9);
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(0, -2000px, 0) scaleY(3);
    transform: translate3d(0, -2000px, 0) scaleY(3);
  }
}
.animate__bounceOutUp {
  -webkit-animation-name: bounceOutUp;
  animation-name: bounceOutUp;
}
/* Fading entrances  */
@-webkit-keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}
@keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}
.animate__fadeIn {
  -webkit-animation-name: fadeIn;
  animation-name: fadeIn;
}
@-webkit-keyframes fadeInDown {
  from {
    opacity: 0;
    -webkit-transform: translate3d(0, -100%, 0);
    transform: translate3d(0, -100%, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes fadeInDown {
  from {
    opacity: 0;
    -webkit-transform: translate3d(0, -100%, 0);
    transform: translate3d(0, -100%, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__fadeInDown {
  -webkit-animation-name: fadeInDown;
  animation-name: fadeInDown;
}
@-webkit-keyframes fadeInDownBig {
  from {
    opacity: 0;
    -webkit-transform: translate3d(0, -2000px, 0);
    transform: translate3d(0, -2000px, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes fadeInDownBig {
  from {
    opacity: 0;
    -webkit-transform: translate3d(0, -2000px, 0);
    transform: translate3d(0, -2000px, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__fadeInDownBig {
  -webkit-animation-name: fadeInDownBig;
  animation-name: fadeInDownBig;
}
@-webkit-keyframes fadeInLeft {
  from {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 0, 0);
    transform: translate3d(-100%, 0, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes fadeInLeft {
  from {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 0, 0);
    transform: translate3d(-100%, 0, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__fadeInLeft {
  -webkit-animation-name: fadeInLeft;
  animation-name: fadeInLeft;
}
@-webkit-keyframes fadeInLeftBig {
  from {
    opacity: 0;
    -webkit-transform: translate3d(-2000px, 0, 0);
    transform: translate3d(-2000px, 0, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes fadeInLeftBig {
  from {
    opacity: 0;
    -webkit-transform: translate3d(-2000px, 0, 0);
    transform: translate3d(-2000px, 0, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__fadeInLeftBig {
  -webkit-animation-name: fadeInLeftBig;
  animation-name: fadeInLeftBig;
}
@-webkit-keyframes fadeInRight {
  from {
    opacity: 0;
    -webkit-transform: translate3d(100%, 0, 0);
    transform: translate3d(100%, 0, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes fadeInRight {
  from {
    opacity: 0;
    -webkit-transform: translate3d(100%, 0, 0);
    transform: translate3d(100%, 0, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__fadeInRight {
  -webkit-animation-name: fadeInRight;
  animation-name: fadeInRight;
}
@-webkit-keyframes fadeInRightBig {
  from {
    opacity: 0;
    -webkit-transform: translate3d(2000px, 0, 0);
    transform: translate3d(2000px, 0, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes fadeInRightBig {
  from {
    opacity: 0;
    -webkit-transform: translate3d(2000px, 0, 0);
    transform: translate3d(2000px, 0, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__fadeInRightBig {
  -webkit-animation-name: fadeInRightBig;
  animation-name: fadeInRightBig;
}
@-webkit-keyframes fadeInUp {
  from {
    opacity: 0;
    -webkit-transform: translate3d(0, 100%, 0);
    transform: translate3d(0, 100%, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes fadeInUp {
  from {
    opacity: 0;
    -webkit-transform: translate3d(0, 100%, 0);
    transform: translate3d(0, 100%, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__fadeInUp {
  -webkit-animation-name: fadeInUp;
  animation-name: fadeInUp;
}
@-webkit-keyframes fadeInUpBig {
  from {
    opacity: 0;
    -webkit-transform: translate3d(0, 2000px, 0);
    transform: translate3d(0, 2000px, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes fadeInUpBig {
  from {
    opacity: 0;
    -webkit-transform: translate3d(0, 2000px, 0);
    transform: translate3d(0, 2000px, 0);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__fadeInUpBig {
  -webkit-animation-name: fadeInUpBig;
  animation-name: fadeInUpBig;
}
@-webkit-keyframes fadeInTopLeft {
  from {
    opacity: 0;
    -webkit-transform: translate3d(-100%, -100%, 0);
    transform: translate3d(-100%, -100%, 0);
  }
  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes fadeInTopLeft {
  from {
    opacity: 0;
    -webkit-transform: translate3d(-100%, -100%, 0);
    transform: translate3d(-100%, -100%, 0);
  }
  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__fadeInTopLeft {
  -webkit-animation-name: fadeInTopLeft;
  animation-name: fadeInTopLeft;
}
@-webkit-keyframes fadeInTopRight {
  from {
    opacity: 0;
    -webkit-transform: translate3d(100%, -100%, 0);
    transform: translate3d(100%, -100%, 0);
  }
  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes fadeInTopRight {
  from {
    opacity: 0;
    -webkit-transform: translate3d(100%, -100%, 0);
    transform: translate3d(100%, -100%, 0);
  }
  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__fadeInTopRight {
  -webkit-animation-name: fadeInTopRight;
  animation-name: fadeInTopRight;
}
@-webkit-keyframes fadeInBottomLeft {
  from {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 100%, 0);
    transform: translate3d(-100%, 100%, 0);
  }
  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes fadeInBottomLeft {
  from {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 100%, 0);
    transform: translate3d(-100%, 100%, 0);
  }
  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__fadeInBottomLeft {
  -webkit-animation-name: fadeInBottomLeft;
  animation-name: fadeInBottomLeft;
}
@-webkit-keyframes fadeInBottomRight {
  from {
    opacity: 0;
    -webkit-transform: translate3d(100%, 100%, 0);
    transform: translate3d(100%, 100%, 0);
  }
  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes fadeInBottomRight {
  from {
    opacity: 0;
    -webkit-transform: translate3d(100%, 100%, 0);
    transform: translate3d(100%, 100%, 0);
  }
  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__fadeInBottomRight {
  -webkit-animation-name: fadeInBottomRight;
  animation-name: fadeInBottomRight;
}
/* Fading exits */
@-webkit-keyframes fadeOut {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
  }
}
@keyframes fadeOut {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
  }
}
.animate__fadeOut {
  -webkit-animation-name: fadeOut;
  animation-name: fadeOut;
}
@-webkit-keyframes fadeOutDown {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(0, 100%, 0);
    transform: translate3d(0, 100%, 0);
  }
}
@keyframes fadeOutDown {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(0, 100%, 0);
    transform: translate3d(0, 100%, 0);
  }
}
.animate__fadeOutDown {
  -webkit-animation-name: fadeOutDown;
  animation-name: fadeOutDown;
}
@-webkit-keyframes fadeOutDownBig {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(0, 2000px, 0);
    transform: translate3d(0, 2000px, 0);
  }
}
@keyframes fadeOutDownBig {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(0, 2000px, 0);
    transform: translate3d(0, 2000px, 0);
  }
}
.animate__fadeOutDownBig {
  -webkit-animation-name: fadeOutDownBig;
  animation-name: fadeOutDownBig;
}
@-webkit-keyframes fadeOutLeft {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 0, 0);
    transform: translate3d(-100%, 0, 0);
  }
}
@keyframes fadeOutLeft {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 0, 0);
    transform: translate3d(-100%, 0, 0);
  }
}
.animate__fadeOutLeft {
  -webkit-animation-name: fadeOutLeft;
  animation-name: fadeOutLeft;
}
@-webkit-keyframes fadeOutLeftBig {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(-2000px, 0, 0);
    transform: translate3d(-2000px, 0, 0);
  }
}
@keyframes fadeOutLeftBig {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(-2000px, 0, 0);
    transform: translate3d(-2000px, 0, 0);
  }
}
.animate__fadeOutLeftBig {
  -webkit-animation-name: fadeOutLeftBig;
  animation-name: fadeOutLeftBig;
}
@-webkit-keyframes fadeOutRight {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(100%, 0, 0);
    transform: translate3d(100%, 0, 0);
  }
}
@keyframes fadeOutRight {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(100%, 0, 0);
    transform: translate3d(100%, 0, 0);
  }
}
.animate__fadeOutRight {
  -webkit-animation-name: fadeOutRight;
  animation-name: fadeOutRight;
}
@-webkit-keyframes fadeOutRightBig {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(2000px, 0, 0);
    transform: translate3d(2000px, 0, 0);
  }
}
@keyframes fadeOutRightBig {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(2000px, 0, 0);
    transform: translate3d(2000px, 0, 0);
  }
}
.animate__fadeOutRightBig {
  -webkit-animation-name: fadeOutRightBig;
  animation-name: fadeOutRightBig;
}
@-webkit-keyframes fadeOutUp {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(0, -100%, 0);
    transform: translate3d(0, -100%, 0);
  }
}
@keyframes fadeOutUp {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(0, -100%, 0);
    transform: translate3d(0, -100%, 0);
  }
}
.animate__fadeOutUp {
  -webkit-animation-name: fadeOutUp;
  animation-name: fadeOutUp;
}
@-webkit-keyframes fadeOutUpBig {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(0, -2000px, 0);
    transform: translate3d(0, -2000px, 0);
  }
}
@keyframes fadeOutUpBig {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(0, -2000px, 0);
    transform: translate3d(0, -2000px, 0);
  }
}
.animate__fadeOutUpBig {
  -webkit-animation-name: fadeOutUpBig;
  animation-name: fadeOutUpBig;
}
@-webkit-keyframes fadeOutTopLeft {
  from {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
  to {
    opacity: 0;
    -webkit-transform: translate3d(-100%, -100%, 0);
    transform: translate3d(-100%, -100%, 0);
  }
}
@keyframes fadeOutTopLeft {
  from {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
  to {
    opacity: 0;
    -webkit-transform: translate3d(-100%, -100%, 0);
    transform: translate3d(-100%, -100%, 0);
  }
}
.animate__fadeOutTopLeft {
  -webkit-animation-name: fadeOutTopLeft;
  animation-name: fadeOutTopLeft;
}
@-webkit-keyframes fadeOutTopRight {
  from {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
  to {
    opacity: 0;
    -webkit-transform: translate3d(100%, -100%, 0);
    transform: translate3d(100%, -100%, 0);
  }
}
@keyframes fadeOutTopRight {
  from {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
  to {
    opacity: 0;
    -webkit-transform: translate3d(100%, -100%, 0);
    transform: translate3d(100%, -100%, 0);
  }
}
.animate__fadeOutTopRight {
  -webkit-animation-name: fadeOutTopRight;
  animation-name: fadeOutTopRight;
}
@-webkit-keyframes fadeOutBottomRight {
  from {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
  to {
    opacity: 0;
    -webkit-transform: translate3d(100%, 100%, 0);
    transform: translate3d(100%, 100%, 0);
  }
}
@keyframes fadeOutBottomRight {
  from {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
  to {
    opacity: 0;
    -webkit-transform: translate3d(100%, 100%, 0);
    transform: translate3d(100%, 100%, 0);
  }
}
.animate__fadeOutBottomRight {
  -webkit-animation-name: fadeOutBottomRight;
  animation-name: fadeOutBottomRight;
}
@-webkit-keyframes fadeOutBottomLeft {
  from {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
  to {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 100%, 0);
    transform: translate3d(-100%, 100%, 0);
  }
}
@keyframes fadeOutBottomLeft {
  from {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
  to {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 100%, 0);
    transform: translate3d(-100%, 100%, 0);
  }
}
.animate__fadeOutBottomLeft {
  -webkit-animation-name: fadeOutBottomLeft;
  animation-name: fadeOutBottomLeft;
}
/* Flippers */
@-webkit-keyframes flip {
  from {
    -webkit-transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, -360deg);
    transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, -360deg);
    -webkit-animation-timing-function: ease-out;
    animation-timing-function: ease-out;
  }

  40% {
    -webkit-transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px)
      rotate3d(0, 1, 0, -190deg);
    transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px)
      rotate3d(0, 1, 0, -190deg);
    -webkit-animation-timing-function: ease-out;
    animation-timing-function: ease-out;
  }

  50% {
    -webkit-transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px)
      rotate3d(0, 1, 0, -170deg);
    transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px)
      rotate3d(0, 1, 0, -170deg);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
  }

  80% {
    -webkit-transform: perspective(400px) scale3d(0.95, 0.95, 0.95) translate3d(0, 0, 0)
      rotate3d(0, 1, 0, 0deg);
    transform: perspective(400px) scale3d(0.95, 0.95, 0.95) translate3d(0, 0, 0)
      rotate3d(0, 1, 0, 0deg);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
  }

  to {
    -webkit-transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, 0deg);
    transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, 0deg);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
  }
}
@keyframes flip {
  from {
    -webkit-transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, -360deg);
    transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, -360deg);
    -webkit-animation-timing-function: ease-out;
    animation-timing-function: ease-out;
  }

  40% {
    -webkit-transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px)
      rotate3d(0, 1, 0, -190deg);
    transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px)
      rotate3d(0, 1, 0, -190deg);
    -webkit-animation-timing-function: ease-out;
    animation-timing-function: ease-out;
  }

  50% {
    -webkit-transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px)
      rotate3d(0, 1, 0, -170deg);
    transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px)
      rotate3d(0, 1, 0, -170deg);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
  }

  80% {
    -webkit-transform: perspective(400px) scale3d(0.95, 0.95, 0.95) translate3d(0, 0, 0)
      rotate3d(0, 1, 0, 0deg);
    transform: perspective(400px) scale3d(0.95, 0.95, 0.95) translate3d(0, 0, 0)
      rotate3d(0, 1, 0, 0deg);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
  }

  to {
    -webkit-transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, 0deg);
    transform: perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, 0deg);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
  }
}
.animate__animated.animate__flip {
  -webkit-backface-visibility: visible;
  backface-visibility: visible;
  -webkit-animation-name: flip;
  animation-name: flip;
}
@-webkit-keyframes flipInX {
  from {
    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, 90deg);
    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
    opacity: 0;
  }

  40% {
    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, -20deg);
    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
  }

  60% {
    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, 10deg);
    transform: perspective(400px) rotate3d(1, 0, 0, 10deg);
    opacity: 1;
  }

  80% {
    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, -5deg);
    transform: perspective(400px) rotate3d(1, 0, 0, -5deg);
  }

  to {
    -webkit-transform: perspective(400px);
    transform: perspective(400px);
  }
}
@keyframes flipInX {
  from {
    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, 90deg);
    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
    opacity: 0;
  }

  40% {
    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, -20deg);
    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
  }

  60% {
    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, 10deg);
    transform: perspective(400px) rotate3d(1, 0, 0, 10deg);
    opacity: 1;
  }

  80% {
    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, -5deg);
    transform: perspective(400px) rotate3d(1, 0, 0, -5deg);
  }

  to {
    -webkit-transform: perspective(400px);
    transform: perspective(400px);
  }
}
.animate__flipInX {
  -webkit-backface-visibility: visible !important;
  backface-visibility: visible !important;
  -webkit-animation-name: flipInX;
  animation-name: flipInX;
}
@-webkit-keyframes flipInY {
  from {
    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 90deg);
    transform: perspective(400px) rotate3d(0, 1, 0, 90deg);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
    opacity: 0;
  }

  40% {
    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -20deg);
    transform: perspective(400px) rotate3d(0, 1, 0, -20deg);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
  }

  60% {
    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 10deg);
    transform: perspective(400px) rotate3d(0, 1, 0, 10deg);
    opacity: 1;
  }

  80% {
    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -5deg);
    transform: perspective(400px) rotate3d(0, 1, 0, -5deg);
  }

  to {
    -webkit-transform: perspective(400px);
    transform: perspective(400px);
  }
}
@keyframes flipInY {
  from {
    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 90deg);
    transform: perspective(400px) rotate3d(0, 1, 0, 90deg);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
    opacity: 0;
  }

  40% {
    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -20deg);
    transform: perspective(400px) rotate3d(0, 1, 0, -20deg);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
  }

  60% {
    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 10deg);
    transform: perspective(400px) rotate3d(0, 1, 0, 10deg);
    opacity: 1;
  }

  80% {
    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -5deg);
    transform: perspective(400px) rotate3d(0, 1, 0, -5deg);
  }

  to {
    -webkit-transform: perspective(400px);
    transform: perspective(400px);
  }
}
.animate__flipInY {
  -webkit-backface-visibility: visible !important;
  backface-visibility: visible !important;
  -webkit-animation-name: flipInY;
  animation-name: flipInY;
}
@-webkit-keyframes flipOutX {
  from {
    -webkit-transform: perspective(400px);
    transform: perspective(400px);
  }

  30% {
    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, -20deg);
    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);
    opacity: 1;
  }

  to {
    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, 90deg);
    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);
    opacity: 0;
  }
}
@keyframes flipOutX {
  from {
    -webkit-transform: perspective(400px);
    transform: perspective(400px);
  }

  30% {
    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, -20deg);
    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);
    opacity: 1;
  }

  to {
    -webkit-transform: perspective(400px) rotate3d(1, 0, 0, 90deg);
    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);
    opacity: 0;
  }
}
.animate__flipOutX {
  -webkit-animation-duration: calc(1s * 0.75);
  animation-duration: calc(1s * 0.75);
  -webkit-animation-duration: calc(var(--animate-duration) * 0.75);
  animation-duration: calc(var(--animate-duration) * 0.75);
  -webkit-animation-name: flipOutX;
  animation-name: flipOutX;
  -webkit-backface-visibility: visible !important;
  backface-visibility: visible !important;
}
@-webkit-keyframes flipOutY {
  from {
    -webkit-transform: perspective(400px);
    transform: perspective(400px);
  }

  30% {
    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -15deg);
    transform: perspective(400px) rotate3d(0, 1, 0, -15deg);
    opacity: 1;
  }

  to {
    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 90deg);
    transform: perspective(400px) rotate3d(0, 1, 0, 90deg);
    opacity: 0;
  }
}
@keyframes flipOutY {
  from {
    -webkit-transform: perspective(400px);
    transform: perspective(400px);
  }

  30% {
    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, -15deg);
    transform: perspective(400px) rotate3d(0, 1, 0, -15deg);
    opacity: 1;
  }

  to {
    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 90deg);
    transform: perspective(400px) rotate3d(0, 1, 0, 90deg);
    opacity: 0;
  }
}
.animate__flipOutY {
  -webkit-animation-duration: calc(1s * 0.75);
  animation-duration: calc(1s * 0.75);
  -webkit-animation-duration: calc(var(--animate-duration) * 0.75);
  animation-duration: calc(var(--animate-duration) * 0.75);
  -webkit-backface-visibility: visible !important;
  backface-visibility: visible !important;
  -webkit-animation-name: flipOutY;
  animation-name: flipOutY;
}
/* Lightspeed */
@-webkit-keyframes lightSpeedInRight {
  from {
    -webkit-transform: translate3d(100%, 0, 0) skewX(-30deg);
    transform: translate3d(100%, 0, 0) skewX(-30deg);
    opacity: 0;
  }

  60% {
    -webkit-transform: skewX(20deg);
    transform: skewX(20deg);
    opacity: 1;
  }

  80% {
    -webkit-transform: skewX(-5deg);
    transform: skewX(-5deg);
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes lightSpeedInRight {
  from {
    -webkit-transform: translate3d(100%, 0, 0) skewX(-30deg);
    transform: translate3d(100%, 0, 0) skewX(-30deg);
    opacity: 0;
  }

  60% {
    -webkit-transform: skewX(20deg);
    transform: skewX(20deg);
    opacity: 1;
  }

  80% {
    -webkit-transform: skewX(-5deg);
    transform: skewX(-5deg);
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__lightSpeedInRight {
  -webkit-animation-name: lightSpeedInRight;
  animation-name: lightSpeedInRight;
  -webkit-animation-timing-function: ease-out;
  animation-timing-function: ease-out;
}
@-webkit-keyframes lightSpeedInLeft {
  from {
    -webkit-transform: translate3d(-100%, 0, 0) skewX(30deg);
    transform: translate3d(-100%, 0, 0) skewX(30deg);
    opacity: 0;
  }

  60% {
    -webkit-transform: skewX(-20deg);
    transform: skewX(-20deg);
    opacity: 1;
  }

  80% {
    -webkit-transform: skewX(5deg);
    transform: skewX(5deg);
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes lightSpeedInLeft {
  from {
    -webkit-transform: translate3d(-100%, 0, 0) skewX(30deg);
    transform: translate3d(-100%, 0, 0) skewX(30deg);
    opacity: 0;
  }

  60% {
    -webkit-transform: skewX(-20deg);
    transform: skewX(-20deg);
    opacity: 1;
  }

  80% {
    -webkit-transform: skewX(5deg);
    transform: skewX(5deg);
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__lightSpeedInLeft {
  -webkit-animation-name: lightSpeedInLeft;
  animation-name: lightSpeedInLeft;
  -webkit-animation-timing-function: ease-out;
  animation-timing-function: ease-out;
}
@-webkit-keyframes lightSpeedOutRight {
  from {
    opacity: 1;
  }

  to {
    -webkit-transform: translate3d(100%, 0, 0) skewX(30deg);
    transform: translate3d(100%, 0, 0) skewX(30deg);
    opacity: 0;
  }
}
@keyframes lightSpeedOutRight {
  from {
    opacity: 1;
  }

  to {
    -webkit-transform: translate3d(100%, 0, 0) skewX(30deg);
    transform: translate3d(100%, 0, 0) skewX(30deg);
    opacity: 0;
  }
}
.animate__lightSpeedOutRight {
  -webkit-animation-name: lightSpeedOutRight;
  animation-name: lightSpeedOutRight;
  -webkit-animation-timing-function: ease-in;
  animation-timing-function: ease-in;
}
@-webkit-keyframes lightSpeedOutLeft {
  from {
    opacity: 1;
  }

  to {
    -webkit-transform: translate3d(-100%, 0, 0) skewX(-30deg);
    transform: translate3d(-100%, 0, 0) skewX(-30deg);
    opacity: 0;
  }
}
@keyframes lightSpeedOutLeft {
  from {
    opacity: 1;
  }

  to {
    -webkit-transform: translate3d(-100%, 0, 0) skewX(-30deg);
    transform: translate3d(-100%, 0, 0) skewX(-30deg);
    opacity: 0;
  }
}
.animate__lightSpeedOutLeft {
  -webkit-animation-name: lightSpeedOutLeft;
  animation-name: lightSpeedOutLeft;
  -webkit-animation-timing-function: ease-in;
  animation-timing-function: ease-in;
}
/* Rotating entrances */
@-webkit-keyframes rotateIn {
  from {
    -webkit-transform: rotate3d(0, 0, 1, -200deg);
    transform: rotate3d(0, 0, 1, -200deg);
    opacity: 0;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
    opacity: 1;
  }
}
@keyframes rotateIn {
  from {
    -webkit-transform: rotate3d(0, 0, 1, -200deg);
    transform: rotate3d(0, 0, 1, -200deg);
    opacity: 0;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
    opacity: 1;
  }
}
.animate__rotateIn {
  -webkit-animation-name: rotateIn;
  animation-name: rotateIn;
  -webkit-transform-origin: center;
  transform-origin: center;
}
@-webkit-keyframes rotateInDownLeft {
  from {
    -webkit-transform: rotate3d(0, 0, 1, -45deg);
    transform: rotate3d(0, 0, 1, -45deg);
    opacity: 0;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
    opacity: 1;
  }
}
@keyframes rotateInDownLeft {
  from {
    -webkit-transform: rotate3d(0, 0, 1, -45deg);
    transform: rotate3d(0, 0, 1, -45deg);
    opacity: 0;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
    opacity: 1;
  }
}
.animate__rotateInDownLeft {
  -webkit-animation-name: rotateInDownLeft;
  animation-name: rotateInDownLeft;
  -webkit-transform-origin: left bottom;
  transform-origin: left bottom;
}
@-webkit-keyframes rotateInDownRight {
  from {
    -webkit-transform: rotate3d(0, 0, 1, 45deg);
    transform: rotate3d(0, 0, 1, 45deg);
    opacity: 0;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
    opacity: 1;
  }
}
@keyframes rotateInDownRight {
  from {
    -webkit-transform: rotate3d(0, 0, 1, 45deg);
    transform: rotate3d(0, 0, 1, 45deg);
    opacity: 0;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
    opacity: 1;
  }
}
.animate__rotateInDownRight {
  -webkit-animation-name: rotateInDownRight;
  animation-name: rotateInDownRight;
  -webkit-transform-origin: right bottom;
  transform-origin: right bottom;
}
@-webkit-keyframes rotateInUpLeft {
  from {
    -webkit-transform: rotate3d(0, 0, 1, 45deg);
    transform: rotate3d(0, 0, 1, 45deg);
    opacity: 0;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
    opacity: 1;
  }
}
@keyframes rotateInUpLeft {
  from {
    -webkit-transform: rotate3d(0, 0, 1, 45deg);
    transform: rotate3d(0, 0, 1, 45deg);
    opacity: 0;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
    opacity: 1;
  }
}
.animate__rotateInUpLeft {
  -webkit-animation-name: rotateInUpLeft;
  animation-name: rotateInUpLeft;
  -webkit-transform-origin: left bottom;
  transform-origin: left bottom;
}
@-webkit-keyframes rotateInUpRight {
  from {
    -webkit-transform: rotate3d(0, 0, 1, -90deg);
    transform: rotate3d(0, 0, 1, -90deg);
    opacity: 0;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
    opacity: 1;
  }
}
@keyframes rotateInUpRight {
  from {
    -webkit-transform: rotate3d(0, 0, 1, -90deg);
    transform: rotate3d(0, 0, 1, -90deg);
    opacity: 0;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
    opacity: 1;
  }
}
.animate__rotateInUpRight {
  -webkit-animation-name: rotateInUpRight;
  animation-name: rotateInUpRight;
  -webkit-transform-origin: right bottom;
  transform-origin: right bottom;
}
/* Rotating exits */
@-webkit-keyframes rotateOut {
  from {
    opacity: 1;
  }

  to {
    -webkit-transform: rotate3d(0, 0, 1, 200deg);
    transform: rotate3d(0, 0, 1, 200deg);
    opacity: 0;
  }
}
@keyframes rotateOut {
  from {
    opacity: 1;
  }

  to {
    -webkit-transform: rotate3d(0, 0, 1, 200deg);
    transform: rotate3d(0, 0, 1, 200deg);
    opacity: 0;
  }
}
.animate__rotateOut {
  -webkit-animation-name: rotateOut;
  animation-name: rotateOut;
  -webkit-transform-origin: center;
  transform-origin: center;
}
@-webkit-keyframes rotateOutDownLeft {
  from {
    opacity: 1;
  }

  to {
    -webkit-transform: rotate3d(0, 0, 1, 45deg);
    transform: rotate3d(0, 0, 1, 45deg);
    opacity: 0;
  }
}
@keyframes rotateOutDownLeft {
  from {
    opacity: 1;
  }

  to {
    -webkit-transform: rotate3d(0, 0, 1, 45deg);
    transform: rotate3d(0, 0, 1, 45deg);
    opacity: 0;
  }
}
.animate__rotateOutDownLeft {
  -webkit-animation-name: rotateOutDownLeft;
  animation-name: rotateOutDownLeft;
  -webkit-transform-origin: left bottom;
  transform-origin: left bottom;
}
@-webkit-keyframes rotateOutDownRight {
  from {
    opacity: 1;
  }

  to {
    -webkit-transform: rotate3d(0, 0, 1, -45deg);
    transform: rotate3d(0, 0, 1, -45deg);
    opacity: 0;
  }
}
@keyframes rotateOutDownRight {
  from {
    opacity: 1;
  }

  to {
    -webkit-transform: rotate3d(0, 0, 1, -45deg);
    transform: rotate3d(0, 0, 1, -45deg);
    opacity: 0;
  }
}
.animate__rotateOutDownRight {
  -webkit-animation-name: rotateOutDownRight;
  animation-name: rotateOutDownRight;
  -webkit-transform-origin: right bottom;
  transform-origin: right bottom;
}
@-webkit-keyframes rotateOutUpLeft {
  from {
    opacity: 1;
  }

  to {
    -webkit-transform: rotate3d(0, 0, 1, -45deg);
    transform: rotate3d(0, 0, 1, -45deg);
    opacity: 0;
  }
}
@keyframes rotateOutUpLeft {
  from {
    opacity: 1;
  }

  to {
    -webkit-transform: rotate3d(0, 0, 1, -45deg);
    transform: rotate3d(0, 0, 1, -45deg);
    opacity: 0;
  }
}
.animate__rotateOutUpLeft {
  -webkit-animation-name: rotateOutUpLeft;
  animation-name: rotateOutUpLeft;
  -webkit-transform-origin: left bottom;
  transform-origin: left bottom;
}
@-webkit-keyframes rotateOutUpRight {
  from {
    opacity: 1;
  }

  to {
    -webkit-transform: rotate3d(0, 0, 1, 90deg);
    transform: rotate3d(0, 0, 1, 90deg);
    opacity: 0;
  }
}
@keyframes rotateOutUpRight {
  from {
    opacity: 1;
  }

  to {
    -webkit-transform: rotate3d(0, 0, 1, 90deg);
    transform: rotate3d(0, 0, 1, 90deg);
    opacity: 0;
  }
}
.animate__rotateOutUpRight {
  -webkit-animation-name: rotateOutUpRight;
  animation-name: rotateOutUpRight;
  -webkit-transform-origin: right bottom;
  transform-origin: right bottom;
}
/* Specials */
@-webkit-keyframes hinge {
  0% {
    -webkit-animation-timing-function: ease-in-out;
    animation-timing-function: ease-in-out;
  }

  20%,
  60% {
    -webkit-transform: rotate3d(0, 0, 1, 80deg);
    transform: rotate3d(0, 0, 1, 80deg);
    -webkit-animation-timing-function: ease-in-out;
    animation-timing-function: ease-in-out;
  }

  40%,
  80% {
    -webkit-transform: rotate3d(0, 0, 1, 60deg);
    transform: rotate3d(0, 0, 1, 60deg);
    -webkit-animation-timing-function: ease-in-out;
    animation-timing-function: ease-in-out;
    opacity: 1;
  }

  to {
    -webkit-transform: translate3d(0, 700px, 0);
    transform: translate3d(0, 700px, 0);
    opacity: 0;
  }
}
@keyframes hinge {
  0% {
    -webkit-animation-timing-function: ease-in-out;
    animation-timing-function: ease-in-out;
  }

  20%,
  60% {
    -webkit-transform: rotate3d(0, 0, 1, 80deg);
    transform: rotate3d(0, 0, 1, 80deg);
    -webkit-animation-timing-function: ease-in-out;
    animation-timing-function: ease-in-out;
  }

  40%,
  80% {
    -webkit-transform: rotate3d(0, 0, 1, 60deg);
    transform: rotate3d(0, 0, 1, 60deg);
    -webkit-animation-timing-function: ease-in-out;
    animation-timing-function: ease-in-out;
    opacity: 1;
  }

  to {
    -webkit-transform: translate3d(0, 700px, 0);
    transform: translate3d(0, 700px, 0);
    opacity: 0;
  }
}
.animate__hinge {
  -webkit-animation-duration: calc(1s * 2);
  animation-duration: calc(1s * 2);
  -webkit-animation-duration: calc(var(--animate-duration) * 2);
  animation-duration: calc(var(--animate-duration) * 2);
  -webkit-animation-name: hinge;
  animation-name: hinge;
  -webkit-transform-origin: top left;
  transform-origin: top left;
}
@-webkit-keyframes jackInTheBox {
  from {
    opacity: 0;
    -webkit-transform: scale(0.1) rotate(30deg);
    transform: scale(0.1) rotate(30deg);
    -webkit-transform-origin: center bottom;
    transform-origin: center bottom;
  }

  50% {
    -webkit-transform: rotate(-10deg);
    transform: rotate(-10deg);
  }

  70% {
    -webkit-transform: rotate(3deg);
    transform: rotate(3deg);
  }

  to {
    opacity: 1;
    -webkit-transform: scale(1);
    transform: scale(1);
  }
}
@keyframes jackInTheBox {
  from {
    opacity: 0;
    -webkit-transform: scale(0.1) rotate(30deg);
    transform: scale(0.1) rotate(30deg);
    -webkit-transform-origin: center bottom;
    transform-origin: center bottom;
  }

  50% {
    -webkit-transform: rotate(-10deg);
    transform: rotate(-10deg);
  }

  70% {
    -webkit-transform: rotate(3deg);
    transform: rotate(3deg);
  }

  to {
    opacity: 1;
    -webkit-transform: scale(1);
    transform: scale(1);
  }
}
.animate__jackInTheBox {
  -webkit-animation-name: jackInTheBox;
  animation-name: jackInTheBox;
}
/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */
@-webkit-keyframes rollIn {
  from {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg);
    transform: translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes rollIn {
  from {
    opacity: 0;
    -webkit-transform: translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg);
    transform: translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg);
  }

  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__rollIn {
  -webkit-animation-name: rollIn;
  animation-name: rollIn;
}
/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */
@-webkit-keyframes rollOut {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg);
    transform: translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg);
  }
}
@keyframes rollOut {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
    -webkit-transform: translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg);
    transform: translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg);
  }
}
.animate__rollOut {
  -webkit-animation-name: rollOut;
  animation-name: rollOut;
}
/* Zooming entrances */
@-webkit-keyframes zoomIn {
  from {
    opacity: 0;
    -webkit-transform: scale3d(0.3, 0.3, 0.3);
    transform: scale3d(0.3, 0.3, 0.3);
  }

  50% {
    opacity: 1;
  }
}
@keyframes zoomIn {
  from {
    opacity: 0;
    -webkit-transform: scale3d(0.3, 0.3, 0.3);
    transform: scale3d(0.3, 0.3, 0.3);
  }

  50% {
    opacity: 1;
  }
}
.animate__zoomIn {
  -webkit-animation-name: zoomIn;
  animation-name: zoomIn;
}
@-webkit-keyframes zoomInDown {
  from {
    opacity: 0;
    -webkit-transform: scale3d(0.1, 0.1, 0.1) translate3d(0, -1000px, 0);
    transform: scale3d(0.1, 0.1, 0.1) translate3d(0, -1000px, 0);
    -webkit-animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  }

  60% {
    opacity: 1;
    -webkit-transform: scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0);
    transform: scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0);
    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
  }
}
@keyframes zoomInDown {
  from {
    opacity: 0;
    -webkit-transform: scale3d(0.1, 0.1, 0.1) translate3d(0, -1000px, 0);
    transform: scale3d(0.1, 0.1, 0.1) translate3d(0, -1000px, 0);
    -webkit-animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  }

  60% {
    opacity: 1;
    -webkit-transform: scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0);
    transform: scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0);
    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
  }
}
.animate__zoomInDown {
  -webkit-animation-name: zoomInDown;
  animation-name: zoomInDown;
}
@-webkit-keyframes zoomInLeft {
  from {
    opacity: 0;
    -webkit-transform: scale3d(0.1, 0.1, 0.1) translate3d(-1000px, 0, 0);
    transform: scale3d(0.1, 0.1, 0.1) translate3d(-1000px, 0, 0);
    -webkit-animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  }

  60% {
    opacity: 1;
    -webkit-transform: scale3d(0.475, 0.475, 0.475) translate3d(10px, 0, 0);
    transform: scale3d(0.475, 0.475, 0.475) translate3d(10px, 0, 0);
    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
  }
}
@keyframes zoomInLeft {
  from {
    opacity: 0;
    -webkit-transform: scale3d(0.1, 0.1, 0.1) translate3d(-1000px, 0, 0);
    transform: scale3d(0.1, 0.1, 0.1) translate3d(-1000px, 0, 0);
    -webkit-animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  }

  60% {
    opacity: 1;
    -webkit-transform: scale3d(0.475, 0.475, 0.475) translate3d(10px, 0, 0);
    transform: scale3d(0.475, 0.475, 0.475) translate3d(10px, 0, 0);
    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
  }
}
.animate__zoomInLeft {
  -webkit-animation-name: zoomInLeft;
  animation-name: zoomInLeft;
}
@-webkit-keyframes zoomInRight {
  from {
    opacity: 0;
    -webkit-transform: scale3d(0.1, 0.1, 0.1) translate3d(1000px, 0, 0);
    transform: scale3d(0.1, 0.1, 0.1) translate3d(1000px, 0, 0);
    -webkit-animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  }

  60% {
    opacity: 1;
    -webkit-transform: scale3d(0.475, 0.475, 0.475) translate3d(-10px, 0, 0);
    transform: scale3d(0.475, 0.475, 0.475) translate3d(-10px, 0, 0);
    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
  }
}
@keyframes zoomInRight {
  from {
    opacity: 0;
    -webkit-transform: scale3d(0.1, 0.1, 0.1) translate3d(1000px, 0, 0);
    transform: scale3d(0.1, 0.1, 0.1) translate3d(1000px, 0, 0);
    -webkit-animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  }

  60% {
    opacity: 1;
    -webkit-transform: scale3d(0.475, 0.475, 0.475) translate3d(-10px, 0, 0);
    transform: scale3d(0.475, 0.475, 0.475) translate3d(-10px, 0, 0);
    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
  }
}
.animate__zoomInRight {
  -webkit-animation-name: zoomInRight;
  animation-name: zoomInRight;
}
@-webkit-keyframes zoomInUp {
  from {
    opacity: 0;
    -webkit-transform: scale3d(0.1, 0.1, 0.1) translate3d(0, 1000px, 0);
    transform: scale3d(0.1, 0.1, 0.1) translate3d(0, 1000px, 0);
    -webkit-animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  }

  60% {
    opacity: 1;
    -webkit-transform: scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0);
    transform: scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0);
    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
  }
}
@keyframes zoomInUp {
  from {
    opacity: 0;
    -webkit-transform: scale3d(0.1, 0.1, 0.1) translate3d(0, 1000px, 0);
    transform: scale3d(0.1, 0.1, 0.1) translate3d(0, 1000px, 0);
    -webkit-animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  }

  60% {
    opacity: 1;
    -webkit-transform: scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0);
    transform: scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0);
    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
  }
}
.animate__zoomInUp {
  -webkit-animation-name: zoomInUp;
  animation-name: zoomInUp;
}
/* Zooming exits */
@-webkit-keyframes zoomOut {
  from {
    opacity: 1;
  }

  50% {
    opacity: 0;
    -webkit-transform: scale3d(0.3, 0.3, 0.3);
    transform: scale3d(0.3, 0.3, 0.3);
  }

  to {
    opacity: 0;
  }
}
@keyframes zoomOut {
  from {
    opacity: 1;
  }

  50% {
    opacity: 0;
    -webkit-transform: scale3d(0.3, 0.3, 0.3);
    transform: scale3d(0.3, 0.3, 0.3);
  }

  to {
    opacity: 0;
  }
}
.animate__zoomOut {
  -webkit-animation-name: zoomOut;
  animation-name: zoomOut;
}
@-webkit-keyframes zoomOutDown {
  40% {
    opacity: 1;
    -webkit-transform: scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0);
    transform: scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0);
    -webkit-animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  }

  to {
    opacity: 0;
    -webkit-transform: scale3d(0.1, 0.1, 0.1) translate3d(0, 2000px, 0);
    transform: scale3d(0.1, 0.1, 0.1) translate3d(0, 2000px, 0);
    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
  }
}
@keyframes zoomOutDown {
  40% {
    opacity: 1;
    -webkit-transform: scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0);
    transform: scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0);
    -webkit-animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  }

  to {
    opacity: 0;
    -webkit-transform: scale3d(0.1, 0.1, 0.1) translate3d(0, 2000px, 0);
    transform: scale3d(0.1, 0.1, 0.1) translate3d(0, 2000px, 0);
    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
  }
}
.animate__zoomOutDown {
  -webkit-animation-name: zoomOutDown;
  animation-name: zoomOutDown;
  -webkit-transform-origin: center bottom;
  transform-origin: center bottom;
}
@-webkit-keyframes zoomOutLeft {
  40% {
    opacity: 1;
    -webkit-transform: scale3d(0.475, 0.475, 0.475) translate3d(42px, 0, 0);
    transform: scale3d(0.475, 0.475, 0.475) translate3d(42px, 0, 0);
  }

  to {
    opacity: 0;
    -webkit-transform: scale(0.1) translate3d(-2000px, 0, 0);
    transform: scale(0.1) translate3d(-2000px, 0, 0);
  }
}
@keyframes zoomOutLeft {
  40% {
    opacity: 1;
    -webkit-transform: scale3d(0.475, 0.475, 0.475) translate3d(42px, 0, 0);
    transform: scale3d(0.475, 0.475, 0.475) translate3d(42px, 0, 0);
  }

  to {
    opacity: 0;
    -webkit-transform: scale(0.1) translate3d(-2000px, 0, 0);
    transform: scale(0.1) translate3d(-2000px, 0, 0);
  }
}
.animate__zoomOutLeft {
  -webkit-animation-name: zoomOutLeft;
  animation-name: zoomOutLeft;
  -webkit-transform-origin: left center;
  transform-origin: left center;
}
@-webkit-keyframes zoomOutRight {
  40% {
    opacity: 1;
    -webkit-transform: scale3d(0.475, 0.475, 0.475) translate3d(-42px, 0, 0);
    transform: scale3d(0.475, 0.475, 0.475) translate3d(-42px, 0, 0);
  }

  to {
    opacity: 0;
    -webkit-transform: scale(0.1) translate3d(2000px, 0, 0);
    transform: scale(0.1) translate3d(2000px, 0, 0);
  }
}
@keyframes zoomOutRight {
  40% {
    opacity: 1;
    -webkit-transform: scale3d(0.475, 0.475, 0.475) translate3d(-42px, 0, 0);
    transform: scale3d(0.475, 0.475, 0.475) translate3d(-42px, 0, 0);
  }

  to {
    opacity: 0;
    -webkit-transform: scale(0.1) translate3d(2000px, 0, 0);
    transform: scale(0.1) translate3d(2000px, 0, 0);
  }
}
.animate__zoomOutRight {
  -webkit-animation-name: zoomOutRight;
  animation-name: zoomOutRight;
  -webkit-transform-origin: right center;
  transform-origin: right center;
}
@-webkit-keyframes zoomOutUp {
  40% {
    opacity: 1;
    -webkit-transform: scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0);
    transform: scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0);
    -webkit-animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  }

  to {
    opacity: 0;
    -webkit-transform: scale3d(0.1, 0.1, 0.1) translate3d(0, -2000px, 0);
    transform: scale3d(0.1, 0.1, 0.1) translate3d(0, -2000px, 0);
    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
  }
}
@keyframes zoomOutUp {
  40% {
    opacity: 1;
    -webkit-transform: scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0);
    transform: scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0);
    -webkit-animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  }

  to {
    opacity: 0;
    -webkit-transform: scale3d(0.1, 0.1, 0.1) translate3d(0, -2000px, 0);
    transform: scale3d(0.1, 0.1, 0.1) translate3d(0, -2000px, 0);
    -webkit-animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1);
  }
}
.animate__zoomOutUp {
  -webkit-animation-name: zoomOutUp;
  animation-name: zoomOutUp;
  -webkit-transform-origin: center bottom;
  transform-origin: center bottom;
}
/* Sliding entrances */
@-webkit-keyframes slideInDown {
  from {
    -webkit-transform: translate3d(0, -100%, 0);
    transform: translate3d(0, -100%, 0);
    visibility: visible;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes slideInDown {
  from {
    -webkit-transform: translate3d(0, -100%, 0);
    transform: translate3d(0, -100%, 0);
    visibility: visible;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__slideInDown {
  -webkit-animation-name: slideInDown;
  animation-name: slideInDown;
}
@-webkit-keyframes slideInLeft {
  from {
    -webkit-transform: translate3d(-100%, 0, 0);
    transform: translate3d(-100%, 0, 0);
    visibility: visible;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes slideInLeft {
  from {
    -webkit-transform: translate3d(-100%, 0, 0);
    transform: translate3d(-100%, 0, 0);
    visibility: visible;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__slideInLeft {
  -webkit-animation-name: slideInLeft;
  animation-name: slideInLeft;
}
@-webkit-keyframes slideInRight {
  from {
    -webkit-transform: translate3d(100%, 0, 0);
    transform: translate3d(100%, 0, 0);
    visibility: visible;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes slideInRight {
  from {
    -webkit-transform: translate3d(100%, 0, 0);
    transform: translate3d(100%, 0, 0);
    visibility: visible;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__slideInRight {
  -webkit-animation-name: slideInRight;
  animation-name: slideInRight;
}
@-webkit-keyframes slideInUp {
  from {
    -webkit-transform: translate3d(0, 100%, 0);
    transform: translate3d(0, 100%, 0);
    visibility: visible;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
@keyframes slideInUp {
  from {
    -webkit-transform: translate3d(0, 100%, 0);
    transform: translate3d(0, 100%, 0);
    visibility: visible;
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}
.animate__slideInUp {
  -webkit-animation-name: slideInUp;
  animation-name: slideInUp;
}
/* Sliding exits */
@-webkit-keyframes slideOutDown {
  from {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  to {
    visibility: hidden;
    -webkit-transform: translate3d(0, 100%, 0);
    transform: translate3d(0, 100%, 0);
  }
}
@keyframes slideOutDown {
  from {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  to {
    visibility: hidden;
    -webkit-transform: translate3d(0, 100%, 0);
    transform: translate3d(0, 100%, 0);
  }
}
.animate__slideOutDown {
  -webkit-animation-name: slideOutDown;
  animation-name: slideOutDown;
}
@-webkit-keyframes slideOutLeft {
  from {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  to {
    visibility: hidden;
    -webkit-transform: translate3d(-100%, 0, 0);
    transform: translate3d(-100%, 0, 0);
  }
}
@keyframes slideOutLeft {
  from {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  to {
    visibility: hidden;
    -webkit-transform: translate3d(-100%, 0, 0);
    transform: translate3d(-100%, 0, 0);
  }
}
.animate__slideOutLeft {
  -webkit-animation-name: slideOutLeft;
  animation-name: slideOutLeft;
}
@-webkit-keyframes slideOutRight {
  from {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  to {
    visibility: hidden;
    -webkit-transform: translate3d(100%, 0, 0);
    transform: translate3d(100%, 0, 0);
  }
}
@keyframes slideOutRight {
  from {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  to {
    visibility: hidden;
    -webkit-transform: translate3d(100%, 0, 0);
    transform: translate3d(100%, 0, 0);
  }
}
.animate__slideOutRight {
  -webkit-animation-name: slideOutRight;
  animation-name: slideOutRight;
}
@-webkit-keyframes slideOutUp {
  from {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  to {
    visibility: hidden;
    -webkit-transform: translate3d(0, -100%, 0);
    transform: translate3d(0, -100%, 0);
  }
}
@keyframes slideOutUp {
  from {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }

  to {
    visibility: hidden;
    -webkit-transform: translate3d(0, -100%, 0);
    transform: translate3d(0, -100%, 0);
  }
}
.animate__slideOutUp {
  -webkit-animation-name: slideOutUp;
  animation-name: slideOutUp;
}
`;
var NotificationContext = react.createContext({});
const Notification = (props) => {
  const [exit, setExit] = react.useState(false);
  const [width, setWidth] = react.useState(100);
  const [intervalID, setIntervalID] = react.useState(null);
  const handleStartTimer = () => {
    const id = setInterval(() => {
      setWidth((prev) => {
        if (prev > 0) {
          return prev - 0.5;
        }
        clearInterval(id);
        return prev;
      });
    }, 20);
    setIntervalID(id);
  };
  const handlePauseTimer = () => {
    clearInterval(intervalID);
  };
  react.useEffect(() => {
    handleStartTimer();
  }, []);
  const handleCloseNotifications = () => {
    handlePauseTimer();
    setExit(true);
    setTimeout(() => {
      props.dispatch({
        type: "REMOVE_NOTIFICATION",
        id: props.id
      });
    }, 400);
  };
  react.useEffect(() => {
    if (width === 0) {
      handleCloseNotifications();
    }
  }, [width]);
  return /* @__PURE__ */ react.createElement("div", {
    onMouseEnter: handlePauseTimer,
    onMouseLeave: handleStartTimer,
    onClick: handleCloseNotifications,
    className: "notification-item " + props.type + (exit ? " exit" : "")
  }, /* @__PURE__ */ react.createElement("p", null, props.message), /* @__PURE__ */ react.createElement("div", {
    className: "bar"
  }, /* @__PURE__ */ react.createElement("div", {
    className: "bar--filler",
    style: {width: width + "%"}
  })));
};
const NotificationsProvider = (props) => {
  const [state, dispatch] = react.useReducer((state2, action) => {
    switch (action.type) {
      case "ADD_NOTIFICATION":
        let mypayload = action.payload[0].payload;
        return [...state2, {
          id: mypayload.id,
          type: mypayload.type,
          message: mypayload.message
        }];
      case "REMOVE_NOTIFICATION":
        return state2.filter((el) => el.id !== action.id);
      default:
        return state2;
    }
  }, [
    {}
  ]);
  return /* @__PURE__ */ react.createElement(NotificationContext.Provider, {
    value: dispatch
  }, /* @__PURE__ */ react.createElement("div", {
    className: "notification-wrapper"
  }, state.map((note) => {
    return /* @__PURE__ */ react.createElement(Notification, __assign({
      dispatch,
      key: note.id
    }, note));
  })), props.children);
};
const useNotifications = () => {
  const dispatch = react.useContext(NotificationContext);
  return (...props) => {
    dispatch({
      type: "ADD_NOTIFICATION",
      payload: __assign({}, props)
    });
  };
};
/*!
 * Quill Editor v1.3.7
 * https://quilljs.com/
 * Copyright (c) 2014, Jason Chen
 * Copyright (c) 2013, salesforce.com
 */
var quill = createCommonjsModule(function(module, exports) {
  (function webpackUniversalModuleDefinition(root2, factory2) {
    module.exports = factory2();
  })(typeof self !== "undefined" ? self : commonjsGlobal$1, function() {
    return function(modules) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          i: moduleId,
          l: false,
          exports: {}
        };
        modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports2, name, getter) {
        if (!__webpack_require__.o(exports2, name)) {
          Object.defineProperty(exports2, name, {
            configurable: false,
            enumerable: true,
            get: getter
          });
        }
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? function getDefault() {
          return module2["default"];
        } : function getModuleExports() {
          return module2;
        };
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object, property2) {
        return Object.prototype.hasOwnProperty.call(object, property2);
      };
      __webpack_require__.p = "";
      return __webpack_require__(__webpack_require__.s = 109);
    }([
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {value: true});
        var container_1 = __webpack_require__(17);
        var format_1 = __webpack_require__(18);
        var leaf_1 = __webpack_require__(19);
        var scroll_1 = __webpack_require__(45);
        var inline_1 = __webpack_require__(46);
        var block_1 = __webpack_require__(47);
        var embed_1 = __webpack_require__(48);
        var text_1 = __webpack_require__(49);
        var attributor_1 = __webpack_require__(12);
        var class_1 = __webpack_require__(32);
        var style_1 = __webpack_require__(33);
        var store_1 = __webpack_require__(31);
        var Registry = __webpack_require__(1);
        var Parchment = {
          Scope: Registry.Scope,
          create: Registry.create,
          find: Registry.find,
          query: Registry.query,
          register: Registry.register,
          Container: container_1.default,
          Format: format_1.default,
          Leaf: leaf_1.default,
          Embed: embed_1.default,
          Scroll: scroll_1.default,
          Block: block_1.default,
          Inline: inline_1.default,
          Text: text_1.default,
          Attributor: {
            Attribute: attributor_1.default,
            Class: class_1.default,
            Style: style_1.default,
            Store: store_1.default
          }
        };
        exports2.default = Parchment;
      },
      function(module2, exports2, __webpack_require__) {
        var __extends = this && this.__extends || function() {
          var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
            d.__proto__ = b;
          } || function(d, b) {
            for (var p in b)
              if (b.hasOwnProperty(p))
                d[p] = b[p];
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports2, "__esModule", {value: true});
        var ParchmentError = function(_super) {
          __extends(ParchmentError2, _super);
          function ParchmentError2(message) {
            var _this = this;
            message = "[Parchment] " + message;
            _this = _super.call(this, message) || this;
            _this.message = message;
            _this.name = _this.constructor.name;
            return _this;
          }
          return ParchmentError2;
        }(Error);
        exports2.ParchmentError = ParchmentError;
        var attributes = {};
        var classes = {};
        var tags = {};
        var types = {};
        exports2.DATA_KEY = "__blot";
        var Scope;
        (function(Scope2) {
          Scope2[Scope2["TYPE"] = 3] = "TYPE";
          Scope2[Scope2["LEVEL"] = 12] = "LEVEL";
          Scope2[Scope2["ATTRIBUTE"] = 13] = "ATTRIBUTE";
          Scope2[Scope2["BLOT"] = 14] = "BLOT";
          Scope2[Scope2["INLINE"] = 7] = "INLINE";
          Scope2[Scope2["BLOCK"] = 11] = "BLOCK";
          Scope2[Scope2["BLOCK_BLOT"] = 10] = "BLOCK_BLOT";
          Scope2[Scope2["INLINE_BLOT"] = 6] = "INLINE_BLOT";
          Scope2[Scope2["BLOCK_ATTRIBUTE"] = 9] = "BLOCK_ATTRIBUTE";
          Scope2[Scope2["INLINE_ATTRIBUTE"] = 5] = "INLINE_ATTRIBUTE";
          Scope2[Scope2["ANY"] = 15] = "ANY";
        })(Scope = exports2.Scope || (exports2.Scope = {}));
        function create2(input, value) {
          var match = query(input);
          if (match == null) {
            throw new ParchmentError("Unable to create " + input + " blot");
          }
          var BlotClass = match;
          var node = input instanceof Node || input["nodeType"] === Node.TEXT_NODE ? input : BlotClass.create(value);
          return new BlotClass(node, value);
        }
        exports2.create = create2;
        function find2(node, bubble) {
          if (bubble === void 0) {
            bubble = false;
          }
          if (node == null)
            return null;
          if (node[exports2.DATA_KEY] != null)
            return node[exports2.DATA_KEY].blot;
          if (bubble)
            return find2(node.parentNode, bubble);
          return null;
        }
        exports2.find = find2;
        function query(query2, scope) {
          if (scope === void 0) {
            scope = Scope.ANY;
          }
          var match;
          if (typeof query2 === "string") {
            match = types[query2] || attributes[query2];
          } else if (query2 instanceof Text || query2["nodeType"] === Node.TEXT_NODE) {
            match = types["text"];
          } else if (typeof query2 === "number") {
            if (query2 & Scope.LEVEL & Scope.BLOCK) {
              match = types["block"];
            } else if (query2 & Scope.LEVEL & Scope.INLINE) {
              match = types["inline"];
            }
          } else if (query2 instanceof HTMLElement) {
            var names = (query2.getAttribute("class") || "").split(/\s+/);
            for (var i2 in names) {
              match = classes[names[i2]];
              if (match)
                break;
            }
            match = match || tags[query2.tagName];
          }
          if (match == null)
            return null;
          if (scope & Scope.LEVEL & match.scope && scope & Scope.TYPE & match.scope)
            return match;
          return null;
        }
        exports2.query = query;
        function register2() {
          var Definitions = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            Definitions[_i] = arguments[_i];
          }
          if (Definitions.length > 1) {
            return Definitions.map(function(d) {
              return register2(d);
            });
          }
          var Definition = Definitions[0];
          if (typeof Definition.blotName !== "string" && typeof Definition.attrName !== "string") {
            throw new ParchmentError("Invalid definition");
          } else if (Definition.blotName === "abstract") {
            throw new ParchmentError("Cannot register abstract class");
          }
          types[Definition.blotName || Definition.attrName] = Definition;
          if (typeof Definition.keyName === "string") {
            attributes[Definition.keyName] = Definition;
          } else {
            if (Definition.className != null) {
              classes[Definition.className] = Definition;
            }
            if (Definition.tagName != null) {
              if (Array.isArray(Definition.tagName)) {
                Definition.tagName = Definition.tagName.map(function(tagName) {
                  return tagName.toUpperCase();
                });
              } else {
                Definition.tagName = Definition.tagName.toUpperCase();
              }
              var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [Definition.tagName];
              tagNames.forEach(function(tag) {
                if (tags[tag] == null || Definition.className == null) {
                  tags[tag] = Definition;
                }
              });
            }
          }
          return Definition;
        }
        exports2.register = register2;
      },
      function(module2, exports2, __webpack_require__) {
        var diff = __webpack_require__(51);
        var equal = __webpack_require__(11);
        var extend2 = __webpack_require__(3);
        var op = __webpack_require__(20);
        var NULL_CHARACTER = String.fromCharCode(0);
        var Delta = function(ops) {
          if (Array.isArray(ops)) {
            this.ops = ops;
          } else if (ops != null && Array.isArray(ops.ops)) {
            this.ops = ops.ops;
          } else {
            this.ops = [];
          }
        };
        Delta.prototype.insert = function(text, attributes) {
          var newOp = {};
          if (text.length === 0)
            return this;
          newOp.insert = text;
          if (attributes != null && typeof attributes === "object" && Object.keys(attributes).length > 0) {
            newOp.attributes = attributes;
          }
          return this.push(newOp);
        };
        Delta.prototype["delete"] = function(length) {
          if (length <= 0)
            return this;
          return this.push({delete: length});
        };
        Delta.prototype.retain = function(length, attributes) {
          if (length <= 0)
            return this;
          var newOp = {retain: length};
          if (attributes != null && typeof attributes === "object" && Object.keys(attributes).length > 0) {
            newOp.attributes = attributes;
          }
          return this.push(newOp);
        };
        Delta.prototype.push = function(newOp) {
          var index2 = this.ops.length;
          var lastOp = this.ops[index2 - 1];
          newOp = extend2(true, {}, newOp);
          if (typeof lastOp === "object") {
            if (typeof newOp["delete"] === "number" && typeof lastOp["delete"] === "number") {
              this.ops[index2 - 1] = {delete: lastOp["delete"] + newOp["delete"]};
              return this;
            }
            if (typeof lastOp["delete"] === "number" && newOp.insert != null) {
              index2 -= 1;
              lastOp = this.ops[index2 - 1];
              if (typeof lastOp !== "object") {
                this.ops.unshift(newOp);
                return this;
              }
            }
            if (equal(newOp.attributes, lastOp.attributes)) {
              if (typeof newOp.insert === "string" && typeof lastOp.insert === "string") {
                this.ops[index2 - 1] = {insert: lastOp.insert + newOp.insert};
                if (typeof newOp.attributes === "object")
                  this.ops[index2 - 1].attributes = newOp.attributes;
                return this;
              } else if (typeof newOp.retain === "number" && typeof lastOp.retain === "number") {
                this.ops[index2 - 1] = {retain: lastOp.retain + newOp.retain};
                if (typeof newOp.attributes === "object")
                  this.ops[index2 - 1].attributes = newOp.attributes;
                return this;
              }
            }
          }
          if (index2 === this.ops.length) {
            this.ops.push(newOp);
          } else {
            this.ops.splice(index2, 0, newOp);
          }
          return this;
        };
        Delta.prototype.chop = function() {
          var lastOp = this.ops[this.ops.length - 1];
          if (lastOp && lastOp.retain && !lastOp.attributes) {
            this.ops.pop();
          }
          return this;
        };
        Delta.prototype.filter = function(predicate2) {
          return this.ops.filter(predicate2);
        };
        Delta.prototype.forEach = function(predicate2) {
          this.ops.forEach(predicate2);
        };
        Delta.prototype.map = function(predicate2) {
          return this.ops.map(predicate2);
        };
        Delta.prototype.partition = function(predicate2) {
          var passed = [], failed = [];
          this.forEach(function(op2) {
            var target = predicate2(op2) ? passed : failed;
            target.push(op2);
          });
          return [passed, failed];
        };
        Delta.prototype.reduce = function(predicate2, initial) {
          return this.ops.reduce(predicate2, initial);
        };
        Delta.prototype.changeLength = function() {
          return this.reduce(function(length, elem) {
            if (elem.insert) {
              return length + op.length(elem);
            } else if (elem.delete) {
              return length - elem.delete;
            }
            return length;
          }, 0);
        };
        Delta.prototype.length = function() {
          return this.reduce(function(length, elem) {
            return length + op.length(elem);
          }, 0);
        };
        Delta.prototype.slice = function(start, end) {
          start = start || 0;
          if (typeof end !== "number")
            end = Infinity;
          var ops = [];
          var iter = op.iterator(this.ops);
          var index2 = 0;
          while (index2 < end && iter.hasNext()) {
            var nextOp;
            if (index2 < start) {
              nextOp = iter.next(start - index2);
            } else {
              nextOp = iter.next(end - index2);
              ops.push(nextOp);
            }
            index2 += op.length(nextOp);
          }
          return new Delta(ops);
        };
        Delta.prototype.compose = function(other) {
          var thisIter = op.iterator(this.ops);
          var otherIter = op.iterator(other.ops);
          var ops = [];
          var firstOther = otherIter.peek();
          if (firstOther != null && typeof firstOther.retain === "number" && firstOther.attributes == null) {
            var firstLeft = firstOther.retain;
            while (thisIter.peekType() === "insert" && thisIter.peekLength() <= firstLeft) {
              firstLeft -= thisIter.peekLength();
              ops.push(thisIter.next());
            }
            if (firstOther.retain - firstLeft > 0) {
              otherIter.next(firstOther.retain - firstLeft);
            }
          }
          var delta = new Delta(ops);
          while (thisIter.hasNext() || otherIter.hasNext()) {
            if (otherIter.peekType() === "insert") {
              delta.push(otherIter.next());
            } else if (thisIter.peekType() === "delete") {
              delta.push(thisIter.next());
            } else {
              var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
              var thisOp = thisIter.next(length);
              var otherOp = otherIter.next(length);
              if (typeof otherOp.retain === "number") {
                var newOp = {};
                if (typeof thisOp.retain === "number") {
                  newOp.retain = length;
                } else {
                  newOp.insert = thisOp.insert;
                }
                var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === "number");
                if (attributes)
                  newOp.attributes = attributes;
                delta.push(newOp);
                if (!otherIter.hasNext() && equal(delta.ops[delta.ops.length - 1], newOp)) {
                  var rest = new Delta(thisIter.rest());
                  return delta.concat(rest).chop();
                }
              } else if (typeof otherOp["delete"] === "number" && typeof thisOp.retain === "number") {
                delta.push(otherOp);
              }
            }
          }
          return delta.chop();
        };
        Delta.prototype.concat = function(other) {
          var delta = new Delta(this.ops.slice());
          if (other.ops.length > 0) {
            delta.push(other.ops[0]);
            delta.ops = delta.ops.concat(other.ops.slice(1));
          }
          return delta;
        };
        Delta.prototype.diff = function(other, index2) {
          if (this.ops === other.ops) {
            return new Delta();
          }
          var strings = [this, other].map(function(delta2) {
            return delta2.map(function(op2) {
              if (op2.insert != null) {
                return typeof op2.insert === "string" ? op2.insert : NULL_CHARACTER;
              }
              var prep = delta2 === other ? "on" : "with";
              throw new Error("diff() called " + prep + " non-document");
            }).join("");
          });
          var delta = new Delta();
          var diffResult = diff(strings[0], strings[1], index2);
          var thisIter = op.iterator(this.ops);
          var otherIter = op.iterator(other.ops);
          diffResult.forEach(function(component2) {
            var length = component2[1].length;
            while (length > 0) {
              var opLength = 0;
              switch (component2[0]) {
                case diff.INSERT:
                  opLength = Math.min(otherIter.peekLength(), length);
                  delta.push(otherIter.next(opLength));
                  break;
                case diff.DELETE:
                  opLength = Math.min(length, thisIter.peekLength());
                  thisIter.next(opLength);
                  delta["delete"](opLength);
                  break;
                case diff.EQUAL:
                  opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
                  var thisOp = thisIter.next(opLength);
                  var otherOp = otherIter.next(opLength);
                  if (equal(thisOp.insert, otherOp.insert)) {
                    delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));
                  } else {
                    delta.push(otherOp)["delete"](opLength);
                  }
                  break;
              }
              length -= opLength;
            }
          });
          return delta.chop();
        };
        Delta.prototype.eachLine = function(predicate2, newline) {
          newline = newline || "\n";
          var iter = op.iterator(this.ops);
          var line = new Delta();
          var i2 = 0;
          while (iter.hasNext()) {
            if (iter.peekType() !== "insert")
              return;
            var thisOp = iter.peek();
            var start = op.length(thisOp) - iter.peekLength();
            var index2 = typeof thisOp.insert === "string" ? thisOp.insert.indexOf(newline, start) - start : -1;
            if (index2 < 0) {
              line.push(iter.next());
            } else if (index2 > 0) {
              line.push(iter.next(index2));
            } else {
              if (predicate2(line, iter.next(1).attributes || {}, i2) === false) {
                return;
              }
              i2 += 1;
              line = new Delta();
            }
          }
          if (line.length() > 0) {
            predicate2(line, {}, i2);
          }
        };
        Delta.prototype.transform = function(other, priority) {
          priority = !!priority;
          if (typeof other === "number") {
            return this.transformPosition(other, priority);
          }
          var thisIter = op.iterator(this.ops);
          var otherIter = op.iterator(other.ops);
          var delta = new Delta();
          while (thisIter.hasNext() || otherIter.hasNext()) {
            if (thisIter.peekType() === "insert" && (priority || otherIter.peekType() !== "insert")) {
              delta.retain(op.length(thisIter.next()));
            } else if (otherIter.peekType() === "insert") {
              delta.push(otherIter.next());
            } else {
              var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
              var thisOp = thisIter.next(length);
              var otherOp = otherIter.next(length);
              if (thisOp["delete"]) {
                continue;
              } else if (otherOp["delete"]) {
                delta.push(otherOp);
              } else {
                delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));
              }
            }
          }
          return delta.chop();
        };
        Delta.prototype.transformPosition = function(index2, priority) {
          priority = !!priority;
          var thisIter = op.iterator(this.ops);
          var offset = 0;
          while (thisIter.hasNext() && offset <= index2) {
            var length = thisIter.peekLength();
            var nextType = thisIter.peekType();
            thisIter.next();
            if (nextType === "delete") {
              index2 -= Math.min(length, index2 - offset);
              continue;
            } else if (nextType === "insert" && (offset < index2 || !priority)) {
              index2 += length;
            }
            offset += length;
          }
          return index2;
        };
        module2.exports = Delta;
      },
      function(module2, exports2) {
        var hasOwn = Object.prototype.hasOwnProperty;
        var toStr = Object.prototype.toString;
        var defineProperty = Object.defineProperty;
        var gOPD = Object.getOwnPropertyDescriptor;
        var isArray2 = function isArray3(arr) {
          if (typeof Array.isArray === "function") {
            return Array.isArray(arr);
          }
          return toStr.call(arr) === "[object Array]";
        };
        var isPlainObject2 = function isPlainObject3(obj) {
          if (!obj || toStr.call(obj) !== "[object Object]") {
            return false;
          }
          var hasOwnConstructor = hasOwn.call(obj, "constructor");
          var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
          if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
            return false;
          }
          var key2;
          for (key2 in obj) {
          }
          return typeof key2 === "undefined" || hasOwn.call(obj, key2);
        };
        var setProperty = function setProperty2(target, options) {
          if (defineProperty && options.name === "__proto__") {
            defineProperty(target, options.name, {
              enumerable: true,
              configurable: true,
              value: options.newValue,
              writable: true
            });
          } else {
            target[options.name] = options.newValue;
          }
        };
        var getProperty = function getProperty2(obj, name) {
          if (name === "__proto__") {
            if (!hasOwn.call(obj, name)) {
              return void 0;
            } else if (gOPD) {
              return gOPD(obj, name).value;
            }
          }
          return obj[name];
        };
        module2.exports = function extend2() {
          var options, name, src, copy, copyIsArray, clone2;
          var target = arguments[0];
          var i2 = 1;
          var length = arguments.length;
          var deep = false;
          if (typeof target === "boolean") {
            deep = target;
            target = arguments[1] || {};
            i2 = 2;
          }
          if (target == null || typeof target !== "object" && typeof target !== "function") {
            target = {};
          }
          for (; i2 < length; ++i2) {
            options = arguments[i2];
            if (options != null) {
              for (name in options) {
                src = getProperty(target, name);
                copy = getProperty(options, name);
                if (target !== copy) {
                  if (deep && copy && (isPlainObject2(copy) || (copyIsArray = isArray2(copy)))) {
                    if (copyIsArray) {
                      copyIsArray = false;
                      clone2 = src && isArray2(src) ? src : [];
                    } else {
                      clone2 = src && isPlainObject2(src) ? src : {};
                    }
                    setProperty(target, {name, newValue: extend2(deep, clone2, copy)});
                  } else if (typeof copy !== "undefined") {
                    setProperty(target, {name, newValue: copy});
                  }
                }
              }
            }
          }
          return target;
        };
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.default = exports2.BlockEmbed = exports2.bubbleFormats = void 0;
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _extend = __webpack_require__(3);
        var _extend2 = _interopRequireDefault(_extend);
        var _quillDelta = __webpack_require__(2);
        var _quillDelta2 = _interopRequireDefault(_quillDelta);
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _break = __webpack_require__(16);
        var _break2 = _interopRequireDefault(_break);
        var _inline = __webpack_require__(6);
        var _inline2 = _interopRequireDefault(_inline);
        var _text = __webpack_require__(7);
        var _text2 = _interopRequireDefault(_text);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var NEWLINE_LENGTH = 1;
        var BlockEmbed = function(_Parchment$Embed) {
          _inherits2(BlockEmbed2, _Parchment$Embed);
          function BlockEmbed2() {
            _classCallCheck2(this, BlockEmbed2);
            return _possibleConstructorReturn2(this, (BlockEmbed2.__proto__ || Object.getPrototypeOf(BlockEmbed2)).apply(this, arguments));
          }
          _createClass(BlockEmbed2, [{
            key: "attach",
            value: function attach() {
              _get(BlockEmbed2.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed2.prototype), "attach", this).call(this);
              this.attributes = new _parchment2.default.Attributor.Store(this.domNode);
            }
          }, {
            key: "delta",
            value: function delta() {
              return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));
            }
          }, {
            key: "format",
            value: function format(name, value) {
              var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);
              if (attribute != null) {
                this.attributes.attribute(attribute, value);
              }
            }
          }, {
            key: "formatAt",
            value: function formatAt(index2, length, name, value) {
              this.format(name, value);
            }
          }, {
            key: "insertAt",
            value: function insertAt(index2, value, def) {
              if (typeof value === "string" && value.endsWith("\n")) {
                var block = _parchment2.default.create(Block.blotName);
                this.parent.insertBefore(block, index2 === 0 ? this : this.next);
                block.insertAt(0, value.slice(0, -1));
              } else {
                _get(BlockEmbed2.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed2.prototype), "insertAt", this).call(this, index2, value, def);
              }
            }
          }]);
          return BlockEmbed2;
        }(_parchment2.default.Embed);
        BlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;
        var Block = function(_Parchment$Block) {
          _inherits2(Block2, _Parchment$Block);
          function Block2(domNode) {
            _classCallCheck2(this, Block2);
            var _this2 = _possibleConstructorReturn2(this, (Block2.__proto__ || Object.getPrototypeOf(Block2)).call(this, domNode));
            _this2.cache = {};
            return _this2;
          }
          _createClass(Block2, [{
            key: "delta",
            value: function delta() {
              if (this.cache.delta == null) {
                this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function(delta2, leaf) {
                  if (leaf.length() === 0) {
                    return delta2;
                  } else {
                    return delta2.insert(leaf.value(), bubbleFormats(leaf));
                  }
                }, new _quillDelta2.default()).insert("\n", bubbleFormats(this));
              }
              return this.cache.delta;
            }
          }, {
            key: "deleteAt",
            value: function deleteAt(index2, length) {
              _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "deleteAt", this).call(this, index2, length);
              this.cache = {};
            }
          }, {
            key: "formatAt",
            value: function formatAt(index2, length, name, value) {
              if (length <= 0)
                return;
              if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
                if (index2 + length === this.length()) {
                  this.format(name, value);
                }
              } else {
                _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "formatAt", this).call(this, index2, Math.min(length, this.length() - index2 - 1), name, value);
              }
              this.cache = {};
            }
          }, {
            key: "insertAt",
            value: function insertAt(index2, value, def) {
              if (def != null)
                return _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "insertAt", this).call(this, index2, value, def);
              if (value.length === 0)
                return;
              var lines = value.split("\n");
              var text = lines.shift();
              if (text.length > 0) {
                if (index2 < this.length() - 1 || this.children.tail == null) {
                  _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "insertAt", this).call(this, Math.min(index2, this.length() - 1), text);
                } else {
                  this.children.tail.insertAt(this.children.tail.length(), text);
                }
                this.cache = {};
              }
              var block = this;
              lines.reduce(function(index3, line) {
                block = block.split(index3, true);
                block.insertAt(0, line);
                return line.length;
              }, index2 + text.length);
            }
          }, {
            key: "insertBefore",
            value: function insertBefore(blot, ref) {
              var head = this.children.head;
              _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "insertBefore", this).call(this, blot, ref);
              if (head instanceof _break2.default) {
                head.remove();
              }
              this.cache = {};
            }
          }, {
            key: "length",
            value: function length() {
              if (this.cache.length == null) {
                this.cache.length = _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "length", this).call(this) + NEWLINE_LENGTH;
              }
              return this.cache.length;
            }
          }, {
            key: "moveChildren",
            value: function moveChildren(target, ref) {
              _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "moveChildren", this).call(this, target, ref);
              this.cache = {};
            }
          }, {
            key: "optimize",
            value: function optimize(context2) {
              _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "optimize", this).call(this, context2);
              this.cache = {};
            }
          }, {
            key: "path",
            value: function path(index2) {
              return _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "path", this).call(this, index2, true);
            }
          }, {
            key: "removeChild",
            value: function removeChild(child) {
              _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "removeChild", this).call(this, child);
              this.cache = {};
            }
          }, {
            key: "split",
            value: function split(index2) {
              var force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              if (force && (index2 === 0 || index2 >= this.length() - NEWLINE_LENGTH)) {
                var clone2 = this.clone();
                if (index2 === 0) {
                  this.parent.insertBefore(clone2, this);
                  return this;
                } else {
                  this.parent.insertBefore(clone2, this.next);
                  return clone2;
                }
              } else {
                var next = _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "split", this).call(this, index2, force);
                this.cache = {};
                return next;
              }
            }
          }]);
          return Block2;
        }(_parchment2.default.Block);
        Block.blotName = "block";
        Block.tagName = "P";
        Block.defaultChild = "break";
        Block.allowedChildren = [_inline2.default, _parchment2.default.Embed, _text2.default];
        function bubbleFormats(blot) {
          var formats = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          if (blot == null)
            return formats;
          if (typeof blot.formats === "function") {
            formats = (0, _extend2.default)(formats, blot.formats());
          }
          if (blot.parent == null || blot.parent.blotName == "scroll" || blot.parent.statics.scope !== blot.statics.scope) {
            return formats;
          }
          return bubbleFormats(blot.parent, formats);
        }
        exports2.bubbleFormats = bubbleFormats;
        exports2.BlockEmbed = BlockEmbed;
        exports2.default = Block;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.default = exports2.overload = exports2.expandConfig = void 0;
        var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
          return typeof obj;
        } : function(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
        var _slicedToArray2 = function() {
          function sliceIterator(arr, i2) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i2 && _arr.length === i2)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"])
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          return function(arr, i2) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i2);
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
          };
        }();
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        __webpack_require__(50);
        var _quillDelta = __webpack_require__(2);
        var _quillDelta2 = _interopRequireDefault(_quillDelta);
        var _editor = __webpack_require__(14);
        var _editor2 = _interopRequireDefault(_editor);
        var _emitter3 = __webpack_require__(8);
        var _emitter4 = _interopRequireDefault(_emitter3);
        var _module = __webpack_require__(9);
        var _module2 = _interopRequireDefault(_module);
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _selection = __webpack_require__(15);
        var _selection2 = _interopRequireDefault(_selection);
        var _extend = __webpack_require__(3);
        var _extend2 = _interopRequireDefault(_extend);
        var _logger = __webpack_require__(10);
        var _logger2 = _interopRequireDefault(_logger);
        var _theme = __webpack_require__(34);
        var _theme2 = _interopRequireDefault(_theme);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _defineProperty2(obj, key2, value) {
          if (key2 in obj) {
            Object.defineProperty(obj, key2, {value, enumerable: true, configurable: true, writable: true});
          } else {
            obj[key2] = value;
          }
          return obj;
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        var debug = (0, _logger2.default)("quill");
        var Quill = function() {
          _createClass(Quill2, null, [{
            key: "debug",
            value: function debug2(limit) {
              if (limit === true) {
                limit = "log";
              }
              _logger2.default.level(limit);
            }
          }, {
            key: "find",
            value: function find2(node) {
              return node.__quill || _parchment2.default.find(node);
            }
          }, {
            key: "import",
            value: function _import(name) {
              if (this.imports[name] == null) {
                debug.error("Cannot import " + name + ". Are you sure it was registered?");
              }
              return this.imports[name];
            }
          }, {
            key: "register",
            value: function register2(path, target) {
              var _this = this;
              var overwrite = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
              if (typeof path !== "string") {
                var name = path.attrName || path.blotName;
                if (typeof name === "string") {
                  this.register("formats/" + name, path, target);
                } else {
                  Object.keys(path).forEach(function(key2) {
                    _this.register(key2, path[key2], target);
                  });
                }
              } else {
                if (this.imports[path] != null && !overwrite) {
                  debug.warn("Overwriting " + path + " with", target);
                }
                this.imports[path] = target;
                if ((path.startsWith("blots/") || path.startsWith("formats/")) && target.blotName !== "abstract") {
                  _parchment2.default.register(target);
                } else if (path.startsWith("modules") && typeof target.register === "function") {
                  target.register();
                }
              }
            }
          }]);
          function Quill2(container) {
            var _this2 = this;
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            _classCallCheck2(this, Quill2);
            this.options = expandConfig(container, options);
            this.container = this.options.container;
            if (this.container == null) {
              return debug.error("Invalid Quill container", container);
            }
            if (this.options.debug) {
              Quill2.debug(this.options.debug);
            }
            var html = this.container.innerHTML.trim();
            this.container.classList.add("ql-container");
            this.container.innerHTML = "";
            this.container.__quill = this;
            this.root = this.addContainer("ql-editor");
            this.root.classList.add("ql-blank");
            this.root.setAttribute("data-gramm", false);
            this.scrollingContainer = this.options.scrollingContainer || this.root;
            this.emitter = new _emitter4.default();
            this.scroll = _parchment2.default.create(this.root, {
              emitter: this.emitter,
              whitelist: this.options.formats
            });
            this.editor = new _editor2.default(this.scroll);
            this.selection = new _selection2.default(this.scroll, this.emitter);
            this.theme = new this.options.theme(this, this.options);
            this.keyboard = this.theme.addModule("keyboard");
            this.clipboard = this.theme.addModule("clipboard");
            this.history = this.theme.addModule("history");
            this.theme.init();
            this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function(type) {
              if (type === _emitter4.default.events.TEXT_CHANGE) {
                _this2.root.classList.toggle("ql-blank", _this2.editor.isBlank());
              }
            });
            this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function(source2, mutations) {
              var range = _this2.selection.lastRange;
              var index2 = range && range.length === 0 ? range.index : void 0;
              modify.call(_this2, function() {
                return _this2.editor.update(null, mutations, index2);
              }, source2);
            });
            var contents = this.clipboard.convert(`<div class='ql-editor' style="white-space: normal;">` + html + "<p><br></p></div>");
            this.setContents(contents);
            this.history.clear();
            if (this.options.placeholder) {
              this.root.setAttribute("data-placeholder", this.options.placeholder);
            }
            if (this.options.readOnly) {
              this.disable();
            }
          }
          _createClass(Quill2, [{
            key: "addContainer",
            value: function addContainer(container) {
              var refNode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              if (typeof container === "string") {
                var className = container;
                container = document.createElement("div");
                container.classList.add(className);
              }
              this.container.insertBefore(container, refNode);
              return container;
            }
          }, {
            key: "blur",
            value: function blur() {
              this.selection.setRange(null);
            }
          }, {
            key: "deleteText",
            value: function deleteText(index2, length, source2) {
              var _this3 = this;
              var _overload = overload(index2, length, source2);
              var _overload2 = _slicedToArray2(_overload, 4);
              index2 = _overload2[0];
              length = _overload2[1];
              source2 = _overload2[3];
              return modify.call(this, function() {
                return _this3.editor.deleteText(index2, length);
              }, source2, index2, -1 * length);
            }
          }, {
            key: "disable",
            value: function disable() {
              this.enable(false);
            }
          }, {
            key: "enable",
            value: function enable() {
              var enabled = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
              this.scroll.enable(enabled);
              this.container.classList.toggle("ql-disabled", !enabled);
            }
          }, {
            key: "focus",
            value: function focus() {
              var scrollTop = this.scrollingContainer.scrollTop;
              this.selection.focus();
              this.scrollingContainer.scrollTop = scrollTop;
              this.scrollIntoView();
            }
          }, {
            key: "format",
            value: function format(name, value) {
              var _this4 = this;
              var source2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _emitter4.default.sources.API;
              return modify.call(this, function() {
                var range = _this4.getSelection(true);
                var change = new _quillDelta2.default();
                if (range == null) {
                  return change;
                } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
                  change = _this4.editor.formatLine(range.index, range.length, _defineProperty2({}, name, value));
                } else if (range.length === 0) {
                  _this4.selection.format(name, value);
                  return change;
                } else {
                  change = _this4.editor.formatText(range.index, range.length, _defineProperty2({}, name, value));
                }
                _this4.setSelection(range, _emitter4.default.sources.SILENT);
                return change;
              }, source2);
            }
          }, {
            key: "formatLine",
            value: function formatLine(index2, length, name, value, source2) {
              var _this5 = this;
              var formats = void 0;
              var _overload3 = overload(index2, length, name, value, source2);
              var _overload4 = _slicedToArray2(_overload3, 4);
              index2 = _overload4[0];
              length = _overload4[1];
              formats = _overload4[2];
              source2 = _overload4[3];
              return modify.call(this, function() {
                return _this5.editor.formatLine(index2, length, formats);
              }, source2, index2, 0);
            }
          }, {
            key: "formatText",
            value: function formatText(index2, length, name, value, source2) {
              var _this6 = this;
              var formats = void 0;
              var _overload5 = overload(index2, length, name, value, source2);
              var _overload6 = _slicedToArray2(_overload5, 4);
              index2 = _overload6[0];
              length = _overload6[1];
              formats = _overload6[2];
              source2 = _overload6[3];
              return modify.call(this, function() {
                return _this6.editor.formatText(index2, length, formats);
              }, source2, index2, 0);
            }
          }, {
            key: "getBounds",
            value: function getBounds(index2) {
              var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
              var bounds = void 0;
              if (typeof index2 === "number") {
                bounds = this.selection.getBounds(index2, length);
              } else {
                bounds = this.selection.getBounds(index2.index, index2.length);
              }
              var containerBounds = this.container.getBoundingClientRect();
              return {
                bottom: bounds.bottom - containerBounds.top,
                height: bounds.height,
                left: bounds.left - containerBounds.left,
                right: bounds.right - containerBounds.left,
                top: bounds.top - containerBounds.top,
                width: bounds.width
              };
            }
          }, {
            key: "getContents",
            value: function getContents() {
              var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
              var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.getLength() - index2;
              var _overload7 = overload(index2, length);
              var _overload8 = _slicedToArray2(_overload7, 2);
              index2 = _overload8[0];
              length = _overload8[1];
              return this.editor.getContents(index2, length);
            }
          }, {
            key: "getFormat",
            value: function getFormat() {
              var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getSelection(true);
              var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
              if (typeof index2 === "number") {
                return this.editor.getFormat(index2, length);
              } else {
                return this.editor.getFormat(index2.index, index2.length);
              }
            }
          }, {
            key: "getIndex",
            value: function getIndex(blot) {
              return blot.offset(this.scroll);
            }
          }, {
            key: "getLength",
            value: function getLength() {
              return this.scroll.length();
            }
          }, {
            key: "getLeaf",
            value: function getLeaf(index2) {
              return this.scroll.leaf(index2);
            }
          }, {
            key: "getLine",
            value: function getLine(index2) {
              return this.scroll.line(index2);
            }
          }, {
            key: "getLines",
            value: function getLines() {
              var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
              var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Number.MAX_VALUE;
              if (typeof index2 !== "number") {
                return this.scroll.lines(index2.index, index2.length);
              } else {
                return this.scroll.lines(index2, length);
              }
            }
          }, {
            key: "getModule",
            value: function getModule(name) {
              return this.theme.modules[name];
            }
          }, {
            key: "getSelection",
            value: function getSelection() {
              var focus = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
              if (focus)
                this.focus();
              this.update();
              return this.selection.getRange()[0];
            }
          }, {
            key: "getText",
            value: function getText() {
              var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
              var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.getLength() - index2;
              var _overload9 = overload(index2, length);
              var _overload10 = _slicedToArray2(_overload9, 2);
              index2 = _overload10[0];
              length = _overload10[1];
              return this.editor.getText(index2, length);
            }
          }, {
            key: "hasFocus",
            value: function hasFocus() {
              return this.selection.hasFocus();
            }
          }, {
            key: "insertEmbed",
            value: function insertEmbed(index2, embed, value) {
              var _this7 = this;
              var source2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Quill2.sources.API;
              return modify.call(this, function() {
                return _this7.editor.insertEmbed(index2, embed, value);
              }, source2, index2);
            }
          }, {
            key: "insertText",
            value: function insertText(index2, text, name, value, source2) {
              var _this8 = this;
              var formats = void 0;
              var _overload11 = overload(index2, 0, name, value, source2);
              var _overload12 = _slicedToArray2(_overload11, 4);
              index2 = _overload12[0];
              formats = _overload12[2];
              source2 = _overload12[3];
              return modify.call(this, function() {
                return _this8.editor.insertText(index2, text, formats);
              }, source2, index2, text.length);
            }
          }, {
            key: "isEnabled",
            value: function isEnabled() {
              return !this.container.classList.contains("ql-disabled");
            }
          }, {
            key: "off",
            value: function off() {
              return this.emitter.off.apply(this.emitter, arguments);
            }
          }, {
            key: "on",
            value: function on() {
              return this.emitter.on.apply(this.emitter, arguments);
            }
          }, {
            key: "once",
            value: function once() {
              return this.emitter.once.apply(this.emitter, arguments);
            }
          }, {
            key: "pasteHTML",
            value: function pasteHTML(index2, html, source2) {
              this.clipboard.dangerouslyPasteHTML(index2, html, source2);
            }
          }, {
            key: "removeFormat",
            value: function removeFormat(index2, length, source2) {
              var _this9 = this;
              var _overload13 = overload(index2, length, source2);
              var _overload14 = _slicedToArray2(_overload13, 4);
              index2 = _overload14[0];
              length = _overload14[1];
              source2 = _overload14[3];
              return modify.call(this, function() {
                return _this9.editor.removeFormat(index2, length);
              }, source2, index2);
            }
          }, {
            key: "scrollIntoView",
            value: function scrollIntoView() {
              this.selection.scrollIntoView(this.scrollingContainer);
            }
          }, {
            key: "setContents",
            value: function setContents(delta) {
              var _this10 = this;
              var source2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _emitter4.default.sources.API;
              return modify.call(this, function() {
                delta = new _quillDelta2.default(delta);
                var length = _this10.getLength();
                var deleted = _this10.editor.deleteText(0, length);
                var applied = _this10.editor.applyDelta(delta);
                var lastOp = applied.ops[applied.ops.length - 1];
                if (lastOp != null && typeof lastOp.insert === "string" && lastOp.insert[lastOp.insert.length - 1] === "\n") {
                  _this10.editor.deleteText(_this10.getLength() - 1, 1);
                  applied.delete(1);
                }
                var ret = deleted.compose(applied);
                return ret;
              }, source2);
            }
          }, {
            key: "setSelection",
            value: function setSelection(index2, length, source2) {
              if (index2 == null) {
                this.selection.setRange(null, length || Quill2.sources.API);
              } else {
                var _overload15 = overload(index2, length, source2);
                var _overload16 = _slicedToArray2(_overload15, 4);
                index2 = _overload16[0];
                length = _overload16[1];
                source2 = _overload16[3];
                this.selection.setRange(new _selection.Range(index2, length), source2);
                if (source2 !== _emitter4.default.sources.SILENT) {
                  this.selection.scrollIntoView(this.scrollingContainer);
                }
              }
            }
          }, {
            key: "setText",
            value: function setText(text) {
              var source2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _emitter4.default.sources.API;
              var delta = new _quillDelta2.default().insert(text);
              return this.setContents(delta, source2);
            }
          }, {
            key: "update",
            value: function update() {
              var source2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _emitter4.default.sources.USER;
              var change = this.scroll.update(source2);
              this.selection.update(source2);
              return change;
            }
          }, {
            key: "updateContents",
            value: function updateContents(delta) {
              var _this11 = this;
              var source2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _emitter4.default.sources.API;
              return modify.call(this, function() {
                delta = new _quillDelta2.default(delta);
                return _this11.editor.applyDelta(delta, source2);
              }, source2, true);
            }
          }]);
          return Quill2;
        }();
        Quill.DEFAULTS = {
          bounds: null,
          formats: null,
          modules: {},
          placeholder: "",
          readOnly: false,
          scrollingContainer: null,
          strict: true,
          theme: "default"
        };
        Quill.events = _emitter4.default.events;
        Quill.sources = _emitter4.default.sources;
        Quill.version = "1.3.7";
        Quill.imports = {
          delta: _quillDelta2.default,
          parchment: _parchment2.default,
          "core/module": _module2.default,
          "core/theme": _theme2.default
        };
        function expandConfig(container, userConfig) {
          userConfig = (0, _extend2.default)(true, {
            container,
            modules: {
              clipboard: true,
              keyboard: true,
              history: true
            }
          }, userConfig);
          if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {
            userConfig.theme = _theme2.default;
          } else {
            userConfig.theme = Quill.import("themes/" + userConfig.theme);
            if (userConfig.theme == null) {
              throw new Error("Invalid theme " + userConfig.theme + ". Did you register it?");
            }
          }
          var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);
          [themeConfig, userConfig].forEach(function(config) {
            config.modules = config.modules || {};
            Object.keys(config.modules).forEach(function(module3) {
              if (config.modules[module3] === true) {
                config.modules[module3] = {};
              }
            });
          });
          var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));
          var moduleConfig = moduleNames.reduce(function(config, name) {
            var moduleClass = Quill.import("modules/" + name);
            if (moduleClass == null) {
              debug.error("Cannot load " + name + " module. Are you sure you registered it?");
            } else {
              config[name] = moduleClass.DEFAULTS || {};
            }
            return config;
          }, {});
          if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {
            userConfig.modules.toolbar = {
              container: userConfig.modules.toolbar
            };
          }
          userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, {modules: moduleConfig}, themeConfig, userConfig);
          ["bounds", "container", "scrollingContainer"].forEach(function(key2) {
            if (typeof userConfig[key2] === "string") {
              userConfig[key2] = document.querySelector(userConfig[key2]);
            }
          });
          userConfig.modules = Object.keys(userConfig.modules).reduce(function(config, name) {
            if (userConfig.modules[name]) {
              config[name] = userConfig.modules[name];
            }
            return config;
          }, {});
          return userConfig;
        }
        function modify(modifier, source2, index2, shift) {
          if (this.options.strict && !this.isEnabled() && source2 === _emitter4.default.sources.USER) {
            return new _quillDelta2.default();
          }
          var range = index2 == null ? null : this.getSelection();
          var oldDelta = this.editor.delta;
          var change = modifier();
          if (range != null) {
            if (index2 === true)
              index2 = range.index;
            if (shift == null) {
              range = shiftRange(range, change, source2);
            } else if (shift !== 0) {
              range = shiftRange(range, index2, shift, source2);
            }
            this.setSelection(range, _emitter4.default.sources.SILENT);
          }
          if (change.length() > 0) {
            var _emitter;
            var args = [_emitter4.default.events.TEXT_CHANGE, change, oldDelta, source2];
            (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
            if (source2 !== _emitter4.default.sources.SILENT) {
              var _emitter2;
              (_emitter2 = this.emitter).emit.apply(_emitter2, args);
            }
          }
          return change;
        }
        function overload(index2, length, name, value, source2) {
          var formats = {};
          if (typeof index2.index === "number" && typeof index2.length === "number") {
            if (typeof length !== "number") {
              source2 = value, value = name, name = length, length = index2.length, index2 = index2.index;
            } else {
              length = index2.length, index2 = index2.index;
            }
          } else if (typeof length !== "number") {
            source2 = value, value = name, name = length, length = 0;
          }
          if ((typeof name === "undefined" ? "undefined" : _typeof2(name)) === "object") {
            formats = name;
            source2 = value;
          } else if (typeof name === "string") {
            if (value != null) {
              formats[name] = value;
            } else {
              source2 = name;
            }
          }
          source2 = source2 || _emitter4.default.sources.API;
          return [index2, length, formats, source2];
        }
        function shiftRange(range, index2, length, source2) {
          if (range == null)
            return null;
          var start = void 0, end = void 0;
          if (index2 instanceof _quillDelta2.default) {
            var _map = [range.index, range.index + range.length].map(function(pos) {
              return index2.transformPosition(pos, source2 !== _emitter4.default.sources.USER);
            });
            var _map2 = _slicedToArray2(_map, 2);
            start = _map2[0];
            end = _map2[1];
          } else {
            var _map3 = [range.index, range.index + range.length].map(function(pos) {
              if (pos < index2 || pos === index2 && source2 === _emitter4.default.sources.USER)
                return pos;
              if (length >= 0) {
                return pos + length;
              } else {
                return Math.max(index2, pos + length);
              }
            });
            var _map4 = _slicedToArray2(_map3, 2);
            start = _map4[0];
            end = _map4[1];
          }
          return new _selection.Range(start, end - start);
        }
        exports2.expandConfig = expandConfig;
        exports2.overload = overload;
        exports2.default = Quill;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _text = __webpack_require__(7);
        var _text2 = _interopRequireDefault(_text);
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Inline = function(_Parchment$Inline) {
          _inherits2(Inline2, _Parchment$Inline);
          function Inline2() {
            _classCallCheck2(this, Inline2);
            return _possibleConstructorReturn2(this, (Inline2.__proto__ || Object.getPrototypeOf(Inline2)).apply(this, arguments));
          }
          _createClass(Inline2, [{
            key: "formatAt",
            value: function formatAt(index2, length, name, value) {
              if (Inline2.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {
                var blot = this.isolate(index2, length);
                if (value) {
                  blot.wrap(name, value);
                }
              } else {
                _get(Inline2.prototype.__proto__ || Object.getPrototypeOf(Inline2.prototype), "formatAt", this).call(this, index2, length, name, value);
              }
            }
          }, {
            key: "optimize",
            value: function optimize(context2) {
              _get(Inline2.prototype.__proto__ || Object.getPrototypeOf(Inline2.prototype), "optimize", this).call(this, context2);
              if (this.parent instanceof Inline2 && Inline2.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
                var parent = this.parent.isolate(this.offset(), this.length());
                this.moveChildren(parent);
                parent.wrap(this);
              }
            }
          }], [{
            key: "compare",
            value: function compare(self2, other) {
              var selfIndex = Inline2.order.indexOf(self2);
              var otherIndex = Inline2.order.indexOf(other);
              if (selfIndex >= 0 || otherIndex >= 0) {
                return selfIndex - otherIndex;
              } else if (self2 === other) {
                return 0;
              } else if (self2 < other) {
                return -1;
              } else {
                return 1;
              }
            }
          }]);
          return Inline2;
        }(_parchment2.default.Inline);
        Inline.allowedChildren = [Inline, _parchment2.default.Embed, _text2.default];
        Inline.order = [
          "cursor",
          "inline",
          "underline",
          "strike",
          "italic",
          "bold",
          "script",
          "link",
          "code"
        ];
        exports2.default = Inline;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var TextBlot = function(_Parchment$Text) {
          _inherits2(TextBlot2, _Parchment$Text);
          function TextBlot2() {
            _classCallCheck2(this, TextBlot2);
            return _possibleConstructorReturn2(this, (TextBlot2.__proto__ || Object.getPrototypeOf(TextBlot2)).apply(this, arguments));
          }
          return TextBlot2;
        }(_parchment2.default.Text);
        exports2.default = TextBlot;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _eventemitter = __webpack_require__(54);
        var _eventemitter2 = _interopRequireDefault(_eventemitter);
        var _logger = __webpack_require__(10);
        var _logger2 = _interopRequireDefault(_logger);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var debug = (0, _logger2.default)("quill:events");
        var EVENTS = ["selectionchange", "mousedown", "mouseup", "click"];
        EVENTS.forEach(function(eventName) {
          document.addEventListener(eventName, function() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            [].slice.call(document.querySelectorAll(".ql-container")).forEach(function(node) {
              if (node.__quill && node.__quill.emitter) {
                var _node$__quill$emitter;
                (_node$__quill$emitter = node.__quill.emitter).handleDOM.apply(_node$__quill$emitter, args);
              }
            });
          });
        });
        var Emitter = function(_EventEmitter) {
          _inherits2(Emitter2, _EventEmitter);
          function Emitter2() {
            _classCallCheck2(this, Emitter2);
            var _this = _possibleConstructorReturn2(this, (Emitter2.__proto__ || Object.getPrototypeOf(Emitter2)).call(this));
            _this.listeners = {};
            _this.on("error", debug.error);
            return _this;
          }
          _createClass(Emitter2, [{
            key: "emit",
            value: function emit() {
              debug.log.apply(debug, arguments);
              _get(Emitter2.prototype.__proto__ || Object.getPrototypeOf(Emitter2.prototype), "emit", this).apply(this, arguments);
            }
          }, {
            key: "handleDOM",
            value: function handleDOM(event) {
              for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              (this.listeners[event.type] || []).forEach(function(_ref) {
                var node = _ref.node, handler = _ref.handler;
                if (event.target === node || node.contains(event.target)) {
                  handler.apply(void 0, [event].concat(args));
                }
              });
            }
          }, {
            key: "listenDOM",
            value: function listenDOM(eventName, node, handler) {
              if (!this.listeners[eventName]) {
                this.listeners[eventName] = [];
              }
              this.listeners[eventName].push({node, handler});
            }
          }]);
          return Emitter2;
        }(_eventemitter2.default);
        Emitter.events = {
          EDITOR_CHANGE: "editor-change",
          SCROLL_BEFORE_UPDATE: "scroll-before-update",
          SCROLL_OPTIMIZE: "scroll-optimize",
          SCROLL_UPDATE: "scroll-update",
          SELECTION_CHANGE: "selection-change",
          TEXT_CHANGE: "text-change"
        };
        Emitter.sources = {
          API: "api",
          SILENT: "silent",
          USER: "user"
        };
        exports2.default = Emitter;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        var Module = function Module2(quill2) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          _classCallCheck2(this, Module2);
          this.quill = quill2;
          this.options = options;
        };
        Module.DEFAULTS = {};
        exports2.default = Module;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var levels = ["error", "warn", "log", "info"];
        var level = "warn";
        function debug(method) {
          if (levels.indexOf(method) <= levels.indexOf(level)) {
            var _console;
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            (_console = console)[method].apply(_console, args);
          }
        }
        function namespace(ns) {
          return levels.reduce(function(logger, method) {
            logger[method] = debug.bind(console, method, ns);
            return logger;
          }, {});
        }
        debug.level = namespace.level = function(newLevel) {
          level = newLevel;
        };
        exports2.default = namespace;
      },
      function(module2, exports2, __webpack_require__) {
        var pSlice = Array.prototype.slice;
        var objectKeys = __webpack_require__(52);
        var isArguments2 = __webpack_require__(53);
        var deepEqual = module2.exports = function(actual, expected, opts) {
          if (!opts)
            opts = {};
          if (actual === expected) {
            return true;
          } else if (actual instanceof Date && expected instanceof Date) {
            return actual.getTime() === expected.getTime();
          } else if (!actual || !expected || typeof actual != "object" && typeof expected != "object") {
            return opts.strict ? actual === expected : actual == expected;
          } else {
            return objEquiv(actual, expected, opts);
          }
        };
        function isUndefinedOrNull(value) {
          return value === null || value === void 0;
        }
        function isBuffer2(x) {
          if (!x || typeof x !== "object" || typeof x.length !== "number")
            return false;
          if (typeof x.copy !== "function" || typeof x.slice !== "function") {
            return false;
          }
          if (x.length > 0 && typeof x[0] !== "number")
            return false;
          return true;
        }
        function objEquiv(a, b, opts) {
          var i2, key2;
          if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
            return false;
          if (a.prototype !== b.prototype)
            return false;
          if (isArguments2(a)) {
            if (!isArguments2(b)) {
              return false;
            }
            a = pSlice.call(a);
            b = pSlice.call(b);
            return deepEqual(a, b, opts);
          }
          if (isBuffer2(a)) {
            if (!isBuffer2(b)) {
              return false;
            }
            if (a.length !== b.length)
              return false;
            for (i2 = 0; i2 < a.length; i2++) {
              if (a[i2] !== b[i2])
                return false;
            }
            return true;
          }
          try {
            var ka = objectKeys(a), kb = objectKeys(b);
          } catch (e) {
            return false;
          }
          if (ka.length != kb.length)
            return false;
          ka.sort();
          kb.sort();
          for (i2 = ka.length - 1; i2 >= 0; i2--) {
            if (ka[i2] != kb[i2])
              return false;
          }
          for (i2 = ka.length - 1; i2 >= 0; i2--) {
            key2 = ka[i2];
            if (!deepEqual(a[key2], b[key2], opts))
              return false;
          }
          return typeof a === typeof b;
        }
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {value: true});
        var Registry = __webpack_require__(1);
        var Attributor = function() {
          function Attributor2(attrName, keyName, options) {
            if (options === void 0) {
              options = {};
            }
            this.attrName = attrName;
            this.keyName = keyName;
            var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;
            if (options.scope != null) {
              this.scope = options.scope & Registry.Scope.LEVEL | attributeBit;
            } else {
              this.scope = Registry.Scope.ATTRIBUTE;
            }
            if (options.whitelist != null)
              this.whitelist = options.whitelist;
          }
          Attributor2.keys = function(node) {
            return [].map.call(node.attributes, function(item) {
              return item.name;
            });
          };
          Attributor2.prototype.add = function(node, value) {
            if (!this.canAdd(node, value))
              return false;
            node.setAttribute(this.keyName, value);
            return true;
          };
          Attributor2.prototype.canAdd = function(node, value) {
            var match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));
            if (match == null)
              return false;
            if (this.whitelist == null)
              return true;
            if (typeof value === "string") {
              return this.whitelist.indexOf(value.replace(/["']/g, "")) > -1;
            } else {
              return this.whitelist.indexOf(value) > -1;
            }
          };
          Attributor2.prototype.remove = function(node) {
            node.removeAttribute(this.keyName);
          };
          Attributor2.prototype.value = function(node) {
            var value = node.getAttribute(this.keyName);
            if (this.canAdd(node, value) && value) {
              return value;
            }
            return "";
          };
          return Attributor2;
        }();
        exports2.default = Attributor;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.default = exports2.Code = void 0;
        var _slicedToArray2 = function() {
          function sliceIterator(arr, i2) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i2 && _arr.length === i2)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"])
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          return function(arr, i2) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i2);
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
          };
        }();
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _quillDelta = __webpack_require__(2);
        var _quillDelta2 = _interopRequireDefault(_quillDelta);
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _block = __webpack_require__(4);
        var _block2 = _interopRequireDefault(_block);
        var _inline = __webpack_require__(6);
        var _inline2 = _interopRequireDefault(_inline);
        var _text = __webpack_require__(7);
        var _text2 = _interopRequireDefault(_text);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Code = function(_Inline) {
          _inherits2(Code2, _Inline);
          function Code2() {
            _classCallCheck2(this, Code2);
            return _possibleConstructorReturn2(this, (Code2.__proto__ || Object.getPrototypeOf(Code2)).apply(this, arguments));
          }
          return Code2;
        }(_inline2.default);
        Code.blotName = "code";
        Code.tagName = "CODE";
        var CodeBlock = function(_Block) {
          _inherits2(CodeBlock2, _Block);
          function CodeBlock2() {
            _classCallCheck2(this, CodeBlock2);
            return _possibleConstructorReturn2(this, (CodeBlock2.__proto__ || Object.getPrototypeOf(CodeBlock2)).apply(this, arguments));
          }
          _createClass(CodeBlock2, [{
            key: "delta",
            value: function delta() {
              var _this3 = this;
              var text = this.domNode.textContent;
              if (text.endsWith("\n")) {
                text = text.slice(0, -1);
              }
              return text.split("\n").reduce(function(delta2, frag) {
                return delta2.insert(frag).insert("\n", _this3.formats());
              }, new _quillDelta2.default());
            }
          }, {
            key: "format",
            value: function format(name, value) {
              if (name === this.statics.blotName && value)
                return;
              var _descendant = this.descendant(_text2.default, this.length() - 1), _descendant2 = _slicedToArray2(_descendant, 1), text = _descendant2[0];
              if (text != null) {
                text.deleteAt(text.length() - 1, 1);
              }
              _get(CodeBlock2.prototype.__proto__ || Object.getPrototypeOf(CodeBlock2.prototype), "format", this).call(this, name, value);
            }
          }, {
            key: "formatAt",
            value: function formatAt(index2, length, name, value) {
              if (length === 0)
                return;
              if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {
                return;
              }
              var nextNewline = this.newlineIndex(index2);
              if (nextNewline < 0 || nextNewline >= index2 + length)
                return;
              var prevNewline = this.newlineIndex(index2, true) + 1;
              var isolateLength = nextNewline - prevNewline + 1;
              var blot = this.isolate(prevNewline, isolateLength);
              var next = blot.next;
              blot.format(name, value);
              if (next instanceof CodeBlock2) {
                next.formatAt(0, index2 - prevNewline + length - isolateLength, name, value);
              }
            }
          }, {
            key: "insertAt",
            value: function insertAt(index2, value, def) {
              if (def != null)
                return;
              var _descendant3 = this.descendant(_text2.default, index2), _descendant4 = _slicedToArray2(_descendant3, 2), text = _descendant4[0], offset = _descendant4[1];
              text.insertAt(offset, value);
            }
          }, {
            key: "length",
            value: function length() {
              var length2 = this.domNode.textContent.length;
              if (!this.domNode.textContent.endsWith("\n")) {
                return length2 + 1;
              }
              return length2;
            }
          }, {
            key: "newlineIndex",
            value: function newlineIndex(searchIndex) {
              var reverse = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              if (!reverse) {
                var offset = this.domNode.textContent.slice(searchIndex).indexOf("\n");
                return offset > -1 ? searchIndex + offset : -1;
              } else {
                return this.domNode.textContent.slice(0, searchIndex).lastIndexOf("\n");
              }
            }
          }, {
            key: "optimize",
            value: function optimize(context2) {
              if (!this.domNode.textContent.endsWith("\n")) {
                this.appendChild(_parchment2.default.create("text", "\n"));
              }
              _get(CodeBlock2.prototype.__proto__ || Object.getPrototypeOf(CodeBlock2.prototype), "optimize", this).call(this, context2);
              var next = this.next;
              if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {
                next.optimize(context2);
                next.moveChildren(this);
                next.remove();
              }
            }
          }, {
            key: "replace",
            value: function replace(target) {
              _get(CodeBlock2.prototype.__proto__ || Object.getPrototypeOf(CodeBlock2.prototype), "replace", this).call(this, target);
              [].slice.call(this.domNode.querySelectorAll("*")).forEach(function(node) {
                var blot = _parchment2.default.find(node);
                if (blot == null) {
                  node.parentNode.removeChild(node);
                } else if (blot instanceof _parchment2.default.Embed) {
                  blot.remove();
                } else {
                  blot.unwrap();
                }
              });
            }
          }], [{
            key: "create",
            value: function create2(value) {
              var domNode = _get(CodeBlock2.__proto__ || Object.getPrototypeOf(CodeBlock2), "create", this).call(this, value);
              domNode.setAttribute("spellcheck", false);
              return domNode;
            }
          }, {
            key: "formats",
            value: function formats() {
              return true;
            }
          }]);
          return CodeBlock2;
        }(_block2.default);
        CodeBlock.blotName = "code-block";
        CodeBlock.tagName = "PRE";
        CodeBlock.TAB = "  ";
        exports2.Code = Code;
        exports2.default = CodeBlock;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
          return typeof obj;
        } : function(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
        var _slicedToArray2 = function() {
          function sliceIterator(arr, i2) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i2 && _arr.length === i2)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"])
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          return function(arr, i2) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i2);
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
          };
        }();
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _quillDelta = __webpack_require__(2);
        var _quillDelta2 = _interopRequireDefault(_quillDelta);
        var _op = __webpack_require__(20);
        var _op2 = _interopRequireDefault(_op);
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _code = __webpack_require__(13);
        var _code2 = _interopRequireDefault(_code);
        var _cursor = __webpack_require__(24);
        var _cursor2 = _interopRequireDefault(_cursor);
        var _block = __webpack_require__(4);
        var _block2 = _interopRequireDefault(_block);
        var _break = __webpack_require__(16);
        var _break2 = _interopRequireDefault(_break);
        var _clone = __webpack_require__(21);
        var _clone2 = _interopRequireDefault(_clone);
        var _deepEqual = __webpack_require__(11);
        var _deepEqual2 = _interopRequireDefault(_deepEqual);
        var _extend = __webpack_require__(3);
        var _extend2 = _interopRequireDefault(_extend);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _defineProperty2(obj, key2, value) {
          if (key2 in obj) {
            Object.defineProperty(obj, key2, {value, enumerable: true, configurable: true, writable: true});
          } else {
            obj[key2] = value;
          }
          return obj;
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        var ASCII = /^[ -~]*$/;
        var Editor = function() {
          function Editor2(scroll) {
            _classCallCheck2(this, Editor2);
            this.scroll = scroll;
            this.delta = this.getDelta();
          }
          _createClass(Editor2, [{
            key: "applyDelta",
            value: function applyDelta(delta) {
              var _this = this;
              var consumeNextNewline = false;
              this.scroll.update();
              var scrollLength = this.scroll.length();
              this.scroll.batchStart();
              delta = normalizeDelta(delta);
              delta.reduce(function(index2, op) {
                var length = op.retain || op.delete || op.insert.length || 1;
                var attributes = op.attributes || {};
                if (op.insert != null) {
                  if (typeof op.insert === "string") {
                    var text = op.insert;
                    if (text.endsWith("\n") && consumeNextNewline) {
                      consumeNextNewline = false;
                      text = text.slice(0, -1);
                    }
                    if (index2 >= scrollLength && !text.endsWith("\n")) {
                      consumeNextNewline = true;
                    }
                    _this.scroll.insertAt(index2, text);
                    var _scroll$line = _this.scroll.line(index2), _scroll$line2 = _slicedToArray2(_scroll$line, 2), line = _scroll$line2[0], offset = _scroll$line2[1];
                    var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));
                    if (line instanceof _block2.default) {
                      var _line$descendant = line.descendant(_parchment2.default.Leaf, offset), _line$descendant2 = _slicedToArray2(_line$descendant, 1), leaf = _line$descendant2[0];
                      formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));
                    }
                    attributes = _op2.default.attributes.diff(formats, attributes) || {};
                  } else if (_typeof2(op.insert) === "object") {
                    var key2 = Object.keys(op.insert)[0];
                    if (key2 == null)
                      return index2;
                    _this.scroll.insertAt(index2, key2, op.insert[key2]);
                  }
                  scrollLength += length;
                }
                Object.keys(attributes).forEach(function(name) {
                  _this.scroll.formatAt(index2, length, name, attributes[name]);
                });
                return index2 + length;
              }, 0);
              delta.reduce(function(index2, op) {
                if (typeof op.delete === "number") {
                  _this.scroll.deleteAt(index2, op.delete);
                  return index2;
                }
                return index2 + (op.retain || op.insert.length || 1);
              }, 0);
              this.scroll.batchEnd();
              return this.update(delta);
            }
          }, {
            key: "deleteText",
            value: function deleteText(index2, length) {
              this.scroll.deleteAt(index2, length);
              return this.update(new _quillDelta2.default().retain(index2).delete(length));
            }
          }, {
            key: "formatLine",
            value: function formatLine(index2, length) {
              var _this2 = this;
              var formats = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
              this.scroll.update();
              Object.keys(formats).forEach(function(format) {
                if (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format])
                  return;
                var lines = _this2.scroll.lines(index2, Math.max(length, 1));
                var lengthRemaining = length;
                lines.forEach(function(line) {
                  var lineLength = line.length();
                  if (!(line instanceof _code2.default)) {
                    line.format(format, formats[format]);
                  } else {
                    var codeIndex = index2 - line.offset(_this2.scroll);
                    var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;
                    line.formatAt(codeIndex, codeLength, format, formats[format]);
                  }
                  lengthRemaining -= lineLength;
                });
              });
              this.scroll.optimize();
              return this.update(new _quillDelta2.default().retain(index2).retain(length, (0, _clone2.default)(formats)));
            }
          }, {
            key: "formatText",
            value: function formatText(index2, length) {
              var _this3 = this;
              var formats = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
              Object.keys(formats).forEach(function(format) {
                _this3.scroll.formatAt(index2, length, format, formats[format]);
              });
              return this.update(new _quillDelta2.default().retain(index2).retain(length, (0, _clone2.default)(formats)));
            }
          }, {
            key: "getContents",
            value: function getContents(index2, length) {
              return this.delta.slice(index2, index2 + length);
            }
          }, {
            key: "getDelta",
            value: function getDelta() {
              return this.scroll.lines().reduce(function(delta, line) {
                return delta.concat(line.delta());
              }, new _quillDelta2.default());
            }
          }, {
            key: "getFormat",
            value: function getFormat(index2) {
              var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
              var lines = [], leaves = [];
              if (length === 0) {
                this.scroll.path(index2).forEach(function(path) {
                  var _path = _slicedToArray2(path, 1), blot = _path[0];
                  if (blot instanceof _block2.default) {
                    lines.push(blot);
                  } else if (blot instanceof _parchment2.default.Leaf) {
                    leaves.push(blot);
                  }
                });
              } else {
                lines = this.scroll.lines(index2, length);
                leaves = this.scroll.descendants(_parchment2.default.Leaf, index2, length);
              }
              var formatsArr = [lines, leaves].map(function(blots) {
                if (blots.length === 0)
                  return {};
                var formats = (0, _block.bubbleFormats)(blots.shift());
                while (Object.keys(formats).length > 0) {
                  var blot = blots.shift();
                  if (blot == null)
                    return formats;
                  formats = combineFormats((0, _block.bubbleFormats)(blot), formats);
                }
                return formats;
              });
              return _extend2.default.apply(_extend2.default, formatsArr);
            }
          }, {
            key: "getText",
            value: function getText(index2, length) {
              return this.getContents(index2, length).filter(function(op) {
                return typeof op.insert === "string";
              }).map(function(op) {
                return op.insert;
              }).join("");
            }
          }, {
            key: "insertEmbed",
            value: function insertEmbed(index2, embed, value) {
              this.scroll.insertAt(index2, embed, value);
              return this.update(new _quillDelta2.default().retain(index2).insert(_defineProperty2({}, embed, value)));
            }
          }, {
            key: "insertText",
            value: function insertText(index2, text) {
              var _this4 = this;
              var formats = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
              text = text.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
              this.scroll.insertAt(index2, text);
              Object.keys(formats).forEach(function(format) {
                _this4.scroll.formatAt(index2, text.length, format, formats[format]);
              });
              return this.update(new _quillDelta2.default().retain(index2).insert(text, (0, _clone2.default)(formats)));
            }
          }, {
            key: "isBlank",
            value: function isBlank() {
              if (this.scroll.children.length == 0)
                return true;
              if (this.scroll.children.length > 1)
                return false;
              var block = this.scroll.children.head;
              if (block.statics.blotName !== _block2.default.blotName)
                return false;
              if (block.children.length > 1)
                return false;
              return block.children.head instanceof _break2.default;
            }
          }, {
            key: "removeFormat",
            value: function removeFormat(index2, length) {
              var text = this.getText(index2, length);
              var _scroll$line3 = this.scroll.line(index2 + length), _scroll$line4 = _slicedToArray2(_scroll$line3, 2), line = _scroll$line4[0], offset = _scroll$line4[1];
              var suffixLength = 0, suffix = new _quillDelta2.default();
              if (line != null) {
                if (!(line instanceof _code2.default)) {
                  suffixLength = line.length() - offset;
                } else {
                  suffixLength = line.newlineIndex(offset) - offset + 1;
                }
                suffix = line.delta().slice(offset, offset + suffixLength - 1).insert("\n");
              }
              var contents = this.getContents(index2, length + suffixLength);
              var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));
              var delta = new _quillDelta2.default().retain(index2).concat(diff);
              return this.applyDelta(delta);
            }
          }, {
            key: "update",
            value: function update(change) {
              var mutations = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
              var cursorIndex = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
              var oldDelta = this.delta;
              if (mutations.length === 1 && mutations[0].type === "characterData" && mutations[0].target.data.match(ASCII) && _parchment2.default.find(mutations[0].target)) {
                var textBlot = _parchment2.default.find(mutations[0].target);
                var formats = (0, _block.bubbleFormats)(textBlot);
                var index2 = textBlot.offset(this.scroll);
                var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, "");
                var oldText = new _quillDelta2.default().insert(oldValue);
                var newText = new _quillDelta2.default().insert(textBlot.value());
                var diffDelta = new _quillDelta2.default().retain(index2).concat(oldText.diff(newText, cursorIndex));
                change = diffDelta.reduce(function(delta, op) {
                  if (op.insert) {
                    return delta.insert(op.insert, formats);
                  } else {
                    return delta.push(op);
                  }
                }, new _quillDelta2.default());
                this.delta = oldDelta.compose(change);
              } else {
                this.delta = this.getDelta();
                if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {
                  change = oldDelta.diff(this.delta, cursorIndex);
                }
              }
              return change;
            }
          }]);
          return Editor2;
        }();
        function combineFormats(formats, combined) {
          return Object.keys(combined).reduce(function(merged, name) {
            if (formats[name] == null)
              return merged;
            if (combined[name] === formats[name]) {
              merged[name] = combined[name];
            } else if (Array.isArray(combined[name])) {
              if (combined[name].indexOf(formats[name]) < 0) {
                merged[name] = combined[name].concat([formats[name]]);
              }
            } else {
              merged[name] = [combined[name], formats[name]];
            }
            return merged;
          }, {});
        }
        function normalizeDelta(delta) {
          return delta.reduce(function(delta2, op) {
            if (op.insert === 1) {
              var attributes = (0, _clone2.default)(op.attributes);
              delete attributes["image"];
              return delta2.insert({image: op.attributes.image}, attributes);
            }
            if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {
              op = (0, _clone2.default)(op);
              if (op.attributes.list) {
                op.attributes.list = "ordered";
              } else {
                op.attributes.list = "bullet";
                delete op.attributes.bullet;
              }
            }
            if (typeof op.insert === "string") {
              var text = op.insert.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
              return delta2.insert(text, op.attributes);
            }
            return delta2.push(op);
          }, new _quillDelta2.default());
        }
        exports2.default = Editor;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.default = exports2.Range = void 0;
        var _slicedToArray2 = function() {
          function sliceIterator(arr, i2) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i2 && _arr.length === i2)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"])
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          return function(arr, i2) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i2);
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
          };
        }();
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _clone = __webpack_require__(21);
        var _clone2 = _interopRequireDefault(_clone);
        var _deepEqual = __webpack_require__(11);
        var _deepEqual2 = _interopRequireDefault(_deepEqual);
        var _emitter3 = __webpack_require__(8);
        var _emitter4 = _interopRequireDefault(_emitter3);
        var _logger = __webpack_require__(10);
        var _logger2 = _interopRequireDefault(_logger);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _toConsumableArray2(arr) {
          if (Array.isArray(arr)) {
            for (var i2 = 0, arr2 = Array(arr.length); i2 < arr.length; i2++) {
              arr2[i2] = arr[i2];
            }
            return arr2;
          } else {
            return Array.from(arr);
          }
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        var debug = (0, _logger2.default)("quill:selection");
        var Range = function Range2(index2) {
          var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
          _classCallCheck2(this, Range2);
          this.index = index2;
          this.length = length;
        };
        var Selection = function() {
          function Selection2(scroll, emitter) {
            var _this = this;
            _classCallCheck2(this, Selection2);
            this.emitter = emitter;
            this.scroll = scroll;
            this.composing = false;
            this.mouseDown = false;
            this.root = this.scroll.domNode;
            this.cursor = _parchment2.default.create("cursor", this);
            this.lastRange = this.savedRange = new Range(0, 0);
            this.handleComposition();
            this.handleDragging();
            this.emitter.listenDOM("selectionchange", document, function() {
              if (!_this.mouseDown) {
                setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 1);
              }
            });
            this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function(type, delta) {
              if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {
                _this.update(_emitter4.default.sources.SILENT);
              }
            });
            this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function() {
              if (!_this.hasFocus())
                return;
              var native = _this.getNativeRange();
              if (native == null)
                return;
              if (native.start.node === _this.cursor.textNode)
                return;
              _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function() {
                try {
                  _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
                } catch (ignored) {
                }
              });
            });
            this.emitter.on(_emitter4.default.events.SCROLL_OPTIMIZE, function(mutations, context2) {
              if (context2.range) {
                var _context$range = context2.range, startNode = _context$range.startNode, startOffset = _context$range.startOffset, endNode = _context$range.endNode, endOffset = _context$range.endOffset;
                _this.setNativeRange(startNode, startOffset, endNode, endOffset);
              }
            });
            this.update(_emitter4.default.sources.SILENT);
          }
          _createClass(Selection2, [{
            key: "handleComposition",
            value: function handleComposition() {
              var _this2 = this;
              this.root.addEventListener("compositionstart", function() {
                _this2.composing = true;
              });
              this.root.addEventListener("compositionend", function() {
                _this2.composing = false;
                if (_this2.cursor.parent) {
                  var range = _this2.cursor.restore();
                  if (!range)
                    return;
                  setTimeout(function() {
                    _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
                  }, 1);
                }
              });
            }
          }, {
            key: "handleDragging",
            value: function handleDragging() {
              var _this3 = this;
              this.emitter.listenDOM("mousedown", document.body, function() {
                _this3.mouseDown = true;
              });
              this.emitter.listenDOM("mouseup", document.body, function() {
                _this3.mouseDown = false;
                _this3.update(_emitter4.default.sources.USER);
              });
            }
          }, {
            key: "focus",
            value: function focus() {
              if (this.hasFocus())
                return;
              this.root.focus();
              this.setRange(this.savedRange);
            }
          }, {
            key: "format",
            value: function format(_format, value) {
              if (this.scroll.whitelist != null && !this.scroll.whitelist[_format])
                return;
              this.scroll.update();
              var nativeRange = this.getNativeRange();
              if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK))
                return;
              if (nativeRange.start.node !== this.cursor.textNode) {
                var blot = _parchment2.default.find(nativeRange.start.node, false);
                if (blot == null)
                  return;
                if (blot instanceof _parchment2.default.Leaf) {
                  var after = blot.split(nativeRange.start.offset);
                  blot.parent.insertBefore(this.cursor, after);
                } else {
                  blot.insertBefore(this.cursor, nativeRange.start.node);
                }
                this.cursor.attach();
              }
              this.cursor.format(_format, value);
              this.scroll.optimize();
              this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
              this.update();
            }
          }, {
            key: "getBounds",
            value: function getBounds(index2) {
              var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
              var scrollLength = this.scroll.length();
              index2 = Math.min(index2, scrollLength - 1);
              length = Math.min(index2 + length, scrollLength - 1) - index2;
              var node = void 0, _scroll$leaf = this.scroll.leaf(index2), _scroll$leaf2 = _slicedToArray2(_scroll$leaf, 2), leaf = _scroll$leaf2[0], offset = _scroll$leaf2[1];
              if (leaf == null)
                return null;
              var _leaf$position = leaf.position(offset, true);
              var _leaf$position2 = _slicedToArray2(_leaf$position, 2);
              node = _leaf$position2[0];
              offset = _leaf$position2[1];
              var range = document.createRange();
              if (length > 0) {
                range.setStart(node, offset);
                var _scroll$leaf3 = this.scroll.leaf(index2 + length);
                var _scroll$leaf4 = _slicedToArray2(_scroll$leaf3, 2);
                leaf = _scroll$leaf4[0];
                offset = _scroll$leaf4[1];
                if (leaf == null)
                  return null;
                var _leaf$position3 = leaf.position(offset, true);
                var _leaf$position4 = _slicedToArray2(_leaf$position3, 2);
                node = _leaf$position4[0];
                offset = _leaf$position4[1];
                range.setEnd(node, offset);
                return range.getBoundingClientRect();
              } else {
                var side = "left";
                var rect = void 0;
                if (node instanceof Text) {
                  if (offset < node.data.length) {
                    range.setStart(node, offset);
                    range.setEnd(node, offset + 1);
                  } else {
                    range.setStart(node, offset - 1);
                    range.setEnd(node, offset);
                    side = "right";
                  }
                  rect = range.getBoundingClientRect();
                } else {
                  rect = leaf.domNode.getBoundingClientRect();
                  if (offset > 0)
                    side = "right";
                }
                return {
                  bottom: rect.top + rect.height,
                  height: rect.height,
                  left: rect[side],
                  right: rect[side],
                  top: rect.top,
                  width: 0
                };
              }
            }
          }, {
            key: "getNativeRange",
            value: function getNativeRange() {
              var selection = document.getSelection();
              if (selection == null || selection.rangeCount <= 0)
                return null;
              var nativeRange = selection.getRangeAt(0);
              if (nativeRange == null)
                return null;
              var range = this.normalizeNative(nativeRange);
              debug.info("getNativeRange", range);
              return range;
            }
          }, {
            key: "getRange",
            value: function getRange() {
              var normalized = this.getNativeRange();
              if (normalized == null)
                return [null, null];
              var range = this.normalizedToRange(normalized);
              return [range, normalized];
            }
          }, {
            key: "hasFocus",
            value: function hasFocus() {
              return document.activeElement === this.root;
            }
          }, {
            key: "normalizedToRange",
            value: function normalizedToRange(range) {
              var _this4 = this;
              var positions = [[range.start.node, range.start.offset]];
              if (!range.native.collapsed) {
                positions.push([range.end.node, range.end.offset]);
              }
              var indexes = positions.map(function(position) {
                var _position = _slicedToArray2(position, 2), node = _position[0], offset = _position[1];
                var blot = _parchment2.default.find(node, true);
                var index2 = blot.offset(_this4.scroll);
                if (offset === 0) {
                  return index2;
                } else if (blot instanceof _parchment2.default.Container) {
                  return index2 + blot.length();
                } else {
                  return index2 + blot.index(node, offset);
                }
              });
              var end = Math.min(Math.max.apply(Math, _toConsumableArray2(indexes)), this.scroll.length() - 1);
              var start = Math.min.apply(Math, [end].concat(_toConsumableArray2(indexes)));
              return new Range(start, end - start);
            }
          }, {
            key: "normalizeNative",
            value: function normalizeNative(nativeRange) {
              if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {
                return null;
              }
              var range = {
                start: {node: nativeRange.startContainer, offset: nativeRange.startOffset},
                end: {node: nativeRange.endContainer, offset: nativeRange.endOffset},
                native: nativeRange
              };
              [range.start, range.end].forEach(function(position) {
                var node = position.node, offset = position.offset;
                while (!(node instanceof Text) && node.childNodes.length > 0) {
                  if (node.childNodes.length > offset) {
                    node = node.childNodes[offset];
                    offset = 0;
                  } else if (node.childNodes.length === offset) {
                    node = node.lastChild;
                    offset = node instanceof Text ? node.data.length : node.childNodes.length + 1;
                  } else {
                    break;
                  }
                }
                position.node = node, position.offset = offset;
              });
              return range;
            }
          }, {
            key: "rangeToNative",
            value: function rangeToNative(range) {
              var _this5 = this;
              var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];
              var args = [];
              var scrollLength = this.scroll.length();
              indexes.forEach(function(index2, i2) {
                index2 = Math.min(scrollLength - 1, index2);
                var node = void 0, _scroll$leaf5 = _this5.scroll.leaf(index2), _scroll$leaf6 = _slicedToArray2(_scroll$leaf5, 2), leaf = _scroll$leaf6[0], offset = _scroll$leaf6[1];
                var _leaf$position5 = leaf.position(offset, i2 !== 0);
                var _leaf$position6 = _slicedToArray2(_leaf$position5, 2);
                node = _leaf$position6[0];
                offset = _leaf$position6[1];
                args.push(node, offset);
              });
              if (args.length < 2) {
                args = args.concat(args);
              }
              return args;
            }
          }, {
            key: "scrollIntoView",
            value: function scrollIntoView(scrollingContainer) {
              var range = this.lastRange;
              if (range == null)
                return;
              var bounds = this.getBounds(range.index, range.length);
              if (bounds == null)
                return;
              var limit = this.scroll.length() - 1;
              var _scroll$line = this.scroll.line(Math.min(range.index, limit)), _scroll$line2 = _slicedToArray2(_scroll$line, 1), first = _scroll$line2[0];
              var last = first;
              if (range.length > 0) {
                var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));
                var _scroll$line4 = _slicedToArray2(_scroll$line3, 1);
                last = _scroll$line4[0];
              }
              if (first == null || last == null)
                return;
              var scrollBounds = scrollingContainer.getBoundingClientRect();
              if (bounds.top < scrollBounds.top) {
                scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;
              } else if (bounds.bottom > scrollBounds.bottom) {
                scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;
              }
            }
          }, {
            key: "setNativeRange",
            value: function setNativeRange(startNode, startOffset) {
              var endNode = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : startNode;
              var endOffset = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : startOffset;
              var force = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
              debug.info("setNativeRange", startNode, startOffset, endNode, endOffset);
              if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {
                return;
              }
              var selection = document.getSelection();
              if (selection == null)
                return;
              if (startNode != null) {
                if (!this.hasFocus())
                  this.root.focus();
                var native = (this.getNativeRange() || {}).native;
                if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {
                  if (startNode.tagName == "BR") {
                    startOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);
                    startNode = startNode.parentNode;
                  }
                  if (endNode.tagName == "BR") {
                    endOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);
                    endNode = endNode.parentNode;
                  }
                  var range = document.createRange();
                  range.setStart(startNode, startOffset);
                  range.setEnd(endNode, endOffset);
                  selection.removeAllRanges();
                  selection.addRange(range);
                }
              } else {
                selection.removeAllRanges();
                this.root.blur();
                document.body.focus();
              }
            }
          }, {
            key: "setRange",
            value: function setRange(range) {
              var force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              var source2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _emitter4.default.sources.API;
              if (typeof force === "string") {
                source2 = force;
                force = false;
              }
              debug.info("setRange", range);
              if (range != null) {
                var args = this.rangeToNative(range);
                this.setNativeRange.apply(this, _toConsumableArray2(args).concat([force]));
              } else {
                this.setNativeRange(null);
              }
              this.update(source2);
            }
          }, {
            key: "update",
            value: function update() {
              var source2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _emitter4.default.sources.USER;
              var oldRange = this.lastRange;
              var _getRange = this.getRange(), _getRange2 = _slicedToArray2(_getRange, 2), lastRange = _getRange2[0], nativeRange = _getRange2[1];
              this.lastRange = lastRange;
              if (this.lastRange != null) {
                this.savedRange = this.lastRange;
              }
              if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {
                var _emitter;
                if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
                  this.cursor.restore();
                }
                var args = [_emitter4.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source2];
                (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
                if (source2 !== _emitter4.default.sources.SILENT) {
                  var _emitter2;
                  (_emitter2 = this.emitter).emit.apply(_emitter2, args);
                }
              }
            }
          }]);
          return Selection2;
        }();
        function contains(parent, descendant) {
          try {
            descendant.parentNode;
          } catch (e) {
            return false;
          }
          if (descendant instanceof Text) {
            descendant = descendant.parentNode;
          }
          return parent.contains(descendant);
        }
        exports2.Range = Range;
        exports2.default = Selection;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Break = function(_Parchment$Embed) {
          _inherits2(Break2, _Parchment$Embed);
          function Break2() {
            _classCallCheck2(this, Break2);
            return _possibleConstructorReturn2(this, (Break2.__proto__ || Object.getPrototypeOf(Break2)).apply(this, arguments));
          }
          _createClass(Break2, [{
            key: "insertInto",
            value: function insertInto(parent, ref) {
              if (parent.children.length === 0) {
                _get(Break2.prototype.__proto__ || Object.getPrototypeOf(Break2.prototype), "insertInto", this).call(this, parent, ref);
              } else {
                this.remove();
              }
            }
          }, {
            key: "length",
            value: function length() {
              return 0;
            }
          }, {
            key: "value",
            value: function value() {
              return "";
            }
          }], [{
            key: "value",
            value: function value() {
              return void 0;
            }
          }]);
          return Break2;
        }(_parchment2.default.Embed);
        Break.blotName = "break";
        Break.tagName = "BR";
        exports2.default = Break;
      },
      function(module2, exports2, __webpack_require__) {
        var __extends = this && this.__extends || function() {
          var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
            d.__proto__ = b;
          } || function(d, b) {
            for (var p in b)
              if (b.hasOwnProperty(p))
                d[p] = b[p];
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports2, "__esModule", {value: true});
        var linked_list_1 = __webpack_require__(44);
        var shadow_1 = __webpack_require__(30);
        var Registry = __webpack_require__(1);
        var ContainerBlot = function(_super) {
          __extends(ContainerBlot2, _super);
          function ContainerBlot2(domNode) {
            var _this = _super.call(this, domNode) || this;
            _this.build();
            return _this;
          }
          ContainerBlot2.prototype.appendChild = function(other) {
            this.insertBefore(other);
          };
          ContainerBlot2.prototype.attach = function() {
            _super.prototype.attach.call(this);
            this.children.forEach(function(child) {
              child.attach();
            });
          };
          ContainerBlot2.prototype.build = function() {
            var _this = this;
            this.children = new linked_list_1.default();
            [].slice.call(this.domNode.childNodes).reverse().forEach(function(node) {
              try {
                var child = makeBlot(node);
                _this.insertBefore(child, _this.children.head || void 0);
              } catch (err) {
                if (err instanceof Registry.ParchmentError)
                  return;
                else
                  throw err;
              }
            });
          };
          ContainerBlot2.prototype.deleteAt = function(index2, length) {
            if (index2 === 0 && length === this.length()) {
              return this.remove();
            }
            this.children.forEachAt(index2, length, function(child, offset, length2) {
              child.deleteAt(offset, length2);
            });
          };
          ContainerBlot2.prototype.descendant = function(criteria, index2) {
            var _a = this.children.find(index2), child = _a[0], offset = _a[1];
            if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {
              return [child, offset];
            } else if (child instanceof ContainerBlot2) {
              return child.descendant(criteria, offset);
            } else {
              return [null, -1];
            }
          };
          ContainerBlot2.prototype.descendants = function(criteria, index2, length) {
            if (index2 === void 0) {
              index2 = 0;
            }
            if (length === void 0) {
              length = Number.MAX_VALUE;
            }
            var descendants = [];
            var lengthLeft = length;
            this.children.forEachAt(index2, length, function(child, index3, length2) {
              if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {
                descendants.push(child);
              }
              if (child instanceof ContainerBlot2) {
                descendants = descendants.concat(child.descendants(criteria, index3, lengthLeft));
              }
              lengthLeft -= length2;
            });
            return descendants;
          };
          ContainerBlot2.prototype.detach = function() {
            this.children.forEach(function(child) {
              child.detach();
            });
            _super.prototype.detach.call(this);
          };
          ContainerBlot2.prototype.formatAt = function(index2, length, name, value) {
            this.children.forEachAt(index2, length, function(child, offset, length2) {
              child.formatAt(offset, length2, name, value);
            });
          };
          ContainerBlot2.prototype.insertAt = function(index2, value, def) {
            var _a = this.children.find(index2), child = _a[0], offset = _a[1];
            if (child) {
              child.insertAt(offset, value, def);
            } else {
              var blot = def == null ? Registry.create("text", value) : Registry.create(value, def);
              this.appendChild(blot);
            }
          };
          ContainerBlot2.prototype.insertBefore = function(childBlot, refBlot) {
            if (this.statics.allowedChildren != null && !this.statics.allowedChildren.some(function(child) {
              return childBlot instanceof child;
            })) {
              throw new Registry.ParchmentError("Cannot insert " + childBlot.statics.blotName + " into " + this.statics.blotName);
            }
            childBlot.insertInto(this, refBlot);
          };
          ContainerBlot2.prototype.length = function() {
            return this.children.reduce(function(memo, child) {
              return memo + child.length();
            }, 0);
          };
          ContainerBlot2.prototype.moveChildren = function(targetParent, refNode) {
            this.children.forEach(function(child) {
              targetParent.insertBefore(child, refNode);
            });
          };
          ContainerBlot2.prototype.optimize = function(context2) {
            _super.prototype.optimize.call(this, context2);
            if (this.children.length === 0) {
              if (this.statics.defaultChild != null) {
                var child = Registry.create(this.statics.defaultChild);
                this.appendChild(child);
                child.optimize(context2);
              } else {
                this.remove();
              }
            }
          };
          ContainerBlot2.prototype.path = function(index2, inclusive) {
            if (inclusive === void 0) {
              inclusive = false;
            }
            var _a = this.children.find(index2, inclusive), child = _a[0], offset = _a[1];
            var position = [[this, index2]];
            if (child instanceof ContainerBlot2) {
              return position.concat(child.path(offset, inclusive));
            } else if (child != null) {
              position.push([child, offset]);
            }
            return position;
          };
          ContainerBlot2.prototype.removeChild = function(child) {
            this.children.remove(child);
          };
          ContainerBlot2.prototype.replace = function(target) {
            if (target instanceof ContainerBlot2) {
              target.moveChildren(this);
            }
            _super.prototype.replace.call(this, target);
          };
          ContainerBlot2.prototype.split = function(index2, force) {
            if (force === void 0) {
              force = false;
            }
            if (!force) {
              if (index2 === 0)
                return this;
              if (index2 === this.length())
                return this.next;
            }
            var after = this.clone();
            this.parent.insertBefore(after, this.next);
            this.children.forEachAt(index2, this.length(), function(child, offset, length) {
              child = child.split(offset, force);
              after.appendChild(child);
            });
            return after;
          };
          ContainerBlot2.prototype.unwrap = function() {
            this.moveChildren(this.parent, this.next);
            this.remove();
          };
          ContainerBlot2.prototype.update = function(mutations, context2) {
            var _this = this;
            var addedNodes = [];
            var removedNodes = [];
            mutations.forEach(function(mutation) {
              if (mutation.target === _this.domNode && mutation.type === "childList") {
                addedNodes.push.apply(addedNodes, mutation.addedNodes);
                removedNodes.push.apply(removedNodes, mutation.removedNodes);
              }
            });
            removedNodes.forEach(function(node) {
              if (node.parentNode != null && node.tagName !== "IFRAME" && document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
                return;
              }
              var blot = Registry.find(node);
              if (blot == null)
                return;
              if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {
                blot.detach();
              }
            });
            addedNodes.filter(function(node) {
              return node.parentNode == _this.domNode;
            }).sort(function(a, b) {
              if (a === b)
                return 0;
              if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {
                return 1;
              }
              return -1;
            }).forEach(function(node) {
              var refBlot = null;
              if (node.nextSibling != null) {
                refBlot = Registry.find(node.nextSibling);
              }
              var blot = makeBlot(node);
              if (blot.next != refBlot || blot.next == null) {
                if (blot.parent != null) {
                  blot.parent.removeChild(_this);
                }
                _this.insertBefore(blot, refBlot || void 0);
              }
            });
          };
          return ContainerBlot2;
        }(shadow_1.default);
        function makeBlot(node) {
          var blot = Registry.find(node);
          if (blot == null) {
            try {
              blot = Registry.create(node);
            } catch (e) {
              blot = Registry.create(Registry.Scope.INLINE);
              [].slice.call(node.childNodes).forEach(function(child) {
                blot.domNode.appendChild(child);
              });
              if (node.parentNode) {
                node.parentNode.replaceChild(blot.domNode, node);
              }
              blot.attach();
            }
          }
          return blot;
        }
        exports2.default = ContainerBlot;
      },
      function(module2, exports2, __webpack_require__) {
        var __extends = this && this.__extends || function() {
          var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
            d.__proto__ = b;
          } || function(d, b) {
            for (var p in b)
              if (b.hasOwnProperty(p))
                d[p] = b[p];
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports2, "__esModule", {value: true});
        var attributor_1 = __webpack_require__(12);
        var store_1 = __webpack_require__(31);
        var container_1 = __webpack_require__(17);
        var Registry = __webpack_require__(1);
        var FormatBlot = function(_super) {
          __extends(FormatBlot2, _super);
          function FormatBlot2(domNode) {
            var _this = _super.call(this, domNode) || this;
            _this.attributes = new store_1.default(_this.domNode);
            return _this;
          }
          FormatBlot2.formats = function(domNode) {
            if (typeof this.tagName === "string") {
              return true;
            } else if (Array.isArray(this.tagName)) {
              return domNode.tagName.toLowerCase();
            }
            return void 0;
          };
          FormatBlot2.prototype.format = function(name, value) {
            var format = Registry.query(name);
            if (format instanceof attributor_1.default) {
              this.attributes.attribute(format, value);
            } else if (value) {
              if (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {
                this.replaceWith(name, value);
              }
            }
          };
          FormatBlot2.prototype.formats = function() {
            var formats = this.attributes.values();
            var format = this.statics.formats(this.domNode);
            if (format != null) {
              formats[this.statics.blotName] = format;
            }
            return formats;
          };
          FormatBlot2.prototype.replaceWith = function(name, value) {
            var replacement = _super.prototype.replaceWith.call(this, name, value);
            this.attributes.copy(replacement);
            return replacement;
          };
          FormatBlot2.prototype.update = function(mutations, context2) {
            var _this = this;
            _super.prototype.update.call(this, mutations, context2);
            if (mutations.some(function(mutation) {
              return mutation.target === _this.domNode && mutation.type === "attributes";
            })) {
              this.attributes.build();
            }
          };
          FormatBlot2.prototype.wrap = function(name, value) {
            var wrapper = _super.prototype.wrap.call(this, name, value);
            if (wrapper instanceof FormatBlot2 && wrapper.statics.scope === this.statics.scope) {
              this.attributes.move(wrapper);
            }
            return wrapper;
          };
          return FormatBlot2;
        }(container_1.default);
        exports2.default = FormatBlot;
      },
      function(module2, exports2, __webpack_require__) {
        var __extends = this && this.__extends || function() {
          var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
            d.__proto__ = b;
          } || function(d, b) {
            for (var p in b)
              if (b.hasOwnProperty(p))
                d[p] = b[p];
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports2, "__esModule", {value: true});
        var shadow_1 = __webpack_require__(30);
        var Registry = __webpack_require__(1);
        var LeafBlot = function(_super) {
          __extends(LeafBlot2, _super);
          function LeafBlot2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          LeafBlot2.value = function(domNode) {
            return true;
          };
          LeafBlot2.prototype.index = function(node, offset) {
            if (this.domNode === node || this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
              return Math.min(offset, 1);
            }
            return -1;
          };
          LeafBlot2.prototype.position = function(index2, inclusive) {
            var offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);
            if (index2 > 0)
              offset += 1;
            return [this.parent.domNode, offset];
          };
          LeafBlot2.prototype.value = function() {
            var _a;
            return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;
          };
          LeafBlot2.scope = Registry.Scope.INLINE_BLOT;
          return LeafBlot2;
        }(shadow_1.default);
        exports2.default = LeafBlot;
      },
      function(module2, exports2, __webpack_require__) {
        var equal = __webpack_require__(11);
        var extend2 = __webpack_require__(3);
        var lib2 = {
          attributes: {
            compose: function(a, b, keepNull) {
              if (typeof a !== "object")
                a = {};
              if (typeof b !== "object")
                b = {};
              var attributes = extend2(true, {}, b);
              if (!keepNull) {
                attributes = Object.keys(attributes).reduce(function(copy, key3) {
                  if (attributes[key3] != null) {
                    copy[key3] = attributes[key3];
                  }
                  return copy;
                }, {});
              }
              for (var key2 in a) {
                if (a[key2] !== void 0 && b[key2] === void 0) {
                  attributes[key2] = a[key2];
                }
              }
              return Object.keys(attributes).length > 0 ? attributes : void 0;
            },
            diff: function(a, b) {
              if (typeof a !== "object")
                a = {};
              if (typeof b !== "object")
                b = {};
              var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function(attributes2, key2) {
                if (!equal(a[key2], b[key2])) {
                  attributes2[key2] = b[key2] === void 0 ? null : b[key2];
                }
                return attributes2;
              }, {});
              return Object.keys(attributes).length > 0 ? attributes : void 0;
            },
            transform: function(a, b, priority) {
              if (typeof a !== "object")
                return b;
              if (typeof b !== "object")
                return void 0;
              if (!priority)
                return b;
              var attributes = Object.keys(b).reduce(function(attributes2, key2) {
                if (a[key2] === void 0)
                  attributes2[key2] = b[key2];
                return attributes2;
              }, {});
              return Object.keys(attributes).length > 0 ? attributes : void 0;
            }
          },
          iterator: function(ops) {
            return new Iterator(ops);
          },
          length: function(op) {
            if (typeof op["delete"] === "number") {
              return op["delete"];
            } else if (typeof op.retain === "number") {
              return op.retain;
            } else {
              return typeof op.insert === "string" ? op.insert.length : 1;
            }
          }
        };
        function Iterator(ops) {
          this.ops = ops;
          this.index = 0;
          this.offset = 0;
        }
        Iterator.prototype.hasNext = function() {
          return this.peekLength() < Infinity;
        };
        Iterator.prototype.next = function(length) {
          if (!length)
            length = Infinity;
          var nextOp = this.ops[this.index];
          if (nextOp) {
            var offset = this.offset;
            var opLength = lib2.length(nextOp);
            if (length >= opLength - offset) {
              length = opLength - offset;
              this.index += 1;
              this.offset = 0;
            } else {
              this.offset += length;
            }
            if (typeof nextOp["delete"] === "number") {
              return {delete: length};
            } else {
              var retOp = {};
              if (nextOp.attributes) {
                retOp.attributes = nextOp.attributes;
              }
              if (typeof nextOp.retain === "number") {
                retOp.retain = length;
              } else if (typeof nextOp.insert === "string") {
                retOp.insert = nextOp.insert.substr(offset, length);
              } else {
                retOp.insert = nextOp.insert;
              }
              return retOp;
            }
          } else {
            return {retain: Infinity};
          }
        };
        Iterator.prototype.peek = function() {
          return this.ops[this.index];
        };
        Iterator.prototype.peekLength = function() {
          if (this.ops[this.index]) {
            return lib2.length(this.ops[this.index]) - this.offset;
          } else {
            return Infinity;
          }
        };
        Iterator.prototype.peekType = function() {
          if (this.ops[this.index]) {
            if (typeof this.ops[this.index]["delete"] === "number") {
              return "delete";
            } else if (typeof this.ops[this.index].retain === "number") {
              return "retain";
            } else {
              return "insert";
            }
          }
          return "retain";
        };
        Iterator.prototype.rest = function() {
          if (!this.hasNext()) {
            return [];
          } else if (this.offset === 0) {
            return this.ops.slice(this.index);
          } else {
            var offset = this.offset;
            var index2 = this.index;
            var next = this.next();
            var rest = this.ops.slice(this.index);
            this.offset = offset;
            this.index = index2;
            return [next].concat(rest);
          }
        };
        module2.exports = lib2;
      },
      function(module2, exports2) {
        var clone2 = function() {
          function _instanceof(obj, type) {
            return type != null && obj instanceof type;
          }
          var nativeMap;
          try {
            nativeMap = Map;
          } catch (_) {
            nativeMap = function() {
            };
          }
          var nativeSet;
          try {
            nativeSet = Set;
          } catch (_) {
            nativeSet = function() {
            };
          }
          var nativePromise;
          try {
            nativePromise = Promise;
          } catch (_) {
            nativePromise = function() {
            };
          }
          function clone3(parent, circular, depth, prototype, includeNonEnumerable) {
            if (typeof circular === "object") {
              depth = circular.depth;
              prototype = circular.prototype;
              includeNonEnumerable = circular.includeNonEnumerable;
              circular = circular.circular;
            }
            var allParents = [];
            var allChildren = [];
            var useBuffer = typeof Buffer != "undefined";
            if (typeof circular == "undefined")
              circular = true;
            if (typeof depth == "undefined")
              depth = Infinity;
            function _clone(parent2, depth2) {
              if (parent2 === null)
                return null;
              if (depth2 === 0)
                return parent2;
              var child;
              var proto;
              if (typeof parent2 != "object") {
                return parent2;
              }
              if (_instanceof(parent2, nativeMap)) {
                child = new nativeMap();
              } else if (_instanceof(parent2, nativeSet)) {
                child = new nativeSet();
              } else if (_instanceof(parent2, nativePromise)) {
                child = new nativePromise(function(resolve, reject) {
                  parent2.then(function(value) {
                    resolve(_clone(value, depth2 - 1));
                  }, function(err) {
                    reject(_clone(err, depth2 - 1));
                  });
                });
              } else if (clone3.__isArray(parent2)) {
                child = [];
              } else if (clone3.__isRegExp(parent2)) {
                child = new RegExp(parent2.source, __getRegExpFlags(parent2));
                if (parent2.lastIndex)
                  child.lastIndex = parent2.lastIndex;
              } else if (clone3.__isDate(parent2)) {
                child = new Date(parent2.getTime());
              } else if (useBuffer && Buffer.isBuffer(parent2)) {
                if (Buffer.allocUnsafe) {
                  child = Buffer.allocUnsafe(parent2.length);
                } else {
                  child = new Buffer(parent2.length);
                }
                parent2.copy(child);
                return child;
              } else if (_instanceof(parent2, Error)) {
                child = Object.create(parent2);
              } else {
                if (typeof prototype == "undefined") {
                  proto = Object.getPrototypeOf(parent2);
                  child = Object.create(proto);
                } else {
                  child = Object.create(prototype);
                  proto = prototype;
                }
              }
              if (circular) {
                var index2 = allParents.indexOf(parent2);
                if (index2 != -1) {
                  return allChildren[index2];
                }
                allParents.push(parent2);
                allChildren.push(child);
              }
              if (_instanceof(parent2, nativeMap)) {
                parent2.forEach(function(value, key2) {
                  var keyChild = _clone(key2, depth2 - 1);
                  var valueChild = _clone(value, depth2 - 1);
                  child.set(keyChild, valueChild);
                });
              }
              if (_instanceof(parent2, nativeSet)) {
                parent2.forEach(function(value) {
                  var entryChild = _clone(value, depth2 - 1);
                  child.add(entryChild);
                });
              }
              for (var i2 in parent2) {
                var attrs;
                if (proto) {
                  attrs = Object.getOwnPropertyDescriptor(proto, i2);
                }
                if (attrs && attrs.set == null) {
                  continue;
                }
                child[i2] = _clone(parent2[i2], depth2 - 1);
              }
              if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(parent2);
                for (var i2 = 0; i2 < symbols.length; i2++) {
                  var symbol = symbols[i2];
                  var descriptor = Object.getOwnPropertyDescriptor(parent2, symbol);
                  if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                    continue;
                  }
                  child[symbol] = _clone(parent2[symbol], depth2 - 1);
                  if (!descriptor.enumerable) {
                    Object.defineProperty(child, symbol, {
                      enumerable: false
                    });
                  }
                }
              }
              if (includeNonEnumerable) {
                var allPropertyNames = Object.getOwnPropertyNames(parent2);
                for (var i2 = 0; i2 < allPropertyNames.length; i2++) {
                  var propertyName = allPropertyNames[i2];
                  var descriptor = Object.getOwnPropertyDescriptor(parent2, propertyName);
                  if (descriptor && descriptor.enumerable) {
                    continue;
                  }
                  child[propertyName] = _clone(parent2[propertyName], depth2 - 1);
                  Object.defineProperty(child, propertyName, {
                    enumerable: false
                  });
                }
              }
              return child;
            }
            return _clone(parent, depth);
          }
          clone3.clonePrototype = function clonePrototype(parent) {
            if (parent === null)
              return null;
            var c = function() {
            };
            c.prototype = parent;
            return new c();
          };
          function __objToStr(o) {
            return Object.prototype.toString.call(o);
          }
          clone3.__objToStr = __objToStr;
          function __isDate(o) {
            return typeof o === "object" && __objToStr(o) === "[object Date]";
          }
          clone3.__isDate = __isDate;
          function __isArray(o) {
            return typeof o === "object" && __objToStr(o) === "[object Array]";
          }
          clone3.__isArray = __isArray;
          function __isRegExp(o) {
            return typeof o === "object" && __objToStr(o) === "[object RegExp]";
          }
          clone3.__isRegExp = __isRegExp;
          function __getRegExpFlags(re) {
            var flags2 = "";
            if (re.global)
              flags2 += "g";
            if (re.ignoreCase)
              flags2 += "i";
            if (re.multiline)
              flags2 += "m";
            return flags2;
          }
          clone3.__getRegExpFlags = __getRegExpFlags;
          return clone3;
        }();
        if (typeof module2 === "object" && module2.exports) {
          module2.exports = clone2;
        }
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _slicedToArray2 = function() {
          function sliceIterator(arr, i2) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i2 && _arr.length === i2)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"])
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          return function(arr, i2) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i2);
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
          };
        }();
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _emitter = __webpack_require__(8);
        var _emitter2 = _interopRequireDefault(_emitter);
        var _block = __webpack_require__(4);
        var _block2 = _interopRequireDefault(_block);
        var _break = __webpack_require__(16);
        var _break2 = _interopRequireDefault(_break);
        var _code = __webpack_require__(13);
        var _code2 = _interopRequireDefault(_code);
        var _container = __webpack_require__(25);
        var _container2 = _interopRequireDefault(_container);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        function isLine(blot) {
          return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;
        }
        var Scroll = function(_Parchment$Scroll) {
          _inherits2(Scroll2, _Parchment$Scroll);
          function Scroll2(domNode, config) {
            _classCallCheck2(this, Scroll2);
            var _this = _possibleConstructorReturn2(this, (Scroll2.__proto__ || Object.getPrototypeOf(Scroll2)).call(this, domNode));
            _this.emitter = config.emitter;
            if (Array.isArray(config.whitelist)) {
              _this.whitelist = config.whitelist.reduce(function(whitelist, format) {
                whitelist[format] = true;
                return whitelist;
              }, {});
            }
            _this.domNode.addEventListener("DOMNodeInserted", function() {
            });
            _this.optimize();
            _this.enable();
            return _this;
          }
          _createClass(Scroll2, [{
            key: "batchStart",
            value: function batchStart() {
              this.batch = true;
            }
          }, {
            key: "batchEnd",
            value: function batchEnd() {
              this.batch = false;
              this.optimize();
            }
          }, {
            key: "deleteAt",
            value: function deleteAt(index2, length) {
              var _line = this.line(index2), _line2 = _slicedToArray2(_line, 2), first = _line2[0], offset = _line2[1];
              var _line3 = this.line(index2 + length), _line4 = _slicedToArray2(_line3, 1), last = _line4[0];
              _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "deleteAt", this).call(this, index2, length);
              if (last != null && first !== last && offset > 0) {
                if (first instanceof _block.BlockEmbed || last instanceof _block.BlockEmbed) {
                  this.optimize();
                  return;
                }
                if (first instanceof _code2.default) {
                  var newlineIndex = first.newlineIndex(first.length(), true);
                  if (newlineIndex > -1) {
                    first = first.split(newlineIndex + 1);
                    if (first === last) {
                      this.optimize();
                      return;
                    }
                  }
                } else if (last instanceof _code2.default) {
                  var _newlineIndex = last.newlineIndex(0);
                  if (_newlineIndex > -1) {
                    last.split(_newlineIndex + 1);
                  }
                }
                var ref = last.children.head instanceof _break2.default ? null : last.children.head;
                first.moveChildren(last, ref);
                first.remove();
              }
              this.optimize();
            }
          }, {
            key: "enable",
            value: function enable() {
              var enabled = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
              this.domNode.setAttribute("contenteditable", enabled);
            }
          }, {
            key: "formatAt",
            value: function formatAt(index2, length, format, value) {
              if (this.whitelist != null && !this.whitelist[format])
                return;
              _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "formatAt", this).call(this, index2, length, format, value);
              this.optimize();
            }
          }, {
            key: "insertAt",
            value: function insertAt(index2, value, def) {
              if (def != null && this.whitelist != null && !this.whitelist[value])
                return;
              if (index2 >= this.length()) {
                if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {
                  var blot = _parchment2.default.create(this.statics.defaultChild);
                  this.appendChild(blot);
                  if (def == null && value.endsWith("\n")) {
                    value = value.slice(0, -1);
                  }
                  blot.insertAt(0, value, def);
                } else {
                  var embed = _parchment2.default.create(value, def);
                  this.appendChild(embed);
                }
              } else {
                _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "insertAt", this).call(this, index2, value, def);
              }
              this.optimize();
            }
          }, {
            key: "insertBefore",
            value: function insertBefore(blot, ref) {
              if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {
                var wrapper = _parchment2.default.create(this.statics.defaultChild);
                wrapper.appendChild(blot);
                blot = wrapper;
              }
              _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "insertBefore", this).call(this, blot, ref);
            }
          }, {
            key: "leaf",
            value: function leaf(index2) {
              return this.path(index2).pop() || [null, -1];
            }
          }, {
            key: "line",
            value: function line(index2) {
              if (index2 === this.length()) {
                return this.line(index2 - 1);
              }
              return this.descendant(isLine, index2);
            }
          }, {
            key: "lines",
            value: function lines() {
              var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
              var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Number.MAX_VALUE;
              var getLines = function getLines2(blot, index3, length2) {
                var lines2 = [], lengthLeft = length2;
                blot.children.forEachAt(index3, length2, function(child, index4, length3) {
                  if (isLine(child)) {
                    lines2.push(child);
                  } else if (child instanceof _parchment2.default.Container) {
                    lines2 = lines2.concat(getLines2(child, index4, lengthLeft));
                  }
                  lengthLeft -= length3;
                });
                return lines2;
              };
              return getLines(this, index2, length);
            }
          }, {
            key: "optimize",
            value: function optimize() {
              var mutations = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
              var context2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              if (this.batch === true)
                return;
              _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "optimize", this).call(this, mutations, context2);
              if (mutations.length > 0) {
                this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context2);
              }
            }
          }, {
            key: "path",
            value: function path(index2) {
              return _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "path", this).call(this, index2).slice(1);
            }
          }, {
            key: "update",
            value: function update(mutations) {
              if (this.batch === true)
                return;
              var source2 = _emitter2.default.sources.USER;
              if (typeof mutations === "string") {
                source2 = mutations;
              }
              if (!Array.isArray(mutations)) {
                mutations = this.observer.takeRecords();
              }
              if (mutations.length > 0) {
                this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source2, mutations);
              }
              _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "update", this).call(this, mutations.concat([]));
              if (mutations.length > 0) {
                this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source2, mutations);
              }
            }
          }]);
          return Scroll2;
        }(_parchment2.default.Scroll);
        Scroll.blotName = "scroll";
        Scroll.className = "ql-editor";
        Scroll.tagName = "DIV";
        Scroll.defaultChild = "block";
        Scroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];
        exports2.default = Scroll;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.SHORTKEY = exports2.default = void 0;
        var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
          return typeof obj;
        } : function(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
        var _slicedToArray2 = function() {
          function sliceIterator(arr, i2) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i2 && _arr.length === i2)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"])
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          return function(arr, i2) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i2);
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
          };
        }();
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _clone = __webpack_require__(21);
        var _clone2 = _interopRequireDefault(_clone);
        var _deepEqual = __webpack_require__(11);
        var _deepEqual2 = _interopRequireDefault(_deepEqual);
        var _extend = __webpack_require__(3);
        var _extend2 = _interopRequireDefault(_extend);
        var _quillDelta = __webpack_require__(2);
        var _quillDelta2 = _interopRequireDefault(_quillDelta);
        var _op = __webpack_require__(20);
        var _op2 = _interopRequireDefault(_op);
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _quill = __webpack_require__(5);
        var _quill2 = _interopRequireDefault(_quill);
        var _logger = __webpack_require__(10);
        var _logger2 = _interopRequireDefault(_logger);
        var _module = __webpack_require__(9);
        var _module2 = _interopRequireDefault(_module);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _defineProperty2(obj, key2, value) {
          if (key2 in obj) {
            Object.defineProperty(obj, key2, {value, enumerable: true, configurable: true, writable: true});
          } else {
            obj[key2] = value;
          }
          return obj;
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var debug = (0, _logger2.default)("quill:keyboard");
        var SHORTKEY = /Mac/i.test(navigator.platform) ? "metaKey" : "ctrlKey";
        var Keyboard = function(_Module) {
          _inherits2(Keyboard2, _Module);
          _createClass(Keyboard2, null, [{
            key: "match",
            value: function match(evt, binding) {
              binding = normalize(binding);
              if (["altKey", "ctrlKey", "metaKey", "shiftKey"].some(function(key2) {
                return !!binding[key2] !== evt[key2] && binding[key2] !== null;
              })) {
                return false;
              }
              return binding.key === (evt.which || evt.keyCode);
            }
          }]);
          function Keyboard2(quill2, options) {
            _classCallCheck2(this, Keyboard2);
            var _this = _possibleConstructorReturn2(this, (Keyboard2.__proto__ || Object.getPrototypeOf(Keyboard2)).call(this, quill2, options));
            _this.bindings = {};
            Object.keys(_this.options.bindings).forEach(function(name) {
              if (name === "list autofill" && quill2.scroll.whitelist != null && !quill2.scroll.whitelist["list"]) {
                return;
              }
              if (_this.options.bindings[name]) {
                _this.addBinding(_this.options.bindings[name]);
              }
            });
            _this.addBinding({key: Keyboard2.keys.ENTER, shiftKey: null}, handleEnter);
            _this.addBinding({key: Keyboard2.keys.ENTER, metaKey: null, ctrlKey: null, altKey: null}, function() {
            });
            if (/Firefox/i.test(navigator.userAgent)) {
              _this.addBinding({key: Keyboard2.keys.BACKSPACE}, {collapsed: true}, handleBackspace);
              _this.addBinding({key: Keyboard2.keys.DELETE}, {collapsed: true}, handleDelete);
            } else {
              _this.addBinding({key: Keyboard2.keys.BACKSPACE}, {collapsed: true, prefix: /^.?$/}, handleBackspace);
              _this.addBinding({key: Keyboard2.keys.DELETE}, {collapsed: true, suffix: /^.?$/}, handleDelete);
            }
            _this.addBinding({key: Keyboard2.keys.BACKSPACE}, {collapsed: false}, handleDeleteRange);
            _this.addBinding({key: Keyboard2.keys.DELETE}, {collapsed: false}, handleDeleteRange);
            _this.addBinding({key: Keyboard2.keys.BACKSPACE, altKey: null, ctrlKey: null, metaKey: null, shiftKey: null}, {collapsed: true, offset: 0}, handleBackspace);
            _this.listen();
            return _this;
          }
          _createClass(Keyboard2, [{
            key: "addBinding",
            value: function addBinding(key2) {
              var context2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              var handler = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
              var binding = normalize(key2);
              if (binding == null || binding.key == null) {
                return debug.warn("Attempted to add invalid keyboard binding", binding);
              }
              if (typeof context2 === "function") {
                context2 = {handler: context2};
              }
              if (typeof handler === "function") {
                handler = {handler};
              }
              binding = (0, _extend2.default)(binding, context2, handler);
              this.bindings[binding.key] = this.bindings[binding.key] || [];
              this.bindings[binding.key].push(binding);
            }
          }, {
            key: "listen",
            value: function listen() {
              var _this2 = this;
              this.quill.root.addEventListener("keydown", function(evt) {
                if (evt.defaultPrevented)
                  return;
                var which = evt.which || evt.keyCode;
                var bindings = (_this2.bindings[which] || []).filter(function(binding) {
                  return Keyboard2.match(evt, binding);
                });
                if (bindings.length === 0)
                  return;
                var range = _this2.quill.getSelection();
                if (range == null || !_this2.quill.hasFocus())
                  return;
                var _quill$getLine = _this2.quill.getLine(range.index), _quill$getLine2 = _slicedToArray2(_quill$getLine, 2), line = _quill$getLine2[0], offset = _quill$getLine2[1];
                var _quill$getLeaf = _this2.quill.getLeaf(range.index), _quill$getLeaf2 = _slicedToArray2(_quill$getLeaf, 2), leafStart = _quill$getLeaf2[0], offsetStart = _quill$getLeaf2[1];
                var _ref = range.length === 0 ? [leafStart, offsetStart] : _this2.quill.getLeaf(range.index + range.length), _ref2 = _slicedToArray2(_ref, 2), leafEnd = _ref2[0], offsetEnd = _ref2[1];
                var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : "";
                var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : "";
                var curContext = {
                  collapsed: range.length === 0,
                  empty: range.length === 0 && line.length() <= 1,
                  format: _this2.quill.getFormat(range),
                  offset,
                  prefix: prefixText,
                  suffix: suffixText
                };
                var prevented = bindings.some(function(binding) {
                  if (binding.collapsed != null && binding.collapsed !== curContext.collapsed)
                    return false;
                  if (binding.empty != null && binding.empty !== curContext.empty)
                    return false;
                  if (binding.offset != null && binding.offset !== curContext.offset)
                    return false;
                  if (Array.isArray(binding.format)) {
                    if (binding.format.every(function(name) {
                      return curContext.format[name] == null;
                    })) {
                      return false;
                    }
                  } else if (_typeof2(binding.format) === "object") {
                    if (!Object.keys(binding.format).every(function(name) {
                      if (binding.format[name] === true)
                        return curContext.format[name] != null;
                      if (binding.format[name] === false)
                        return curContext.format[name] == null;
                      return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);
                    })) {
                      return false;
                    }
                  }
                  if (binding.prefix != null && !binding.prefix.test(curContext.prefix))
                    return false;
                  if (binding.suffix != null && !binding.suffix.test(curContext.suffix))
                    return false;
                  return binding.handler.call(_this2, range, curContext) !== true;
                });
                if (prevented) {
                  evt.preventDefault();
                }
              });
            }
          }]);
          return Keyboard2;
        }(_module2.default);
        Keyboard.keys = {
          BACKSPACE: 8,
          TAB: 9,
          ENTER: 13,
          ESCAPE: 27,
          LEFT: 37,
          UP: 38,
          RIGHT: 39,
          DOWN: 40,
          DELETE: 46
        };
        Keyboard.DEFAULTS = {
          bindings: {
            bold: makeFormatHandler("bold"),
            italic: makeFormatHandler("italic"),
            underline: makeFormatHandler("underline"),
            indent: {
              key: Keyboard.keys.TAB,
              format: ["blockquote", "indent", "list"],
              handler: function handler(range, context2) {
                if (context2.collapsed && context2.offset !== 0)
                  return true;
                this.quill.format("indent", "+1", _quill2.default.sources.USER);
              }
            },
            outdent: {
              key: Keyboard.keys.TAB,
              shiftKey: true,
              format: ["blockquote", "indent", "list"],
              handler: function handler(range, context2) {
                if (context2.collapsed && context2.offset !== 0)
                  return true;
                this.quill.format("indent", "-1", _quill2.default.sources.USER);
              }
            },
            "outdent backspace": {
              key: Keyboard.keys.BACKSPACE,
              collapsed: true,
              shiftKey: null,
              metaKey: null,
              ctrlKey: null,
              altKey: null,
              format: ["indent", "list"],
              offset: 0,
              handler: function handler(range, context2) {
                if (context2.format.indent != null) {
                  this.quill.format("indent", "-1", _quill2.default.sources.USER);
                } else if (context2.format.list != null) {
                  this.quill.format("list", false, _quill2.default.sources.USER);
                }
              }
            },
            "indent code-block": makeCodeBlockHandler(true),
            "outdent code-block": makeCodeBlockHandler(false),
            "remove tab": {
              key: Keyboard.keys.TAB,
              shiftKey: true,
              collapsed: true,
              prefix: /\t$/,
              handler: function handler(range) {
                this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);
              }
            },
            tab: {
              key: Keyboard.keys.TAB,
              handler: function handler(range) {
                this.quill.history.cutoff();
                var delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert("	");
                this.quill.updateContents(delta, _quill2.default.sources.USER);
                this.quill.history.cutoff();
                this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
              }
            },
            "list empty enter": {
              key: Keyboard.keys.ENTER,
              collapsed: true,
              format: ["list"],
              empty: true,
              handler: function handler(range, context2) {
                this.quill.format("list", false, _quill2.default.sources.USER);
                if (context2.format.indent) {
                  this.quill.format("indent", false, _quill2.default.sources.USER);
                }
              }
            },
            "checklist enter": {
              key: Keyboard.keys.ENTER,
              collapsed: true,
              format: {list: "checked"},
              handler: function handler(range) {
                var _quill$getLine3 = this.quill.getLine(range.index), _quill$getLine4 = _slicedToArray2(_quill$getLine3, 2), line = _quill$getLine4[0], offset = _quill$getLine4[1];
                var formats = (0, _extend2.default)({}, line.formats(), {list: "checked"});
                var delta = new _quillDelta2.default().retain(range.index).insert("\n", formats).retain(line.length() - offset - 1).retain(1, {list: "unchecked"});
                this.quill.updateContents(delta, _quill2.default.sources.USER);
                this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                this.quill.scrollIntoView();
              }
            },
            "header enter": {
              key: Keyboard.keys.ENTER,
              collapsed: true,
              format: ["header"],
              suffix: /^$/,
              handler: function handler(range, context2) {
                var _quill$getLine5 = this.quill.getLine(range.index), _quill$getLine6 = _slicedToArray2(_quill$getLine5, 2), line = _quill$getLine6[0], offset = _quill$getLine6[1];
                var delta = new _quillDelta2.default().retain(range.index).insert("\n", context2.format).retain(line.length() - offset - 1).retain(1, {header: null});
                this.quill.updateContents(delta, _quill2.default.sources.USER);
                this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                this.quill.scrollIntoView();
              }
            },
            "list autofill": {
              key: " ",
              collapsed: true,
              format: {list: false},
              prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
              handler: function handler(range, context2) {
                var length = context2.prefix.length;
                var _quill$getLine7 = this.quill.getLine(range.index), _quill$getLine8 = _slicedToArray2(_quill$getLine7, 2), line = _quill$getLine8[0], offset = _quill$getLine8[1];
                if (offset > length)
                  return true;
                var value = void 0;
                switch (context2.prefix.trim()) {
                  case "[]":
                  case "[ ]":
                    value = "unchecked";
                    break;
                  case "[x]":
                    value = "checked";
                    break;
                  case "-":
                  case "*":
                    value = "bullet";
                    break;
                  default:
                    value = "ordered";
                }
                this.quill.insertText(range.index, " ", _quill2.default.sources.USER);
                this.quill.history.cutoff();
                var delta = new _quillDelta2.default().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, {list: value});
                this.quill.updateContents(delta, _quill2.default.sources.USER);
                this.quill.history.cutoff();
                this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);
              }
            },
            "code exit": {
              key: Keyboard.keys.ENTER,
              collapsed: true,
              format: ["code-block"],
              prefix: /\n\n$/,
              suffix: /^\s+$/,
              handler: function handler(range) {
                var _quill$getLine9 = this.quill.getLine(range.index), _quill$getLine10 = _slicedToArray2(_quill$getLine9, 2), line = _quill$getLine10[0], offset = _quill$getLine10[1];
                var delta = new _quillDelta2.default().retain(range.index + line.length() - offset - 2).retain(1, {"code-block": null}).delete(1);
                this.quill.updateContents(delta, _quill2.default.sources.USER);
              }
            },
            "embed left": makeEmbedArrowHandler(Keyboard.keys.LEFT, false),
            "embed left shift": makeEmbedArrowHandler(Keyboard.keys.LEFT, true),
            "embed right": makeEmbedArrowHandler(Keyboard.keys.RIGHT, false),
            "embed right shift": makeEmbedArrowHandler(Keyboard.keys.RIGHT, true)
          }
        };
        function makeEmbedArrowHandler(key2, shiftKey) {
          var _ref3;
          var where = key2 === Keyboard.keys.LEFT ? "prefix" : "suffix";
          return _ref3 = {
            key: key2,
            shiftKey,
            altKey: null
          }, _defineProperty2(_ref3, where, /^$/), _defineProperty2(_ref3, "handler", function handler(range) {
            var index2 = range.index;
            if (key2 === Keyboard.keys.RIGHT) {
              index2 += range.length + 1;
            }
            var _quill$getLeaf3 = this.quill.getLeaf(index2), _quill$getLeaf4 = _slicedToArray2(_quill$getLeaf3, 1), leaf = _quill$getLeaf4[0];
            if (!(leaf instanceof _parchment2.default.Embed))
              return true;
            if (key2 === Keyboard.keys.LEFT) {
              if (shiftKey) {
                this.quill.setSelection(range.index - 1, range.length + 1, _quill2.default.sources.USER);
              } else {
                this.quill.setSelection(range.index - 1, _quill2.default.sources.USER);
              }
            } else {
              if (shiftKey) {
                this.quill.setSelection(range.index, range.length + 1, _quill2.default.sources.USER);
              } else {
                this.quill.setSelection(range.index + range.length + 1, _quill2.default.sources.USER);
              }
            }
            return false;
          }), _ref3;
        }
        function handleBackspace(range, context2) {
          if (range.index === 0 || this.quill.getLength() <= 1)
            return;
          var _quill$getLine11 = this.quill.getLine(range.index), _quill$getLine12 = _slicedToArray2(_quill$getLine11, 1), line = _quill$getLine12[0];
          var formats = {};
          if (context2.offset === 0) {
            var _quill$getLine13 = this.quill.getLine(range.index - 1), _quill$getLine14 = _slicedToArray2(_quill$getLine13, 1), prev = _quill$getLine14[0];
            if (prev != null && prev.length() > 1) {
              var curFormats = line.formats();
              var prevFormats = this.quill.getFormat(range.index - 1, 1);
              formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};
            }
          }
          var length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context2.prefix) ? 2 : 1;
          this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);
          if (Object.keys(formats).length > 0) {
            this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);
          }
          this.quill.focus();
        }
        function handleDelete(range, context2) {
          var length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context2.suffix) ? 2 : 1;
          if (range.index >= this.quill.getLength() - length)
            return;
          var formats = {}, nextLength = 0;
          var _quill$getLine15 = this.quill.getLine(range.index), _quill$getLine16 = _slicedToArray2(_quill$getLine15, 1), line = _quill$getLine16[0];
          if (context2.offset >= line.length() - 1) {
            var _quill$getLine17 = this.quill.getLine(range.index + 1), _quill$getLine18 = _slicedToArray2(_quill$getLine17, 1), next = _quill$getLine18[0];
            if (next) {
              var curFormats = line.formats();
              var nextFormats = this.quill.getFormat(range.index, 1);
              formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};
              nextLength = next.length();
            }
          }
          this.quill.deleteText(range.index, length, _quill2.default.sources.USER);
          if (Object.keys(formats).length > 0) {
            this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);
          }
        }
        function handleDeleteRange(range) {
          var lines = this.quill.getLines(range);
          var formats = {};
          if (lines.length > 1) {
            var firstFormats = lines[0].formats();
            var lastFormats = lines[lines.length - 1].formats();
            formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};
          }
          this.quill.deleteText(range, _quill2.default.sources.USER);
          if (Object.keys(formats).length > 0) {
            this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);
          }
          this.quill.setSelection(range.index, _quill2.default.sources.SILENT);
          this.quill.focus();
        }
        function handleEnter(range, context2) {
          var _this3 = this;
          if (range.length > 0) {
            this.quill.scroll.deleteAt(range.index, range.length);
          }
          var lineFormats = Object.keys(context2.format).reduce(function(lineFormats2, format) {
            if (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context2.format[format])) {
              lineFormats2[format] = context2.format[format];
            }
            return lineFormats2;
          }, {});
          this.quill.insertText(range.index, "\n", lineFormats, _quill2.default.sources.USER);
          this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
          this.quill.focus();
          Object.keys(context2.format).forEach(function(name) {
            if (lineFormats[name] != null)
              return;
            if (Array.isArray(context2.format[name]))
              return;
            if (name === "link")
              return;
            _this3.quill.format(name, context2.format[name], _quill2.default.sources.USER);
          });
        }
        function makeCodeBlockHandler(indent) {
          return {
            key: Keyboard.keys.TAB,
            shiftKey: !indent,
            format: {"code-block": true},
            handler: function handler(range) {
              var CodeBlock = _parchment2.default.query("code-block");
              var index2 = range.index, length = range.length;
              var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index2), _quill$scroll$descend2 = _slicedToArray2(_quill$scroll$descend, 2), block = _quill$scroll$descend2[0], offset = _quill$scroll$descend2[1];
              if (block == null)
                return;
              var scrollIndex = this.quill.getIndex(block);
              var start = block.newlineIndex(offset, true) + 1;
              var end = block.newlineIndex(scrollIndex + offset + length);
              var lines = block.domNode.textContent.slice(start, end).split("\n");
              offset = 0;
              lines.forEach(function(line, i2) {
                if (indent) {
                  block.insertAt(start + offset, CodeBlock.TAB);
                  offset += CodeBlock.TAB.length;
                  if (i2 === 0) {
                    index2 += CodeBlock.TAB.length;
                  } else {
                    length += CodeBlock.TAB.length;
                  }
                } else if (line.startsWith(CodeBlock.TAB)) {
                  block.deleteAt(start + offset, CodeBlock.TAB.length);
                  offset -= CodeBlock.TAB.length;
                  if (i2 === 0) {
                    index2 -= CodeBlock.TAB.length;
                  } else {
                    length -= CodeBlock.TAB.length;
                  }
                }
                offset += line.length + 1;
              });
              this.quill.update(_quill2.default.sources.USER);
              this.quill.setSelection(index2, length, _quill2.default.sources.SILENT);
            }
          };
        }
        function makeFormatHandler(format) {
          return {
            key: format[0].toUpperCase(),
            shortKey: true,
            handler: function handler(range, context2) {
              this.quill.format(format, !context2.format[format], _quill2.default.sources.USER);
            }
          };
        }
        function normalize(binding) {
          if (typeof binding === "string" || typeof binding === "number") {
            return normalize({key: binding});
          }
          if ((typeof binding === "undefined" ? "undefined" : _typeof2(binding)) === "object") {
            binding = (0, _clone2.default)(binding, false);
          }
          if (typeof binding.key === "string") {
            if (Keyboard.keys[binding.key.toUpperCase()] != null) {
              binding.key = Keyboard.keys[binding.key.toUpperCase()];
            } else if (binding.key.length === 1) {
              binding.key = binding.key.toUpperCase().charCodeAt(0);
            } else {
              return null;
            }
          }
          if (binding.shortKey) {
            binding[SHORTKEY] = binding.shortKey;
            delete binding.shortKey;
          }
          return binding;
        }
        exports2.default = Keyboard;
        exports2.SHORTKEY = SHORTKEY;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _slicedToArray2 = function() {
          function sliceIterator(arr, i2) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i2 && _arr.length === i2)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"])
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          return function(arr, i2) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i2);
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _text = __webpack_require__(7);
        var _text2 = _interopRequireDefault(_text);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Cursor = function(_Parchment$Embed) {
          _inherits2(Cursor2, _Parchment$Embed);
          _createClass(Cursor2, null, [{
            key: "value",
            value: function value() {
              return void 0;
            }
          }]);
          function Cursor2(domNode, selection) {
            _classCallCheck2(this, Cursor2);
            var _this = _possibleConstructorReturn2(this, (Cursor2.__proto__ || Object.getPrototypeOf(Cursor2)).call(this, domNode));
            _this.selection = selection;
            _this.textNode = document.createTextNode(Cursor2.CONTENTS);
            _this.domNode.appendChild(_this.textNode);
            _this._length = 0;
            return _this;
          }
          _createClass(Cursor2, [{
            key: "detach",
            value: function detach() {
              if (this.parent != null)
                this.parent.removeChild(this);
            }
          }, {
            key: "format",
            value: function format(name, value) {
              if (this._length !== 0) {
                return _get(Cursor2.prototype.__proto__ || Object.getPrototypeOf(Cursor2.prototype), "format", this).call(this, name, value);
              }
              var target = this, index2 = 0;
              while (target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT) {
                index2 += target.offset(target.parent);
                target = target.parent;
              }
              if (target != null) {
                this._length = Cursor2.CONTENTS.length;
                target.optimize();
                target.formatAt(index2, Cursor2.CONTENTS.length, name, value);
                this._length = 0;
              }
            }
          }, {
            key: "index",
            value: function index2(node, offset) {
              if (node === this.textNode)
                return 0;
              return _get(Cursor2.prototype.__proto__ || Object.getPrototypeOf(Cursor2.prototype), "index", this).call(this, node, offset);
            }
          }, {
            key: "length",
            value: function length() {
              return this._length;
            }
          }, {
            key: "position",
            value: function position() {
              return [this.textNode, this.textNode.data.length];
            }
          }, {
            key: "remove",
            value: function remove() {
              _get(Cursor2.prototype.__proto__ || Object.getPrototypeOf(Cursor2.prototype), "remove", this).call(this);
              this.parent = null;
            }
          }, {
            key: "restore",
            value: function restore() {
              if (this.selection.composing || this.parent == null)
                return;
              var textNode = this.textNode;
              var range = this.selection.getNativeRange();
              var restoreText = void 0, start = void 0, end = void 0;
              if (range != null && range.start.node === textNode && range.end.node === textNode) {
                var _ref = [textNode, range.start.offset, range.end.offset];
                restoreText = _ref[0];
                start = _ref[1];
                end = _ref[2];
              }
              while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {
                this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
              }
              if (this.textNode.data !== Cursor2.CONTENTS) {
                var text = this.textNode.data.split(Cursor2.CONTENTS).join("");
                if (this.next instanceof _text2.default) {
                  restoreText = this.next.domNode;
                  this.next.insertAt(0, text);
                  this.textNode.data = Cursor2.CONTENTS;
                } else {
                  this.textNode.data = text;
                  this.parent.insertBefore(_parchment2.default.create(this.textNode), this);
                  this.textNode = document.createTextNode(Cursor2.CONTENTS);
                  this.domNode.appendChild(this.textNode);
                }
              }
              this.remove();
              if (start != null) {
                var _map = [start, end].map(function(offset) {
                  return Math.max(0, Math.min(restoreText.data.length, offset - 1));
                });
                var _map2 = _slicedToArray2(_map, 2);
                start = _map2[0];
                end = _map2[1];
                return {
                  startNode: restoreText,
                  startOffset: start,
                  endNode: restoreText,
                  endOffset: end
                };
              }
            }
          }, {
            key: "update",
            value: function update(mutations, context2) {
              var _this2 = this;
              if (mutations.some(function(mutation) {
                return mutation.type === "characterData" && mutation.target === _this2.textNode;
              })) {
                var range = this.restore();
                if (range)
                  context2.range = range;
              }
            }
          }, {
            key: "value",
            value: function value() {
              return "";
            }
          }]);
          return Cursor2;
        }(_parchment2.default.Embed);
        Cursor.blotName = "cursor";
        Cursor.className = "ql-cursor";
        Cursor.tagName = "span";
        Cursor.CONTENTS = "\uFEFF";
        exports2.default = Cursor;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _block = __webpack_require__(4);
        var _block2 = _interopRequireDefault(_block);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Container = function(_Parchment$Container) {
          _inherits2(Container2, _Parchment$Container);
          function Container2() {
            _classCallCheck2(this, Container2);
            return _possibleConstructorReturn2(this, (Container2.__proto__ || Object.getPrototypeOf(Container2)).apply(this, arguments));
          }
          return Container2;
        }(_parchment2.default.Container);
        Container.allowedChildren = [_block2.default, _block.BlockEmbed, Container];
        exports2.default = Container;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.ColorStyle = exports2.ColorClass = exports2.ColorAttributor = void 0;
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var ColorAttributor = function(_Parchment$Attributor) {
          _inherits2(ColorAttributor2, _Parchment$Attributor);
          function ColorAttributor2() {
            _classCallCheck2(this, ColorAttributor2);
            return _possibleConstructorReturn2(this, (ColorAttributor2.__proto__ || Object.getPrototypeOf(ColorAttributor2)).apply(this, arguments));
          }
          _createClass(ColorAttributor2, [{
            key: "value",
            value: function value(domNode) {
              var value2 = _get(ColorAttributor2.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor2.prototype), "value", this).call(this, domNode);
              if (!value2.startsWith("rgb("))
                return value2;
              value2 = value2.replace(/^[^\d]+/, "").replace(/[^\d]+$/, "");
              return "#" + value2.split(",").map(function(component2) {
                return ("00" + parseInt(component2).toString(16)).slice(-2);
              }).join("");
            }
          }]);
          return ColorAttributor2;
        }(_parchment2.default.Attributor.Style);
        var ColorClass = new _parchment2.default.Attributor.Class("color", "ql-color", {
          scope: _parchment2.default.Scope.INLINE
        });
        var ColorStyle = new ColorAttributor("color", "color", {
          scope: _parchment2.default.Scope.INLINE
        });
        exports2.ColorAttributor = ColorAttributor;
        exports2.ColorClass = ColorClass;
        exports2.ColorStyle = ColorStyle;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.sanitize = exports2.default = void 0;
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _inline = __webpack_require__(6);
        var _inline2 = _interopRequireDefault(_inline);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Link2 = function(_Inline) {
          _inherits2(Link3, _Inline);
          function Link3() {
            _classCallCheck2(this, Link3);
            return _possibleConstructorReturn2(this, (Link3.__proto__ || Object.getPrototypeOf(Link3)).apply(this, arguments));
          }
          _createClass(Link3, [{
            key: "format",
            value: function format(name, value) {
              if (name !== this.statics.blotName || !value)
                return _get(Link3.prototype.__proto__ || Object.getPrototypeOf(Link3.prototype), "format", this).call(this, name, value);
              value = this.constructor.sanitize(value);
              this.domNode.setAttribute("href", value);
            }
          }], [{
            key: "create",
            value: function create2(value) {
              var node = _get(Link3.__proto__ || Object.getPrototypeOf(Link3), "create", this).call(this, value);
              value = this.sanitize(value);
              node.setAttribute("href", value);
              node.setAttribute("rel", "noopener noreferrer");
              node.setAttribute("target", "_blank");
              return node;
            }
          }, {
            key: "formats",
            value: function formats(domNode) {
              return domNode.getAttribute("href");
            }
          }, {
            key: "sanitize",
            value: function sanitize(url) {
              return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
            }
          }]);
          return Link3;
        }(_inline2.default);
        Link2.blotName = "link";
        Link2.tagName = "A";
        Link2.SANITIZED_URL = "about:blank";
        Link2.PROTOCOL_WHITELIST = ["http", "https", "mailto", "tel"];
        function _sanitize(url, protocols) {
          var anchor = document.createElement("a");
          anchor.href = url;
          var protocol = anchor.href.slice(0, anchor.href.indexOf(":"));
          return protocols.indexOf(protocol) > -1;
        }
        exports2.default = Link2;
        exports2.sanitize = _sanitize;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
          return typeof obj;
        } : function(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _keyboard = __webpack_require__(23);
        var _keyboard2 = _interopRequireDefault(_keyboard);
        var _dropdown = __webpack_require__(107);
        var _dropdown2 = _interopRequireDefault(_dropdown);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        var optionsCounter = 0;
        function toggleAriaAttribute(element, attribute) {
          element.setAttribute(attribute, !(element.getAttribute(attribute) === "true"));
        }
        var Picker = function() {
          function Picker2(select) {
            var _this = this;
            _classCallCheck2(this, Picker2);
            this.select = select;
            this.container = document.createElement("span");
            this.buildPicker();
            this.select.style.display = "none";
            this.select.parentNode.insertBefore(this.container, this.select);
            this.label.addEventListener("mousedown", function() {
              _this.togglePicker();
            });
            this.label.addEventListener("keydown", function(event) {
              switch (event.keyCode) {
                case _keyboard2.default.keys.ENTER:
                  _this.togglePicker();
                  break;
                case _keyboard2.default.keys.ESCAPE:
                  _this.escape();
                  event.preventDefault();
                  break;
              }
            });
            this.select.addEventListener("change", this.update.bind(this));
          }
          _createClass(Picker2, [{
            key: "togglePicker",
            value: function togglePicker() {
              this.container.classList.toggle("ql-expanded");
              toggleAriaAttribute(this.label, "aria-expanded");
              toggleAriaAttribute(this.options, "aria-hidden");
            }
          }, {
            key: "buildItem",
            value: function buildItem(option) {
              var _this2 = this;
              var item = document.createElement("span");
              item.tabIndex = "0";
              item.setAttribute("role", "button");
              item.classList.add("ql-picker-item");
              if (option.hasAttribute("value")) {
                item.setAttribute("data-value", option.getAttribute("value"));
              }
              if (option.textContent) {
                item.setAttribute("data-label", option.textContent);
              }
              item.addEventListener("click", function() {
                _this2.selectItem(item, true);
              });
              item.addEventListener("keydown", function(event) {
                switch (event.keyCode) {
                  case _keyboard2.default.keys.ENTER:
                    _this2.selectItem(item, true);
                    event.preventDefault();
                    break;
                  case _keyboard2.default.keys.ESCAPE:
                    _this2.escape();
                    event.preventDefault();
                    break;
                }
              });
              return item;
            }
          }, {
            key: "buildLabel",
            value: function buildLabel() {
              var label = document.createElement("span");
              label.classList.add("ql-picker-label");
              label.innerHTML = _dropdown2.default;
              label.tabIndex = "0";
              label.setAttribute("role", "button");
              label.setAttribute("aria-expanded", "false");
              this.container.appendChild(label);
              return label;
            }
          }, {
            key: "buildOptions",
            value: function buildOptions() {
              var _this3 = this;
              var options = document.createElement("span");
              options.classList.add("ql-picker-options");
              options.setAttribute("aria-hidden", "true");
              options.tabIndex = "-1";
              options.id = "ql-picker-options-" + optionsCounter;
              optionsCounter += 1;
              this.label.setAttribute("aria-controls", options.id);
              this.options = options;
              [].slice.call(this.select.options).forEach(function(option) {
                var item = _this3.buildItem(option);
                options.appendChild(item);
                if (option.selected === true) {
                  _this3.selectItem(item);
                }
              });
              this.container.appendChild(options);
            }
          }, {
            key: "buildPicker",
            value: function buildPicker() {
              var _this4 = this;
              [].slice.call(this.select.attributes).forEach(function(item) {
                _this4.container.setAttribute(item.name, item.value);
              });
              this.container.classList.add("ql-picker");
              this.label = this.buildLabel();
              this.buildOptions();
            }
          }, {
            key: "escape",
            value: function escape() {
              var _this5 = this;
              this.close();
              setTimeout(function() {
                return _this5.label.focus();
              }, 1);
            }
          }, {
            key: "close",
            value: function close() {
              this.container.classList.remove("ql-expanded");
              this.label.setAttribute("aria-expanded", "false");
              this.options.setAttribute("aria-hidden", "true");
            }
          }, {
            key: "selectItem",
            value: function selectItem(item) {
              var trigger2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              var selected = this.container.querySelector(".ql-selected");
              if (item === selected)
                return;
              if (selected != null) {
                selected.classList.remove("ql-selected");
              }
              if (item == null)
                return;
              item.classList.add("ql-selected");
              this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);
              if (item.hasAttribute("data-value")) {
                this.label.setAttribute("data-value", item.getAttribute("data-value"));
              } else {
                this.label.removeAttribute("data-value");
              }
              if (item.hasAttribute("data-label")) {
                this.label.setAttribute("data-label", item.getAttribute("data-label"));
              } else {
                this.label.removeAttribute("data-label");
              }
              if (trigger2) {
                if (typeof Event === "function") {
                  this.select.dispatchEvent(new Event("change"));
                } else if ((typeof Event === "undefined" ? "undefined" : _typeof2(Event)) === "object") {
                  var event = document.createEvent("Event");
                  event.initEvent("change", true, true);
                  this.select.dispatchEvent(event);
                }
                this.close();
              }
            }
          }, {
            key: "update",
            value: function update() {
              var option = void 0;
              if (this.select.selectedIndex > -1) {
                var item = this.container.querySelector(".ql-picker-options").children[this.select.selectedIndex];
                option = this.select.options[this.select.selectedIndex];
                this.selectItem(item);
              } else {
                this.selectItem(null);
              }
              var isActive = option != null && option !== this.select.querySelector("option[selected]");
              this.label.classList.toggle("ql-active", isActive);
            }
          }]);
          return Picker2;
        }();
        exports2.default = Picker;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _quill = __webpack_require__(5);
        var _quill2 = _interopRequireDefault(_quill);
        var _block = __webpack_require__(4);
        var _block2 = _interopRequireDefault(_block);
        var _break = __webpack_require__(16);
        var _break2 = _interopRequireDefault(_break);
        var _container = __webpack_require__(25);
        var _container2 = _interopRequireDefault(_container);
        var _cursor = __webpack_require__(24);
        var _cursor2 = _interopRequireDefault(_cursor);
        var _embed = __webpack_require__(35);
        var _embed2 = _interopRequireDefault(_embed);
        var _inline = __webpack_require__(6);
        var _inline2 = _interopRequireDefault(_inline);
        var _scroll = __webpack_require__(22);
        var _scroll2 = _interopRequireDefault(_scroll);
        var _text = __webpack_require__(7);
        var _text2 = _interopRequireDefault(_text);
        var _clipboard = __webpack_require__(55);
        var _clipboard2 = _interopRequireDefault(_clipboard);
        var _history = __webpack_require__(42);
        var _history2 = _interopRequireDefault(_history);
        var _keyboard = __webpack_require__(23);
        var _keyboard2 = _interopRequireDefault(_keyboard);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        _quill2.default.register({
          "blots/block": _block2.default,
          "blots/block/embed": _block.BlockEmbed,
          "blots/break": _break2.default,
          "blots/container": _container2.default,
          "blots/cursor": _cursor2.default,
          "blots/embed": _embed2.default,
          "blots/inline": _inline2.default,
          "blots/scroll": _scroll2.default,
          "blots/text": _text2.default,
          "modules/clipboard": _clipboard2.default,
          "modules/history": _history2.default,
          "modules/keyboard": _keyboard2.default
        });
        _parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);
        exports2.default = _quill2.default;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {value: true});
        var Registry = __webpack_require__(1);
        var ShadowBlot = function() {
          function ShadowBlot2(domNode) {
            this.domNode = domNode;
            this.domNode[Registry.DATA_KEY] = {blot: this};
          }
          Object.defineProperty(ShadowBlot2.prototype, "statics", {
            get: function() {
              return this.constructor;
            },
            enumerable: true,
            configurable: true
          });
          ShadowBlot2.create = function(value) {
            if (this.tagName == null) {
              throw new Registry.ParchmentError("Blot definition missing tagName");
            }
            var node;
            if (Array.isArray(this.tagName)) {
              if (typeof value === "string") {
                value = value.toUpperCase();
                if (parseInt(value).toString() === value) {
                  value = parseInt(value);
                }
              }
              if (typeof value === "number") {
                node = document.createElement(this.tagName[value - 1]);
              } else if (this.tagName.indexOf(value) > -1) {
                node = document.createElement(value);
              } else {
                node = document.createElement(this.tagName[0]);
              }
            } else {
              node = document.createElement(this.tagName);
            }
            if (this.className) {
              node.classList.add(this.className);
            }
            return node;
          };
          ShadowBlot2.prototype.attach = function() {
            if (this.parent != null) {
              this.scroll = this.parent.scroll;
            }
          };
          ShadowBlot2.prototype.clone = function() {
            var domNode = this.domNode.cloneNode(false);
            return Registry.create(domNode);
          };
          ShadowBlot2.prototype.detach = function() {
            if (this.parent != null)
              this.parent.removeChild(this);
            delete this.domNode[Registry.DATA_KEY];
          };
          ShadowBlot2.prototype.deleteAt = function(index2, length) {
            var blot = this.isolate(index2, length);
            blot.remove();
          };
          ShadowBlot2.prototype.formatAt = function(index2, length, name, value) {
            var blot = this.isolate(index2, length);
            if (Registry.query(name, Registry.Scope.BLOT) != null && value) {
              blot.wrap(name, value);
            } else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {
              var parent = Registry.create(this.statics.scope);
              blot.wrap(parent);
              parent.format(name, value);
            }
          };
          ShadowBlot2.prototype.insertAt = function(index2, value, def) {
            var blot = def == null ? Registry.create("text", value) : Registry.create(value, def);
            var ref = this.split(index2);
            this.parent.insertBefore(blot, ref);
          };
          ShadowBlot2.prototype.insertInto = function(parentBlot, refBlot) {
            if (refBlot === void 0) {
              refBlot = null;
            }
            if (this.parent != null) {
              this.parent.children.remove(this);
            }
            var refDomNode = null;
            parentBlot.children.insertBefore(this, refBlot);
            if (refBlot != null) {
              refDomNode = refBlot.domNode;
            }
            if (this.domNode.parentNode != parentBlot.domNode || this.domNode.nextSibling != refDomNode) {
              parentBlot.domNode.insertBefore(this.domNode, refDomNode);
            }
            this.parent = parentBlot;
            this.attach();
          };
          ShadowBlot2.prototype.isolate = function(index2, length) {
            var target = this.split(index2);
            target.split(length);
            return target;
          };
          ShadowBlot2.prototype.length = function() {
            return 1;
          };
          ShadowBlot2.prototype.offset = function(root2) {
            if (root2 === void 0) {
              root2 = this.parent;
            }
            if (this.parent == null || this == root2)
              return 0;
            return this.parent.children.offset(this) + this.parent.offset(root2);
          };
          ShadowBlot2.prototype.optimize = function(context2) {
            if (this.domNode[Registry.DATA_KEY] != null) {
              delete this.domNode[Registry.DATA_KEY].mutations;
            }
          };
          ShadowBlot2.prototype.remove = function() {
            if (this.domNode.parentNode != null) {
              this.domNode.parentNode.removeChild(this.domNode);
            }
            this.detach();
          };
          ShadowBlot2.prototype.replace = function(target) {
            if (target.parent == null)
              return;
            target.parent.insertBefore(this, target.next);
            target.remove();
          };
          ShadowBlot2.prototype.replaceWith = function(name, value) {
            var replacement = typeof name === "string" ? Registry.create(name, value) : name;
            replacement.replace(this);
            return replacement;
          };
          ShadowBlot2.prototype.split = function(index2, force) {
            return index2 === 0 ? this : this.next;
          };
          ShadowBlot2.prototype.update = function(mutations, context2) {
          };
          ShadowBlot2.prototype.wrap = function(name, value) {
            var wrapper = typeof name === "string" ? Registry.create(name, value) : name;
            if (this.parent != null) {
              this.parent.insertBefore(wrapper, this.next);
            }
            wrapper.appendChild(this);
            return wrapper;
          };
          ShadowBlot2.blotName = "abstract";
          return ShadowBlot2;
        }();
        exports2.default = ShadowBlot;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {value: true});
        var attributor_1 = __webpack_require__(12);
        var class_1 = __webpack_require__(32);
        var style_1 = __webpack_require__(33);
        var Registry = __webpack_require__(1);
        var AttributorStore = function() {
          function AttributorStore2(domNode) {
            this.attributes = {};
            this.domNode = domNode;
            this.build();
          }
          AttributorStore2.prototype.attribute = function(attribute, value) {
            if (value) {
              if (attribute.add(this.domNode, value)) {
                if (attribute.value(this.domNode) != null) {
                  this.attributes[attribute.attrName] = attribute;
                } else {
                  delete this.attributes[attribute.attrName];
                }
              }
            } else {
              attribute.remove(this.domNode);
              delete this.attributes[attribute.attrName];
            }
          };
          AttributorStore2.prototype.build = function() {
            var _this = this;
            this.attributes = {};
            var attributes = attributor_1.default.keys(this.domNode);
            var classes = class_1.default.keys(this.domNode);
            var styles = style_1.default.keys(this.domNode);
            attributes.concat(classes).concat(styles).forEach(function(name) {
              var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);
              if (attr instanceof attributor_1.default) {
                _this.attributes[attr.attrName] = attr;
              }
            });
          };
          AttributorStore2.prototype.copy = function(target) {
            var _this = this;
            Object.keys(this.attributes).forEach(function(key2) {
              var value = _this.attributes[key2].value(_this.domNode);
              target.format(key2, value);
            });
          };
          AttributorStore2.prototype.move = function(target) {
            var _this = this;
            this.copy(target);
            Object.keys(this.attributes).forEach(function(key2) {
              _this.attributes[key2].remove(_this.domNode);
            });
            this.attributes = {};
          };
          AttributorStore2.prototype.values = function() {
            var _this = this;
            return Object.keys(this.attributes).reduce(function(attributes, name) {
              attributes[name] = _this.attributes[name].value(_this.domNode);
              return attributes;
            }, {});
          };
          return AttributorStore2;
        }();
        exports2.default = AttributorStore;
      },
      function(module2, exports2, __webpack_require__) {
        var __extends = this && this.__extends || function() {
          var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
            d.__proto__ = b;
          } || function(d, b) {
            for (var p in b)
              if (b.hasOwnProperty(p))
                d[p] = b[p];
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports2, "__esModule", {value: true});
        var attributor_1 = __webpack_require__(12);
        function match(node, prefix2) {
          var className = node.getAttribute("class") || "";
          return className.split(/\s+/).filter(function(name) {
            return name.indexOf(prefix2 + "-") === 0;
          });
        }
        var ClassAttributor = function(_super) {
          __extends(ClassAttributor2, _super);
          function ClassAttributor2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          ClassAttributor2.keys = function(node) {
            return (node.getAttribute("class") || "").split(/\s+/).map(function(name) {
              return name.split("-").slice(0, -1).join("-");
            });
          };
          ClassAttributor2.prototype.add = function(node, value) {
            if (!this.canAdd(node, value))
              return false;
            this.remove(node);
            node.classList.add(this.keyName + "-" + value);
            return true;
          };
          ClassAttributor2.prototype.remove = function(node) {
            var matches = match(node, this.keyName);
            matches.forEach(function(name) {
              node.classList.remove(name);
            });
            if (node.classList.length === 0) {
              node.removeAttribute("class");
            }
          };
          ClassAttributor2.prototype.value = function(node) {
            var result = match(node, this.keyName)[0] || "";
            var value = result.slice(this.keyName.length + 1);
            return this.canAdd(node, value) ? value : "";
          };
          return ClassAttributor2;
        }(attributor_1.default);
        exports2.default = ClassAttributor;
      },
      function(module2, exports2, __webpack_require__) {
        var __extends = this && this.__extends || function() {
          var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
            d.__proto__ = b;
          } || function(d, b) {
            for (var p in b)
              if (b.hasOwnProperty(p))
                d[p] = b[p];
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports2, "__esModule", {value: true});
        var attributor_1 = __webpack_require__(12);
        function camelize(name) {
          var parts = name.split("-");
          var rest = parts.slice(1).map(function(part) {
            return part[0].toUpperCase() + part.slice(1);
          }).join("");
          return parts[0] + rest;
        }
        var StyleAttributor = function(_super) {
          __extends(StyleAttributor2, _super);
          function StyleAttributor2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          StyleAttributor2.keys = function(node) {
            return (node.getAttribute("style") || "").split(";").map(function(value) {
              var arr = value.split(":");
              return arr[0].trim();
            });
          };
          StyleAttributor2.prototype.add = function(node, value) {
            if (!this.canAdd(node, value))
              return false;
            node.style[camelize(this.keyName)] = value;
            return true;
          };
          StyleAttributor2.prototype.remove = function(node) {
            node.style[camelize(this.keyName)] = "";
            if (!node.getAttribute("style")) {
              node.removeAttribute("style");
            }
          };
          StyleAttributor2.prototype.value = function(node) {
            var value = node.style[camelize(this.keyName)];
            return this.canAdd(node, value) ? value : "";
          };
          return StyleAttributor2;
        }(attributor_1.default);
        exports2.default = StyleAttributor;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        var Theme = function() {
          function Theme2(quill2, options) {
            _classCallCheck2(this, Theme2);
            this.quill = quill2;
            this.options = options;
            this.modules = {};
          }
          _createClass(Theme2, [{
            key: "init",
            value: function init() {
              var _this = this;
              Object.keys(this.options.modules).forEach(function(name) {
                if (_this.modules[name] == null) {
                  _this.addModule(name);
                }
              });
            }
          }, {
            key: "addModule",
            value: function addModule(name) {
              var moduleClass = this.quill.constructor.import("modules/" + name);
              this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});
              return this.modules[name];
            }
          }]);
          return Theme2;
        }();
        Theme.DEFAULTS = {
          modules: {}
        };
        Theme.themes = {
          default: Theme
        };
        exports2.default = Theme;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _text = __webpack_require__(7);
        var _text2 = _interopRequireDefault(_text);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var GUARD_TEXT = "\uFEFF";
        var Embed = function(_Parchment$Embed) {
          _inherits2(Embed2, _Parchment$Embed);
          function Embed2(node) {
            _classCallCheck2(this, Embed2);
            var _this = _possibleConstructorReturn2(this, (Embed2.__proto__ || Object.getPrototypeOf(Embed2)).call(this, node));
            _this.contentNode = document.createElement("span");
            _this.contentNode.setAttribute("contenteditable", false);
            [].slice.call(_this.domNode.childNodes).forEach(function(childNode) {
              _this.contentNode.appendChild(childNode);
            });
            _this.leftGuard = document.createTextNode(GUARD_TEXT);
            _this.rightGuard = document.createTextNode(GUARD_TEXT);
            _this.domNode.appendChild(_this.leftGuard);
            _this.domNode.appendChild(_this.contentNode);
            _this.domNode.appendChild(_this.rightGuard);
            return _this;
          }
          _createClass(Embed2, [{
            key: "index",
            value: function index2(node, offset) {
              if (node === this.leftGuard)
                return 0;
              if (node === this.rightGuard)
                return 1;
              return _get(Embed2.prototype.__proto__ || Object.getPrototypeOf(Embed2.prototype), "index", this).call(this, node, offset);
            }
          }, {
            key: "restore",
            value: function restore(node) {
              var range = void 0, textNode = void 0;
              var text = node.data.split(GUARD_TEXT).join("");
              if (node === this.leftGuard) {
                if (this.prev instanceof _text2.default) {
                  var prevLength = this.prev.length();
                  this.prev.insertAt(prevLength, text);
                  range = {
                    startNode: this.prev.domNode,
                    startOffset: prevLength + text.length
                  };
                } else {
                  textNode = document.createTextNode(text);
                  this.parent.insertBefore(_parchment2.default.create(textNode), this);
                  range = {
                    startNode: textNode,
                    startOffset: text.length
                  };
                }
              } else if (node === this.rightGuard) {
                if (this.next instanceof _text2.default) {
                  this.next.insertAt(0, text);
                  range = {
                    startNode: this.next.domNode,
                    startOffset: text.length
                  };
                } else {
                  textNode = document.createTextNode(text);
                  this.parent.insertBefore(_parchment2.default.create(textNode), this.next);
                  range = {
                    startNode: textNode,
                    startOffset: text.length
                  };
                }
              }
              node.data = GUARD_TEXT;
              return range;
            }
          }, {
            key: "update",
            value: function update(mutations, context2) {
              var _this2 = this;
              mutations.forEach(function(mutation) {
                if (mutation.type === "characterData" && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {
                  var range = _this2.restore(mutation.target);
                  if (range)
                    context2.range = range;
                }
              });
            }
          }]);
          return Embed2;
        }(_parchment2.default.Embed);
        exports2.default = Embed;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.AlignStyle = exports2.AlignClass = exports2.AlignAttribute = void 0;
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        var config = {
          scope: _parchment2.default.Scope.BLOCK,
          whitelist: ["right", "center", "justify"]
        };
        var AlignAttribute = new _parchment2.default.Attributor.Attribute("align", "align", config);
        var AlignClass = new _parchment2.default.Attributor.Class("align", "ql-align", config);
        var AlignStyle = new _parchment2.default.Attributor.Style("align", "text-align", config);
        exports2.AlignAttribute = AlignAttribute;
        exports2.AlignClass = AlignClass;
        exports2.AlignStyle = AlignStyle;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.BackgroundStyle = exports2.BackgroundClass = void 0;
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _color = __webpack_require__(26);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        var BackgroundClass = new _parchment2.default.Attributor.Class("background", "ql-bg", {
          scope: _parchment2.default.Scope.INLINE
        });
        var BackgroundStyle = new _color.ColorAttributor("background", "background-color", {
          scope: _parchment2.default.Scope.INLINE
        });
        exports2.BackgroundClass = BackgroundClass;
        exports2.BackgroundStyle = BackgroundStyle;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.DirectionStyle = exports2.DirectionClass = exports2.DirectionAttribute = void 0;
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        var config = {
          scope: _parchment2.default.Scope.BLOCK,
          whitelist: ["rtl"]
        };
        var DirectionAttribute = new _parchment2.default.Attributor.Attribute("direction", "dir", config);
        var DirectionClass = new _parchment2.default.Attributor.Class("direction", "ql-direction", config);
        var DirectionStyle = new _parchment2.default.Attributor.Style("direction", "direction", config);
        exports2.DirectionAttribute = DirectionAttribute;
        exports2.DirectionClass = DirectionClass;
        exports2.DirectionStyle = DirectionStyle;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.FontClass = exports2.FontStyle = void 0;
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var config = {
          scope: _parchment2.default.Scope.INLINE,
          whitelist: ["serif", "monospace"]
        };
        var FontClass = new _parchment2.default.Attributor.Class("font", "ql-font", config);
        var FontStyleAttributor = function(_Parchment$Attributor) {
          _inherits2(FontStyleAttributor2, _Parchment$Attributor);
          function FontStyleAttributor2() {
            _classCallCheck2(this, FontStyleAttributor2);
            return _possibleConstructorReturn2(this, (FontStyleAttributor2.__proto__ || Object.getPrototypeOf(FontStyleAttributor2)).apply(this, arguments));
          }
          _createClass(FontStyleAttributor2, [{
            key: "value",
            value: function value(node) {
              return _get(FontStyleAttributor2.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor2.prototype), "value", this).call(this, node).replace(/["']/g, "");
            }
          }]);
          return FontStyleAttributor2;
        }(_parchment2.default.Attributor.Style);
        var FontStyle = new FontStyleAttributor("font", "font-family", config);
        exports2.FontStyle = FontStyle;
        exports2.FontClass = FontClass;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.SizeStyle = exports2.SizeClass = void 0;
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        var SizeClass = new _parchment2.default.Attributor.Class("size", "ql-size", {
          scope: _parchment2.default.Scope.INLINE,
          whitelist: ["small", "large", "huge"]
        });
        var SizeStyle = new _parchment2.default.Attributor.Style("size", "font-size", {
          scope: _parchment2.default.Scope.INLINE,
          whitelist: ["10px", "18px", "32px"]
        });
        exports2.SizeClass = SizeClass;
        exports2.SizeStyle = SizeStyle;
      },
      function(module2, exports2, __webpack_require__) {
        module2.exports = {
          align: {
            "": __webpack_require__(76),
            center: __webpack_require__(77),
            right: __webpack_require__(78),
            justify: __webpack_require__(79)
          },
          background: __webpack_require__(80),
          blockquote: __webpack_require__(81),
          bold: __webpack_require__(82),
          clean: __webpack_require__(83),
          code: __webpack_require__(58),
          "code-block": __webpack_require__(58),
          color: __webpack_require__(84),
          direction: {
            "": __webpack_require__(85),
            rtl: __webpack_require__(86)
          },
          float: {
            center: __webpack_require__(87),
            full: __webpack_require__(88),
            left: __webpack_require__(89),
            right: __webpack_require__(90)
          },
          formula: __webpack_require__(91),
          header: {
            "1": __webpack_require__(92),
            "2": __webpack_require__(93)
          },
          italic: __webpack_require__(94),
          image: __webpack_require__(95),
          indent: {
            "+1": __webpack_require__(96),
            "-1": __webpack_require__(97)
          },
          link: __webpack_require__(98),
          list: {
            ordered: __webpack_require__(99),
            bullet: __webpack_require__(100),
            check: __webpack_require__(101)
          },
          script: {
            sub: __webpack_require__(102),
            super: __webpack_require__(103)
          },
          strike: __webpack_require__(104),
          underline: __webpack_require__(105),
          video: __webpack_require__(106)
        };
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.getLastChangeIndex = exports2.default = void 0;
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _quill = __webpack_require__(5);
        var _quill2 = _interopRequireDefault(_quill);
        var _module = __webpack_require__(9);
        var _module2 = _interopRequireDefault(_module);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var History = function(_Module) {
          _inherits2(History2, _Module);
          function History2(quill2, options) {
            _classCallCheck2(this, History2);
            var _this = _possibleConstructorReturn2(this, (History2.__proto__ || Object.getPrototypeOf(History2)).call(this, quill2, options));
            _this.lastRecorded = 0;
            _this.ignoreChange = false;
            _this.clear();
            _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function(eventName, delta, oldDelta, source2) {
              if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange)
                return;
              if (!_this.options.userOnly || source2 === _quill2.default.sources.USER) {
                _this.record(delta, oldDelta);
              } else {
                _this.transform(delta);
              }
            });
            _this.quill.keyboard.addBinding({key: "Z", shortKey: true}, _this.undo.bind(_this));
            _this.quill.keyboard.addBinding({key: "Z", shortKey: true, shiftKey: true}, _this.redo.bind(_this));
            if (/Win/i.test(navigator.platform)) {
              _this.quill.keyboard.addBinding({key: "Y", shortKey: true}, _this.redo.bind(_this));
            }
            return _this;
          }
          _createClass(History2, [{
            key: "change",
            value: function change(source2, dest) {
              if (this.stack[source2].length === 0)
                return;
              var delta = this.stack[source2].pop();
              this.stack[dest].push(delta);
              this.lastRecorded = 0;
              this.ignoreChange = true;
              this.quill.updateContents(delta[source2], _quill2.default.sources.USER);
              this.ignoreChange = false;
              var index2 = getLastChangeIndex(delta[source2]);
              this.quill.setSelection(index2);
            }
          }, {
            key: "clear",
            value: function clear() {
              this.stack = {undo: [], redo: []};
            }
          }, {
            key: "cutoff",
            value: function cutoff() {
              this.lastRecorded = 0;
            }
          }, {
            key: "record",
            value: function record(changeDelta, oldDelta) {
              if (changeDelta.ops.length === 0)
                return;
              this.stack.redo = [];
              var undoDelta = this.quill.getContents().diff(oldDelta);
              var timestamp = Date.now();
              if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
                var delta = this.stack.undo.pop();
                undoDelta = undoDelta.compose(delta.undo);
                changeDelta = delta.redo.compose(changeDelta);
              } else {
                this.lastRecorded = timestamp;
              }
              this.stack.undo.push({
                redo: changeDelta,
                undo: undoDelta
              });
              if (this.stack.undo.length > this.options.maxStack) {
                this.stack.undo.shift();
              }
            }
          }, {
            key: "redo",
            value: function redo() {
              this.change("redo", "undo");
            }
          }, {
            key: "transform",
            value: function transform(delta) {
              this.stack.undo.forEach(function(change) {
                change.undo = delta.transform(change.undo, true);
                change.redo = delta.transform(change.redo, true);
              });
              this.stack.redo.forEach(function(change) {
                change.undo = delta.transform(change.undo, true);
                change.redo = delta.transform(change.redo, true);
              });
            }
          }, {
            key: "undo",
            value: function undo() {
              this.change("undo", "redo");
            }
          }]);
          return History2;
        }(_module2.default);
        History.DEFAULTS = {
          delay: 1e3,
          maxStack: 100,
          userOnly: false
        };
        function endsWithNewlineChange(delta) {
          var lastOp = delta.ops[delta.ops.length - 1];
          if (lastOp == null)
            return false;
          if (lastOp.insert != null) {
            return typeof lastOp.insert === "string" && lastOp.insert.endsWith("\n");
          }
          if (lastOp.attributes != null) {
            return Object.keys(lastOp.attributes).some(function(attr) {
              return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;
            });
          }
          return false;
        }
        function getLastChangeIndex(delta) {
          var deleteLength = delta.reduce(function(length, op) {
            length += op.delete || 0;
            return length;
          }, 0);
          var changeIndex = delta.length() - deleteLength;
          if (endsWithNewlineChange(delta)) {
            changeIndex -= 1;
          }
          return changeIndex;
        }
        exports2.default = History;
        exports2.getLastChangeIndex = getLastChangeIndex;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.default = exports2.BaseTooltip = void 0;
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _extend = __webpack_require__(3);
        var _extend2 = _interopRequireDefault(_extend);
        var _quillDelta = __webpack_require__(2);
        var _quillDelta2 = _interopRequireDefault(_quillDelta);
        var _emitter = __webpack_require__(8);
        var _emitter2 = _interopRequireDefault(_emitter);
        var _keyboard = __webpack_require__(23);
        var _keyboard2 = _interopRequireDefault(_keyboard);
        var _theme = __webpack_require__(34);
        var _theme2 = _interopRequireDefault(_theme);
        var _colorPicker = __webpack_require__(59);
        var _colorPicker2 = _interopRequireDefault(_colorPicker);
        var _iconPicker = __webpack_require__(60);
        var _iconPicker2 = _interopRequireDefault(_iconPicker);
        var _picker = __webpack_require__(28);
        var _picker2 = _interopRequireDefault(_picker);
        var _tooltip = __webpack_require__(61);
        var _tooltip2 = _interopRequireDefault(_tooltip);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var ALIGNS = [false, "center", "right", "justify"];
        var COLORS = ["#000000", "#e60000", "#ff9900", "#ffff00", "#008a00", "#0066cc", "#9933ff", "#ffffff", "#facccc", "#ffebcc", "#ffffcc", "#cce8cc", "#cce0f5", "#ebd6ff", "#bbbbbb", "#f06666", "#ffc266", "#ffff66", "#66b966", "#66a3e0", "#c285ff", "#888888", "#a10000", "#b26b00", "#b2b200", "#006100", "#0047b2", "#6b24b2", "#444444", "#5c0000", "#663d00", "#666600", "#003700", "#002966", "#3d1466"];
        var FONTS = [false, "serif", "monospace"];
        var HEADERS = ["1", "2", "3", false];
        var SIZES = ["small", false, "large", "huge"];
        var BaseTheme = function(_Theme) {
          _inherits2(BaseTheme2, _Theme);
          function BaseTheme2(quill2, options) {
            _classCallCheck2(this, BaseTheme2);
            var _this = _possibleConstructorReturn2(this, (BaseTheme2.__proto__ || Object.getPrototypeOf(BaseTheme2)).call(this, quill2, options));
            var listener = function listener2(e) {
              if (!document.body.contains(quill2.root)) {
                return document.body.removeEventListener("click", listener2);
              }
              if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {
                _this.tooltip.hide();
              }
              if (_this.pickers != null) {
                _this.pickers.forEach(function(picker) {
                  if (!picker.container.contains(e.target)) {
                    picker.close();
                  }
                });
              }
            };
            quill2.emitter.listenDOM("click", document.body, listener);
            return _this;
          }
          _createClass(BaseTheme2, [{
            key: "addModule",
            value: function addModule(name) {
              var module3 = _get(BaseTheme2.prototype.__proto__ || Object.getPrototypeOf(BaseTheme2.prototype), "addModule", this).call(this, name);
              if (name === "toolbar") {
                this.extendToolbar(module3);
              }
              return module3;
            }
          }, {
            key: "buildButtons",
            value: function buildButtons(buttons, icons) {
              buttons.forEach(function(button) {
                var className = button.getAttribute("class") || "";
                className.split(/\s+/).forEach(function(name) {
                  if (!name.startsWith("ql-"))
                    return;
                  name = name.slice("ql-".length);
                  if (icons[name] == null)
                    return;
                  if (name === "direction") {
                    button.innerHTML = icons[name][""] + icons[name]["rtl"];
                  } else if (typeof icons[name] === "string") {
                    button.innerHTML = icons[name];
                  } else {
                    var value = button.value || "";
                    if (value != null && icons[name][value]) {
                      button.innerHTML = icons[name][value];
                    }
                  }
                });
              });
            }
          }, {
            key: "buildPickers",
            value: function buildPickers(selects, icons) {
              var _this2 = this;
              this.pickers = selects.map(function(select) {
                if (select.classList.contains("ql-align")) {
                  if (select.querySelector("option") == null) {
                    fillSelect(select, ALIGNS);
                  }
                  return new _iconPicker2.default(select, icons.align);
                } else if (select.classList.contains("ql-background") || select.classList.contains("ql-color")) {
                  var format = select.classList.contains("ql-background") ? "background" : "color";
                  if (select.querySelector("option") == null) {
                    fillSelect(select, COLORS, format === "background" ? "#ffffff" : "#000000");
                  }
                  return new _colorPicker2.default(select, icons[format]);
                } else {
                  if (select.querySelector("option") == null) {
                    if (select.classList.contains("ql-font")) {
                      fillSelect(select, FONTS);
                    } else if (select.classList.contains("ql-header")) {
                      fillSelect(select, HEADERS);
                    } else if (select.classList.contains("ql-size")) {
                      fillSelect(select, SIZES);
                    }
                  }
                  return new _picker2.default(select);
                }
              });
              var update = function update2() {
                _this2.pickers.forEach(function(picker) {
                  picker.update();
                });
              };
              this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);
            }
          }]);
          return BaseTheme2;
        }(_theme2.default);
        BaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {
          modules: {
            toolbar: {
              handlers: {
                formula: function formula() {
                  this.quill.theme.tooltip.edit("formula");
                },
                image: function image() {
                  var _this3 = this;
                  var fileInput = this.container.querySelector("input.ql-image[type=file]");
                  if (fileInput == null) {
                    fileInput = document.createElement("input");
                    fileInput.setAttribute("type", "file");
                    fileInput.setAttribute("accept", "image/png, image/gif, image/jpeg, image/bmp, image/x-icon");
                    fileInput.classList.add("ql-image");
                    fileInput.addEventListener("change", function() {
                      if (fileInput.files != null && fileInput.files[0] != null) {
                        var reader = new FileReader();
                        reader.onload = function(e) {
                          var range = _this3.quill.getSelection(true);
                          _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({image: e.target.result}), _emitter2.default.sources.USER);
                          _this3.quill.setSelection(range.index + 1, _emitter2.default.sources.SILENT);
                          fileInput.value = "";
                        };
                        reader.readAsDataURL(fileInput.files[0]);
                      }
                    });
                    this.container.appendChild(fileInput);
                  }
                  fileInput.click();
                },
                video: function video() {
                  this.quill.theme.tooltip.edit("video");
                }
              }
            }
          }
        });
        var BaseTooltip = function(_Tooltip) {
          _inherits2(BaseTooltip2, _Tooltip);
          function BaseTooltip2(quill2, boundsContainer) {
            _classCallCheck2(this, BaseTooltip2);
            var _this4 = _possibleConstructorReturn2(this, (BaseTooltip2.__proto__ || Object.getPrototypeOf(BaseTooltip2)).call(this, quill2, boundsContainer));
            _this4.textbox = _this4.root.querySelector('input[type="text"]');
            _this4.listen();
            return _this4;
          }
          _createClass(BaseTooltip2, [{
            key: "listen",
            value: function listen() {
              var _this5 = this;
              this.textbox.addEventListener("keydown", function(event) {
                if (_keyboard2.default.match(event, "enter")) {
                  _this5.save();
                  event.preventDefault();
                } else if (_keyboard2.default.match(event, "escape")) {
                  _this5.cancel();
                  event.preventDefault();
                }
              });
            }
          }, {
            key: "cancel",
            value: function cancel() {
              this.hide();
            }
          }, {
            key: "edit",
            value: function edit() {
              var mode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "link";
              var preview = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              this.root.classList.remove("ql-hidden");
              this.root.classList.add("ql-editing");
              if (preview != null) {
                this.textbox.value = preview;
              } else if (mode !== this.root.getAttribute("data-mode")) {
                this.textbox.value = "";
              }
              this.position(this.quill.getBounds(this.quill.selection.savedRange));
              this.textbox.select();
              this.textbox.setAttribute("placeholder", this.textbox.getAttribute("data-" + mode) || "");
              this.root.setAttribute("data-mode", mode);
            }
          }, {
            key: "restoreFocus",
            value: function restoreFocus() {
              var scrollTop = this.quill.scrollingContainer.scrollTop;
              this.quill.focus();
              this.quill.scrollingContainer.scrollTop = scrollTop;
            }
          }, {
            key: "save",
            value: function save() {
              var value = this.textbox.value;
              switch (this.root.getAttribute("data-mode")) {
                case "link": {
                  var scrollTop = this.quill.root.scrollTop;
                  if (this.linkRange) {
                    this.quill.formatText(this.linkRange, "link", value, _emitter2.default.sources.USER);
                    delete this.linkRange;
                  } else {
                    this.restoreFocus();
                    this.quill.format("link", value, _emitter2.default.sources.USER);
                  }
                  this.quill.root.scrollTop = scrollTop;
                  break;
                }
                case "video": {
                  value = extractVideoUrl(value);
                }
                case "formula": {
                  if (!value)
                    break;
                  var range = this.quill.getSelection(true);
                  if (range != null) {
                    var index2 = range.index + range.length;
                    this.quill.insertEmbed(index2, this.root.getAttribute("data-mode"), value, _emitter2.default.sources.USER);
                    if (this.root.getAttribute("data-mode") === "formula") {
                      this.quill.insertText(index2 + 1, " ", _emitter2.default.sources.USER);
                    }
                    this.quill.setSelection(index2 + 2, _emitter2.default.sources.USER);
                  }
                  break;
                }
              }
              this.textbox.value = "";
              this.hide();
            }
          }]);
          return BaseTooltip2;
        }(_tooltip2.default);
        function extractVideoUrl(url) {
          var match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);
          if (match) {
            return (match[1] || "https") + "://www.youtube.com/embed/" + match[2] + "?showinfo=0";
          }
          if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
            return (match[1] || "https") + "://player.vimeo.com/video/" + match[2] + "/";
          }
          return url;
        }
        function fillSelect(select, values) {
          var defaultValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
          values.forEach(function(value) {
            var option = document.createElement("option");
            if (value === defaultValue) {
              option.setAttribute("selected", "selected");
            } else {
              option.setAttribute("value", value);
            }
            select.appendChild(option);
          });
        }
        exports2.BaseTooltip = BaseTooltip;
        exports2.default = BaseTheme;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {value: true});
        var LinkedList = function() {
          function LinkedList2() {
            this.head = this.tail = null;
            this.length = 0;
          }
          LinkedList2.prototype.append = function() {
            var nodes = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              nodes[_i] = arguments[_i];
            }
            this.insertBefore(nodes[0], null);
            if (nodes.length > 1) {
              this.append.apply(this, nodes.slice(1));
            }
          };
          LinkedList2.prototype.contains = function(node) {
            var cur, next = this.iterator();
            while (cur = next()) {
              if (cur === node)
                return true;
            }
            return false;
          };
          LinkedList2.prototype.insertBefore = function(node, refNode) {
            if (!node)
              return;
            node.next = refNode;
            if (refNode != null) {
              node.prev = refNode.prev;
              if (refNode.prev != null) {
                refNode.prev.next = node;
              }
              refNode.prev = node;
              if (refNode === this.head) {
                this.head = node;
              }
            } else if (this.tail != null) {
              this.tail.next = node;
              node.prev = this.tail;
              this.tail = node;
            } else {
              node.prev = null;
              this.head = this.tail = node;
            }
            this.length += 1;
          };
          LinkedList2.prototype.offset = function(target) {
            var index2 = 0, cur = this.head;
            while (cur != null) {
              if (cur === target)
                return index2;
              index2 += cur.length();
              cur = cur.next;
            }
            return -1;
          };
          LinkedList2.prototype.remove = function(node) {
            if (!this.contains(node))
              return;
            if (node.prev != null)
              node.prev.next = node.next;
            if (node.next != null)
              node.next.prev = node.prev;
            if (node === this.head)
              this.head = node.next;
            if (node === this.tail)
              this.tail = node.prev;
            this.length -= 1;
          };
          LinkedList2.prototype.iterator = function(curNode) {
            if (curNode === void 0) {
              curNode = this.head;
            }
            return function() {
              var ret = curNode;
              if (curNode != null)
                curNode = curNode.next;
              return ret;
            };
          };
          LinkedList2.prototype.find = function(index2, inclusive) {
            if (inclusive === void 0) {
              inclusive = false;
            }
            var cur, next = this.iterator();
            while (cur = next()) {
              var length = cur.length();
              if (index2 < length || inclusive && index2 === length && (cur.next == null || cur.next.length() !== 0)) {
                return [cur, index2];
              }
              index2 -= length;
            }
            return [null, 0];
          };
          LinkedList2.prototype.forEach = function(callback) {
            var cur, next = this.iterator();
            while (cur = next()) {
              callback(cur);
            }
          };
          LinkedList2.prototype.forEachAt = function(index2, length, callback) {
            if (length <= 0)
              return;
            var _a = this.find(index2), startNode = _a[0], offset = _a[1];
            var cur, curIndex = index2 - offset, next = this.iterator(startNode);
            while ((cur = next()) && curIndex < index2 + length) {
              var curLength = cur.length();
              if (index2 > curIndex) {
                callback(cur, index2 - curIndex, Math.min(length, curIndex + curLength - index2));
              } else {
                callback(cur, 0, Math.min(curLength, index2 + length - curIndex));
              }
              curIndex += curLength;
            }
          };
          LinkedList2.prototype.map = function(callback) {
            return this.reduce(function(memo, cur) {
              memo.push(callback(cur));
              return memo;
            }, []);
          };
          LinkedList2.prototype.reduce = function(callback, memo) {
            var cur, next = this.iterator();
            while (cur = next()) {
              memo = callback(memo, cur);
            }
            return memo;
          };
          return LinkedList2;
        }();
        exports2.default = LinkedList;
      },
      function(module2, exports2, __webpack_require__) {
        var __extends = this && this.__extends || function() {
          var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
            d.__proto__ = b;
          } || function(d, b) {
            for (var p in b)
              if (b.hasOwnProperty(p))
                d[p] = b[p];
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports2, "__esModule", {value: true});
        var container_1 = __webpack_require__(17);
        var Registry = __webpack_require__(1);
        var OBSERVER_CONFIG = {
          attributes: true,
          characterData: true,
          characterDataOldValue: true,
          childList: true,
          subtree: true
        };
        var MAX_OPTIMIZE_ITERATIONS = 100;
        var ScrollBlot = function(_super) {
          __extends(ScrollBlot2, _super);
          function ScrollBlot2(node) {
            var _this = _super.call(this, node) || this;
            _this.scroll = _this;
            _this.observer = new MutationObserver(function(mutations) {
              _this.update(mutations);
            });
            _this.observer.observe(_this.domNode, OBSERVER_CONFIG);
            _this.attach();
            return _this;
          }
          ScrollBlot2.prototype.detach = function() {
            _super.prototype.detach.call(this);
            this.observer.disconnect();
          };
          ScrollBlot2.prototype.deleteAt = function(index2, length) {
            this.update();
            if (index2 === 0 && length === this.length()) {
              this.children.forEach(function(child) {
                child.remove();
              });
            } else {
              _super.prototype.deleteAt.call(this, index2, length);
            }
          };
          ScrollBlot2.prototype.formatAt = function(index2, length, name, value) {
            this.update();
            _super.prototype.formatAt.call(this, index2, length, name, value);
          };
          ScrollBlot2.prototype.insertAt = function(index2, value, def) {
            this.update();
            _super.prototype.insertAt.call(this, index2, value, def);
          };
          ScrollBlot2.prototype.optimize = function(mutations, context2) {
            var _this = this;
            if (mutations === void 0) {
              mutations = [];
            }
            if (context2 === void 0) {
              context2 = {};
            }
            _super.prototype.optimize.call(this, context2);
            var records = [].slice.call(this.observer.takeRecords());
            while (records.length > 0)
              mutations.push(records.pop());
            var mark = function(blot, markParent) {
              if (markParent === void 0) {
                markParent = true;
              }
              if (blot == null || blot === _this)
                return;
              if (blot.domNode.parentNode == null)
                return;
              if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                blot.domNode[Registry.DATA_KEY].mutations = [];
              }
              if (markParent)
                mark(blot.parent);
            };
            var optimize = function(blot) {
              if (blot.domNode[Registry.DATA_KEY] == null || blot.domNode[Registry.DATA_KEY].mutations == null) {
                return;
              }
              if (blot instanceof container_1.default) {
                blot.children.forEach(optimize);
              }
              blot.optimize(context2);
            };
            var remaining = mutations;
            for (var i2 = 0; remaining.length > 0; i2 += 1) {
              if (i2 >= MAX_OPTIMIZE_ITERATIONS) {
                throw new Error("[Parchment] Maximum optimize iterations reached");
              }
              remaining.forEach(function(mutation) {
                var blot = Registry.find(mutation.target, true);
                if (blot == null)
                  return;
                if (blot.domNode === mutation.target) {
                  if (mutation.type === "childList") {
                    mark(Registry.find(mutation.previousSibling, false));
                    [].forEach.call(mutation.addedNodes, function(node) {
                      var child = Registry.find(node, false);
                      mark(child, false);
                      if (child instanceof container_1.default) {
                        child.children.forEach(function(grandChild) {
                          mark(grandChild, false);
                        });
                      }
                    });
                  } else if (mutation.type === "attributes") {
                    mark(blot.prev);
                  }
                }
                mark(blot);
              });
              this.children.forEach(optimize);
              remaining = [].slice.call(this.observer.takeRecords());
              records = remaining.slice();
              while (records.length > 0)
                mutations.push(records.pop());
            }
          };
          ScrollBlot2.prototype.update = function(mutations, context2) {
            var _this = this;
            if (context2 === void 0) {
              context2 = {};
            }
            mutations = mutations || this.observer.takeRecords();
            mutations.map(function(mutation) {
              var blot = Registry.find(mutation.target, true);
              if (blot == null)
                return null;
              if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                blot.domNode[Registry.DATA_KEY].mutations = [mutation];
                return blot;
              } else {
                blot.domNode[Registry.DATA_KEY].mutations.push(mutation);
                return null;
              }
            }).forEach(function(blot) {
              if (blot == null || blot === _this || blot.domNode[Registry.DATA_KEY] == null)
                return;
              blot.update(blot.domNode[Registry.DATA_KEY].mutations || [], context2);
            });
            if (this.domNode[Registry.DATA_KEY].mutations != null) {
              _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations, context2);
            }
            this.optimize(mutations, context2);
          };
          ScrollBlot2.blotName = "scroll";
          ScrollBlot2.defaultChild = "block";
          ScrollBlot2.scope = Registry.Scope.BLOCK_BLOT;
          ScrollBlot2.tagName = "DIV";
          return ScrollBlot2;
        }(container_1.default);
        exports2.default = ScrollBlot;
      },
      function(module2, exports2, __webpack_require__) {
        var __extends = this && this.__extends || function() {
          var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
            d.__proto__ = b;
          } || function(d, b) {
            for (var p in b)
              if (b.hasOwnProperty(p))
                d[p] = b[p];
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports2, "__esModule", {value: true});
        var format_1 = __webpack_require__(18);
        var Registry = __webpack_require__(1);
        function isEqual2(obj1, obj2) {
          if (Object.keys(obj1).length !== Object.keys(obj2).length)
            return false;
          for (var prop in obj1) {
            if (obj1[prop] !== obj2[prop])
              return false;
          }
          return true;
        }
        var InlineBlot = function(_super) {
          __extends(InlineBlot2, _super);
          function InlineBlot2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          InlineBlot2.formats = function(domNode) {
            if (domNode.tagName === InlineBlot2.tagName)
              return void 0;
            return _super.formats.call(this, domNode);
          };
          InlineBlot2.prototype.format = function(name, value) {
            var _this = this;
            if (name === this.statics.blotName && !value) {
              this.children.forEach(function(child) {
                if (!(child instanceof format_1.default)) {
                  child = child.wrap(InlineBlot2.blotName, true);
                }
                _this.attributes.copy(child);
              });
              this.unwrap();
            } else {
              _super.prototype.format.call(this, name, value);
            }
          };
          InlineBlot2.prototype.formatAt = function(index2, length, name, value) {
            if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {
              var blot = this.isolate(index2, length);
              blot.format(name, value);
            } else {
              _super.prototype.formatAt.call(this, index2, length, name, value);
            }
          };
          InlineBlot2.prototype.optimize = function(context2) {
            _super.prototype.optimize.call(this, context2);
            var formats = this.formats();
            if (Object.keys(formats).length === 0) {
              return this.unwrap();
            }
            var next = this.next;
            if (next instanceof InlineBlot2 && next.prev === this && isEqual2(formats, next.formats())) {
              next.moveChildren(this);
              next.remove();
            }
          };
          InlineBlot2.blotName = "inline";
          InlineBlot2.scope = Registry.Scope.INLINE_BLOT;
          InlineBlot2.tagName = "SPAN";
          return InlineBlot2;
        }(format_1.default);
        exports2.default = InlineBlot;
      },
      function(module2, exports2, __webpack_require__) {
        var __extends = this && this.__extends || function() {
          var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
            d.__proto__ = b;
          } || function(d, b) {
            for (var p in b)
              if (b.hasOwnProperty(p))
                d[p] = b[p];
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports2, "__esModule", {value: true});
        var format_1 = __webpack_require__(18);
        var Registry = __webpack_require__(1);
        var BlockBlot = function(_super) {
          __extends(BlockBlot2, _super);
          function BlockBlot2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          BlockBlot2.formats = function(domNode) {
            var tagName = Registry.query(BlockBlot2.blotName).tagName;
            if (domNode.tagName === tagName)
              return void 0;
            return _super.formats.call(this, domNode);
          };
          BlockBlot2.prototype.format = function(name, value) {
            if (Registry.query(name, Registry.Scope.BLOCK) == null) {
              return;
            } else if (name === this.statics.blotName && !value) {
              this.replaceWith(BlockBlot2.blotName);
            } else {
              _super.prototype.format.call(this, name, value);
            }
          };
          BlockBlot2.prototype.formatAt = function(index2, length, name, value) {
            if (Registry.query(name, Registry.Scope.BLOCK) != null) {
              this.format(name, value);
            } else {
              _super.prototype.formatAt.call(this, index2, length, name, value);
            }
          };
          BlockBlot2.prototype.insertAt = function(index2, value, def) {
            if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {
              _super.prototype.insertAt.call(this, index2, value, def);
            } else {
              var after = this.split(index2);
              var blot = Registry.create(value, def);
              after.parent.insertBefore(blot, after);
            }
          };
          BlockBlot2.prototype.update = function(mutations, context2) {
            if (navigator.userAgent.match(/Trident/)) {
              this.build();
            } else {
              _super.prototype.update.call(this, mutations, context2);
            }
          };
          BlockBlot2.blotName = "block";
          BlockBlot2.scope = Registry.Scope.BLOCK_BLOT;
          BlockBlot2.tagName = "P";
          return BlockBlot2;
        }(format_1.default);
        exports2.default = BlockBlot;
      },
      function(module2, exports2, __webpack_require__) {
        var __extends = this && this.__extends || function() {
          var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
            d.__proto__ = b;
          } || function(d, b) {
            for (var p in b)
              if (b.hasOwnProperty(p))
                d[p] = b[p];
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports2, "__esModule", {value: true});
        var leaf_1 = __webpack_require__(19);
        var EmbedBlot = function(_super) {
          __extends(EmbedBlot2, _super);
          function EmbedBlot2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          EmbedBlot2.formats = function(domNode) {
            return void 0;
          };
          EmbedBlot2.prototype.format = function(name, value) {
            _super.prototype.formatAt.call(this, 0, this.length(), name, value);
          };
          EmbedBlot2.prototype.formatAt = function(index2, length, name, value) {
            if (index2 === 0 && length === this.length()) {
              this.format(name, value);
            } else {
              _super.prototype.formatAt.call(this, index2, length, name, value);
            }
          };
          EmbedBlot2.prototype.formats = function() {
            return this.statics.formats(this.domNode);
          };
          return EmbedBlot2;
        }(leaf_1.default);
        exports2.default = EmbedBlot;
      },
      function(module2, exports2, __webpack_require__) {
        var __extends = this && this.__extends || function() {
          var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
            d.__proto__ = b;
          } || function(d, b) {
            for (var p in b)
              if (b.hasOwnProperty(p))
                d[p] = b[p];
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports2, "__esModule", {value: true});
        var leaf_1 = __webpack_require__(19);
        var Registry = __webpack_require__(1);
        var TextBlot = function(_super) {
          __extends(TextBlot2, _super);
          function TextBlot2(node) {
            var _this = _super.call(this, node) || this;
            _this.text = _this.statics.value(_this.domNode);
            return _this;
          }
          TextBlot2.create = function(value) {
            return document.createTextNode(value);
          };
          TextBlot2.value = function(domNode) {
            var text = domNode.data;
            if (text["normalize"])
              text = text["normalize"]();
            return text;
          };
          TextBlot2.prototype.deleteAt = function(index2, length) {
            this.domNode.data = this.text = this.text.slice(0, index2) + this.text.slice(index2 + length);
          };
          TextBlot2.prototype.index = function(node, offset) {
            if (this.domNode === node) {
              return offset;
            }
            return -1;
          };
          TextBlot2.prototype.insertAt = function(index2, value, def) {
            if (def == null) {
              this.text = this.text.slice(0, index2) + value + this.text.slice(index2);
              this.domNode.data = this.text;
            } else {
              _super.prototype.insertAt.call(this, index2, value, def);
            }
          };
          TextBlot2.prototype.length = function() {
            return this.text.length;
          };
          TextBlot2.prototype.optimize = function(context2) {
            _super.prototype.optimize.call(this, context2);
            this.text = this.statics.value(this.domNode);
            if (this.text.length === 0) {
              this.remove();
            } else if (this.next instanceof TextBlot2 && this.next.prev === this) {
              this.insertAt(this.length(), this.next.value());
              this.next.remove();
            }
          };
          TextBlot2.prototype.position = function(index2, inclusive) {
            return [this.domNode, index2];
          };
          TextBlot2.prototype.split = function(index2, force) {
            if (force === void 0) {
              force = false;
            }
            if (!force) {
              if (index2 === 0)
                return this;
              if (index2 === this.length())
                return this.next;
            }
            var after = Registry.create(this.domNode.splitText(index2));
            this.parent.insertBefore(after, this.next);
            this.text = this.statics.value(this.domNode);
            return after;
          };
          TextBlot2.prototype.update = function(mutations, context2) {
            var _this = this;
            if (mutations.some(function(mutation) {
              return mutation.type === "characterData" && mutation.target === _this.domNode;
            })) {
              this.text = this.statics.value(this.domNode);
            }
          };
          TextBlot2.prototype.value = function() {
            return this.text;
          };
          TextBlot2.blotName = "text";
          TextBlot2.scope = Registry.Scope.INLINE_BLOT;
          return TextBlot2;
        }(leaf_1.default);
        exports2.default = TextBlot;
      },
      function(module2, exports2, __webpack_require__) {
        var elem = document.createElement("div");
        elem.classList.toggle("test-class", false);
        if (elem.classList.contains("test-class")) {
          var _toggle = DOMTokenList.prototype.toggle;
          DOMTokenList.prototype.toggle = function(token, force) {
            if (arguments.length > 1 && !this.contains(token) === !force) {
              return force;
            } else {
              return _toggle.call(this, token);
            }
          };
        }
        if (!String.prototype.startsWith) {
          String.prototype.startsWith = function(searchString, position) {
            position = position || 0;
            return this.substr(position, searchString.length) === searchString;
          };
        }
        if (!String.prototype.endsWith) {
          String.prototype.endsWith = function(searchString, position) {
            var subjectString = this.toString();
            if (typeof position !== "number" || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
              position = subjectString.length;
            }
            position -= searchString.length;
            var lastIndex = subjectString.indexOf(searchString, position);
            return lastIndex !== -1 && lastIndex === position;
          };
        }
        if (!Array.prototype.find) {
          Object.defineProperty(Array.prototype, "find", {
            value: function value(predicate2) {
              if (this === null) {
                throw new TypeError("Array.prototype.find called on null or undefined");
              }
              if (typeof predicate2 !== "function") {
                throw new TypeError("predicate must be a function");
              }
              var list = Object(this);
              var length = list.length >>> 0;
              var thisArg = arguments[1];
              var value2;
              for (var i2 = 0; i2 < length; i2++) {
                value2 = list[i2];
                if (predicate2.call(thisArg, value2, i2, list)) {
                  return value2;
                }
              }
              return void 0;
            }
          });
        }
        document.addEventListener("DOMContentLoaded", function() {
          document.execCommand("enableObjectResizing", false, false);
          document.execCommand("autoUrlDetect", false, false);
        });
      },
      function(module2, exports2) {
        var DIFF_DELETE = -1;
        var DIFF_INSERT = 1;
        var DIFF_EQUAL = 0;
        function diff_main(text1, text2, cursor_pos) {
          if (text1 == text2) {
            if (text1) {
              return [[DIFF_EQUAL, text1]];
            }
            return [];
          }
          if (cursor_pos < 0 || text1.length < cursor_pos) {
            cursor_pos = null;
          }
          var commonlength = diff_commonPrefix(text1, text2);
          var commonprefix = text1.substring(0, commonlength);
          text1 = text1.substring(commonlength);
          text2 = text2.substring(commonlength);
          commonlength = diff_commonSuffix(text1, text2);
          var commonsuffix = text1.substring(text1.length - commonlength);
          text1 = text1.substring(0, text1.length - commonlength);
          text2 = text2.substring(0, text2.length - commonlength);
          var diffs = diff_compute_(text1, text2);
          if (commonprefix) {
            diffs.unshift([DIFF_EQUAL, commonprefix]);
          }
          if (commonsuffix) {
            diffs.push([DIFF_EQUAL, commonsuffix]);
          }
          diff_cleanupMerge(diffs);
          if (cursor_pos != null) {
            diffs = fix_cursor(diffs, cursor_pos);
          }
          diffs = fix_emoji(diffs);
          return diffs;
        }
        function diff_compute_(text1, text2) {
          var diffs;
          if (!text1) {
            return [[DIFF_INSERT, text2]];
          }
          if (!text2) {
            return [[DIFF_DELETE, text1]];
          }
          var longtext = text1.length > text2.length ? text1 : text2;
          var shorttext = text1.length > text2.length ? text2 : text1;
          var i2 = longtext.indexOf(shorttext);
          if (i2 != -1) {
            diffs = [
              [DIFF_INSERT, longtext.substring(0, i2)],
              [DIFF_EQUAL, shorttext],
              [DIFF_INSERT, longtext.substring(i2 + shorttext.length)]
            ];
            if (text1.length > text2.length) {
              diffs[0][0] = diffs[2][0] = DIFF_DELETE;
            }
            return diffs;
          }
          if (shorttext.length == 1) {
            return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
          }
          var hm = diff_halfMatch_(text1, text2);
          if (hm) {
            var text1_a = hm[0];
            var text1_b = hm[1];
            var text2_a = hm[2];
            var text2_b = hm[3];
            var mid_common = hm[4];
            var diffs_a = diff_main(text1_a, text2_a);
            var diffs_b = diff_main(text1_b, text2_b);
            return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
          }
          return diff_bisect_(text1, text2);
        }
        function diff_bisect_(text1, text2) {
          var text1_length = text1.length;
          var text2_length = text2.length;
          var max_d = Math.ceil((text1_length + text2_length) / 2);
          var v_offset = max_d;
          var v_length = 2 * max_d;
          var v1 = new Array(v_length);
          var v2 = new Array(v_length);
          for (var x = 0; x < v_length; x++) {
            v1[x] = -1;
            v2[x] = -1;
          }
          v1[v_offset + 1] = 0;
          v2[v_offset + 1] = 0;
          var delta = text1_length - text2_length;
          var front = delta % 2 != 0;
          var k1start = 0;
          var k1end = 0;
          var k2start = 0;
          var k2end = 0;
          for (var d = 0; d < max_d; d++) {
            for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
              var k1_offset = v_offset + k1;
              var x1;
              if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {
                x1 = v1[k1_offset + 1];
              } else {
                x1 = v1[k1_offset - 1] + 1;
              }
              var y1 = x1 - k1;
              while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {
                x1++;
                y1++;
              }
              v1[k1_offset] = x1;
              if (x1 > text1_length) {
                k1end += 2;
              } else if (y1 > text2_length) {
                k1start += 2;
              } else if (front) {
                var k2_offset = v_offset + delta - k1;
                if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
                  var x2 = text1_length - v2[k2_offset];
                  if (x1 >= x2) {
                    return diff_bisectSplit_(text1, text2, x1, y1);
                  }
                }
              }
            }
            for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
              var k2_offset = v_offset + k2;
              var x2;
              if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {
                x2 = v2[k2_offset + 1];
              } else {
                x2 = v2[k2_offset - 1] + 1;
              }
              var y2 = x2 - k2;
              while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {
                x2++;
                y2++;
              }
              v2[k2_offset] = x2;
              if (x2 > text1_length) {
                k2end += 2;
              } else if (y2 > text2_length) {
                k2start += 2;
              } else if (!front) {
                var k1_offset = v_offset + delta - k2;
                if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
                  var x1 = v1[k1_offset];
                  var y1 = v_offset + x1 - k1_offset;
                  x2 = text1_length - x2;
                  if (x1 >= x2) {
                    return diff_bisectSplit_(text1, text2, x1, y1);
                  }
                }
              }
            }
          }
          return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
        }
        function diff_bisectSplit_(text1, text2, x, y) {
          var text1a = text1.substring(0, x);
          var text2a = text2.substring(0, y);
          var text1b = text1.substring(x);
          var text2b = text2.substring(y);
          var diffs = diff_main(text1a, text2a);
          var diffsb = diff_main(text1b, text2b);
          return diffs.concat(diffsb);
        }
        function diff_commonPrefix(text1, text2) {
          if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
            return 0;
          }
          var pointermin = 0;
          var pointermax = Math.min(text1.length, text2.length);
          var pointermid = pointermax;
          var pointerstart = 0;
          while (pointermin < pointermid) {
            if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {
              pointermin = pointermid;
              pointerstart = pointermin;
            } else {
              pointermax = pointermid;
            }
            pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
          }
          return pointermid;
        }
        function diff_commonSuffix(text1, text2) {
          if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
            return 0;
          }
          var pointermin = 0;
          var pointermax = Math.min(text1.length, text2.length);
          var pointermid = pointermax;
          var pointerend = 0;
          while (pointermin < pointermid) {
            if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {
              pointermin = pointermid;
              pointerend = pointermin;
            } else {
              pointermax = pointermid;
            }
            pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
          }
          return pointermid;
        }
        function diff_halfMatch_(text1, text2) {
          var longtext = text1.length > text2.length ? text1 : text2;
          var shorttext = text1.length > text2.length ? text2 : text1;
          if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
            return null;
          }
          function diff_halfMatchI_(longtext2, shorttext2, i2) {
            var seed = longtext2.substring(i2, i2 + Math.floor(longtext2.length / 4));
            var j = -1;
            var best_common = "";
            var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
            while ((j = shorttext2.indexOf(seed, j + 1)) != -1) {
              var prefixLength = diff_commonPrefix(longtext2.substring(i2), shorttext2.substring(j));
              var suffixLength = diff_commonSuffix(longtext2.substring(0, i2), shorttext2.substring(0, j));
              if (best_common.length < suffixLength + prefixLength) {
                best_common = shorttext2.substring(j - suffixLength, j) + shorttext2.substring(j, j + prefixLength);
                best_longtext_a = longtext2.substring(0, i2 - suffixLength);
                best_longtext_b = longtext2.substring(i2 + prefixLength);
                best_shorttext_a = shorttext2.substring(0, j - suffixLength);
                best_shorttext_b = shorttext2.substring(j + prefixLength);
              }
            }
            if (best_common.length * 2 >= longtext2.length) {
              return [
                best_longtext_a,
                best_longtext_b,
                best_shorttext_a,
                best_shorttext_b,
                best_common
              ];
            } else {
              return null;
            }
          }
          var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));
          var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));
          var hm;
          if (!hm1 && !hm2) {
            return null;
          } else if (!hm2) {
            hm = hm1;
          } else if (!hm1) {
            hm = hm2;
          } else {
            hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
          }
          var text1_a, text1_b, text2_a, text2_b;
          if (text1.length > text2.length) {
            text1_a = hm[0];
            text1_b = hm[1];
            text2_a = hm[2];
            text2_b = hm[3];
          } else {
            text2_a = hm[0];
            text2_b = hm[1];
            text1_a = hm[2];
            text1_b = hm[3];
          }
          var mid_common = hm[4];
          return [text1_a, text1_b, text2_a, text2_b, mid_common];
        }
        function diff_cleanupMerge(diffs) {
          diffs.push([DIFF_EQUAL, ""]);
          var pointer = 0;
          var count_delete = 0;
          var count_insert = 0;
          var text_delete = "";
          var text_insert = "";
          var commonlength;
          while (pointer < diffs.length) {
            switch (diffs[pointer][0]) {
              case DIFF_INSERT:
                count_insert++;
                text_insert += diffs[pointer][1];
                pointer++;
                break;
              case DIFF_DELETE:
                count_delete++;
                text_delete += diffs[pointer][1];
                pointer++;
                break;
              case DIFF_EQUAL:
                if (count_delete + count_insert > 1) {
                  if (count_delete !== 0 && count_insert !== 0) {
                    commonlength = diff_commonPrefix(text_insert, text_delete);
                    if (commonlength !== 0) {
                      if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {
                        diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);
                      } else {
                        diffs.splice(0, 0, [
                          DIFF_EQUAL,
                          text_insert.substring(0, commonlength)
                        ]);
                        pointer++;
                      }
                      text_insert = text_insert.substring(commonlength);
                      text_delete = text_delete.substring(commonlength);
                    }
                    commonlength = diff_commonSuffix(text_insert, text_delete);
                    if (commonlength !== 0) {
                      diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];
                      text_insert = text_insert.substring(0, text_insert.length - commonlength);
                      text_delete = text_delete.substring(0, text_delete.length - commonlength);
                    }
                  }
                  if (count_delete === 0) {
                    diffs.splice(pointer - count_insert, count_delete + count_insert, [DIFF_INSERT, text_insert]);
                  } else if (count_insert === 0) {
                    diffs.splice(pointer - count_delete, count_delete + count_insert, [DIFF_DELETE, text_delete]);
                  } else {
                    diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);
                  }
                  pointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
                } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
                  diffs[pointer - 1][1] += diffs[pointer][1];
                  diffs.splice(pointer, 1);
                } else {
                  pointer++;
                }
                count_insert = 0;
                count_delete = 0;
                text_delete = "";
                text_insert = "";
                break;
            }
          }
          if (diffs[diffs.length - 1][1] === "") {
            diffs.pop();
          }
          var changes = false;
          pointer = 1;
          while (pointer < diffs.length - 1) {
            if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
              if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
                diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);
                diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
                diffs.splice(pointer - 1, 1);
                changes = true;
              } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {
                diffs[pointer - 1][1] += diffs[pointer + 1][1];
                diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];
                diffs.splice(pointer + 1, 1);
                changes = true;
              }
            }
            pointer++;
          }
          if (changes) {
            diff_cleanupMerge(diffs);
          }
        }
        var diff = diff_main;
        diff.INSERT = DIFF_INSERT;
        diff.DELETE = DIFF_DELETE;
        diff.EQUAL = DIFF_EQUAL;
        module2.exports = diff;
        function cursor_normalize_diff(diffs, cursor_pos) {
          if (cursor_pos === 0) {
            return [DIFF_EQUAL, diffs];
          }
          for (var current_pos = 0, i2 = 0; i2 < diffs.length; i2++) {
            var d = diffs[i2];
            if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {
              var next_pos = current_pos + d[1].length;
              if (cursor_pos === next_pos) {
                return [i2 + 1, diffs];
              } else if (cursor_pos < next_pos) {
                diffs = diffs.slice();
                var split_pos = cursor_pos - current_pos;
                var d_left = [d[0], d[1].slice(0, split_pos)];
                var d_right = [d[0], d[1].slice(split_pos)];
                diffs.splice(i2, 1, d_left, d_right);
                return [i2 + 1, diffs];
              } else {
                current_pos = next_pos;
              }
            }
          }
          throw new Error("cursor_pos is out of bounds!");
        }
        function fix_cursor(diffs, cursor_pos) {
          var norm = cursor_normalize_diff(diffs, cursor_pos);
          var ndiffs = norm[1];
          var cursor_pointer = norm[0];
          var d = ndiffs[cursor_pointer];
          var d_next = ndiffs[cursor_pointer + 1];
          if (d == null) {
            return diffs;
          } else if (d[0] !== DIFF_EQUAL) {
            return diffs;
          } else {
            if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {
              ndiffs.splice(cursor_pointer, 2, d_next, d);
              return merge_tuples(ndiffs, cursor_pointer, 2);
            } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {
              ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);
              var suffix = d_next[1].slice(d[1].length);
              if (suffix.length > 0) {
                ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);
              }
              return merge_tuples(ndiffs, cursor_pointer, 3);
            } else {
              return diffs;
            }
          }
        }
        function fix_emoji(diffs) {
          var compact = false;
          var starts_with_pair_end = function(str) {
            return str.charCodeAt(0) >= 56320 && str.charCodeAt(0) <= 57343;
          };
          var ends_with_pair_start = function(str) {
            return str.charCodeAt(str.length - 1) >= 55296 && str.charCodeAt(str.length - 1) <= 56319;
          };
          for (var i2 = 2; i2 < diffs.length; i2 += 1) {
            if (diffs[i2 - 2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i2 - 2][1]) && diffs[i2 - 1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i2 - 1][1]) && diffs[i2][0] === DIFF_INSERT && starts_with_pair_end(diffs[i2][1])) {
              compact = true;
              diffs[i2 - 1][1] = diffs[i2 - 2][1].slice(-1) + diffs[i2 - 1][1];
              diffs[i2][1] = diffs[i2 - 2][1].slice(-1) + diffs[i2][1];
              diffs[i2 - 2][1] = diffs[i2 - 2][1].slice(0, -1);
            }
          }
          if (!compact) {
            return diffs;
          }
          var fixed_diffs = [];
          for (var i2 = 0; i2 < diffs.length; i2 += 1) {
            if (diffs[i2][1].length > 0) {
              fixed_diffs.push(diffs[i2]);
            }
          }
          return fixed_diffs;
        }
        function merge_tuples(diffs, start, length) {
          for (var i2 = start + length - 1; i2 >= 0 && i2 >= start - 1; i2--) {
            if (i2 + 1 < diffs.length) {
              var left_d = diffs[i2];
              var right_d = diffs[i2 + 1];
              if (left_d[0] === right_d[1]) {
                diffs.splice(i2, 2, [left_d[0], left_d[1] + right_d[1]]);
              }
            }
          }
          return diffs;
        }
      },
      function(module2, exports2) {
        exports2 = module2.exports = typeof Object.keys === "function" ? Object.keys : shim;
        exports2.shim = shim;
        function shim(obj) {
          var keys2 = [];
          for (var key2 in obj)
            keys2.push(key2);
          return keys2;
        }
      },
      function(module2, exports2) {
        var supportsArgumentsClass = function() {
          return Object.prototype.toString.call(arguments);
        }() == "[object Arguments]";
        exports2 = module2.exports = supportsArgumentsClass ? supported : unsupported;
        exports2.supported = supported;
        function supported(object) {
          return Object.prototype.toString.call(object) == "[object Arguments]";
        }
        exports2.unsupported = unsupported;
        function unsupported(object) {
          return object && typeof object == "object" && typeof object.length == "number" && Object.prototype.hasOwnProperty.call(object, "callee") && !Object.prototype.propertyIsEnumerable.call(object, "callee") || false;
        }
      },
      function(module2, exports2) {
        var has2 = Object.prototype.hasOwnProperty, prefix2 = "~";
        function Events() {
        }
        if (Object.create) {
          Events.prototype = Object.create(null);
          if (!new Events().__proto__)
            prefix2 = false;
        }
        function EE(fn, context2, once) {
          this.fn = fn;
          this.context = context2;
          this.once = once || false;
        }
        function EventEmitter() {
          this._events = new Events();
          this._eventsCount = 0;
        }
        EventEmitter.prototype.eventNames = function eventNames() {
          var names = [], events, name;
          if (this._eventsCount === 0)
            return names;
          for (name in events = this._events) {
            if (has2.call(events, name))
              names.push(prefix2 ? name.slice(1) : name);
          }
          if (Object.getOwnPropertySymbols) {
            return names.concat(Object.getOwnPropertySymbols(events));
          }
          return names;
        };
        EventEmitter.prototype.listeners = function listeners(event, exists) {
          var evt = prefix2 ? prefix2 + event : event, available = this._events[evt];
          if (exists)
            return !!available;
          if (!available)
            return [];
          if (available.fn)
            return [available.fn];
          for (var i2 = 0, l = available.length, ee = new Array(l); i2 < l; i2++) {
            ee[i2] = available[i2].fn;
          }
          return ee;
        };
        EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
          var evt = prefix2 ? prefix2 + event : event;
          if (!this._events[evt])
            return false;
          var listeners = this._events[evt], len = arguments.length, args, i2;
          if (listeners.fn) {
            if (listeners.once)
              this.removeListener(event, listeners.fn, void 0, true);
            switch (len) {
              case 1:
                return listeners.fn.call(listeners.context), true;
              case 2:
                return listeners.fn.call(listeners.context, a1), true;
              case 3:
                return listeners.fn.call(listeners.context, a1, a2), true;
              case 4:
                return listeners.fn.call(listeners.context, a1, a2, a3), true;
              case 5:
                return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
              case 6:
                return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
            }
            for (i2 = 1, args = new Array(len - 1); i2 < len; i2++) {
              args[i2 - 1] = arguments[i2];
            }
            listeners.fn.apply(listeners.context, args);
          } else {
            var length = listeners.length, j;
            for (i2 = 0; i2 < length; i2++) {
              if (listeners[i2].once)
                this.removeListener(event, listeners[i2].fn, void 0, true);
              switch (len) {
                case 1:
                  listeners[i2].fn.call(listeners[i2].context);
                  break;
                case 2:
                  listeners[i2].fn.call(listeners[i2].context, a1);
                  break;
                case 3:
                  listeners[i2].fn.call(listeners[i2].context, a1, a2);
                  break;
                case 4:
                  listeners[i2].fn.call(listeners[i2].context, a1, a2, a3);
                  break;
                default:
                  if (!args)
                    for (j = 1, args = new Array(len - 1); j < len; j++) {
                      args[j - 1] = arguments[j];
                    }
                  listeners[i2].fn.apply(listeners[i2].context, args);
              }
            }
          }
          return true;
        };
        EventEmitter.prototype.on = function on(event, fn, context2) {
          var listener = new EE(fn, context2 || this), evt = prefix2 ? prefix2 + event : event;
          if (!this._events[evt])
            this._events[evt] = listener, this._eventsCount++;
          else if (!this._events[evt].fn)
            this._events[evt].push(listener);
          else
            this._events[evt] = [this._events[evt], listener];
          return this;
        };
        EventEmitter.prototype.once = function once(event, fn, context2) {
          var listener = new EE(fn, context2 || this, true), evt = prefix2 ? prefix2 + event : event;
          if (!this._events[evt])
            this._events[evt] = listener, this._eventsCount++;
          else if (!this._events[evt].fn)
            this._events[evt].push(listener);
          else
            this._events[evt] = [this._events[evt], listener];
          return this;
        };
        EventEmitter.prototype.removeListener = function removeListener(event, fn, context2, once) {
          var evt = prefix2 ? prefix2 + event : event;
          if (!this._events[evt])
            return this;
          if (!fn) {
            if (--this._eventsCount === 0)
              this._events = new Events();
            else
              delete this._events[evt];
            return this;
          }
          var listeners = this._events[evt];
          if (listeners.fn) {
            if (listeners.fn === fn && (!once || listeners.once) && (!context2 || listeners.context === context2)) {
              if (--this._eventsCount === 0)
                this._events = new Events();
              else
                delete this._events[evt];
            }
          } else {
            for (var i2 = 0, events = [], length = listeners.length; i2 < length; i2++) {
              if (listeners[i2].fn !== fn || once && !listeners[i2].once || context2 && listeners[i2].context !== context2) {
                events.push(listeners[i2]);
              }
            }
            if (events.length)
              this._events[evt] = events.length === 1 ? events[0] : events;
            else if (--this._eventsCount === 0)
              this._events = new Events();
            else
              delete this._events[evt];
          }
          return this;
        };
        EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
          var evt;
          if (event) {
            evt = prefix2 ? prefix2 + event : event;
            if (this._events[evt]) {
              if (--this._eventsCount === 0)
                this._events = new Events();
              else
                delete this._events[evt];
            }
          } else {
            this._events = new Events();
            this._eventsCount = 0;
          }
          return this;
        };
        EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
        EventEmitter.prototype.addListener = EventEmitter.prototype.on;
        EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
          return this;
        };
        EventEmitter.prefixed = prefix2;
        EventEmitter.EventEmitter = EventEmitter;
        if (typeof module2 !== "undefined") {
          module2.exports = EventEmitter;
        }
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.matchText = exports2.matchSpacing = exports2.matchNewline = exports2.matchBlot = exports2.matchAttributor = exports2.default = void 0;
        var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
          return typeof obj;
        } : function(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
        var _slicedToArray2 = function() {
          function sliceIterator(arr, i2) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i2 && _arr.length === i2)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"])
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          return function(arr, i2) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i2);
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
          };
        }();
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _extend2 = __webpack_require__(3);
        var _extend3 = _interopRequireDefault(_extend2);
        var _quillDelta = __webpack_require__(2);
        var _quillDelta2 = _interopRequireDefault(_quillDelta);
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _quill = __webpack_require__(5);
        var _quill2 = _interopRequireDefault(_quill);
        var _logger = __webpack_require__(10);
        var _logger2 = _interopRequireDefault(_logger);
        var _module = __webpack_require__(9);
        var _module2 = _interopRequireDefault(_module);
        var _align = __webpack_require__(36);
        var _background = __webpack_require__(37);
        var _code = __webpack_require__(13);
        var _code2 = _interopRequireDefault(_code);
        var _color = __webpack_require__(26);
        var _direction = __webpack_require__(38);
        var _font = __webpack_require__(39);
        var _size = __webpack_require__(40);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _defineProperty2(obj, key2, value) {
          if (key2 in obj) {
            Object.defineProperty(obj, key2, {value, enumerable: true, configurable: true, writable: true});
          } else {
            obj[key2] = value;
          }
          return obj;
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var debug = (0, _logger2.default)("quill:clipboard");
        var DOM_KEY = "__ql-matcher";
        var CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ["br", matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ["li", matchIndent], ["b", matchAlias.bind(matchAlias, "bold")], ["i", matchAlias.bind(matchAlias, "italic")], ["style", matchIgnore]];
        var ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce(function(memo, attr) {
          memo[attr.keyName] = attr;
          return memo;
        }, {});
        var STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce(function(memo, attr) {
          memo[attr.keyName] = attr;
          return memo;
        }, {});
        var Clipboard = function(_Module) {
          _inherits2(Clipboard2, _Module);
          function Clipboard2(quill2, options) {
            _classCallCheck2(this, Clipboard2);
            var _this = _possibleConstructorReturn2(this, (Clipboard2.__proto__ || Object.getPrototypeOf(Clipboard2)).call(this, quill2, options));
            _this.quill.root.addEventListener("paste", _this.onPaste.bind(_this));
            _this.container = _this.quill.addContainer("ql-clipboard");
            _this.container.setAttribute("contenteditable", true);
            _this.container.setAttribute("tabindex", -1);
            _this.matchers = [];
            CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function(_ref) {
              var _ref2 = _slicedToArray2(_ref, 2), selector = _ref2[0], matcher = _ref2[1];
              if (!options.matchVisual && matcher === matchSpacing)
                return;
              _this.addMatcher(selector, matcher);
            });
            return _this;
          }
          _createClass(Clipboard2, [{
            key: "addMatcher",
            value: function addMatcher(selector, matcher) {
              this.matchers.push([selector, matcher]);
            }
          }, {
            key: "convert",
            value: function convert(html) {
              if (typeof html === "string") {
                this.container.innerHTML = html.replace(/\>\r?\n +\</g, "><");
                return this.convert();
              }
              var formats = this.quill.getFormat(this.quill.selection.savedRange.index);
              if (formats[_code2.default.blotName]) {
                var text = this.container.innerText;
                this.container.innerHTML = "";
                return new _quillDelta2.default().insert(text, _defineProperty2({}, _code2.default.blotName, formats[_code2.default.blotName]));
              }
              var _prepareMatching = this.prepareMatching(), _prepareMatching2 = _slicedToArray2(_prepareMatching, 2), elementMatchers = _prepareMatching2[0], textMatchers = _prepareMatching2[1];
              var delta = traverse(this.container, elementMatchers, textMatchers);
              if (deltaEndsWith(delta, "\n") && delta.ops[delta.ops.length - 1].attributes == null) {
                delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));
              }
              debug.log("convert", this.container.innerHTML, delta);
              this.container.innerHTML = "";
              return delta;
            }
          }, {
            key: "dangerouslyPasteHTML",
            value: function dangerouslyPasteHTML(index2, html) {
              var source2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _quill2.default.sources.API;
              if (typeof index2 === "string") {
                this.quill.setContents(this.convert(index2), html);
                this.quill.setSelection(0, _quill2.default.sources.SILENT);
              } else {
                var paste = this.convert(html);
                this.quill.updateContents(new _quillDelta2.default().retain(index2).concat(paste), source2);
                this.quill.setSelection(index2 + paste.length(), _quill2.default.sources.SILENT);
              }
            }
          }, {
            key: "onPaste",
            value: function onPaste(e) {
              var _this2 = this;
              if (e.defaultPrevented || !this.quill.isEnabled())
                return;
              var range = this.quill.getSelection();
              var delta = new _quillDelta2.default().retain(range.index);
              var scrollTop = this.quill.scrollingContainer.scrollTop;
              this.container.focus();
              this.quill.selection.update(_quill2.default.sources.SILENT);
              setTimeout(function() {
                delta = delta.concat(_this2.convert()).delete(range.length);
                _this2.quill.updateContents(delta, _quill2.default.sources.USER);
                _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);
                _this2.quill.scrollingContainer.scrollTop = scrollTop;
                _this2.quill.focus();
              }, 1);
            }
          }, {
            key: "prepareMatching",
            value: function prepareMatching() {
              var _this3 = this;
              var elementMatchers = [], textMatchers = [];
              this.matchers.forEach(function(pair) {
                var _pair = _slicedToArray2(pair, 2), selector = _pair[0], matcher = _pair[1];
                switch (selector) {
                  case Node.TEXT_NODE:
                    textMatchers.push(matcher);
                    break;
                  case Node.ELEMENT_NODE:
                    elementMatchers.push(matcher);
                    break;
                  default:
                    [].forEach.call(_this3.container.querySelectorAll(selector), function(node) {
                      node[DOM_KEY] = node[DOM_KEY] || [];
                      node[DOM_KEY].push(matcher);
                    });
                    break;
                }
              });
              return [elementMatchers, textMatchers];
            }
          }]);
          return Clipboard2;
        }(_module2.default);
        Clipboard.DEFAULTS = {
          matchers: [],
          matchVisual: true
        };
        function applyFormat(delta, format, value) {
          if ((typeof format === "undefined" ? "undefined" : _typeof2(format)) === "object") {
            return Object.keys(format).reduce(function(delta2, key2) {
              return applyFormat(delta2, key2, format[key2]);
            }, delta);
          } else {
            return delta.reduce(function(delta2, op) {
              if (op.attributes && op.attributes[format]) {
                return delta2.push(op);
              } else {
                return delta2.insert(op.insert, (0, _extend3.default)({}, _defineProperty2({}, format, value), op.attributes));
              }
            }, new _quillDelta2.default());
          }
        }
        function computeStyle(node) {
          if (node.nodeType !== Node.ELEMENT_NODE)
            return {};
          var DOM_KEY2 = "__ql-computed-style";
          return node[DOM_KEY2] || (node[DOM_KEY2] = window.getComputedStyle(node));
        }
        function deltaEndsWith(delta, text) {
          var endText = "";
          for (var i2 = delta.ops.length - 1; i2 >= 0 && endText.length < text.length; --i2) {
            var op = delta.ops[i2];
            if (typeof op.insert !== "string")
              break;
            endText = op.insert + endText;
          }
          return endText.slice(-1 * text.length) === text;
        }
        function isLine(node) {
          if (node.childNodes.length === 0)
            return false;
          var style = computeStyle(node);
          return ["block", "list-item"].indexOf(style.display) > -1;
        }
        function traverse(node, elementMatchers, textMatchers) {
          if (node.nodeType === node.TEXT_NODE) {
            return textMatchers.reduce(function(delta, matcher) {
              return matcher(node, delta);
            }, new _quillDelta2.default());
          } else if (node.nodeType === node.ELEMENT_NODE) {
            return [].reduce.call(node.childNodes || [], function(delta, childNode) {
              var childrenDelta = traverse(childNode, elementMatchers, textMatchers);
              if (childNode.nodeType === node.ELEMENT_NODE) {
                childrenDelta = elementMatchers.reduce(function(childrenDelta2, matcher) {
                  return matcher(childNode, childrenDelta2);
                }, childrenDelta);
                childrenDelta = (childNode[DOM_KEY] || []).reduce(function(childrenDelta2, matcher) {
                  return matcher(childNode, childrenDelta2);
                }, childrenDelta);
              }
              return delta.concat(childrenDelta);
            }, new _quillDelta2.default());
          } else {
            return new _quillDelta2.default();
          }
        }
        function matchAlias(format, node, delta) {
          return applyFormat(delta, format, true);
        }
        function matchAttributor(node, delta) {
          var attributes = _parchment2.default.Attributor.Attribute.keys(node);
          var classes = _parchment2.default.Attributor.Class.keys(node);
          var styles = _parchment2.default.Attributor.Style.keys(node);
          var formats = {};
          attributes.concat(classes).concat(styles).forEach(function(name) {
            var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);
            if (attr != null) {
              formats[attr.attrName] = attr.value(node);
              if (formats[attr.attrName])
                return;
            }
            attr = ATTRIBUTE_ATTRIBUTORS[name];
            if (attr != null && (attr.attrName === name || attr.keyName === name)) {
              formats[attr.attrName] = attr.value(node) || void 0;
            }
            attr = STYLE_ATTRIBUTORS[name];
            if (attr != null && (attr.attrName === name || attr.keyName === name)) {
              attr = STYLE_ATTRIBUTORS[name];
              formats[attr.attrName] = attr.value(node) || void 0;
            }
          });
          if (Object.keys(formats).length > 0) {
            delta = applyFormat(delta, formats);
          }
          return delta;
        }
        function matchBlot(node, delta) {
          var match = _parchment2.default.query(node);
          if (match == null)
            return delta;
          if (match.prototype instanceof _parchment2.default.Embed) {
            var embed = {};
            var value = match.value(node);
            if (value != null) {
              embed[match.blotName] = value;
              delta = new _quillDelta2.default().insert(embed, match.formats(node));
            }
          } else if (typeof match.formats === "function") {
            delta = applyFormat(delta, match.blotName, match.formats(node));
          }
          return delta;
        }
        function matchBreak(node, delta) {
          if (!deltaEndsWith(delta, "\n")) {
            delta.insert("\n");
          }
          return delta;
        }
        function matchIgnore() {
          return new _quillDelta2.default();
        }
        function matchIndent(node, delta) {
          var match = _parchment2.default.query(node);
          if (match == null || match.blotName !== "list-item" || !deltaEndsWith(delta, "\n")) {
            return delta;
          }
          var indent = -1, parent = node.parentNode;
          while (!parent.classList.contains("ql-clipboard")) {
            if ((_parchment2.default.query(parent) || {}).blotName === "list") {
              indent += 1;
            }
            parent = parent.parentNode;
          }
          if (indent <= 0)
            return delta;
          return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, {indent}));
        }
        function matchNewline(node, delta) {
          if (!deltaEndsWith(delta, "\n")) {
            if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {
              delta.insert("\n");
            }
          }
          return delta;
        }
        function matchSpacing(node, delta) {
          if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, "\n\n")) {
            var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);
            if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {
              delta.insert("\n");
            }
          }
          return delta;
        }
        function matchStyles(node, delta) {
          var formats = {};
          var style = node.style || {};
          if (style.fontStyle && computeStyle(node).fontStyle === "italic") {
            formats.italic = true;
          }
          if (style.fontWeight && (computeStyle(node).fontWeight.startsWith("bold") || parseInt(computeStyle(node).fontWeight) >= 700)) {
            formats.bold = true;
          }
          if (Object.keys(formats).length > 0) {
            delta = applyFormat(delta, formats);
          }
          if (parseFloat(style.textIndent || 0) > 0) {
            delta = new _quillDelta2.default().insert("	").concat(delta);
          }
          return delta;
        }
        function matchText(node, delta) {
          var text = node.data;
          if (node.parentNode.tagName === "O:P") {
            return delta.insert(text.trim());
          }
          if (text.trim().length === 0 && node.parentNode.classList.contains("ql-clipboard")) {
            return delta;
          }
          if (!computeStyle(node.parentNode).whiteSpace.startsWith("pre")) {
            var replacer = function replacer2(collapse, match) {
              match = match.replace(/[^\u00a0]/g, "");
              return match.length < 1 && collapse ? " " : match;
            };
            text = text.replace(/\r\n/g, " ").replace(/\n/g, " ");
            text = text.replace(/\s\s+/g, replacer.bind(replacer, true));
            if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {
              text = text.replace(/^\s+/, replacer.bind(replacer, false));
            }
            if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {
              text = text.replace(/\s+$/, replacer.bind(replacer, false));
            }
          }
          return delta.insert(text);
        }
        exports2.default = Clipboard;
        exports2.matchAttributor = matchAttributor;
        exports2.matchBlot = matchBlot;
        exports2.matchNewline = matchNewline;
        exports2.matchSpacing = matchSpacing;
        exports2.matchText = matchText;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _inline = __webpack_require__(6);
        var _inline2 = _interopRequireDefault(_inline);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Bold = function(_Inline) {
          _inherits2(Bold2, _Inline);
          function Bold2() {
            _classCallCheck2(this, Bold2);
            return _possibleConstructorReturn2(this, (Bold2.__proto__ || Object.getPrototypeOf(Bold2)).apply(this, arguments));
          }
          _createClass(Bold2, [{
            key: "optimize",
            value: function optimize(context2) {
              _get(Bold2.prototype.__proto__ || Object.getPrototypeOf(Bold2.prototype), "optimize", this).call(this, context2);
              if (this.domNode.tagName !== this.statics.tagName[0]) {
                this.replaceWith(this.statics.blotName);
              }
            }
          }], [{
            key: "create",
            value: function create2() {
              return _get(Bold2.__proto__ || Object.getPrototypeOf(Bold2), "create", this).call(this);
            }
          }, {
            key: "formats",
            value: function formats() {
              return true;
            }
          }]);
          return Bold2;
        }(_inline2.default);
        Bold.blotName = "bold";
        Bold.tagName = ["STRONG", "B"];
        exports2.default = Bold;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.addControls = exports2.default = void 0;
        var _slicedToArray2 = function() {
          function sliceIterator(arr, i2) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i2 && _arr.length === i2)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"])
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          return function(arr, i2) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i2);
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
          };
        }();
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _quillDelta = __webpack_require__(2);
        var _quillDelta2 = _interopRequireDefault(_quillDelta);
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _quill = __webpack_require__(5);
        var _quill2 = _interopRequireDefault(_quill);
        var _logger = __webpack_require__(10);
        var _logger2 = _interopRequireDefault(_logger);
        var _module = __webpack_require__(9);
        var _module2 = _interopRequireDefault(_module);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _defineProperty2(obj, key2, value) {
          if (key2 in obj) {
            Object.defineProperty(obj, key2, {value, enumerable: true, configurable: true, writable: true});
          } else {
            obj[key2] = value;
          }
          return obj;
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var debug = (0, _logger2.default)("quill:toolbar");
        var Toolbar2 = function(_Module) {
          _inherits2(Toolbar3, _Module);
          function Toolbar3(quill2, options) {
            _classCallCheck2(this, Toolbar3);
            var _this = _possibleConstructorReturn2(this, (Toolbar3.__proto__ || Object.getPrototypeOf(Toolbar3)).call(this, quill2, options));
            if (Array.isArray(_this.options.container)) {
              var container = document.createElement("div");
              addControls(container, _this.options.container);
              quill2.container.parentNode.insertBefore(container, quill2.container);
              _this.container = container;
            } else if (typeof _this.options.container === "string") {
              _this.container = document.querySelector(_this.options.container);
            } else {
              _this.container = _this.options.container;
            }
            if (!(_this.container instanceof HTMLElement)) {
              var _ret;
              return _ret = debug.error("Container required for toolbar", _this.options), _possibleConstructorReturn2(_this, _ret);
            }
            _this.container.classList.add("ql-toolbar");
            _this.controls = [];
            _this.handlers = {};
            Object.keys(_this.options.handlers).forEach(function(format) {
              _this.addHandler(format, _this.options.handlers[format]);
            });
            [].forEach.call(_this.container.querySelectorAll("button, select"), function(input) {
              _this.attach(input);
            });
            _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function(type, range) {
              if (type === _quill2.default.events.SELECTION_CHANGE) {
                _this.update(range);
              }
            });
            _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function() {
              var _this$quill$selection = _this.quill.selection.getRange(), _this$quill$selection2 = _slicedToArray2(_this$quill$selection, 1), range = _this$quill$selection2[0];
              _this.update(range);
            });
            return _this;
          }
          _createClass(Toolbar3, [{
            key: "addHandler",
            value: function addHandler(format, handler) {
              this.handlers[format] = handler;
            }
          }, {
            key: "attach",
            value: function attach(input) {
              var _this2 = this;
              var format = [].find.call(input.classList, function(className) {
                return className.indexOf("ql-") === 0;
              });
              if (!format)
                return;
              format = format.slice("ql-".length);
              if (input.tagName === "BUTTON") {
                input.setAttribute("type", "button");
              }
              if (this.handlers[format] == null) {
                if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {
                  debug.warn("ignoring attaching to disabled format", format, input);
                  return;
                }
                if (_parchment2.default.query(format) == null) {
                  debug.warn("ignoring attaching to nonexistent format", format, input);
                  return;
                }
              }
              var eventName = input.tagName === "SELECT" ? "change" : "click";
              input.addEventListener(eventName, function(e) {
                var value = void 0;
                if (input.tagName === "SELECT") {
                  if (input.selectedIndex < 0)
                    return;
                  var selected = input.options[input.selectedIndex];
                  if (selected.hasAttribute("selected")) {
                    value = false;
                  } else {
                    value = selected.value || false;
                  }
                } else {
                  if (input.classList.contains("ql-active")) {
                    value = false;
                  } else {
                    value = input.value || !input.hasAttribute("value");
                  }
                  e.preventDefault();
                }
                _this2.quill.focus();
                var _quill$selection$getR = _this2.quill.selection.getRange(), _quill$selection$getR2 = _slicedToArray2(_quill$selection$getR, 1), range = _quill$selection$getR2[0];
                if (_this2.handlers[format] != null) {
                  _this2.handlers[format].call(_this2, value);
                } else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {
                  value = prompt("Enter " + format);
                  if (!value)
                    return;
                  _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty2({}, format, value)), _quill2.default.sources.USER);
                } else {
                  _this2.quill.format(format, value, _quill2.default.sources.USER);
                }
                _this2.update(range);
              });
              this.controls.push([format, input]);
            }
          }, {
            key: "update",
            value: function update(range) {
              var formats = range == null ? {} : this.quill.getFormat(range);
              this.controls.forEach(function(pair) {
                var _pair = _slicedToArray2(pair, 2), format = _pair[0], input = _pair[1];
                if (input.tagName === "SELECT") {
                  var option = void 0;
                  if (range == null) {
                    option = null;
                  } else if (formats[format] == null) {
                    option = input.querySelector("option[selected]");
                  } else if (!Array.isArray(formats[format])) {
                    var value = formats[format];
                    if (typeof value === "string") {
                      value = value.replace(/\"/g, '\\"');
                    }
                    option = input.querySelector('option[value="' + value + '"]');
                  }
                  if (option == null) {
                    input.value = "";
                    input.selectedIndex = -1;
                  } else {
                    option.selected = true;
                  }
                } else {
                  if (range == null) {
                    input.classList.remove("ql-active");
                  } else if (input.hasAttribute("value")) {
                    var isActive = formats[format] === input.getAttribute("value") || formats[format] != null && formats[format].toString() === input.getAttribute("value") || formats[format] == null && !input.getAttribute("value");
                    input.classList.toggle("ql-active", isActive);
                  } else {
                    input.classList.toggle("ql-active", formats[format] != null);
                  }
                }
              });
            }
          }]);
          return Toolbar3;
        }(_module2.default);
        Toolbar2.DEFAULTS = {};
        function addButton(container, format, value) {
          var input = document.createElement("button");
          input.setAttribute("type", "button");
          input.classList.add("ql-" + format);
          if (value != null) {
            input.value = value;
          }
          container.appendChild(input);
        }
        function addControls(container, groups) {
          if (!Array.isArray(groups[0])) {
            groups = [groups];
          }
          groups.forEach(function(controls) {
            var group = document.createElement("span");
            group.classList.add("ql-formats");
            controls.forEach(function(control) {
              if (typeof control === "string") {
                addButton(group, control);
              } else {
                var format = Object.keys(control)[0];
                var value = control[format];
                if (Array.isArray(value)) {
                  addSelect(group, format, value);
                } else {
                  addButton(group, format, value);
                }
              }
            });
            container.appendChild(group);
          });
        }
        function addSelect(container, format, values) {
          var input = document.createElement("select");
          input.classList.add("ql-" + format);
          values.forEach(function(value) {
            var option = document.createElement("option");
            if (value !== false) {
              option.setAttribute("value", value);
            } else {
              option.setAttribute("selected", "selected");
            }
            input.appendChild(option);
          });
          container.appendChild(input);
        }
        Toolbar2.DEFAULTS = {
          container: null,
          handlers: {
            clean: function clean() {
              var _this3 = this;
              var range = this.quill.getSelection();
              if (range == null)
                return;
              if (range.length == 0) {
                var formats = this.quill.getFormat();
                Object.keys(formats).forEach(function(name) {
                  if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {
                    _this3.quill.format(name, false);
                  }
                });
              } else {
                this.quill.removeFormat(range, _quill2.default.sources.USER);
              }
            },
            direction: function direction(value) {
              var align = this.quill.getFormat()["align"];
              if (value === "rtl" && align == null) {
                this.quill.format("align", "right", _quill2.default.sources.USER);
              } else if (!value && align === "right") {
                this.quill.format("align", false, _quill2.default.sources.USER);
              }
              this.quill.format("direction", value, _quill2.default.sources.USER);
            },
            indent: function indent(value) {
              var range = this.quill.getSelection();
              var formats = this.quill.getFormat(range);
              var indent2 = parseInt(formats.indent || 0);
              if (value === "+1" || value === "-1") {
                var modifier = value === "+1" ? 1 : -1;
                if (formats.direction === "rtl")
                  modifier *= -1;
                this.quill.format("indent", indent2 + modifier, _quill2.default.sources.USER);
              }
            },
            link: function link(value) {
              if (value === true) {
                value = prompt("Enter link URL:");
              }
              this.quill.format("link", value, _quill2.default.sources.USER);
            },
            list: function list(value) {
              var range = this.quill.getSelection();
              var formats = this.quill.getFormat(range);
              if (value === "check") {
                if (formats["list"] === "checked" || formats["list"] === "unchecked") {
                  this.quill.format("list", false, _quill2.default.sources.USER);
                } else {
                  this.quill.format("list", "unchecked", _quill2.default.sources.USER);
                }
              } else {
                this.quill.format("list", value, _quill2.default.sources.USER);
              }
            }
          }
        };
        exports2.default = Toolbar2;
        exports2.addControls = addControls;
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <polyline class="ql-even ql-stroke" points="5 7 3 9 5 11"></polyline> <polyline class="ql-even ql-stroke" points="13 7 15 9 13 11"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>';
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _picker = __webpack_require__(28);
        var _picker2 = _interopRequireDefault(_picker);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var ColorPicker = function(_Picker) {
          _inherits2(ColorPicker2, _Picker);
          function ColorPicker2(select, label) {
            _classCallCheck2(this, ColorPicker2);
            var _this = _possibleConstructorReturn2(this, (ColorPicker2.__proto__ || Object.getPrototypeOf(ColorPicker2)).call(this, select));
            _this.label.innerHTML = label;
            _this.container.classList.add("ql-color-picker");
            [].slice.call(_this.container.querySelectorAll(".ql-picker-item"), 0, 7).forEach(function(item) {
              item.classList.add("ql-primary");
            });
            return _this;
          }
          _createClass(ColorPicker2, [{
            key: "buildItem",
            value: function buildItem(option) {
              var item = _get(ColorPicker2.prototype.__proto__ || Object.getPrototypeOf(ColorPicker2.prototype), "buildItem", this).call(this, option);
              item.style.backgroundColor = option.getAttribute("value") || "";
              return item;
            }
          }, {
            key: "selectItem",
            value: function selectItem(item, trigger2) {
              _get(ColorPicker2.prototype.__proto__ || Object.getPrototypeOf(ColorPicker2.prototype), "selectItem", this).call(this, item, trigger2);
              var colorLabel = this.label.querySelector(".ql-color-label");
              var value = item ? item.getAttribute("data-value") || "" : "";
              if (colorLabel) {
                if (colorLabel.tagName === "line") {
                  colorLabel.style.stroke = value;
                } else {
                  colorLabel.style.fill = value;
                }
              }
            }
          }]);
          return ColorPicker2;
        }(_picker2.default);
        exports2.default = ColorPicker;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _picker = __webpack_require__(28);
        var _picker2 = _interopRequireDefault(_picker);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var IconPicker = function(_Picker) {
          _inherits2(IconPicker2, _Picker);
          function IconPicker2(select, icons) {
            _classCallCheck2(this, IconPicker2);
            var _this = _possibleConstructorReturn2(this, (IconPicker2.__proto__ || Object.getPrototypeOf(IconPicker2)).call(this, select));
            _this.container.classList.add("ql-icon-picker");
            [].forEach.call(_this.container.querySelectorAll(".ql-picker-item"), function(item) {
              item.innerHTML = icons[item.getAttribute("data-value") || ""];
            });
            _this.defaultItem = _this.container.querySelector(".ql-selected");
            _this.selectItem(_this.defaultItem);
            return _this;
          }
          _createClass(IconPicker2, [{
            key: "selectItem",
            value: function selectItem(item, trigger2) {
              _get(IconPicker2.prototype.__proto__ || Object.getPrototypeOf(IconPicker2.prototype), "selectItem", this).call(this, item, trigger2);
              item = item || this.defaultItem;
              this.label.innerHTML = item.innerHTML;
            }
          }]);
          return IconPicker2;
        }(_picker2.default);
        exports2.default = IconPicker;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        var Tooltip = function() {
          function Tooltip2(quill2, boundsContainer) {
            var _this = this;
            _classCallCheck2(this, Tooltip2);
            this.quill = quill2;
            this.boundsContainer = boundsContainer || document.body;
            this.root = quill2.addContainer("ql-tooltip");
            this.root.innerHTML = this.constructor.TEMPLATE;
            if (this.quill.root === this.quill.scrollingContainer) {
              this.quill.root.addEventListener("scroll", function() {
                _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + "px";
              });
            }
            this.hide();
          }
          _createClass(Tooltip2, [{
            key: "hide",
            value: function hide() {
              this.root.classList.add("ql-hidden");
            }
          }, {
            key: "position",
            value: function position(reference) {
              var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;
              var top = reference.bottom + this.quill.root.scrollTop;
              this.root.style.left = left + "px";
              this.root.style.top = top + "px";
              this.root.classList.remove("ql-flip");
              var containerBounds = this.boundsContainer.getBoundingClientRect();
              var rootBounds = this.root.getBoundingClientRect();
              var shift = 0;
              if (rootBounds.right > containerBounds.right) {
                shift = containerBounds.right - rootBounds.right;
                this.root.style.left = left + shift + "px";
              }
              if (rootBounds.left < containerBounds.left) {
                shift = containerBounds.left - rootBounds.left;
                this.root.style.left = left + shift + "px";
              }
              if (rootBounds.bottom > containerBounds.bottom) {
                var height = rootBounds.bottom - rootBounds.top;
                var verticalShift = reference.bottom - reference.top + height;
                this.root.style.top = top - verticalShift + "px";
                this.root.classList.add("ql-flip");
              }
              return shift;
            }
          }, {
            key: "show",
            value: function show() {
              this.root.classList.remove("ql-editing");
              this.root.classList.remove("ql-hidden");
            }
          }]);
          return Tooltip2;
        }();
        exports2.default = Tooltip;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _slicedToArray2 = function() {
          function sliceIterator(arr, i2) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i2 && _arr.length === i2)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"])
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          return function(arr, i2) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i2);
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _extend = __webpack_require__(3);
        var _extend2 = _interopRequireDefault(_extend);
        var _emitter = __webpack_require__(8);
        var _emitter2 = _interopRequireDefault(_emitter);
        var _base = __webpack_require__(43);
        var _base2 = _interopRequireDefault(_base);
        var _link = __webpack_require__(27);
        var _link2 = _interopRequireDefault(_link);
        var _selection = __webpack_require__(15);
        var _icons = __webpack_require__(41);
        var _icons2 = _interopRequireDefault(_icons);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var TOOLBAR_CONFIG = [[{header: ["1", "2", "3", false]}], ["bold", "italic", "underline", "link"], [{list: "ordered"}, {list: "bullet"}], ["clean"]];
        var SnowTheme = function(_BaseTheme) {
          _inherits2(SnowTheme2, _BaseTheme);
          function SnowTheme2(quill2, options) {
            _classCallCheck2(this, SnowTheme2);
            if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
              options.modules.toolbar.container = TOOLBAR_CONFIG;
            }
            var _this = _possibleConstructorReturn2(this, (SnowTheme2.__proto__ || Object.getPrototypeOf(SnowTheme2)).call(this, quill2, options));
            _this.quill.container.classList.add("ql-snow");
            return _this;
          }
          _createClass(SnowTheme2, [{
            key: "extendToolbar",
            value: function extendToolbar(toolbar2) {
              toolbar2.container.classList.add("ql-snow");
              this.buildButtons([].slice.call(toolbar2.container.querySelectorAll("button")), _icons2.default);
              this.buildPickers([].slice.call(toolbar2.container.querySelectorAll("select")), _icons2.default);
              this.tooltip = new SnowTooltip(this.quill, this.options.bounds);
              if (toolbar2.container.querySelector(".ql-link")) {
                this.quill.keyboard.addBinding({key: "K", shortKey: true}, function(range, context2) {
                  toolbar2.handlers["link"].call(toolbar2, !context2.format.link);
                });
              }
            }
          }]);
          return SnowTheme2;
        }(_base2.default);
        SnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
          modules: {
            toolbar: {
              handlers: {
                link: function link(value) {
                  if (value) {
                    var range = this.quill.getSelection();
                    if (range == null || range.length == 0)
                      return;
                    var preview = this.quill.getText(range);
                    if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf("mailto:") !== 0) {
                      preview = "mailto:" + preview;
                    }
                    var tooltip = this.quill.theme.tooltip;
                    tooltip.edit("link", preview);
                  } else {
                    this.quill.format("link", false);
                  }
                }
              }
            }
          }
        });
        var SnowTooltip = function(_BaseTooltip) {
          _inherits2(SnowTooltip2, _BaseTooltip);
          function SnowTooltip2(quill2, bounds) {
            _classCallCheck2(this, SnowTooltip2);
            var _this2 = _possibleConstructorReturn2(this, (SnowTooltip2.__proto__ || Object.getPrototypeOf(SnowTooltip2)).call(this, quill2, bounds));
            _this2.preview = _this2.root.querySelector("a.ql-preview");
            return _this2;
          }
          _createClass(SnowTooltip2, [{
            key: "listen",
            value: function listen() {
              var _this3 = this;
              _get(SnowTooltip2.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip2.prototype), "listen", this).call(this);
              this.root.querySelector("a.ql-action").addEventListener("click", function(event) {
                if (_this3.root.classList.contains("ql-editing")) {
                  _this3.save();
                } else {
                  _this3.edit("link", _this3.preview.textContent);
                }
                event.preventDefault();
              });
              this.root.querySelector("a.ql-remove").addEventListener("click", function(event) {
                if (_this3.linkRange != null) {
                  var range = _this3.linkRange;
                  _this3.restoreFocus();
                  _this3.quill.formatText(range, "link", false, _emitter2.default.sources.USER);
                  delete _this3.linkRange;
                }
                event.preventDefault();
                _this3.hide();
              });
              this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function(range, oldRange, source2) {
                if (range == null)
                  return;
                if (range.length === 0 && source2 === _emitter2.default.sources.USER) {
                  var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index), _quill$scroll$descend2 = _slicedToArray2(_quill$scroll$descend, 2), link = _quill$scroll$descend2[0], offset = _quill$scroll$descend2[1];
                  if (link != null) {
                    _this3.linkRange = new _selection.Range(range.index - offset, link.length());
                    var preview = _link2.default.formats(link.domNode);
                    _this3.preview.textContent = preview;
                    _this3.preview.setAttribute("href", preview);
                    _this3.show();
                    _this3.position(_this3.quill.getBounds(_this3.linkRange));
                    return;
                  }
                } else {
                  delete _this3.linkRange;
                }
                _this3.hide();
              });
            }
          }, {
            key: "show",
            value: function show() {
              _get(SnowTooltip2.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip2.prototype), "show", this).call(this);
              this.root.removeAttribute("data-mode");
            }
          }]);
          return SnowTooltip2;
        }(_base.BaseTooltip);
        SnowTooltip.TEMPLATE = ['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join("");
        exports2.default = SnowTheme;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _core = __webpack_require__(29);
        var _core2 = _interopRequireDefault(_core);
        var _align = __webpack_require__(36);
        var _direction = __webpack_require__(38);
        var _indent = __webpack_require__(64);
        var _blockquote = __webpack_require__(65);
        var _blockquote2 = _interopRequireDefault(_blockquote);
        var _header = __webpack_require__(66);
        var _header2 = _interopRequireDefault(_header);
        var _list = __webpack_require__(67);
        var _list2 = _interopRequireDefault(_list);
        var _background = __webpack_require__(37);
        var _color = __webpack_require__(26);
        var _font = __webpack_require__(39);
        var _size = __webpack_require__(40);
        var _bold = __webpack_require__(56);
        var _bold2 = _interopRequireDefault(_bold);
        var _italic = __webpack_require__(68);
        var _italic2 = _interopRequireDefault(_italic);
        var _link = __webpack_require__(27);
        var _link2 = _interopRequireDefault(_link);
        var _script = __webpack_require__(69);
        var _script2 = _interopRequireDefault(_script);
        var _strike = __webpack_require__(70);
        var _strike2 = _interopRequireDefault(_strike);
        var _underline = __webpack_require__(71);
        var _underline2 = _interopRequireDefault(_underline);
        var _image = __webpack_require__(72);
        var _image2 = _interopRequireDefault(_image);
        var _video = __webpack_require__(73);
        var _video2 = _interopRequireDefault(_video);
        var _code = __webpack_require__(13);
        var _code2 = _interopRequireDefault(_code);
        var _formula = __webpack_require__(74);
        var _formula2 = _interopRequireDefault(_formula);
        var _syntax = __webpack_require__(75);
        var _syntax2 = _interopRequireDefault(_syntax);
        var _toolbar = __webpack_require__(57);
        var _toolbar2 = _interopRequireDefault(_toolbar);
        var _icons = __webpack_require__(41);
        var _icons2 = _interopRequireDefault(_icons);
        var _picker = __webpack_require__(28);
        var _picker2 = _interopRequireDefault(_picker);
        var _colorPicker = __webpack_require__(59);
        var _colorPicker2 = _interopRequireDefault(_colorPicker);
        var _iconPicker = __webpack_require__(60);
        var _iconPicker2 = _interopRequireDefault(_iconPicker);
        var _tooltip = __webpack_require__(61);
        var _tooltip2 = _interopRequireDefault(_tooltip);
        var _bubble = __webpack_require__(108);
        var _bubble2 = _interopRequireDefault(_bubble);
        var _snow = __webpack_require__(62);
        var _snow2 = _interopRequireDefault(_snow);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        _core2.default.register({
          "attributors/attribute/direction": _direction.DirectionAttribute,
          "attributors/class/align": _align.AlignClass,
          "attributors/class/background": _background.BackgroundClass,
          "attributors/class/color": _color.ColorClass,
          "attributors/class/direction": _direction.DirectionClass,
          "attributors/class/font": _font.FontClass,
          "attributors/class/size": _size.SizeClass,
          "attributors/style/align": _align.AlignStyle,
          "attributors/style/background": _background.BackgroundStyle,
          "attributors/style/color": _color.ColorStyle,
          "attributors/style/direction": _direction.DirectionStyle,
          "attributors/style/font": _font.FontStyle,
          "attributors/style/size": _size.SizeStyle
        }, true);
        _core2.default.register({
          "formats/align": _align.AlignClass,
          "formats/direction": _direction.DirectionClass,
          "formats/indent": _indent.IndentClass,
          "formats/background": _background.BackgroundStyle,
          "formats/color": _color.ColorStyle,
          "formats/font": _font.FontClass,
          "formats/size": _size.SizeClass,
          "formats/blockquote": _blockquote2.default,
          "formats/code-block": _code2.default,
          "formats/header": _header2.default,
          "formats/list": _list2.default,
          "formats/bold": _bold2.default,
          "formats/code": _code.Code,
          "formats/italic": _italic2.default,
          "formats/link": _link2.default,
          "formats/script": _script2.default,
          "formats/strike": _strike2.default,
          "formats/underline": _underline2.default,
          "formats/image": _image2.default,
          "formats/video": _video2.default,
          "formats/list/item": _list.ListItem,
          "modules/formula": _formula2.default,
          "modules/syntax": _syntax2.default,
          "modules/toolbar": _toolbar2.default,
          "themes/bubble": _bubble2.default,
          "themes/snow": _snow2.default,
          "ui/icons": _icons2.default,
          "ui/picker": _picker2.default,
          "ui/icon-picker": _iconPicker2.default,
          "ui/color-picker": _colorPicker2.default,
          "ui/tooltip": _tooltip2.default
        }, true);
        exports2.default = _core2.default;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.IndentClass = void 0;
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var IdentAttributor = function(_Parchment$Attributor) {
          _inherits2(IdentAttributor2, _Parchment$Attributor);
          function IdentAttributor2() {
            _classCallCheck2(this, IdentAttributor2);
            return _possibleConstructorReturn2(this, (IdentAttributor2.__proto__ || Object.getPrototypeOf(IdentAttributor2)).apply(this, arguments));
          }
          _createClass(IdentAttributor2, [{
            key: "add",
            value: function add(node, value) {
              if (value === "+1" || value === "-1") {
                var indent = this.value(node) || 0;
                value = value === "+1" ? indent + 1 : indent - 1;
              }
              if (value === 0) {
                this.remove(node);
                return true;
              } else {
                return _get(IdentAttributor2.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor2.prototype), "add", this).call(this, node, value);
              }
            }
          }, {
            key: "canAdd",
            value: function canAdd(node, value) {
              return _get(IdentAttributor2.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor2.prototype), "canAdd", this).call(this, node, value) || _get(IdentAttributor2.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor2.prototype), "canAdd", this).call(this, node, parseInt(value));
            }
          }, {
            key: "value",
            value: function value(node) {
              return parseInt(_get(IdentAttributor2.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor2.prototype), "value", this).call(this, node)) || void 0;
            }
          }]);
          return IdentAttributor2;
        }(_parchment2.default.Attributor.Class);
        var IndentClass = new IdentAttributor("indent", "ql-indent", {
          scope: _parchment2.default.Scope.BLOCK,
          whitelist: [1, 2, 3, 4, 5, 6, 7, 8]
        });
        exports2.IndentClass = IndentClass;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _block = __webpack_require__(4);
        var _block2 = _interopRequireDefault(_block);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Blockquote = function(_Block) {
          _inherits2(Blockquote2, _Block);
          function Blockquote2() {
            _classCallCheck2(this, Blockquote2);
            return _possibleConstructorReturn2(this, (Blockquote2.__proto__ || Object.getPrototypeOf(Blockquote2)).apply(this, arguments));
          }
          return Blockquote2;
        }(_block2.default);
        Blockquote.blotName = "blockquote";
        Blockquote.tagName = "blockquote";
        exports2.default = Blockquote;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _block = __webpack_require__(4);
        var _block2 = _interopRequireDefault(_block);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Header = function(_Block) {
          _inherits2(Header2, _Block);
          function Header2() {
            _classCallCheck2(this, Header2);
            return _possibleConstructorReturn2(this, (Header2.__proto__ || Object.getPrototypeOf(Header2)).apply(this, arguments));
          }
          _createClass(Header2, null, [{
            key: "formats",
            value: function formats(domNode) {
              return this.tagName.indexOf(domNode.tagName) + 1;
            }
          }]);
          return Header2;
        }(_block2.default);
        Header.blotName = "header";
        Header.tagName = ["H1", "H2", "H3", "H4", "H5", "H6"];
        exports2.default = Header;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.default = exports2.ListItem = void 0;
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _block = __webpack_require__(4);
        var _block2 = _interopRequireDefault(_block);
        var _container = __webpack_require__(25);
        var _container2 = _interopRequireDefault(_container);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _defineProperty2(obj, key2, value) {
          if (key2 in obj) {
            Object.defineProperty(obj, key2, {value, enumerable: true, configurable: true, writable: true});
          } else {
            obj[key2] = value;
          }
          return obj;
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var ListItem = function(_Block) {
          _inherits2(ListItem2, _Block);
          function ListItem2() {
            _classCallCheck2(this, ListItem2);
            return _possibleConstructorReturn2(this, (ListItem2.__proto__ || Object.getPrototypeOf(ListItem2)).apply(this, arguments));
          }
          _createClass(ListItem2, [{
            key: "format",
            value: function format(name, value) {
              if (name === List.blotName && !value) {
                this.replaceWith(_parchment2.default.create(this.statics.scope));
              } else {
                _get(ListItem2.prototype.__proto__ || Object.getPrototypeOf(ListItem2.prototype), "format", this).call(this, name, value);
              }
            }
          }, {
            key: "remove",
            value: function remove() {
              if (this.prev == null && this.next == null) {
                this.parent.remove();
              } else {
                _get(ListItem2.prototype.__proto__ || Object.getPrototypeOf(ListItem2.prototype), "remove", this).call(this);
              }
            }
          }, {
            key: "replaceWith",
            value: function replaceWith(name, value) {
              this.parent.isolate(this.offset(this.parent), this.length());
              if (name === this.parent.statics.blotName) {
                this.parent.replaceWith(name, value);
                return this;
              } else {
                this.parent.unwrap();
                return _get(ListItem2.prototype.__proto__ || Object.getPrototypeOf(ListItem2.prototype), "replaceWith", this).call(this, name, value);
              }
            }
          }], [{
            key: "formats",
            value: function formats(domNode) {
              return domNode.tagName === this.tagName ? void 0 : _get(ListItem2.__proto__ || Object.getPrototypeOf(ListItem2), "formats", this).call(this, domNode);
            }
          }]);
          return ListItem2;
        }(_block2.default);
        ListItem.blotName = "list-item";
        ListItem.tagName = "LI";
        var List = function(_Container) {
          _inherits2(List2, _Container);
          _createClass(List2, null, [{
            key: "create",
            value: function create2(value) {
              var tagName = value === "ordered" ? "OL" : "UL";
              var node = _get(List2.__proto__ || Object.getPrototypeOf(List2), "create", this).call(this, tagName);
              if (value === "checked" || value === "unchecked") {
                node.setAttribute("data-checked", value === "checked");
              }
              return node;
            }
          }, {
            key: "formats",
            value: function formats(domNode) {
              if (domNode.tagName === "OL")
                return "ordered";
              if (domNode.tagName === "UL") {
                if (domNode.hasAttribute("data-checked")) {
                  return domNode.getAttribute("data-checked") === "true" ? "checked" : "unchecked";
                } else {
                  return "bullet";
                }
              }
              return void 0;
            }
          }]);
          function List2(domNode) {
            _classCallCheck2(this, List2);
            var _this2 = _possibleConstructorReturn2(this, (List2.__proto__ || Object.getPrototypeOf(List2)).call(this, domNode));
            var listEventHandler = function listEventHandler2(e) {
              if (e.target.parentNode !== domNode)
                return;
              var format = _this2.statics.formats(domNode);
              var blot = _parchment2.default.find(e.target);
              if (format === "checked") {
                blot.format("list", "unchecked");
              } else if (format === "unchecked") {
                blot.format("list", "checked");
              }
            };
            domNode.addEventListener("touchstart", listEventHandler);
            domNode.addEventListener("mousedown", listEventHandler);
            return _this2;
          }
          _createClass(List2, [{
            key: "format",
            value: function format(name, value) {
              if (this.children.length > 0) {
                this.children.tail.format(name, value);
              }
            }
          }, {
            key: "formats",
            value: function formats() {
              return _defineProperty2({}, this.statics.blotName, this.statics.formats(this.domNode));
            }
          }, {
            key: "insertBefore",
            value: function insertBefore(blot, ref) {
              if (blot instanceof ListItem) {
                _get(List2.prototype.__proto__ || Object.getPrototypeOf(List2.prototype), "insertBefore", this).call(this, blot, ref);
              } else {
                var index2 = ref == null ? this.length() : ref.offset(this);
                var after = this.split(index2);
                after.parent.insertBefore(blot, after);
              }
            }
          }, {
            key: "optimize",
            value: function optimize(context2) {
              _get(List2.prototype.__proto__ || Object.getPrototypeOf(List2.prototype), "optimize", this).call(this, context2);
              var next = this.next;
              if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute("data-checked") === this.domNode.getAttribute("data-checked")) {
                next.moveChildren(this);
                next.remove();
              }
            }
          }, {
            key: "replace",
            value: function replace(target) {
              if (target.statics.blotName !== this.statics.blotName) {
                var item = _parchment2.default.create(this.statics.defaultChild);
                target.moveChildren(item);
                this.appendChild(item);
              }
              _get(List2.prototype.__proto__ || Object.getPrototypeOf(List2.prototype), "replace", this).call(this, target);
            }
          }]);
          return List2;
        }(_container2.default);
        List.blotName = "list";
        List.scope = _parchment2.default.Scope.BLOCK_BLOT;
        List.tagName = ["OL", "UL"];
        List.defaultChild = "list-item";
        List.allowedChildren = [ListItem];
        exports2.ListItem = ListItem;
        exports2.default = List;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _bold = __webpack_require__(56);
        var _bold2 = _interopRequireDefault(_bold);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Italic = function(_Bold) {
          _inherits2(Italic2, _Bold);
          function Italic2() {
            _classCallCheck2(this, Italic2);
            return _possibleConstructorReturn2(this, (Italic2.__proto__ || Object.getPrototypeOf(Italic2)).apply(this, arguments));
          }
          return Italic2;
        }(_bold2.default);
        Italic.blotName = "italic";
        Italic.tagName = ["EM", "I"];
        exports2.default = Italic;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _inline = __webpack_require__(6);
        var _inline2 = _interopRequireDefault(_inline);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Script = function(_Inline) {
          _inherits2(Script2, _Inline);
          function Script2() {
            _classCallCheck2(this, Script2);
            return _possibleConstructorReturn2(this, (Script2.__proto__ || Object.getPrototypeOf(Script2)).apply(this, arguments));
          }
          _createClass(Script2, null, [{
            key: "create",
            value: function create2(value) {
              if (value === "super") {
                return document.createElement("sup");
              } else if (value === "sub") {
                return document.createElement("sub");
              } else {
                return _get(Script2.__proto__ || Object.getPrototypeOf(Script2), "create", this).call(this, value);
              }
            }
          }, {
            key: "formats",
            value: function formats(domNode) {
              if (domNode.tagName === "SUB")
                return "sub";
              if (domNode.tagName === "SUP")
                return "super";
              return void 0;
            }
          }]);
          return Script2;
        }(_inline2.default);
        Script.blotName = "script";
        Script.tagName = ["SUB", "SUP"];
        exports2.default = Script;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _inline = __webpack_require__(6);
        var _inline2 = _interopRequireDefault(_inline);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Strike = function(_Inline) {
          _inherits2(Strike2, _Inline);
          function Strike2() {
            _classCallCheck2(this, Strike2);
            return _possibleConstructorReturn2(this, (Strike2.__proto__ || Object.getPrototypeOf(Strike2)).apply(this, arguments));
          }
          return Strike2;
        }(_inline2.default);
        Strike.blotName = "strike";
        Strike.tagName = "S";
        exports2.default = Strike;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _inline = __webpack_require__(6);
        var _inline2 = _interopRequireDefault(_inline);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Underline = function(_Inline) {
          _inherits2(Underline2, _Inline);
          function Underline2() {
            _classCallCheck2(this, Underline2);
            return _possibleConstructorReturn2(this, (Underline2.__proto__ || Object.getPrototypeOf(Underline2)).apply(this, arguments));
          }
          return Underline2;
        }(_inline2.default);
        Underline.blotName = "underline";
        Underline.tagName = "U";
        exports2.default = Underline;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _link = __webpack_require__(27);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var ATTRIBUTES = ["alt", "height", "width"];
        var Image = function(_Parchment$Embed) {
          _inherits2(Image2, _Parchment$Embed);
          function Image2() {
            _classCallCheck2(this, Image2);
            return _possibleConstructorReturn2(this, (Image2.__proto__ || Object.getPrototypeOf(Image2)).apply(this, arguments));
          }
          _createClass(Image2, [{
            key: "format",
            value: function format(name, value) {
              if (ATTRIBUTES.indexOf(name) > -1) {
                if (value) {
                  this.domNode.setAttribute(name, value);
                } else {
                  this.domNode.removeAttribute(name);
                }
              } else {
                _get(Image2.prototype.__proto__ || Object.getPrototypeOf(Image2.prototype), "format", this).call(this, name, value);
              }
            }
          }], [{
            key: "create",
            value: function create2(value) {
              var node = _get(Image2.__proto__ || Object.getPrototypeOf(Image2), "create", this).call(this, value);
              if (typeof value === "string") {
                node.setAttribute("src", this.sanitize(value));
              }
              return node;
            }
          }, {
            key: "formats",
            value: function formats(domNode) {
              return ATTRIBUTES.reduce(function(formats2, attribute) {
                if (domNode.hasAttribute(attribute)) {
                  formats2[attribute] = domNode.getAttribute(attribute);
                }
                return formats2;
              }, {});
            }
          }, {
            key: "match",
            value: function match(url) {
              return /\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url);
            }
          }, {
            key: "sanitize",
            value: function sanitize(url) {
              return (0, _link.sanitize)(url, ["http", "https", "data"]) ? url : "//:0";
            }
          }, {
            key: "value",
            value: function value(domNode) {
              return domNode.getAttribute("src");
            }
          }]);
          return Image2;
        }(_parchment2.default.Embed);
        Image.blotName = "image";
        Image.tagName = "IMG";
        exports2.default = Image;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _block = __webpack_require__(4);
        var _link = __webpack_require__(27);
        var _link2 = _interopRequireDefault(_link);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var ATTRIBUTES = ["height", "width"];
        var Video = function(_BlockEmbed) {
          _inherits2(Video2, _BlockEmbed);
          function Video2() {
            _classCallCheck2(this, Video2);
            return _possibleConstructorReturn2(this, (Video2.__proto__ || Object.getPrototypeOf(Video2)).apply(this, arguments));
          }
          _createClass(Video2, [{
            key: "format",
            value: function format(name, value) {
              if (ATTRIBUTES.indexOf(name) > -1) {
                if (value) {
                  this.domNode.setAttribute(name, value);
                } else {
                  this.domNode.removeAttribute(name);
                }
              } else {
                _get(Video2.prototype.__proto__ || Object.getPrototypeOf(Video2.prototype), "format", this).call(this, name, value);
              }
            }
          }], [{
            key: "create",
            value: function create2(value) {
              var node = _get(Video2.__proto__ || Object.getPrototypeOf(Video2), "create", this).call(this, value);
              node.setAttribute("frameborder", "0");
              node.setAttribute("allowfullscreen", true);
              node.setAttribute("src", this.sanitize(value));
              return node;
            }
          }, {
            key: "formats",
            value: function formats(domNode) {
              return ATTRIBUTES.reduce(function(formats2, attribute) {
                if (domNode.hasAttribute(attribute)) {
                  formats2[attribute] = domNode.getAttribute(attribute);
                }
                return formats2;
              }, {});
            }
          }, {
            key: "sanitize",
            value: function sanitize(url) {
              return _link2.default.sanitize(url);
            }
          }, {
            key: "value",
            value: function value(domNode) {
              return domNode.getAttribute("src");
            }
          }]);
          return Video2;
        }(_block.BlockEmbed);
        Video.blotName = "video";
        Video.className = "ql-video";
        Video.tagName = "IFRAME";
        exports2.default = Video;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.default = exports2.FormulaBlot = void 0;
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _embed = __webpack_require__(35);
        var _embed2 = _interopRequireDefault(_embed);
        var _quill = __webpack_require__(5);
        var _quill2 = _interopRequireDefault(_quill);
        var _module = __webpack_require__(9);
        var _module2 = _interopRequireDefault(_module);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var FormulaBlot = function(_Embed) {
          _inherits2(FormulaBlot2, _Embed);
          function FormulaBlot2() {
            _classCallCheck2(this, FormulaBlot2);
            return _possibleConstructorReturn2(this, (FormulaBlot2.__proto__ || Object.getPrototypeOf(FormulaBlot2)).apply(this, arguments));
          }
          _createClass(FormulaBlot2, null, [{
            key: "create",
            value: function create2(value) {
              var node = _get(FormulaBlot2.__proto__ || Object.getPrototypeOf(FormulaBlot2), "create", this).call(this, value);
              if (typeof value === "string") {
                window.katex.render(value, node, {
                  throwOnError: false,
                  errorColor: "#f00"
                });
                node.setAttribute("data-value", value);
              }
              return node;
            }
          }, {
            key: "value",
            value: function value(domNode) {
              return domNode.getAttribute("data-value");
            }
          }]);
          return FormulaBlot2;
        }(_embed2.default);
        FormulaBlot.blotName = "formula";
        FormulaBlot.className = "ql-formula";
        FormulaBlot.tagName = "SPAN";
        var Formula = function(_Module) {
          _inherits2(Formula2, _Module);
          _createClass(Formula2, null, [{
            key: "register",
            value: function register2() {
              _quill2.default.register(FormulaBlot, true);
            }
          }]);
          function Formula2() {
            _classCallCheck2(this, Formula2);
            var _this2 = _possibleConstructorReturn2(this, (Formula2.__proto__ || Object.getPrototypeOf(Formula2)).call(this));
            if (window.katex == null) {
              throw new Error("Formula module requires KaTeX.");
            }
            return _this2;
          }
          return Formula2;
        }(_module2.default);
        exports2.FormulaBlot = FormulaBlot;
        exports2.default = Formula;
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.default = exports2.CodeToken = exports2.CodeBlock = void 0;
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _parchment = __webpack_require__(0);
        var _parchment2 = _interopRequireDefault(_parchment);
        var _quill = __webpack_require__(5);
        var _quill2 = _interopRequireDefault(_quill);
        var _module = __webpack_require__(9);
        var _module2 = _interopRequireDefault(_module);
        var _code = __webpack_require__(13);
        var _code2 = _interopRequireDefault(_code);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var SyntaxCodeBlock = function(_CodeBlock) {
          _inherits2(SyntaxCodeBlock2, _CodeBlock);
          function SyntaxCodeBlock2() {
            _classCallCheck2(this, SyntaxCodeBlock2);
            return _possibleConstructorReturn2(this, (SyntaxCodeBlock2.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock2)).apply(this, arguments));
          }
          _createClass(SyntaxCodeBlock2, [{
            key: "replaceWith",
            value: function replaceWith(block) {
              this.domNode.textContent = this.domNode.textContent;
              this.attach();
              _get(SyntaxCodeBlock2.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock2.prototype), "replaceWith", this).call(this, block);
            }
          }, {
            key: "highlight",
            value: function highlight(_highlight) {
              var text = this.domNode.textContent;
              if (this.cachedText !== text) {
                if (text.trim().length > 0 || this.cachedText == null) {
                  this.domNode.innerHTML = _highlight(text);
                  this.domNode.normalize();
                  this.attach();
                }
                this.cachedText = text;
              }
            }
          }]);
          return SyntaxCodeBlock2;
        }(_code2.default);
        SyntaxCodeBlock.className = "ql-syntax";
        var CodeToken = new _parchment2.default.Attributor.Class("token", "hljs", {
          scope: _parchment2.default.Scope.INLINE
        });
        var Syntax = function(_Module) {
          _inherits2(Syntax2, _Module);
          _createClass(Syntax2, null, [{
            key: "register",
            value: function register2() {
              _quill2.default.register(CodeToken, true);
              _quill2.default.register(SyntaxCodeBlock, true);
            }
          }]);
          function Syntax2(quill2, options) {
            _classCallCheck2(this, Syntax2);
            var _this2 = _possibleConstructorReturn2(this, (Syntax2.__proto__ || Object.getPrototypeOf(Syntax2)).call(this, quill2, options));
            if (typeof _this2.options.highlight !== "function") {
              throw new Error("Syntax module requires highlight.js. Please include the library on the page before Quill.");
            }
            var timer = null;
            _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function() {
              clearTimeout(timer);
              timer = setTimeout(function() {
                _this2.highlight();
                timer = null;
              }, _this2.options.interval);
            });
            _this2.highlight();
            return _this2;
          }
          _createClass(Syntax2, [{
            key: "highlight",
            value: function highlight() {
              var _this3 = this;
              if (this.quill.selection.composing)
                return;
              this.quill.update(_quill2.default.sources.USER);
              var range = this.quill.getSelection();
              this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function(code) {
                code.highlight(_this3.options.highlight);
              });
              this.quill.update(_quill2.default.sources.SILENT);
              if (range != null) {
                this.quill.setSelection(range, _quill2.default.sources.SILENT);
              }
            }
          }]);
          return Syntax2;
        }(_module2.default);
        Syntax.DEFAULTS = {
          highlight: function() {
            if (window.hljs == null)
              return null;
            return function(text) {
              var result = window.hljs.highlightAuto(text);
              return result.value;
            };
          }(),
          interval: 1e3
        };
        exports2.CodeBlock = SyntaxCodeBlock;
        exports2.CodeToken = CodeToken;
        exports2.default = Syntax;
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <g class="ql-fill ql-color-label"> <polygon points="6 6.868 6 6 5 6 5 7 5.942 7 6 6.868"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points="6.817 5 6 5 6 6 6.38 6 6.817 5"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points="4 11.439 4 11 3 11 3 12 3.755 12 4 11.439"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points="4.63 10 4 10 4 11 4.192 11 4.63 10"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points="13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points="12 6.868 12 6 11.62 6 12 6.868"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points="12.933 9 13 9 13 8 12.495 8 12.933 9"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points="5.5 13 9 5 12.5 13"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <rect class="ql-fill ql-stroke" height=3 width=3 x=4 y=5></rect> <rect class="ql-fill ql-stroke" height=3 width=3 x=11 y=5></rect> <path class="ql-even ql-fill ql-stroke" d=M7,8c0,4.031-3,5-3,5></path> <path class="ql-even ql-fill ql-stroke" d=M14,8c0,4.031-3,5-3,5></path> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <line class="ql-color-label ql-stroke ql-transparent" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points="5.5 11 9 3 12.5 11"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="3 11 5 9 3 7 3 11"></polygon> <line class="ql-stroke ql-fill" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="15 12 13 10 15 8 15 12"></polygon> <line class="ql-stroke ql-fill" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform="translate(24 18) rotate(-180)"/> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewBox="0 0 18 18"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewBox="0 0 18 18"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class="ql-even ql-fill" points="5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12"></polyline> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class="ql-fill ql-stroke" points="3 7 3 11 5 9 3 7"></polyline> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="5 7 5 11 3 9 5 7"></polyline> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class="ql-even ql-stroke" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class="ql-even ql-stroke" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class="ql-stroke ql-thin" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class="ql-stroke ql-thin" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class="ql-stroke ql-thin" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points="3 4 4 5 6 3"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points="3 14 4 15 6 13"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="3 9 4 10 6 8"></polyline> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <line class="ql-stroke ql-thin" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>';
      },
      function(module2, exports2) {
        module2.exports = '<svg viewbox="0 0 18 18"> <polygon class=ql-stroke points="7 11 9 13 11 11 7 11"></polygon> <polygon class=ql-stroke points="7 7 9 5 11 7 7 7"></polygon> </svg>';
      },
      function(module2, exports2, __webpack_require__) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.default = exports2.BubbleTooltip = void 0;
        var _get = function get2(object, property2, receiver) {
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property2);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              return get2(parent, property2, receiver);
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        };
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i2 = 0; i2 < props.length; i2++) {
              var descriptor = props[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _extend = __webpack_require__(3);
        var _extend2 = _interopRequireDefault(_extend);
        var _emitter = __webpack_require__(8);
        var _emitter2 = _interopRequireDefault(_emitter);
        var _base = __webpack_require__(43);
        var _base2 = _interopRequireDefault(_base);
        var _selection = __webpack_require__(15);
        var _icons = __webpack_require__(41);
        var _icons2 = _interopRequireDefault(_icons);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {default: obj};
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn2(self2, call) {
          if (!self2) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self2;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: false, writable: true, configurable: true}});
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var TOOLBAR_CONFIG = [["bold", "italic", "link"], [{header: 1}, {header: 2}, "blockquote"]];
        var BubbleTheme = function(_BaseTheme) {
          _inherits2(BubbleTheme2, _BaseTheme);
          function BubbleTheme2(quill2, options) {
            _classCallCheck2(this, BubbleTheme2);
            if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
              options.modules.toolbar.container = TOOLBAR_CONFIG;
            }
            var _this = _possibleConstructorReturn2(this, (BubbleTheme2.__proto__ || Object.getPrototypeOf(BubbleTheme2)).call(this, quill2, options));
            _this.quill.container.classList.add("ql-bubble");
            return _this;
          }
          _createClass(BubbleTheme2, [{
            key: "extendToolbar",
            value: function extendToolbar(toolbar2) {
              this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
              this.tooltip.root.appendChild(toolbar2.container);
              this.buildButtons([].slice.call(toolbar2.container.querySelectorAll("button")), _icons2.default);
              this.buildPickers([].slice.call(toolbar2.container.querySelectorAll("select")), _icons2.default);
            }
          }]);
          return BubbleTheme2;
        }(_base2.default);
        BubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
          modules: {
            toolbar: {
              handlers: {
                link: function link(value) {
                  if (!value) {
                    this.quill.format("link", false);
                  } else {
                    this.quill.theme.tooltip.edit();
                  }
                }
              }
            }
          }
        });
        var BubbleTooltip = function(_BaseTooltip) {
          _inherits2(BubbleTooltip2, _BaseTooltip);
          function BubbleTooltip2(quill2, bounds) {
            _classCallCheck2(this, BubbleTooltip2);
            var _this2 = _possibleConstructorReturn2(this, (BubbleTooltip2.__proto__ || Object.getPrototypeOf(BubbleTooltip2)).call(this, quill2, bounds));
            _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function(type, range, oldRange, source2) {
              if (type !== _emitter2.default.events.SELECTION_CHANGE)
                return;
              if (range != null && range.length > 0 && source2 === _emitter2.default.sources.USER) {
                _this2.show();
                _this2.root.style.left = "0px";
                _this2.root.style.width = "";
                _this2.root.style.width = _this2.root.offsetWidth + "px";
                var lines = _this2.quill.getLines(range.index, range.length);
                if (lines.length === 1) {
                  _this2.position(_this2.quill.getBounds(range));
                } else {
                  var lastLine = lines[lines.length - 1];
                  var index2 = _this2.quill.getIndex(lastLine);
                  var length = Math.min(lastLine.length() - 1, range.index + range.length - index2);
                  var _bounds = _this2.quill.getBounds(new _selection.Range(index2, length));
                  _this2.position(_bounds);
                }
              } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {
                _this2.hide();
              }
            });
            return _this2;
          }
          _createClass(BubbleTooltip2, [{
            key: "listen",
            value: function listen() {
              var _this3 = this;
              _get(BubbleTooltip2.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip2.prototype), "listen", this).call(this);
              this.root.querySelector(".ql-close").addEventListener("click", function() {
                _this3.root.classList.remove("ql-editing");
              });
              this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function() {
                setTimeout(function() {
                  if (_this3.root.classList.contains("ql-hidden"))
                    return;
                  var range = _this3.quill.getSelection();
                  if (range != null) {
                    _this3.position(_this3.quill.getBounds(range));
                  }
                }, 1);
              });
            }
          }, {
            key: "cancel",
            value: function cancel() {
              this.show();
            }
          }, {
            key: "position",
            value: function position(reference) {
              var shift = _get(BubbleTooltip2.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip2.prototype), "position", this).call(this, reference);
              var arrow = this.root.querySelector(".ql-tooltip-arrow");
              arrow.style.marginLeft = "";
              if (shift === 0)
                return shift;
              arrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + "px";
            }
          }]);
          return BubbleTooltip2;
        }(_base.BaseTooltip);
        BubbleTooltip.TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', "</div>"].join("");
        exports2.BubbleTooltip = BubbleTooltip;
        exports2.default = BubbleTheme;
      },
      function(module2, exports2, __webpack_require__) {
        module2.exports = __webpack_require__(63);
      }
    ])["default"];
  });
});
var emptyObject = {};
{
  Object.freeze(emptyObject);
}
var validateFormat = function validateFormat2(format) {
};
{
  validateFormat = function validateFormat3(format) {
    if (format === void 0) {
      throw new Error("invariant requires an error message argument");
    }
  };
}
function _invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);
  if (!condition) {
    var error;
    if (format === void 0) {
      error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function() {
        return args[argIndex++];
      }));
      error.name = "Invariant Violation";
    }
    error.framesToPop = 1;
    throw error;
  }
}
var warning = function() {
};
{
  var printWarning = function printWarning2(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var argIndex = 0;
    var message = "Warning: " + format.replace(/%s/g, function() {
      return args[argIndex++];
    });
    if (typeof console !== "undefined") {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (x) {
    }
  };
  warning = function warning2(condition, format) {
    if (format === void 0) {
      throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
    }
    if (format.indexOf("Failed Composite propType: ") === 0) {
      return;
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }
      printWarning.apply(void 0, [format].concat(args));
    }
  };
}
var MIXINS_KEY = "mixins";
function identity$1(fn) {
  return fn;
}
var ReactPropTypeLocationNames;
{
  ReactPropTypeLocationNames = {
    prop: "prop",
    context: "context",
    childContext: "child context"
  };
}
function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue2) {
  var injectedMixins = [];
  var ReactClassInterface = {
    mixins: "DEFINE_MANY",
    statics: "DEFINE_MANY",
    propTypes: "DEFINE_MANY",
    contextTypes: "DEFINE_MANY",
    childContextTypes: "DEFINE_MANY",
    getDefaultProps: "DEFINE_MANY_MERGED",
    getInitialState: "DEFINE_MANY_MERGED",
    getChildContext: "DEFINE_MANY_MERGED",
    render: "DEFINE_ONCE",
    componentWillMount: "DEFINE_MANY",
    componentDidMount: "DEFINE_MANY",
    componentWillReceiveProps: "DEFINE_MANY",
    shouldComponentUpdate: "DEFINE_ONCE",
    componentWillUpdate: "DEFINE_MANY",
    componentDidUpdate: "DEFINE_MANY",
    componentWillUnmount: "DEFINE_MANY",
    UNSAFE_componentWillMount: "DEFINE_MANY",
    UNSAFE_componentWillReceiveProps: "DEFINE_MANY",
    UNSAFE_componentWillUpdate: "DEFINE_MANY",
    updateComponent: "OVERRIDE_BASE"
  };
  var ReactClassStaticInterface = {
    getDerivedStateFromProps: "DEFINE_MANY_MERGED"
  };
  var RESERVED_SPEC_KEYS = {
    displayName: function(Constructor, displayName) {
      Constructor.displayName = displayName;
    },
    mixins: function(Constructor, mixins) {
      if (mixins) {
        for (var i2 = 0; i2 < mixins.length; i2++) {
          mixSpecIntoComponent(Constructor, mixins[i2]);
        }
      }
    },
    childContextTypes: function(Constructor, childContextTypes) {
      {
        validateTypeDef(Constructor, childContextTypes, "childContext");
      }
      Constructor.childContextTypes = objectAssign({}, Constructor.childContextTypes, childContextTypes);
    },
    contextTypes: function(Constructor, contextTypes) {
      {
        validateTypeDef(Constructor, contextTypes, "context");
      }
      Constructor.contextTypes = objectAssign({}, Constructor.contextTypes, contextTypes);
    },
    getDefaultProps: function(Constructor, getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
      } else {
        Constructor.getDefaultProps = getDefaultProps;
      }
    },
    propTypes: function(Constructor, propTypes2) {
      {
        validateTypeDef(Constructor, propTypes2, "prop");
      }
      Constructor.propTypes = objectAssign({}, Constructor.propTypes, propTypes2);
    },
    statics: function(Constructor, statics) {
      mixStaticSpecIntoComponent(Constructor, statics);
    },
    autobind: function() {
    }
  };
  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        {
          warning(typeof typeDef[propName] === "function", "%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.", Constructor.displayName || "ReactClass", ReactPropTypeLocationNames[location], propName);
        }
      }
    }
  }
  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
    if (ReactClassMixin.hasOwnProperty(name)) {
      _invariant(specPolicy === "OVERRIDE_BASE", "ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.", name);
    }
    if (isAlreadyDefined) {
      _invariant(specPolicy === "DEFINE_MANY" || specPolicy === "DEFINE_MANY_MERGED", "ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", name);
    }
  }
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      {
        var typeofSpec = typeof spec;
        var isMixinValid = typeofSpec === "object" && spec !== null;
        {
          warning(isMixinValid, "%s: You're attempting to include a mixin that is either null or not an object. Check the mixins included by the component, as well as any mixins they include themselves. Expected object but got %s.", Constructor.displayName || "ReactClass", spec === null ? null : typeofSpec);
        }
      }
      return;
    }
    _invariant(typeof spec !== "function", "ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object.");
    _invariant(!isValidElement(spec), "ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");
    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }
    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }
      if (name === MIXINS_KEY) {
        continue;
      }
      var property2 = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);
      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property2);
      } else {
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction2 = typeof property2 === "function";
        var shouldAutoBind = isFunction2 && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
        if (shouldAutoBind) {
          autoBindPairs.push(name, property2);
          proto[name] = property2;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];
            _invariant(isReactClassMethod && (specPolicy === "DEFINE_MANY_MERGED" || specPolicy === "DEFINE_MANY"), "ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.", specPolicy, name);
            if (specPolicy === "DEFINE_MANY_MERGED") {
              proto[name] = createMergedResultFunction(proto[name], property2);
            } else if (specPolicy === "DEFINE_MANY") {
              proto[name] = createChainedFunction(proto[name], property2);
            }
          } else {
            proto[name] = property2;
            {
              if (typeof property2 === "function" && spec.displayName) {
                proto[name].displayName = spec.displayName + "_" + name;
              }
            }
          }
        }
      }
    }
  }
  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }
    for (var name in statics) {
      var property2 = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }
      var isReserved = name in RESERVED_SPEC_KEYS;
      _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name);
      var isAlreadyDefined = name in Constructor;
      if (isAlreadyDefined) {
        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;
        _invariant(specPolicy === "DEFINE_MANY_MERGED", "ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", name);
        Constructor[name] = createMergedResultFunction(Constructor[name], property2);
        return;
      }
      Constructor[name] = property2;
    }
  }
  function mergeIntoWithNoDuplicateKeys(one, two) {
    _invariant(one && two && typeof one === "object" && typeof two === "object", "mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.");
    for (var key2 in two) {
      if (two.hasOwnProperty(key2)) {
        _invariant(one[key2] === void 0, "mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.", key2);
        one[key2] = two[key2];
      }
    }
    return one;
  }
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }
  function bindAutoBindMethod(component2, method) {
    var boundMethod = method.bind(component2);
    {
      boundMethod.__reactBoundContext = component2;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component2.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        if (newThis !== component2 && newThis !== null) {
          {
            warning(false, "bind(): React component methods may only be bound to the component instance. See %s", componentName);
          }
        } else if (!args.length) {
          {
            warning(false, "bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See %s", componentName);
          }
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component2;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
  function bindAutoBindMethods(component2) {
    var pairs = component2.__reactAutoBindPairs;
    for (var i2 = 0; i2 < pairs.length; i2 += 2) {
      var autoBindKey = pairs[i2];
      var method = pairs[i2 + 1];
      component2[autoBindKey] = bindAutoBindMethod(component2, method);
    }
  }
  var IsMountedPreMixin = {
    componentDidMount: function() {
      this.__isMounted = true;
    }
  };
  var IsMountedPostMixin = {
    componentWillUnmount: function() {
      this.__isMounted = false;
    }
  };
  var ReactClassMixin = {
    replaceState: function(newState, callback) {
      this.updater.enqueueReplaceState(this, newState, callback);
    },
    isMounted: function() {
      {
        warning(this.__didWarnIsMounted, "%s: isMounted is deprecated. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.", this.constructor && this.constructor.displayName || this.name || "Component");
        this.__didWarnIsMounted = true;
      }
      return !!this.__isMounted;
    }
  };
  var ReactClassComponent = function() {
  };
  objectAssign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
  function createClass(spec) {
    var Constructor = identity$1(function(props, context2, updater) {
      {
        warning(this instanceof Constructor, "Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory");
      }
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }
      this.props = props;
      this.context = context2;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue2;
      this.state = null;
      var initialState = this.getInitialState ? this.getInitialState() : null;
      {
        if (initialState === void 0 && this.getInitialState._isMockFunction) {
          initialState = null;
        }
      }
      _invariant(typeof initialState === "object" && !Array.isArray(initialState), "%s.getInitialState(): must return an object or null", Constructor.displayName || "ReactCompositeComponent");
      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];
    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
    mixSpecIntoComponent(Constructor, spec);
    mixSpecIntoComponent(Constructor, IsMountedPostMixin);
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }
    {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }
    _invariant(Constructor.prototype.render, "createClass(...): Class specification must implement a `render` method.");
    {
      warning(!Constructor.prototype.componentShouldUpdate, "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", spec.displayName || "A component");
      warning(!Constructor.prototype.componentWillRecieveProps, "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", spec.displayName || "A component");
      warning(!Constructor.prototype.UNSAFE_componentWillRecieveProps, "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", spec.displayName || "A component");
    }
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }
    return Constructor;
  }
  return createClass;
}
var factory_1 = factory;
if (typeof react === "undefined") {
  throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");
}
var ReactNoopUpdateQueue = new react.Component().updater;
var createReactClass = factory_1(react.Component, react.isValidElement, ReactNoopUpdateQueue);
var QuillMixin = {
  createEditor: function($el, config) {
    var editor = new quill($el, config);
    if (config.tabIndex !== void 0) {
      this.setEditorTabIndex(editor, config.tabIndex);
    }
    this.hookEditor(editor);
    return editor;
  },
  hookEditor: function(editor) {
    var unprivilegedEditor = this.makeUnprivilegedEditor(editor);
    this.handleTextChange = function(delta, oldDelta, source2) {
      if (this.onEditorChangeText) {
        this.onEditorChangeText(editor.root.innerHTML, delta, source2, unprivilegedEditor);
        this.onEditorChangeSelection(editor.getSelection(), source2, unprivilegedEditor);
      }
    }.bind(this);
    this.handleSelectionChange = function(range, oldRange, source2) {
      if (this.onEditorChangeSelection) {
        this.onEditorChangeSelection(range, source2, unprivilegedEditor);
      }
    }.bind(this);
    editor.on("editor-change", function(eventType, rangeOrDelta, oldRangeOrOldDelta, source2) {
      if (eventType === quill.events.SELECTION_CHANGE) {
        this.handleSelectionChange(rangeOrDelta, oldRangeOrOldDelta, source2);
      }
      if (eventType === quill.events.TEXT_CHANGE) {
        this.handleTextChange(rangeOrDelta, oldRangeOrOldDelta, source2);
      }
    }.bind(this));
  },
  unhookEditor: function(editor) {
    editor.off("selection-change");
    editor.off("text-change");
  },
  setEditorReadOnly: function(editor, value) {
    value ? editor.disable() : editor.enable();
  },
  setEditorContents: function(editor, value) {
    var sel = editor.getSelection();
    if (typeof value === "string") {
      editor.setContents(editor.clipboard.convert(value));
    } else {
      editor.setContents(value);
    }
    if (sel && editor.hasFocus())
      this.setEditorSelection(editor, sel);
  },
  setEditorSelection: function(editor, range) {
    if (range) {
      var length = editor.getLength();
      range.index = Math.max(0, Math.min(range.index, length - 1));
      range.length = Math.max(0, Math.min(range.length, length - 1 - range.index));
    }
    editor.setSelection(range);
  },
  setEditorTabIndex: function(editor, tabIndex) {
    if (editor.editor && editor.editor.scroll && editor.editor.scroll.domNode) {
      editor.editor.scroll.domNode.tabIndex = tabIndex;
    }
  },
  makeUnprivilegedEditor: function(editor) {
    var e = editor;
    return {
      getLength: function() {
        return e.getLength.apply(e, arguments);
      },
      getText: function() {
        return e.getText.apply(e, arguments);
      },
      getHTML: function() {
        return e.root.innerHTML;
      },
      getContents: function() {
        return e.getContents.apply(e, arguments);
      },
      getSelection: function() {
        return e.getSelection.apply(e, arguments);
      },
      getBounds: function() {
        return e.getBounds.apply(e, arguments);
      }
    };
  }
};
var mixin = QuillMixin;
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
var _listCacheClear = listCacheClear;
function eq(value, other) {
  return value === other || value !== value && other !== other;
}
var eq_1 = eq;
function assocIndexOf(array, key2) {
  var length = array.length;
  while (length--) {
    if (eq_1(array[length][0], key2)) {
      return length;
    }
  }
  return -1;
}
var _assocIndexOf = assocIndexOf;
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete(key2) {
  var data = this.__data__, index2 = _assocIndexOf(data, key2);
  if (index2 < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index2 == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index2, 1);
  }
  --this.size;
  return true;
}
var _listCacheDelete = listCacheDelete;
function listCacheGet(key2) {
  var data = this.__data__, index2 = _assocIndexOf(data, key2);
  return index2 < 0 ? void 0 : data[index2][1];
}
var _listCacheGet = listCacheGet;
function listCacheHas(key2) {
  return _assocIndexOf(this.__data__, key2) > -1;
}
var _listCacheHas = listCacheHas;
function listCacheSet(key2, value) {
  var data = this.__data__, index2 = _assocIndexOf(data, key2);
  if (index2 < 0) {
    ++this.size;
    data.push([key2, value]);
  } else {
    data[index2][1] = value;
  }
  return this;
}
var _listCacheSet = listCacheSet;
function ListCache(entries) {
  var index2 = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = _listCacheClear;
ListCache.prototype["delete"] = _listCacheDelete;
ListCache.prototype.get = _listCacheGet;
ListCache.prototype.has = _listCacheHas;
ListCache.prototype.set = _listCacheSet;
var _ListCache = ListCache;
function stackClear() {
  this.__data__ = new _ListCache();
  this.size = 0;
}
var _stackClear = stackClear;
function stackDelete(key2) {
  var data = this.__data__, result = data["delete"](key2);
  this.size = data.size;
  return result;
}
var _stackDelete = stackDelete;
function stackGet(key2) {
  return this.__data__.get(key2);
}
var _stackGet = stackGet;
function stackHas(key2) {
  return this.__data__.has(key2);
}
var _stackHas = stackHas;
var freeGlobal = typeof commonjsGlobal$1 == "object" && commonjsGlobal$1 && commonjsGlobal$1.Object === Object && commonjsGlobal$1;
var _freeGlobal = freeGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = _freeGlobal || freeSelf || Function("return this")();
var _root = root;
var Symbol$1 = _root.Symbol;
var _Symbol = Symbol$1;
var objectProto$b = Object.prototype;
var hasOwnProperty$8 = objectProto$b.hasOwnProperty;
var nativeObjectToString$1 = objectProto$b.toString;
var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty$8.call(value, symToStringTag$1), tag = value[symToStringTag$1];
  try {
    value[symToStringTag$1] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}
var _getRawTag = getRawTag;
var objectProto$a = Object.prototype;
var nativeObjectToString = objectProto$a.toString;
function objectToString(value) {
  return nativeObjectToString.call(value);
}
var _objectToString = objectToString;
var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
var symToStringTag = _Symbol ? _Symbol.toStringTag : void 0;
function baseGetTag(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value) ? _getRawTag(value) : _objectToString(value);
}
var _baseGetTag = baseGetTag;
function isObject(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_1 = isObject;
var asyncTag = "[object AsyncFunction]", funcTag$1 = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
function isFunction(value) {
  if (!isObject_1(value)) {
    return false;
  }
  var tag = _baseGetTag(value);
  return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var isFunction_1 = isFunction;
var coreJsData = _root["__core-js_shared__"];
var _coreJsData = coreJsData;
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var _isMasked = isMasked;
var funcProto$1 = Function.prototype;
var funcToString$1 = funcProto$1.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
var _toSource = toSource;
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto = Function.prototype, objectProto$9 = Object.prototype;
var funcToString = funcProto.toString;
var hasOwnProperty$7 = objectProto$9.hasOwnProperty;
var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty$7).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
function baseIsNative(value) {
  if (!isObject_1(value) || _isMasked(value)) {
    return false;
  }
  var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
  return pattern.test(_toSource(value));
}
var _baseIsNative = baseIsNative;
function getValue(object, key2) {
  return object == null ? void 0 : object[key2];
}
var _getValue = getValue;
function getNative(object, key2) {
  var value = _getValue(object, key2);
  return _baseIsNative(value) ? value : void 0;
}
var _getNative = getNative;
var Map$1 = _getNative(_root, "Map");
var _Map = Map$1;
var nativeCreate = _getNative(Object, "create");
var _nativeCreate = nativeCreate;
function hashClear() {
  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
  this.size = 0;
}
var _hashClear = hashClear;
function hashDelete(key2) {
  var result = this.has(key2) && delete this.__data__[key2];
  this.size -= result ? 1 : 0;
  return result;
}
var _hashDelete = hashDelete;
var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
var objectProto$8 = Object.prototype;
var hasOwnProperty$6 = objectProto$8.hasOwnProperty;
function hashGet(key2) {
  var data = this.__data__;
  if (_nativeCreate) {
    var result = data[key2];
    return result === HASH_UNDEFINED$2 ? void 0 : result;
  }
  return hasOwnProperty$6.call(data, key2) ? data[key2] : void 0;
}
var _hashGet = hashGet;
var objectProto$7 = Object.prototype;
var hasOwnProperty$5 = objectProto$7.hasOwnProperty;
function hashHas(key2) {
  var data = this.__data__;
  return _nativeCreate ? data[key2] !== void 0 : hasOwnProperty$5.call(data, key2);
}
var _hashHas = hashHas;
var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
function hashSet(key2, value) {
  var data = this.__data__;
  this.size += this.has(key2) ? 0 : 1;
  data[key2] = _nativeCreate && value === void 0 ? HASH_UNDEFINED$1 : value;
  return this;
}
var _hashSet = hashSet;
function Hash(entries) {
  var index2 = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = _hashClear;
Hash.prototype["delete"] = _hashDelete;
Hash.prototype.get = _hashGet;
Hash.prototype.has = _hashHas;
Hash.prototype.set = _hashSet;
var _Hash = Hash;
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    hash: new _Hash(),
    map: new (_Map || _ListCache)(),
    string: new _Hash()
  };
}
var _mapCacheClear = mapCacheClear;
function isKeyable(value) {
  var type = typeof value;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
var _isKeyable = isKeyable;
function getMapData(map, key2) {
  var data = map.__data__;
  return _isKeyable(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
}
var _getMapData = getMapData;
function mapCacheDelete(key2) {
  var result = _getMapData(this, key2)["delete"](key2);
  this.size -= result ? 1 : 0;
  return result;
}
var _mapCacheDelete = mapCacheDelete;
function mapCacheGet(key2) {
  return _getMapData(this, key2).get(key2);
}
var _mapCacheGet = mapCacheGet;
function mapCacheHas(key2) {
  return _getMapData(this, key2).has(key2);
}
var _mapCacheHas = mapCacheHas;
function mapCacheSet(key2, value) {
  var data = _getMapData(this, key2), size = data.size;
  data.set(key2, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}
var _mapCacheSet = mapCacheSet;
function MapCache(entries) {
  var index2 = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = _mapCacheClear;
MapCache.prototype["delete"] = _mapCacheDelete;
MapCache.prototype.get = _mapCacheGet;
MapCache.prototype.has = _mapCacheHas;
MapCache.prototype.set = _mapCacheSet;
var _MapCache = MapCache;
var LARGE_ARRAY_SIZE = 200;
function stackSet(key2, value) {
  var data = this.__data__;
  if (data instanceof _ListCache) {
    var pairs = data.__data__;
    if (!_Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key2, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new _MapCache(pairs);
  }
  data.set(key2, value);
  this.size = data.size;
  return this;
}
var _stackSet = stackSet;
function Stack(entries) {
  var data = this.__data__ = new _ListCache(entries);
  this.size = data.size;
}
Stack.prototype.clear = _stackClear;
Stack.prototype["delete"] = _stackDelete;
Stack.prototype.get = _stackGet;
Stack.prototype.has = _stackHas;
Stack.prototype.set = _stackSet;
var _Stack = Stack;
var HASH_UNDEFINED = "__lodash_hash_undefined__";
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}
var _setCacheAdd = setCacheAdd;
function setCacheHas(value) {
  return this.__data__.has(value);
}
var _setCacheHas = setCacheHas;
function SetCache(values) {
  var index2 = -1, length = values == null ? 0 : values.length;
  this.__data__ = new _MapCache();
  while (++index2 < length) {
    this.add(values[index2]);
  }
}
SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
SetCache.prototype.has = _setCacheHas;
var _SetCache = SetCache;
function arraySome(array, predicate2) {
  var index2 = -1, length = array == null ? 0 : array.length;
  while (++index2 < length) {
    if (predicate2(array[index2], index2, array)) {
      return true;
    }
  }
  return false;
}
var _arraySome = arraySome;
function cacheHas(cache2, key2) {
  return cache2.has(key2);
}
var _cacheHas = cacheHas;
var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5, arrLength = array.length, othLength = other.length;
  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new _SetCache() : void 0;
  stack.set(array, other);
  stack.set(other, array);
  while (++index2 < arrLength) {
    var arrValue = array[index2], othValue = other[index2];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index2, other, array, stack) : customizer(arrValue, othValue, index2, array, other, stack);
    }
    if (compared !== void 0) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    if (seen) {
      if (!_arraySome(other, function(othValue2, othIndex) {
        if (!_cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack["delete"](array);
  stack["delete"](other);
  return result;
}
var _equalArrays = equalArrays;
var Uint8Array$1 = _root.Uint8Array;
var _Uint8Array = Uint8Array$1;
function mapToArray(map) {
  var index2 = -1, result = Array(map.size);
  map.forEach(function(value, key2) {
    result[++index2] = [key2, value];
  });
  return result;
}
var _mapToArray = mapToArray;
function setToArray(set) {
  var index2 = -1, result = Array(set.size);
  set.forEach(function(value) {
    result[++index2] = value;
  });
  return result;
}
var _setToArray = setToArray;
var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2;
var boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$1 = "[object Error]", mapTag$2 = "[object Map]", numberTag$1 = "[object Number]", regexpTag$1 = "[object RegExp]", setTag$2 = "[object Set]", stringTag$1 = "[object String]", symbolTag$1 = "[object Symbol]";
var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]";
var symbolProto$1 = _Symbol ? _Symbol.prototype : void 0, symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : void 0;
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag$2:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;
    case arrayBufferTag$1:
      if (object.byteLength != other.byteLength || !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
        return false;
      }
      return true;
    case boolTag$1:
    case dateTag$1:
    case numberTag$1:
      return eq_1(+object, +other);
    case errorTag$1:
      return object.name == other.name && object.message == other.message;
    case regexpTag$1:
    case stringTag$1:
      return object == other + "";
    case mapTag$2:
      var convert = _mapToArray;
    case setTag$2:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
      convert || (convert = _setToArray);
      if (object.size != other.size && !isPartial) {
        return false;
      }
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$2;
      stack.set(object, other);
      var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack["delete"](object);
      return result;
    case symbolTag$1:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}
var _equalByTag = equalByTag;
function arrayPush(array, values) {
  var index2 = -1, length = values.length, offset = array.length;
  while (++index2 < length) {
    array[offset + index2] = values[index2];
  }
  return array;
}
var _arrayPush = arrayPush;
var isArray = Array.isArray;
var isArray_1 = isArray;
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
}
var _baseGetAllKeys = baseGetAllKeys;
function arrayFilter(array, predicate2) {
  var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
  while (++index2 < length) {
    var value = array[index2];
    if (predicate2(value, index2, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}
var _arrayFilter = arrayFilter;
function stubArray() {
  return [];
}
var stubArray_1 = stubArray;
var objectProto$6 = Object.prototype;
var propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable;
var nativeGetSymbols = Object.getOwnPropertySymbols;
var getSymbols = !nativeGetSymbols ? stubArray_1 : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return _arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable$1.call(object, symbol);
  });
};
var _getSymbols = getSymbols;
function baseTimes(n, iteratee) {
  var index2 = -1, result = Array(n);
  while (++index2 < n) {
    result[index2] = iteratee(index2);
  }
  return result;
}
var _baseTimes = baseTimes;
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_1 = isObjectLike;
var argsTag$2 = "[object Arguments]";
function baseIsArguments(value) {
  return isObjectLike_1(value) && _baseGetTag(value) == argsTag$2;
}
var _baseIsArguments = baseIsArguments;
var objectProto$5 = Object.prototype;
var hasOwnProperty$4 = objectProto$5.hasOwnProperty;
var propertyIsEnumerable = objectProto$5.propertyIsEnumerable;
var isArguments = _baseIsArguments(function() {
  return arguments;
}()) ? _baseIsArguments : function(value) {
  return isObjectLike_1(value) && hasOwnProperty$4.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
};
var isArguments_1 = isArguments;
function stubFalse() {
  return false;
}
var stubFalse_1 = stubFalse;
var isBuffer_1 = createCommonjsModule(function(module, exports) {
  var freeExports = exports && !exports.nodeType && exports;
  var freeModule = freeExports && true && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer2 = moduleExports ? _root.Buffer : void 0;
  var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
  var isBuffer2 = nativeIsBuffer || stubFalse_1;
  module.exports = isBuffer2;
});
var MAX_SAFE_INTEGER$1 = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;
  return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
}
var _isIndex = isIndex;
var MAX_SAFE_INTEGER = 9007199254740991;
function isLength(value) {
  return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
var isLength_1 = isLength;
var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", mapTag$1 = "[object Map]", numberTag = "[object Number]", objectTag$2 = "[object Object]", regexpTag = "[object RegExp]", setTag$1 = "[object Set]", stringTag = "[object String]", weakMapTag$1 = "[object WeakMap]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag$1] = typedArrayTags[arrayTag$1] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag$1] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag$1] = typedArrayTags[numberTag] = typedArrayTags[objectTag$2] = typedArrayTags[regexpTag] = typedArrayTags[setTag$1] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag$1] = false;
function baseIsTypedArray(value) {
  return isObjectLike_1(value) && isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
}
var _baseIsTypedArray = baseIsTypedArray;
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}
var _baseUnary = baseUnary;
var _nodeUtil = createCommonjsModule(function(module, exports) {
  var freeExports = exports && !exports.nodeType && exports;
  var freeModule = freeExports && true && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && _freeGlobal.process;
  var nodeUtil = function() {
    try {
      var types = freeModule && freeModule.require && freeModule.require("util").types;
      if (types) {
        return types;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {
    }
  }();
  module.exports = nodeUtil;
});
var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;
var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;
var isTypedArray_1 = isTypedArray;
var objectProto$4 = Object.prototype;
var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
function arrayLikeKeys(value, inherited) {
  var isArr = isArray_1(value), isArg = !isArr && isArguments_1(value), isBuff = !isArr && !isArg && isBuffer_1(value), isType = !isArr && !isArg && !isBuff && isTypedArray_1(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? _baseTimes(value.length, String) : [], length = result.length;
  for (var key2 in value) {
    if ((inherited || hasOwnProperty$3.call(value, key2)) && !(skipIndexes && (key2 == "length" || isBuff && (key2 == "offset" || key2 == "parent") || isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || _isIndex(key2, length)))) {
      result.push(key2);
    }
  }
  return result;
}
var _arrayLikeKeys = arrayLikeKeys;
var objectProto$3 = Object.prototype;
function isPrototype(value) {
  var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$3;
  return value === proto;
}
var _isPrototype = isPrototype;
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}
var _overArg = overArg;
var nativeKeys = _overArg(Object.keys, Object);
var _nativeKeys = nativeKeys;
var objectProto$2 = Object.prototype;
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
function baseKeys(object) {
  if (!_isPrototype(object)) {
    return _nativeKeys(object);
  }
  var result = [];
  for (var key2 in Object(object)) {
    if (hasOwnProperty$2.call(object, key2) && key2 != "constructor") {
      result.push(key2);
    }
  }
  return result;
}
var _baseKeys = baseKeys;
function isArrayLike(value) {
  return value != null && isLength_1(value.length) && !isFunction_1(value);
}
var isArrayLike_1 = isArrayLike;
function keys(object) {
  return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
}
var keys_1 = keys;
function getAllKeys(object) {
  return _baseGetAllKeys(object, keys_1, _getSymbols);
}
var _getAllKeys = getAllKeys;
var COMPARE_PARTIAL_FLAG$3 = 1;
var objectProto$1 = Object.prototype;
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, objProps = _getAllKeys(object), objLength = objProps.length, othProps = _getAllKeys(other), othLength = othProps.length;
  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index2 = objLength;
  while (index2--) {
    var key2 = objProps[index2];
    if (!(isPartial ? key2 in other : hasOwnProperty$1.call(other, key2))) {
      return false;
    }
  }
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);
  var skipCtor = isPartial;
  while (++index2 < objLength) {
    key2 = objProps[index2];
    var objValue = object[key2], othValue = other[key2];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key2, other, object, stack) : customizer(objValue, othValue, key2, object, other, stack);
    }
    if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key2 == "constructor");
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor, othCtor = other.constructor;
    if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack["delete"](object);
  stack["delete"](other);
  return result;
}
var _equalObjects = equalObjects;
var DataView = _getNative(_root, "DataView");
var _DataView = DataView;
var Promise$1 = _getNative(_root, "Promise");
var _Promise = Promise$1;
var Set$1 = _getNative(_root, "Set");
var _Set = Set$1;
var WeakMap$1 = _getNative(_root, "WeakMap");
var _WeakMap = WeakMap$1;
var mapTag = "[object Map]", objectTag$1 = "[object Object]", promiseTag = "[object Promise]", setTag = "[object Set]", weakMapTag = "[object WeakMap]";
var dataViewTag = "[object DataView]";
var dataViewCtorString = _toSource(_DataView), mapCtorString = _toSource(_Map), promiseCtorString = _toSource(_Promise), setCtorString = _toSource(_Set), weakMapCtorString = _toSource(_WeakMap);
var getTag = _baseGetTag;
if (_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag || _Map && getTag(new _Map()) != mapTag || _Promise && getTag(_Promise.resolve()) != promiseTag || _Set && getTag(new _Set()) != setTag || _WeakMap && getTag(new _WeakMap()) != weakMapTag) {
  getTag = function(value) {
    var result = _baseGetTag(value), Ctor = result == objectTag$1 ? value.constructor : void 0, ctorString = Ctor ? _toSource(Ctor) : "";
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag;
        case mapCtorString:
          return mapTag;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag;
        case weakMapCtorString:
          return weakMapTag;
      }
    }
    return result;
  };
}
var _getTag = getTag;
var COMPARE_PARTIAL_FLAG$2 = 1;
var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray_1(object), othIsArr = isArray_1(other), objTag = objIsArr ? arrayTag : _getTag(object), othTag = othIsArr ? arrayTag : _getTag(other);
  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;
  var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
  if (isSameTag && isBuffer_1(object)) {
    if (!isBuffer_1(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new _Stack());
    return objIsArr || isTypedArray_1(object) ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack) : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new _Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new _Stack());
  return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}
var _baseIsEqualDeep = baseIsEqualDeep;
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || !isObjectLike_1(value) && !isObjectLike_1(other)) {
    return value !== value && other !== other;
  }
  return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}
var _baseIsEqual = baseIsEqual;
var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
function baseIsMatch(object, source2, matchData, customizer) {
  var index2 = matchData.length, length = index2, noCustomizer = !customizer;
  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index2--) {
    var data = matchData[index2];
    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }
  while (++index2 < length) {
    data = matchData[index2];
    var key2 = data[0], objValue = object[key2], srcValue = data[1];
    if (noCustomizer && data[2]) {
      if (objValue === void 0 && !(key2 in object)) {
        return false;
      }
    } else {
      var stack = new _Stack();
      if (customizer) {
        var result = customizer(objValue, srcValue, key2, object, source2, stack);
      }
      if (!(result === void 0 ? _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
        return false;
      }
    }
  }
  return true;
}
var _baseIsMatch = baseIsMatch;
function isStrictComparable(value) {
  return value === value && !isObject_1(value);
}
var _isStrictComparable = isStrictComparable;
function getMatchData(object) {
  var result = keys_1(object), length = result.length;
  while (length--) {
    var key2 = result[length], value = object[key2];
    result[length] = [key2, value, _isStrictComparable(value)];
  }
  return result;
}
var _getMatchData = getMatchData;
function matchesStrictComparable(key2, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key2] === srcValue && (srcValue !== void 0 || key2 in Object(object));
  };
}
var _matchesStrictComparable = matchesStrictComparable;
function baseMatches(source2) {
  var matchData = _getMatchData(source2);
  if (matchData.length == 1 && matchData[0][2]) {
    return _matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source2 || _baseIsMatch(object, source2, matchData);
  };
}
var _baseMatches = baseMatches;
var symbolTag = "[object Symbol]";
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike_1(value) && _baseGetTag(value) == symbolTag;
}
var isSymbol_1 = isSymbol;
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
function isKey(value, object) {
  if (isArray_1(value)) {
    return false;
  }
  var type = typeof value;
  if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol_1(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
var _isKey = isKey;
var FUNC_ERROR_TEXT = "Expected a function";
function memoize(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments, key2 = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
    if (cache2.has(key2)) {
      return cache2.get(key2);
    }
    var result = func.apply(this, args);
    memoized.cache = cache2.set(key2, result) || cache2;
    return result;
  };
  memoized.cache = new (memoize.Cache || _MapCache)();
  return memoized;
}
memoize.Cache = _MapCache;
var memoize_1 = memoize;
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped(func) {
  var result = memoize_1(func, function(key2) {
    if (cache2.size === MAX_MEMOIZE_SIZE) {
      cache2.clear();
    }
    return key2;
  });
  var cache2 = result.cache;
  return result;
}
var _memoizeCapped = memoizeCapped;
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath = _memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46) {
    result.push("");
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
  });
  return result;
});
var _stringToPath = stringToPath;
function arrayMap(array, iteratee) {
  var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
  while (++index2 < length) {
    result[index2] = iteratee(array[index2], index2, array);
  }
  return result;
}
var _arrayMap = arrayMap;
var INFINITY$2 = 1 / 0;
var symbolProto = _Symbol ? _Symbol.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isArray_1(value)) {
    return _arrayMap(value, baseToString) + "";
  }
  if (isSymbol_1(value)) {
    return symbolToString ? symbolToString.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY$2 ? "-0" : result;
}
var _baseToString = baseToString;
function toString(value) {
  return value == null ? "" : _baseToString(value);
}
var toString_1 = toString;
function castPath(value, object) {
  if (isArray_1(value)) {
    return value;
  }
  return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
}
var _castPath = castPath;
var INFINITY$1 = 1 / 0;
function toKey(value) {
  if (typeof value == "string" || isSymbol_1(value)) {
    return value;
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY$1 ? "-0" : result;
}
var _toKey = toKey;
function baseGet(object, path) {
  path = _castPath(path, object);
  var index2 = 0, length = path.length;
  while (object != null && index2 < length) {
    object = object[_toKey(path[index2++])];
  }
  return index2 && index2 == length ? object : void 0;
}
var _baseGet = baseGet;
function get(object, path, defaultValue) {
  var result = object == null ? void 0 : _baseGet(object, path);
  return result === void 0 ? defaultValue : result;
}
var get_1 = get;
function baseHasIn(object, key2) {
  return object != null && key2 in Object(object);
}
var _baseHasIn = baseHasIn;
function hasPath(object, path, hasFunc) {
  path = _castPath(path, object);
  var index2 = -1, length = path.length, result = false;
  while (++index2 < length) {
    var key2 = _toKey(path[index2]);
    if (!(result = object != null && hasFunc(object, key2))) {
      break;
    }
    object = object[key2];
  }
  if (result || ++index2 != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength_1(length) && _isIndex(key2, length) && (isArray_1(object) || isArguments_1(object));
}
var _hasPath = hasPath;
function hasIn(object, path) {
  return object != null && _hasPath(object, path, _baseHasIn);
}
var hasIn_1 = hasIn;
var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
function baseMatchesProperty(path, srcValue) {
  if (_isKey(path) && _isStrictComparable(srcValue)) {
    return _matchesStrictComparable(_toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get_1(object, path);
    return objValue === void 0 && objValue === srcValue ? hasIn_1(object, path) : _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}
var _baseMatchesProperty = baseMatchesProperty;
function identity(value) {
  return value;
}
var identity_1 = identity;
function baseProperty(key2) {
  return function(object) {
    return object == null ? void 0 : object[key2];
  };
}
var _baseProperty = baseProperty;
function basePropertyDeep(path) {
  return function(object) {
    return _baseGet(object, path);
  };
}
var _basePropertyDeep = basePropertyDeep;
function property(path) {
  return _isKey(path) ? _baseProperty(_toKey(path)) : _basePropertyDeep(path);
}
var property_1 = property;
function baseIteratee(value) {
  if (typeof value == "function") {
    return value;
  }
  if (value == null) {
    return identity_1;
  }
  if (typeof value == "object") {
    return isArray_1(value) ? _baseMatchesProperty(value[0], value[1]) : _baseMatches(value);
  }
  return property_1(value);
}
var _baseIteratee = baseIteratee;
function createFind(findIndexFunc) {
  return function(collection, predicate2, fromIndex) {
    var iterable = Object(collection);
    if (!isArrayLike_1(collection)) {
      var iteratee = _baseIteratee(predicate2);
      collection = keys_1(collection);
      predicate2 = function(key2) {
        return iteratee(iterable[key2], key2, iterable);
      };
    }
    var index2 = findIndexFunc(collection, predicate2, fromIndex);
    return index2 > -1 ? iterable[iteratee ? collection[index2] : index2] : void 0;
  };
}
var _createFind = createFind;
function baseFindIndex(array, predicate2, fromIndex, fromRight) {
  var length = array.length, index2 = fromIndex + (fromRight ? 1 : -1);
  while (fromRight ? index2-- : ++index2 < length) {
    if (predicate2(array[index2], index2, array)) {
      return index2;
    }
  }
  return -1;
}
var _baseFindIndex = baseFindIndex;
var reWhitespace = /\s/;
function trimmedEndIndex(string) {
  var index2 = string.length;
  while (index2-- && reWhitespace.test(string.charAt(index2))) {
  }
  return index2;
}
var _trimmedEndIndex = trimmedEndIndex;
var reTrimStart = /^\s+/;
function baseTrim(string) {
  return string ? string.slice(0, _trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
}
var _baseTrim = baseTrim;
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol_1(value)) {
    return NAN;
  }
  if (isObject_1(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject_1(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = _baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var toNumber_1 = toNumber;
var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber_1(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}
var toFinite_1 = toFinite;
function toInteger(value) {
  var result = toFinite_1(value), remainder = result % 1;
  return result === result ? remainder ? result - remainder : result : 0;
}
var toInteger_1 = toInteger;
var nativeMax = Math.max;
function findIndex(array, predicate2, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index2 = fromIndex == null ? 0 : toInteger_1(fromIndex);
  if (index2 < 0) {
    index2 = nativeMax(length + index2, 0);
  }
  return _baseFindIndex(array, _baseIteratee(predicate2), index2);
}
var findIndex_1 = findIndex;
var find = _createFind(findIndex_1);
var find_1 = find;
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index2 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
    while (length--) {
      var key2 = props[fromRight ? length : ++index2];
      if (iteratee(iterable[key2], key2, iterable) === false) {
        break;
      }
    }
    return object;
  };
}
var _createBaseFor = createBaseFor;
var baseFor = _createBaseFor();
var _baseFor = baseFor;
function baseForOwn(object, iteratee) {
  return object && _baseFor(object, iteratee, keys_1);
}
var _baseForOwn = baseForOwn;
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike_1(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length, index2 = fromRight ? length : -1, iterable = Object(collection);
    while (fromRight ? index2-- : ++index2 < length) {
      if (iteratee(iterable[index2], index2, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}
var _createBaseEach = createBaseEach;
var baseEach = _createBaseEach(_baseForOwn);
var _baseEach = baseEach;
function baseSome(collection, predicate2) {
  var result;
  _baseEach(collection, function(value, index2, collection2) {
    result = predicate2(value, index2, collection2);
    return !result;
  });
  return !!result;
}
var _baseSome = baseSome;
function isIterateeCall(value, index2, object) {
  if (!isObject_1(object)) {
    return false;
  }
  var type = typeof index2;
  if (type == "number" ? isArrayLike_1(object) && _isIndex(index2, object.length) : type == "string" && index2 in object) {
    return eq_1(object[index2], value);
  }
  return false;
}
var _isIterateeCall = isIterateeCall;
function some(collection, predicate2, guard) {
  var func = isArray_1(collection) ? _arraySome : _baseSome;
  if (guard && _isIterateeCall(collection, predicate2, guard)) {
    predicate2 = void 0;
  }
  return func(collection, _baseIteratee(predicate2));
}
var some_1 = some;
function isEqual(value, other) {
  return _baseIsEqual(value, other);
}
var isEqual_1 = isEqual;
var reactDomFactories = createCommonjsModule(function(module, exports) {
  (function(f) {
    {
      module.exports = f(react);
    }
  })(function(React) {
    function createDOMFactory(type) {
      var factory2 = React.createElement.bind(null, type);
      factory2.type = type;
      return factory2;
    }
    var ReactDOMFactories = {
      a: createDOMFactory("a"),
      abbr: createDOMFactory("abbr"),
      address: createDOMFactory("address"),
      area: createDOMFactory("area"),
      article: createDOMFactory("article"),
      aside: createDOMFactory("aside"),
      audio: createDOMFactory("audio"),
      b: createDOMFactory("b"),
      base: createDOMFactory("base"),
      bdi: createDOMFactory("bdi"),
      bdo: createDOMFactory("bdo"),
      big: createDOMFactory("big"),
      blockquote: createDOMFactory("blockquote"),
      body: createDOMFactory("body"),
      br: createDOMFactory("br"),
      button: createDOMFactory("button"),
      canvas: createDOMFactory("canvas"),
      caption: createDOMFactory("caption"),
      cite: createDOMFactory("cite"),
      code: createDOMFactory("code"),
      col: createDOMFactory("col"),
      colgroup: createDOMFactory("colgroup"),
      data: createDOMFactory("data"),
      datalist: createDOMFactory("datalist"),
      dd: createDOMFactory("dd"),
      del: createDOMFactory("del"),
      details: createDOMFactory("details"),
      dfn: createDOMFactory("dfn"),
      dialog: createDOMFactory("dialog"),
      div: createDOMFactory("div"),
      dl: createDOMFactory("dl"),
      dt: createDOMFactory("dt"),
      em: createDOMFactory("em"),
      embed: createDOMFactory("embed"),
      fieldset: createDOMFactory("fieldset"),
      figcaption: createDOMFactory("figcaption"),
      figure: createDOMFactory("figure"),
      footer: createDOMFactory("footer"),
      form: createDOMFactory("form"),
      h1: createDOMFactory("h1"),
      h2: createDOMFactory("h2"),
      h3: createDOMFactory("h3"),
      h4: createDOMFactory("h4"),
      h5: createDOMFactory("h5"),
      h6: createDOMFactory("h6"),
      head: createDOMFactory("head"),
      header: createDOMFactory("header"),
      hgroup: createDOMFactory("hgroup"),
      hr: createDOMFactory("hr"),
      html: createDOMFactory("html"),
      i: createDOMFactory("i"),
      iframe: createDOMFactory("iframe"),
      img: createDOMFactory("img"),
      input: createDOMFactory("input"),
      ins: createDOMFactory("ins"),
      kbd: createDOMFactory("kbd"),
      keygen: createDOMFactory("keygen"),
      label: createDOMFactory("label"),
      legend: createDOMFactory("legend"),
      li: createDOMFactory("li"),
      link: createDOMFactory("link"),
      main: createDOMFactory("main"),
      map: createDOMFactory("map"),
      mark: createDOMFactory("mark"),
      menu: createDOMFactory("menu"),
      menuitem: createDOMFactory("menuitem"),
      meta: createDOMFactory("meta"),
      meter: createDOMFactory("meter"),
      nav: createDOMFactory("nav"),
      noscript: createDOMFactory("noscript"),
      object: createDOMFactory("object"),
      ol: createDOMFactory("ol"),
      optgroup: createDOMFactory("optgroup"),
      option: createDOMFactory("option"),
      output: createDOMFactory("output"),
      p: createDOMFactory("p"),
      param: createDOMFactory("param"),
      picture: createDOMFactory("picture"),
      pre: createDOMFactory("pre"),
      progress: createDOMFactory("progress"),
      q: createDOMFactory("q"),
      rp: createDOMFactory("rp"),
      rt: createDOMFactory("rt"),
      ruby: createDOMFactory("ruby"),
      s: createDOMFactory("s"),
      samp: createDOMFactory("samp"),
      script: createDOMFactory("script"),
      section: createDOMFactory("section"),
      select: createDOMFactory("select"),
      small: createDOMFactory("small"),
      source: createDOMFactory("source"),
      span: createDOMFactory("span"),
      strong: createDOMFactory("strong"),
      style: createDOMFactory("style"),
      sub: createDOMFactory("sub"),
      summary: createDOMFactory("summary"),
      sup: createDOMFactory("sup"),
      table: createDOMFactory("table"),
      tbody: createDOMFactory("tbody"),
      td: createDOMFactory("td"),
      textarea: createDOMFactory("textarea"),
      tfoot: createDOMFactory("tfoot"),
      th: createDOMFactory("th"),
      thead: createDOMFactory("thead"),
      time: createDOMFactory("time"),
      title: createDOMFactory("title"),
      tr: createDOMFactory("tr"),
      track: createDOMFactory("track"),
      u: createDOMFactory("u"),
      ul: createDOMFactory("ul"),
      var: createDOMFactory("var"),
      video: createDOMFactory("video"),
      wbr: createDOMFactory("wbr"),
      circle: createDOMFactory("circle"),
      clipPath: createDOMFactory("clipPath"),
      defs: createDOMFactory("defs"),
      ellipse: createDOMFactory("ellipse"),
      g: createDOMFactory("g"),
      image: createDOMFactory("image"),
      line: createDOMFactory("line"),
      linearGradient: createDOMFactory("linearGradient"),
      mask: createDOMFactory("mask"),
      path: createDOMFactory("path"),
      pattern: createDOMFactory("pattern"),
      polygon: createDOMFactory("polygon"),
      polyline: createDOMFactory("polyline"),
      radialGradient: createDOMFactory("radialGradient"),
      rect: createDOMFactory("rect"),
      stop: createDOMFactory("stop"),
      svg: createDOMFactory("svg"),
      text: createDOMFactory("text"),
      tspan: createDOMFactory("tspan")
    };
    return ReactDOMFactories;
  });
});
var QuillComponent = createReactClass({
  displayName: "Quill",
  mixins: [mixin],
  propTypes: {
    id: propTypes.string,
    className: propTypes.string,
    theme: propTypes.string,
    style: propTypes.object,
    readOnly: propTypes.bool,
    value: propTypes.oneOfType([propTypes.string, propTypes.shape({ops: propTypes.array})]),
    defaultValue: propTypes.oneOfType([propTypes.string, propTypes.shape({ops: propTypes.array})]),
    placeholder: propTypes.string,
    tabIndex: propTypes.number,
    bounds: propTypes.oneOfType([propTypes.string, propTypes.element]),
    onChange: propTypes.func,
    onChangeSelection: propTypes.func,
    onFocus: propTypes.func,
    onBlur: propTypes.func,
    onKeyPress: propTypes.func,
    onKeyDown: propTypes.func,
    onKeyUp: propTypes.func,
    preserveWhitespace: propTypes.bool,
    modules: function(props) {
      var isNotObject = propTypes.object.apply(this, arguments);
      if (isNotObject)
        return isNotObject;
      if (props.modules && props.modules.toolbar && props.modules.toolbar[0] && props.modules.toolbar[0].type)
        return new Error("Since v1.0.0, React Quill will not create a custom toolbar for you anymore. Create a toolbar explictly, or let Quill create one. See: https://github.com/zenoamaro/react-quill#upgrading-to-react-quill-v100");
    },
    toolbar: function(props) {
      if ("toolbar" in props)
        return new Error("The `toolbar` prop has been deprecated. Use `modules.toolbar` instead. See: https://github.com/zenoamaro/react-quill#upgrading-to-react-quill-v100");
    },
    formats: function(props) {
      var isNotArrayOfString = propTypes.arrayOf(propTypes.string).apply(this, arguments);
      if (isNotArrayOfString)
        return new Error("You cannot specify custom `formats` anymore. Use Parchment instead.  See: https://github.com/zenoamaro/react-quill#upgrading-to-react-quill-v100.");
    },
    styles: function(props) {
      if ("styles" in props)
        return new Error("The `styles` prop has been deprecated. Use custom stylesheets instead. See: https://github.com/zenoamaro/react-quill#upgrading-to-react-quill-v100.");
    },
    pollInterval: function(props) {
      if ("pollInterval" in props)
        return new Error("The `pollInterval` property does not have any effect anymore. You can safely remove it from your props.See: https://github.com/zenoamaro/react-quill#upgrading-to-react-quill-v100.");
    },
    children: function(props) {
      var isNotASingleElement = propTypes.element.apply(this, arguments);
      if (isNotASingleElement)
        return new Error("The Quill editing area can only be composed of a single React element.");
      if (react.Children.count(props.children)) {
        var child = react.Children.only(props.children);
        if (child.type === "textarea")
          return new Error("Quill does not support editing on a <textarea>. Use a <div> instead.");
      }
    }
  },
  dirtyProps: [
    "modules",
    "formats",
    "bounds",
    "theme",
    "children"
  ],
  cleanProps: [
    "id",
    "className",
    "style",
    "placeholder",
    "tabIndex",
    "onChange",
    "onChangeSelection",
    "onFocus",
    "onBlur",
    "onKeyPress",
    "onKeyDown",
    "onKeyUp"
  ],
  getDefaultProps: function() {
    return {
      theme: "snow",
      modules: {}
    };
  },
  isControlled: function() {
    return "value" in this.props;
  },
  getInitialState: function() {
    return {
      generation: 0,
      value: this.isControlled() ? this.props.value : this.props.defaultValue
    };
  },
  componentWillReceiveProps: function(nextProps, nextState) {
    var editor = this.editor;
    if (!editor)
      return;
    if ("value" in nextProps) {
      var currentContents = this.getEditorContents();
      var nextContents = nextProps.value;
      if (nextContents === this.lastDeltaChangeSet)
        throw new Error("You are passing the `delta` object from the `onChange` event back as `value`. You most probably want `editor.getContents()` instead. See: https://github.com/zenoamaro/react-quill#using-deltas");
      if (!this.isEqualValue(nextContents, currentContents)) {
        this.setEditorContents(editor, nextContents);
      }
    }
    if ("readOnly" in nextProps) {
      if (nextProps.readOnly !== this.props.readOnly) {
        this.setEditorReadOnly(editor, nextProps.readOnly);
      }
    }
    if (this.shouldComponentRegenerate(nextProps, nextState)) {
      return this.regenerate();
    }
  },
  componentDidMount: function() {
    this.editor = this.createEditor(this.getEditingArea(), this.getEditorConfig());
    if (this.quillDelta) {
      this.editor.setContents(this.quillDelta);
      this.editor.setSelection(this.quillSelection);
      this.editor.focus();
      this.quillDelta = this.quillSelection = null;
      return;
    }
    if (this.state.value) {
      this.setEditorContents(this.editor, this.state.value);
      return;
    }
  },
  componentWillUnmount: function() {
    var editor;
    if (editor = this.getEditor()) {
      this.unhookEditor(editor);
      this.editor = null;
    }
  },
  shouldComponentUpdate: function(nextProps, nextState) {
    var self2 = this;
    if (this.state.generation !== nextState.generation) {
      return true;
    }
    return some_1(this.cleanProps, function(prop) {
      return !isEqual_1(nextProps[prop], self2.props[prop]);
    });
  },
  shouldComponentRegenerate: function(nextProps, nextState) {
    var self2 = this;
    return some_1(this.dirtyProps, function(prop) {
      return !isEqual_1(nextProps[prop], self2.props[prop]);
    });
  },
  componentWillUpdate: function(nextProps, nextState) {
    if (this.state.generation !== nextState.generation) {
      this.componentWillUnmount();
    }
  },
  componentDidUpdate: function(prevProps, prevState) {
    if (this.state.generation !== prevState.generation) {
      this.componentDidMount();
    }
  },
  getEditorConfig: function() {
    return {
      bounds: this.props.bounds,
      formats: this.props.formats,
      modules: this.props.modules,
      placeholder: this.props.placeholder,
      readOnly: this.props.readOnly,
      scrollingContainer: this.props.scrollingContainer,
      tabIndex: this.props.tabIndex,
      theme: this.props.theme
    };
  },
  getEditor: function() {
    return this.editor;
  },
  getEditingArea: function() {
    return reactDom.findDOMNode(this.editingArea);
  },
  getEditorContents: function() {
    return this.state.value;
  },
  getEditorSelection: function() {
    return this.state.selection;
  },
  isDelta: function(value) {
    return value && value.ops;
  },
  isEqualValue: function(value, nextValue) {
    if (this.isDelta(value) && this.isDelta(nextValue)) {
      return isEqual_1(value.ops, nextValue.ops);
    } else {
      return isEqual_1(value, nextValue);
    }
  },
  regenerate: function() {
    this.quillDelta = this.editor.getContents();
    this.quillSelection = this.editor.getSelection();
    this.setState({
      generation: this.state.generation + 1
    });
  },
  renderEditingArea: function() {
    var self2 = this;
    var children = this.props.children;
    var preserveWhitespace = this.props.preserveWhitespace;
    var properties = {
      key: this.state.generation,
      tabIndex: this.props.tabIndex,
      ref: function(element) {
        self2.editingArea = element;
      }
    };
    var customElement = react.Children.count(children) ? react.Children.only(children) : null;
    var defaultElement = preserveWhitespace ? reactDomFactories.pre : reactDomFactories.div;
    var editingArea = customElement ? react.cloneElement(customElement, properties) : defaultElement(properties);
    return editingArea;
  },
  render: function() {
    return reactDomFactories.div({
      id: this.props.id,
      style: this.props.style,
      key: this.state.generation,
      className: ["quill"].concat(this.props.className).join(" "),
      onKeyPress: this.props.onKeyPress,
      onKeyDown: this.props.onKeyDown,
      onKeyUp: this.props.onKeyUp
    }, this.renderEditingArea());
  },
  onEditorChangeText: function(value, delta, source2, editor) {
    var currentContents = this.getEditorContents();
    var nextContents = this.isDelta(currentContents) ? editor.getContents() : editor.getHTML();
    if (!this.isEqualValue(nextContents, currentContents)) {
      this.lastDeltaChangeSet = delta;
      this.setState({value: nextContents});
      if (this.props.onChange) {
        this.props.onChange(value, delta, source2, editor);
      }
    }
  },
  onEditorChangeSelection: function(nextSelection, source2, editor) {
    var currentSelection = this.getEditorSelection();
    var hasGainedFocus = !currentSelection && nextSelection;
    var hasLostFocus = currentSelection && !nextSelection;
    if (isEqual_1(nextSelection, currentSelection)) {
      return;
    }
    this.setState({selection: nextSelection});
    if (this.props.onChangeSelection) {
      this.props.onChangeSelection(nextSelection, source2, editor);
    }
    if (hasGainedFocus && this.props.onFocus) {
      this.props.onFocus(nextSelection, source2, editor);
    } else if (hasLostFocus && this.props.onBlur) {
      this.props.onBlur(currentSelection, source2, editor);
    }
  },
  focus: function() {
    this.editor.focus();
  },
  blur: function() {
    this.setEditorSelection(this.editor, null);
  }
});
var component = QuillComponent;
/** @license React v17.0.2
 * react-dom-server.browser.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var reactDomServer_browser_development = createCommonjsModule(function(module, exports) {
  {
    (function() {
      var React = react;
      var _assign = objectAssign;
      function formatProdErrorMessage(code) {
        var url = "https://reactjs.org/docs/error-decoder.html?invariant=" + code;
        for (var i3 = 1; i3 < arguments.length; i3++) {
          url += "&args[]=" + encodeURIComponent(arguments[i3]);
        }
        return "Minified React error #" + code + "; visit " + url + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      var ReactVersion = "17.0.2";
      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          printWarning2("warn", format, args);
        }
      }
      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning2("error", format, args);
        }
      }
      function printWarning2(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return "" + item;
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var REACT_PORTAL_TYPE = 60106;
      var REACT_FRAGMENT_TYPE = 60107;
      var REACT_STRICT_MODE_TYPE = 60108;
      var REACT_PROFILER_TYPE = 60114;
      var REACT_PROVIDER_TYPE = 60109;
      var REACT_CONTEXT_TYPE = 60110;
      var REACT_FORWARD_REF_TYPE = 60112;
      var REACT_SUSPENSE_TYPE = 60113;
      var REACT_SUSPENSE_LIST_TYPE = 60120;
      var REACT_MEMO_TYPE = 60115;
      var REACT_LAZY_TYPE = 60116;
      var REACT_BLOCK_TYPE = 60121;
      var REACT_FUNDAMENTAL_TYPE = 60117;
      var REACT_SCOPE_TYPE = 60119;
      var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
      var REACT_LEGACY_HIDDEN_TYPE = 60131;
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        symbolFor("react.element");
        REACT_PORTAL_TYPE = symbolFor("react.portal");
        REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
        REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
        REACT_PROFILER_TYPE = symbolFor("react.profiler");
        REACT_PROVIDER_TYPE = symbolFor("react.provider");
        REACT_CONTEXT_TYPE = symbolFor("react.context");
        REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
        REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
        REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
        REACT_MEMO_TYPE = symbolFor("react.memo");
        REACT_LAZY_TYPE = symbolFor("react.lazy");
        REACT_BLOCK_TYPE = symbolFor("react.block");
        symbolFor("react.server.block");
        REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
        REACT_SCOPE_TYPE = symbolFor("react.scope");
        symbolFor("react.opaque.id");
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
        symbolFor("react.offscreen");
        REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentName(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context2 = type;
              return getContextName(context2) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
              return getComponentName(type._render);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentName(init(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var enableSuspenseServerRenderer = false;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: _assign({}, props, {
                value: prevLog
              }),
              info: _assign({}, props, {
                value: prevInfo
              }),
              warn: _assign({}, props, {
                value: prevWarn
              }),
              error: _assign({}, props, {
                value: prevError
              }),
              group: _assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: _assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: _assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix2;
      function describeBuiltInComponentFrame(name, source2, ownerFn) {
        {
          if (prefix2 === void 0) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match && match[1] || "";
            }
          }
          return "\n" + prefix2 + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source2, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source2, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source2, ownerFn);
            case REACT_BLOCK_TYPE:
              return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source2, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      var loggedTypeFailures2 = {};
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes2(typeSpecs, values, location, componentName, element) {
        {
          var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures2)) {
                loggedTypeFailures2[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var didWarnAboutInvalidateContextType;
      {
        didWarnAboutInvalidateContextType = new Set();
      }
      var emptyObject2 = {};
      {
        Object.freeze(emptyObject2);
      }
      function maskContext(type, context2) {
        var contextTypes = type.contextTypes;
        if (!contextTypes) {
          return emptyObject2;
        }
        var maskedContext = {};
        for (var contextName in contextTypes) {
          maskedContext[contextName] = context2[contextName];
        }
        return maskedContext;
      }
      function checkContextTypes(typeSpecs, values, location) {
        {
          checkPropTypes2(typeSpecs, values, location, "Component");
        }
      }
      function validateContextBounds(context2, threadID) {
        for (var i3 = context2._threadCount | 0; i3 <= threadID; i3++) {
          context2[i3] = context2._currentValue2;
          context2._threadCount = i3 + 1;
        }
      }
      function processContext(type, context2, threadID, isClass) {
        if (isClass) {
          var contextType = type.contextType;
          {
            if ("contextType" in type) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(type)) {
                didWarnAboutInvalidateContextType.add(type);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(type) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            validateContextBounds(contextType, threadID);
            return contextType[threadID];
          }
          {
            var maskedContext = maskContext(type, context2);
            {
              if (type.contextTypes) {
                checkContextTypes(type.contextTypes, maskedContext, "context");
              }
            }
            return maskedContext;
          }
        } else {
          {
            var _maskedContext = maskContext(type, context2);
            {
              if (type.contextTypes) {
                checkContextTypes(type.contextTypes, _maskedContext, "context");
              }
            }
            return _maskedContext;
          }
        }
      }
      var nextAvailableThreadIDs = new Uint16Array(16);
      for (var i2 = 0; i2 < 15; i2++) {
        nextAvailableThreadIDs[i2] = i2 + 1;
      }
      nextAvailableThreadIDs[15] = 0;
      function growThreadCountAndReturnNextAvailable() {
        var oldArray = nextAvailableThreadIDs;
        var oldSize = oldArray.length;
        var newSize = oldSize * 2;
        if (!(newSize <= 65536)) {
          {
            throw Error("Maximum number of concurrent React renderers exceeded. This can happen if you are not properly destroying the Readable provided by React. Ensure that you call .destroy() on it if you no longer want to read from it, and did not read to the end. If you use .pipe() this should be automatic.");
          }
        }
        var newArray = new Uint16Array(newSize);
        newArray.set(oldArray);
        nextAvailableThreadIDs = newArray;
        nextAvailableThreadIDs[0] = oldSize + 1;
        for (var _i = oldSize; _i < newSize - 1; _i++) {
          nextAvailableThreadIDs[_i] = _i + 1;
        }
        nextAvailableThreadIDs[newSize - 1] = 0;
        return oldSize;
      }
      function allocThreadID() {
        var nextID = nextAvailableThreadIDs[0];
        if (nextID === 0) {
          return growThreadCountAndReturnNextAvailable();
        }
        nextAvailableThreadIDs[0] = nextAvailableThreadIDs[nextID];
        return nextID;
      }
      function freeThreadID(id) {
        nextAvailableThreadIDs[id] = nextAvailableThreadIDs[0];
        nextAvailableThreadIDs[0] = id;
      }
      var RESERVED = 0;
      var STRING = 1;
      var BOOLEANISH_STRING = 2;
      var BOOLEAN = 3;
      var OVERLOADED_BOOLEAN = 4;
      var NUMERIC = 5;
      var POSITIVE_NUMERIC = 6;
      var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
      var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
      var ROOT_ATTRIBUTE_NAME = "data-reactroot";
      var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var illegalAttributeNameCache = {};
      var validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
          return true;
        }
        if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
          return false;
        }
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
          validatedAttributeNameCache[attributeName] = true;
          return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        {
          error("Invalid attribute name: `%s`", attributeName);
        }
        return false;
      }
      function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) {
          return propertyInfo.type === RESERVED;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
          return true;
        }
        return false;
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) {
          return false;
        }
        switch (typeof value) {
          case "function":
          case "symbol":
            return true;
          case "boolean": {
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix3 = name.toLowerCase().slice(0, 5);
              return prefix3 !== "data-" && prefix3 !== "aria-";
            }
          }
          default:
            return false;
        }
      }
      function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === "undefined") {
          return true;
        }
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
          return true;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (propertyInfo !== null) {
          switch (propertyInfo.type) {
            case BOOLEAN:
              return !value;
            case OVERLOADED_BOOLEAN:
              return value === false;
            case NUMERIC:
              return isNaN(value);
            case POSITIVE_NUMERIC:
              return isNaN(value) || value < 1;
          }
        }
        return false;
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL2;
        this.removeEmptyString = removeEmptyString;
      }
      var properties = {};
      var reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
      });
      [
        "allowFullScreen",
        "async",
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
      });
      [
        "checked",
        "multiple",
        "muted",
        "selected"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
      });
      [
        "capture",
        "download"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
      });
      [
        "cols",
        "rows",
        "size",
        "span"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
      });
      var CAMELIZE = /[\-\:]([a-z])/g;
      var capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
      });
      [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
      });
      [
        "xml:base",
        "xml:lang",
        "xml:space"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
      });
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
      var didWarn = false;
      function sanitizeURL(url) {
        {
          if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
          }
        }
      }
      var matchHtmlRegExp = /["'&<>]/;
      function escapeHtml(string) {
        var str = "" + string;
        var match = matchHtmlRegExp.exec(str);
        if (!match) {
          return str;
        }
        var escape;
        var html = "";
        var index2;
        var lastIndex = 0;
        for (index2 = match.index; index2 < str.length; index2++) {
          switch (str.charCodeAt(index2)) {
            case 34:
              escape = "&quot;";
              break;
            case 38:
              escape = "&amp;";
              break;
            case 39:
              escape = "&#x27;";
              break;
            case 60:
              escape = "&lt;";
              break;
            case 62:
              escape = "&gt;";
              break;
            default:
              continue;
          }
          if (lastIndex !== index2) {
            html += str.substring(lastIndex, index2);
          }
          lastIndex = index2 + 1;
          html += escape;
        }
        return lastIndex !== index2 ? html + str.substring(lastIndex, index2) : html;
      }
      function escapeTextForBrowser(text) {
        if (typeof text === "boolean" || typeof text === "number") {
          return "" + text;
        }
        return escapeHtml(text);
      }
      function quoteAttributeValueForBrowser(value) {
        return '"' + escapeTextForBrowser(value) + '"';
      }
      function createMarkupForRoot() {
        return ROOT_ATTRIBUTE_NAME + '=""';
      }
      function createMarkupForProperty(name, value) {
        var propertyInfo = getPropertyInfo(name);
        if (name !== "style" && shouldIgnoreAttribute(name, propertyInfo, false)) {
          return "";
        }
        if (shouldRemoveAttribute(name, value, propertyInfo, false)) {
          return "";
        }
        if (propertyInfo !== null) {
          var attributeName = propertyInfo.attributeName;
          var type = propertyInfo.type;
          if (type === BOOLEAN || type === OVERLOADED_BOOLEAN && value === true) {
            return attributeName + '=""';
          } else {
            if (propertyInfo.sanitizeURL) {
              value = "" + value;
              sanitizeURL(value);
            }
            return attributeName + "=" + quoteAttributeValueForBrowser(value);
          }
        } else if (isAttributeNameSafe(name)) {
          return name + "=" + quoteAttributeValueForBrowser(value);
        }
        return "";
      }
      function createMarkupForCustomAttribute(name, value) {
        if (!isAttributeNameSafe(name) || value == null) {
          return "";
        }
        return name + "=" + quoteAttributeValueForBrowser(value);
      }
      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }
      var objectIs2 = typeof Object.is === "function" ? Object.is : is;
      var currentlyRenderingComponent = null;
      var firstWorkInProgressHook = null;
      var workInProgressHook = null;
      var isReRender = false;
      var didScheduleRenderPhaseUpdate = false;
      var renderPhaseUpdates = null;
      var numberOfReRenders = 0;
      var RE_RENDER_LIMIT = 25;
      var isInHookUserCodeInDev = false;
      var currentHookNameInDev;
      function resolveCurrentlyRenderingComponent() {
        if (!(currentlyRenderingComponent !== null)) {
          {
            throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
        {
          if (isInHookUserCodeInDev) {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          }
        }
        return currentlyRenderingComponent;
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (prevDeps === null) {
          {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
          }
          return false;
        }
        {
          if (nextDeps.length !== prevDeps.length) {
            error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
          }
        }
        for (var i3 = 0; i3 < prevDeps.length && i3 < nextDeps.length; i3++) {
          if (objectIs2(nextDeps[i3], prevDeps[i3])) {
            continue;
          }
          return false;
        }
        return true;
      }
      function createHook() {
        if (numberOfReRenders > 0) {
          {
            {
              throw Error("Rendered more hooks than during the previous render");
            }
          }
        }
        return {
          memoizedState: null,
          queue: null,
          next: null
        };
      }
      function createWorkInProgressHook() {
        if (workInProgressHook === null) {
          if (firstWorkInProgressHook === null) {
            isReRender = false;
            firstWorkInProgressHook = workInProgressHook = createHook();
          } else {
            isReRender = true;
            workInProgressHook = firstWorkInProgressHook;
          }
        } else {
          if (workInProgressHook.next === null) {
            isReRender = false;
            workInProgressHook = workInProgressHook.next = createHook();
          } else {
            isReRender = true;
            workInProgressHook = workInProgressHook.next;
          }
        }
        return workInProgressHook;
      }
      function prepareToUseHooks(componentIdentity) {
        currentlyRenderingComponent = componentIdentity;
        {
          isInHookUserCodeInDev = false;
        }
      }
      function finishHooks(Component, props, children, refOrContext) {
        while (didScheduleRenderPhaseUpdate) {
          didScheduleRenderPhaseUpdate = false;
          numberOfReRenders += 1;
          workInProgressHook = null;
          children = Component(props, refOrContext);
        }
        resetHooksState();
        return children;
      }
      function resetHooksState() {
        {
          isInHookUserCodeInDev = false;
        }
        currentlyRenderingComponent = null;
        didScheduleRenderPhaseUpdate = false;
        firstWorkInProgressHook = null;
        numberOfReRenders = 0;
        renderPhaseUpdates = null;
        workInProgressHook = null;
      }
      function readContext(context2, observedBits) {
        var threadID = currentPartialRenderer.threadID;
        validateContextBounds(context2, threadID);
        {
          if (isInHookUserCodeInDev) {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          }
        }
        return context2[threadID];
      }
      function useContext(context2, observedBits) {
        {
          currentHookNameInDev = "useContext";
        }
        resolveCurrentlyRenderingComponent();
        var threadID = currentPartialRenderer.threadID;
        validateContextBounds(context2, threadID);
        return context2[threadID];
      }
      function basicStateReducer(state, action) {
        return typeof action === "function" ? action(state) : action;
      }
      function useState(initialState) {
        {
          currentHookNameInDev = "useState";
        }
        return useReducer(basicStateReducer, initialState);
      }
      function useReducer(reducer, initialArg, init) {
        {
          if (reducer !== basicStateReducer) {
            currentHookNameInDev = "useReducer";
          }
        }
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
        workInProgressHook = createWorkInProgressHook();
        if (isReRender) {
          var queue = workInProgressHook.queue;
          var dispatch = queue.dispatch;
          if (renderPhaseUpdates !== null) {
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate !== void 0) {
              renderPhaseUpdates.delete(queue);
              var newState = workInProgressHook.memoizedState;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                {
                  isInHookUserCodeInDev = true;
                }
                newState = reducer(newState, action);
                {
                  isInHookUserCodeInDev = false;
                }
                update = update.next;
              } while (update !== null);
              workInProgressHook.memoizedState = newState;
              return [newState, dispatch];
            }
          }
          return [workInProgressHook.memoizedState, dispatch];
        } else {
          {
            isInHookUserCodeInDev = true;
          }
          var initialState;
          if (reducer === basicStateReducer) {
            initialState = typeof initialArg === "function" ? initialArg() : initialArg;
          } else {
            initialState = init !== void 0 ? init(initialArg) : initialArg;
          }
          {
            isInHookUserCodeInDev = false;
          }
          workInProgressHook.memoizedState = initialState;
          var _queue = workInProgressHook.queue = {
            last: null,
            dispatch: null
          };
          var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
          return [workInProgressHook.memoizedState, _dispatch];
        }
      }
      function useMemo(nextCreate, deps) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
        workInProgressHook = createWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        if (workInProgressHook !== null) {
          var prevState = workInProgressHook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
        }
        {
          isInHookUserCodeInDev = true;
        }
        var nextValue = nextCreate();
        {
          isInHookUserCodeInDev = false;
        }
        workInProgressHook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function useRef(initialValue) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
        workInProgressHook = createWorkInProgressHook();
        var previousRef = workInProgressHook.memoizedState;
        if (previousRef === null) {
          var ref = {
            current: initialValue
          };
          {
            Object.seal(ref);
          }
          workInProgressHook.memoizedState = ref;
          return ref;
        } else {
          return previousRef;
        }
      }
      function useLayoutEffect(create2, inputs) {
        {
          currentHookNameInDev = "useLayoutEffect";
          error("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
        }
      }
      function dispatchAction(componentIdentity, queue, action) {
        if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
          {
            throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
        }
        if (componentIdentity === currentlyRenderingComponent) {
          didScheduleRenderPhaseUpdate = true;
          var update = {
            action,
            next: null
          };
          if (renderPhaseUpdates === null) {
            renderPhaseUpdates = new Map();
          }
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
          if (firstRenderPhaseUpdate === void 0) {
            renderPhaseUpdates.set(queue, update);
          } else {
            var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
            while (lastRenderPhaseUpdate.next !== null) {
              lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            }
            lastRenderPhaseUpdate.next = update;
          }
        }
      }
      function useCallback(callback, deps) {
        return useMemo(function() {
          return callback;
        }, deps);
      }
      function useMutableSource(source2, getSnapshot, subscribe) {
        resolveCurrentlyRenderingComponent();
        return getSnapshot(source2._source);
      }
      function useDeferredValue(value) {
        resolveCurrentlyRenderingComponent();
        return value;
      }
      function useTransition() {
        resolveCurrentlyRenderingComponent();
        var startTransition = function(callback) {
          callback();
        };
        return [startTransition, false];
      }
      function useOpaqueIdentifier() {
        return (currentPartialRenderer.identifierPrefix || "") + "R:" + (currentPartialRenderer.uniqueID++).toString(36);
      }
      function noop2() {
      }
      var currentPartialRenderer = null;
      function setCurrentPartialRenderer(renderer) {
        currentPartialRenderer = renderer;
      }
      var Dispatcher = {
        readContext,
        useContext,
        useMemo,
        useReducer,
        useRef,
        useState,
        useLayoutEffect,
        useCallback,
        useImperativeHandle: noop2,
        useEffect: noop2,
        useDebugValue: noop2,
        useDeferredValue,
        useTransition,
        useOpaqueIdentifier,
        useMutableSource
      };
      var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
      var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
      var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
      var Namespaces = {
        html: HTML_NAMESPACE,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE
      };
      function getIntrinsicNamespace(type) {
        switch (type) {
          case "svg":
            return SVG_NAMESPACE;
          case "math":
            return MATH_NAMESPACE;
          default:
            return HTML_NAMESPACE;
        }
      }
      function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
          return getIntrinsicNamespace(type);
        }
        if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
          return HTML_NAMESPACE;
        }
        return parentNamespace;
      }
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      function checkControlledValueProps(tagName, props) {
        {
          if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
            error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
          }
          if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
            error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
          }
        }
      }
      var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
      };
      var voidElementTags = _assign({
        menuitem: true
      }, omittedCloseTags);
      var HTML = "__html";
      function assertValidProps(tag, props) {
        if (!props) {
          return;
        }
        if (voidElementTags[tag]) {
          if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
            {
              throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
        }
        if (props.dangerouslySetInnerHTML != null) {
          if (!(props.children == null)) {
            {
              throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
          }
          if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
            {
              throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
        }
        {
          if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
            error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
          }
        }
        if (!(props.style == null || typeof props.style === "object")) {
          {
            throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
      }
      var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      function prefixKey(prefix3, key2) {
        return prefix3 + key2.charAt(0).toUpperCase() + key2.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix3) {
          isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
        });
      });
      function dangerousStyleValue(name, value, isCustomProperty) {
        var isEmpty2 = value == null || typeof value === "boolean" || value === "";
        if (isEmpty2) {
          return "";
        }
        if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
          return value + "px";
        }
        return ("" + value).trim();
      }
      var uppercasePattern = /([A-Z])/g;
      var msPattern = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1) {
          return typeof props.is === "string";
        }
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        var camelize = function(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        };
        var warnHyphenatedStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
        };
        var warnBadVendoredStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
        };
        var warnStyleValueWithSemicolon = function(name, value) {
          if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
            return;
          }
          warnedStyleValues[value] = true;
          error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
        };
        var warnStyleValueIsNaN = function(name, value) {
          if (warnedForNaNValue) {
            return;
          }
          warnedForNaNValue = true;
          error("`NaN` is an invalid value for the `%s` css style property.", name);
        };
        var warnStyleValueIsInfinity = function(name, value) {
          if (warnedForInfinityValue) {
            return;
          }
          warnedForInfinityValue = true;
          error("`Infinity` is an invalid value for the `%s` css style property.", name);
        };
        warnValidStyle = function(name, value) {
          if (name.indexOf("-") > -1) {
            warnHyphenatedStyleName(name);
          } else if (badVendoredStyleNamePattern.test(name)) {
            warnBadVendoredStyleName(name);
          } else if (badStyleValueWithSemicolonPattern.test(value)) {
            warnStyleValueWithSemicolon(name, value);
          }
          if (typeof value === "number") {
            if (isNaN(value)) {
              warnStyleValueIsNaN(name, value);
            } else if (!isFinite(value)) {
              warnStyleValueIsInfinity(name, value);
            }
          }
        };
      }
      var warnValidStyle$1 = warnValidStyle;
      var ariaProperties = {
        "aria-current": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      };
      var warnedProperties = {};
      var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
      var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      var hasOwnProperty$12 = Object.prototype.hasOwnProperty;
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty$12.call(warnedProperties, name) && warnedProperties[name]) {
            return true;
          }
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null) {
              error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (name !== correctName) {
              error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
              warnedProperties[name] = true;
              return true;
            }
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null) {
              warnedProperties[name] = true;
              return false;
            }
            if (name !== standardName) {
              error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties[name] = true;
              return true;
            }
          }
        }
        return true;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key2 in props) {
            var isValid = validateProperty(type, key2);
            if (!isValid) {
              invalidProps.push(key2);
            }
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (invalidProps.length === 1) {
            error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          } else if (invalidProps.length > 1) {
            error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          }
        }
      }
      function validateProperties(type, props) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = false;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select") {
            return;
          }
          if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === "select" && props.multiple) {
              error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            } else {
              error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
            }
          }
        }
      }
      var possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      };
      var validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {};
        var _hasOwnProperty = Object.prototype.hasOwnProperty;
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
            return true;
          }
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name)) {
              return true;
            }
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null) {
              error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
              error("Unknown event handler property `%s`. It will be ignored.", name);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (EVENT_NAME_REGEX.test(name)) {
            if (INVALID_EVENT_NAME_REGEX.test(name)) {
              error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
            return true;
          }
          if (lowerCasedName === "innerhtml") {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "aria") {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "number" && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
          }
          var propertyInfo = getPropertyInfo(name);
          var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
              error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (!isReserved && name !== lowerCasedName) {
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) {
              error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
            } else {
              error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (isReserved) {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
          }
          if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
          }
          return true;
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key2 in props) {
            var isValid = validateProperty$1(type, key2, props[key2], eventRegistry);
            if (!isValid) {
              unknownProps.push(key2);
            }
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (unknownProps.length === 1) {
            error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          } else if (unknownProps.length > 1) {
            error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          }
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnUnknownProperties(type, props, eventRegistry);
      }
      var toArray = React.Children.toArray;
      var currentDebugStacks = [];
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var ReactDebugCurrentFrame$1;
      var prevGetCurrentStackImpl = null;
      var getCurrentServerStackImpl = function() {
        return "";
      };
      var describeStackFrame = function(element) {
        return "";
      };
      var validatePropertiesInDevelopment = function(type, props) {
      };
      var pushCurrentDebugStack = function(stack) {
      };
      var pushElementToDebugStack = function(element) {
      };
      var popCurrentDebugStack = function() {
      };
      var hasWarnedAboutUsingContextAsConsumer = false;
      {
        ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        validatePropertiesInDevelopment = function(type, props) {
          validateProperties(type, props);
          validateProperties$1(type, props);
          validateProperties$2(type, props, null);
        };
        describeStackFrame = function(element) {
          return describeUnknownElementTypeFrameInDEV(element.type, element._source, null);
        };
        pushCurrentDebugStack = function(stack) {
          currentDebugStacks.push(stack);
          if (currentDebugStacks.length === 1) {
            prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack;
            ReactDebugCurrentFrame$1.getCurrentStack = getCurrentServerStackImpl;
          }
        };
        pushElementToDebugStack = function(element) {
          var stack = currentDebugStacks[currentDebugStacks.length - 1];
          var frame = stack[stack.length - 1];
          frame.debugElementStack.push(element);
        };
        popCurrentDebugStack = function() {
          currentDebugStacks.pop();
          if (currentDebugStacks.length === 0) {
            ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl;
            prevGetCurrentStackImpl = null;
          }
        };
        getCurrentServerStackImpl = function() {
          if (currentDebugStacks.length === 0) {
            return "";
          }
          var frames = currentDebugStacks[currentDebugStacks.length - 1];
          var stack = "";
          for (var i3 = frames.length - 1; i3 >= 0; i3--) {
            var frame = frames[i3];
            var debugElementStack = frame.debugElementStack;
            for (var ii = debugElementStack.length - 1; ii >= 0; ii--) {
              stack += describeStackFrame(debugElementStack[ii]);
            }
          }
          return stack;
        };
      }
      var didWarnDefaultInputValue = false;
      var didWarnDefaultChecked = false;
      var didWarnDefaultSelectValue = false;
      var didWarnDefaultTextareaValue = false;
      var didWarnInvalidOptionChildren = false;
      var didWarnAboutNoopUpdateForComponent = {};
      var didWarnAboutBadClass = {};
      var didWarnAboutModulePatternComponent = {};
      var didWarnAboutDeprecatedWillMount = {};
      var didWarnAboutUndefinedDerivedState = {};
      var didWarnAboutUninitializedState = {};
      var valuePropNames = ["value", "defaultValue"];
      var newlineEatingTags = {
        listing: true,
        pre: true,
        textarea: true
      };
      var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
      var validatedTagCache = {};
      function validateDangerousTag(tag) {
        if (!validatedTagCache.hasOwnProperty(tag)) {
          if (!VALID_TAG_REGEX.test(tag)) {
            {
              throw Error("Invalid tag: " + tag);
            }
          }
          validatedTagCache[tag] = true;
        }
      }
      var styleNameCache = {};
      var processStyleName = function(styleName) {
        if (styleNameCache.hasOwnProperty(styleName)) {
          return styleNameCache[styleName];
        }
        var result = hyphenateStyleName(styleName);
        styleNameCache[styleName] = result;
        return result;
      };
      function createMarkupForStyles(styles) {
        var serialized = "";
        var delimiter = "";
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          var isCustomProperty = styleName.indexOf("--") === 0;
          var styleValue = styles[styleName];
          {
            if (!isCustomProperty) {
              warnValidStyle$1(styleName, styleValue);
            }
          }
          if (styleValue != null) {
            serialized += delimiter + (isCustomProperty ? styleName : processStyleName(styleName)) + ":";
            serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
            delimiter = ";";
          }
        }
        return serialized || null;
      }
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && getComponentName(_constructor) || "ReactClass";
          var warningKey = componentName + "." + callerName;
          if (didWarnAboutNoopUpdateForComponent[warningKey]) {
            return;
          }
          error("%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, callerName, componentName);
          didWarnAboutNoopUpdateForComponent[warningKey] = true;
        }
      }
      function shouldConstruct$1(Component) {
        return Component.prototype && Component.prototype.isReactComponent;
      }
      function getNonChildrenInnerMarkup(props) {
        var innerHTML = props.dangerouslySetInnerHTML;
        if (innerHTML != null) {
          if (innerHTML.__html != null) {
            return innerHTML.__html;
          }
        } else {
          var content = props.children;
          if (typeof content === "string" || typeof content === "number") {
            return escapeTextForBrowser(content);
          }
        }
        return null;
      }
      function flattenTopLevelChildren(children) {
        if (!React.isValidElement(children)) {
          return toArray(children);
        }
        var element = children;
        if (element.type !== REACT_FRAGMENT_TYPE) {
          return [element];
        }
        var fragmentChildren = element.props.children;
        if (!React.isValidElement(fragmentChildren)) {
          return toArray(fragmentChildren);
        }
        var fragmentChildElement = fragmentChildren;
        return [fragmentChildElement];
      }
      function flattenOptionChildren(children) {
        if (children === void 0 || children === null) {
          return children;
        }
        var content = "";
        React.Children.forEach(children, function(child) {
          if (child == null) {
            return;
          }
          content += child;
          {
            if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number") {
              didWarnInvalidOptionChildren = true;
              error("Only strings and numbers are supported as <option> children.");
            }
          }
        });
        return content;
      }
      var hasOwnProperty$22 = Object.prototype.hasOwnProperty;
      var STYLE = "style";
      var RESERVED_PROPS = {
        children: null,
        dangerouslySetInnerHTML: null,
        suppressContentEditableWarning: null,
        suppressHydrationWarning: null
      };
      function createOpenTagMarkup(tagVerbatim, tagLowercase, props, namespace, makeStaticMarkup, isRootElement) {
        var ret = "<" + tagVerbatim;
        var isCustomComponent$1 = isCustomComponent(tagLowercase, props);
        for (var propKey in props) {
          if (!hasOwnProperty$22.call(props, propKey)) {
            continue;
          }
          var propValue = props[propKey];
          if (propValue == null) {
            continue;
          }
          if (propKey === STYLE) {
            propValue = createMarkupForStyles(propValue);
          }
          var markup = null;
          if (isCustomComponent$1) {
            if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
              markup = createMarkupForCustomAttribute(propKey, propValue);
            }
          } else {
            markup = createMarkupForProperty(propKey, propValue);
          }
          if (markup) {
            ret += " " + markup;
          }
        }
        if (makeStaticMarkup) {
          return ret;
        }
        if (isRootElement) {
          ret += " " + createMarkupForRoot();
        }
        return ret;
      }
      function validateRenderResult(child, type) {
        if (child === void 0) {
          {
            {
              throw Error((getComponentName(type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
            }
          }
        }
      }
      function resolve(child, context2, threadID) {
        while (React.isValidElement(child)) {
          var element = child;
          var Component = element.type;
          {
            pushElementToDebugStack(element);
          }
          if (typeof Component !== "function") {
            break;
          }
          processChild(element, Component);
        }
        function processChild(element2, Component2) {
          var isClass = shouldConstruct$1(Component2);
          var publicContext = processContext(Component2, context2, threadID, isClass);
          var queue = [];
          var replace = false;
          var updater = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance) {
              if (queue === null) {
                warnNoop(publicInstance, "forceUpdate");
                return null;
              }
            },
            enqueueReplaceState: function(publicInstance, completeState) {
              replace = true;
              queue = [completeState];
            },
            enqueueSetState: function(publicInstance, currentPartialState) {
              if (queue === null) {
                warnNoop(publicInstance, "setState");
                return null;
              }
              queue.push(currentPartialState);
            }
          };
          var inst;
          if (isClass) {
            inst = new Component2(element2.props, publicContext, updater);
            if (typeof Component2.getDerivedStateFromProps === "function") {
              {
                if (inst.state === null || inst.state === void 0) {
                  var componentName = getComponentName(Component2) || "Unknown";
                  if (!didWarnAboutUninitializedState[componentName]) {
                    error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, inst.state === null ? "null" : "undefined", componentName);
                    didWarnAboutUninitializedState[componentName] = true;
                  }
                }
              }
              var partialState = Component2.getDerivedStateFromProps.call(null, element2.props, inst.state);
              {
                if (partialState === void 0) {
                  var _componentName = getComponentName(Component2) || "Unknown";
                  if (!didWarnAboutUndefinedDerivedState[_componentName]) {
                    error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", _componentName);
                    didWarnAboutUndefinedDerivedState[_componentName] = true;
                  }
                }
              }
              if (partialState != null) {
                inst.state = _assign({}, inst.state, partialState);
              }
            }
          } else {
            {
              if (Component2.prototype && typeof Component2.prototype.render === "function") {
                var _componentName2 = getComponentName(Component2) || "Unknown";
                if (!didWarnAboutBadClass[_componentName2]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", _componentName2, _componentName2);
                  didWarnAboutBadClass[_componentName2] = true;
                }
              }
            }
            var componentIdentity = {};
            prepareToUseHooks(componentIdentity);
            inst = Component2(element2.props, publicContext, updater);
            inst = finishHooks(Component2, element2.props, inst, publicContext);
            {
              if (inst != null && inst.render != null) {
                var _componentName3 = getComponentName(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName3]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName3, _componentName3, _componentName3);
                  didWarnAboutModulePatternComponent[_componentName3] = true;
                }
              }
            }
            if (inst == null || inst.render == null) {
              child = inst;
              validateRenderResult(child, Component2);
              return;
            }
          }
          inst.props = element2.props;
          inst.context = publicContext;
          inst.updater = updater;
          var initialState = inst.state;
          if (initialState === void 0) {
            inst.state = initialState = null;
          }
          if (typeof inst.UNSAFE_componentWillMount === "function" || typeof inst.componentWillMount === "function") {
            if (typeof inst.componentWillMount === "function") {
              {
                if (inst.componentWillMount.__suppressDeprecationWarning !== true) {
                  var _componentName4 = getComponentName(Component2) || "Unknown";
                  if (!didWarnAboutDeprecatedWillMount[_componentName4]) {
                    warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s", _componentName4);
                    didWarnAboutDeprecatedWillMount[_componentName4] = true;
                  }
                }
              }
              if (typeof Component2.getDerivedStateFromProps !== "function") {
                inst.componentWillMount();
              }
            }
            if (typeof inst.UNSAFE_componentWillMount === "function" && typeof Component2.getDerivedStateFromProps !== "function") {
              inst.UNSAFE_componentWillMount();
            }
            if (queue.length) {
              var oldQueue = queue;
              var oldReplace = replace;
              queue = null;
              replace = false;
              if (oldReplace && oldQueue.length === 1) {
                inst.state = oldQueue[0];
              } else {
                var nextState = oldReplace ? oldQueue[0] : inst.state;
                var dontMutate = true;
                for (var i3 = oldReplace ? 1 : 0; i3 < oldQueue.length; i3++) {
                  var partial = oldQueue[i3];
                  var _partialState = typeof partial === "function" ? partial.call(inst, nextState, element2.props, publicContext) : partial;
                  if (_partialState != null) {
                    if (dontMutate) {
                      dontMutate = false;
                      nextState = _assign({}, nextState, _partialState);
                    } else {
                      _assign(nextState, _partialState);
                    }
                  }
                }
                inst.state = nextState;
              }
            } else {
              queue = null;
            }
          }
          child = inst.render();
          {
            if (child === void 0 && inst.render._isMockFunction) {
              child = null;
            }
          }
          validateRenderResult(child, Component2);
          var childContext;
          {
            if (typeof inst.getChildContext === "function") {
              var _childContextTypes = Component2.childContextTypes;
              if (typeof _childContextTypes === "object") {
                childContext = inst.getChildContext();
                for (var contextKey in childContext) {
                  if (!(contextKey in _childContextTypes)) {
                    {
                      throw Error((getComponentName(Component2) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                    }
                  }
                }
              } else {
                {
                  error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", getComponentName(Component2) || "Unknown");
                }
              }
            }
            if (childContext) {
              context2 = _assign({}, context2, childContext);
            }
          }
        }
        return {
          child,
          context: context2
        };
      }
      var ReactDOMServerRenderer = /* @__PURE__ */ function() {
        function ReactDOMServerRenderer2(children, makeStaticMarkup, options) {
          var flatChildren = flattenTopLevelChildren(children);
          var topFrame = {
            type: null,
            domNamespace: Namespaces.html,
            children: flatChildren,
            childIndex: 0,
            context: emptyObject2,
            footer: ""
          };
          {
            topFrame.debugElementStack = [];
          }
          this.threadID = allocThreadID();
          this.stack = [topFrame];
          this.exhausted = false;
          this.currentSelectValue = null;
          this.previousWasTextNode = false;
          this.makeStaticMarkup = makeStaticMarkup;
          this.suspenseDepth = 0;
          this.contextIndex = -1;
          this.contextStack = [];
          this.contextValueStack = [];
          this.uniqueID = 0;
          this.identifierPrefix = options && options.identifierPrefix || "";
          {
            this.contextProviderStack = [];
          }
        }
        var _proto = ReactDOMServerRenderer2.prototype;
        _proto.destroy = function destroy() {
          if (!this.exhausted) {
            this.exhausted = true;
            this.clearProviders();
            freeThreadID(this.threadID);
          }
        };
        _proto.pushProvider = function pushProvider(provider) {
          var index2 = ++this.contextIndex;
          var context2 = provider.type._context;
          var threadID = this.threadID;
          validateContextBounds(context2, threadID);
          var previousValue = context2[threadID];
          this.contextStack[index2] = context2;
          this.contextValueStack[index2] = previousValue;
          {
            this.contextProviderStack[index2] = provider;
          }
          context2[threadID] = provider.props.value;
        };
        _proto.popProvider = function popProvider(provider) {
          var index2 = this.contextIndex;
          {
            if (index2 < 0 || provider !== this.contextProviderStack[index2]) {
              error("Unexpected pop.");
            }
          }
          var context2 = this.contextStack[index2];
          var previousValue = this.contextValueStack[index2];
          this.contextStack[index2] = null;
          this.contextValueStack[index2] = null;
          {
            this.contextProviderStack[index2] = null;
          }
          this.contextIndex--;
          context2[this.threadID] = previousValue;
        };
        _proto.clearProviders = function clearProviders() {
          for (var index2 = this.contextIndex; index2 >= 0; index2--) {
            var context2 = this.contextStack[index2];
            var previousValue = this.contextValueStack[index2];
            context2[this.threadID] = previousValue;
          }
        };
        _proto.read = function read(bytes) {
          if (this.exhausted) {
            return null;
          }
          var prevPartialRenderer = currentPartialRenderer;
          setCurrentPartialRenderer(this);
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          try {
            var out = [""];
            var suspended = false;
            while (out[0].length < bytes) {
              if (this.stack.length === 0) {
                this.exhausted = true;
                freeThreadID(this.threadID);
                break;
              }
              var frame = this.stack[this.stack.length - 1];
              if (suspended || frame.childIndex >= frame.children.length) {
                var footer = frame.footer;
                if (footer !== "") {
                  this.previousWasTextNode = false;
                }
                this.stack.pop();
                if (frame.type === "select") {
                  this.currentSelectValue = null;
                } else if (frame.type != null && frame.type.type != null && frame.type.type.$$typeof === REACT_PROVIDER_TYPE) {
                  var provider = frame.type;
                  this.popProvider(provider);
                } else if (frame.type === REACT_SUSPENSE_TYPE) {
                  this.suspenseDepth--;
                  var buffered = out.pop();
                  if (suspended) {
                    suspended = false;
                    var fallbackFrame = frame.fallbackFrame;
                    if (!fallbackFrame) {
                      {
                        throw Error(true ? "ReactDOMServer did not find an internal fallback frame for Suspense. This is a bug in React. Please file an issue." : formatProdErrorMessage(303));
                      }
                    }
                    this.stack.push(fallbackFrame);
                    out[this.suspenseDepth] += "<!--$!-->";
                    continue;
                  } else {
                    out[this.suspenseDepth] += buffered;
                  }
                }
                out[this.suspenseDepth] += footer;
                continue;
              }
              var child = frame.children[frame.childIndex++];
              var outBuffer = "";
              if (true) {
                pushCurrentDebugStack(this.stack);
                frame.debugElementStack.length = 0;
              }
              try {
                outBuffer += this.render(child, frame.context, frame.domNamespace);
              } catch (err) {
                if (err != null && typeof err.then === "function") {
                  if (enableSuspenseServerRenderer)
                    ;
                  else {
                    if (true) {
                      {
                        throw Error(true ? "ReactDOMServer does not yet support Suspense." : formatProdErrorMessage(294));
                      }
                    }
                  }
                } else {
                  throw err;
                }
              } finally {
                if (true) {
                  popCurrentDebugStack();
                }
              }
              if (out.length <= this.suspenseDepth) {
                out.push("");
              }
              out[this.suspenseDepth] += outBuffer;
            }
            return out[0];
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
            setCurrentPartialRenderer(prevPartialRenderer);
            resetHooksState();
          }
        };
        _proto.render = function render(child, context2, parentNamespace) {
          if (typeof child === "string" || typeof child === "number") {
            var text = "" + child;
            if (text === "") {
              return "";
            }
            if (this.makeStaticMarkup) {
              return escapeTextForBrowser(text);
            }
            if (this.previousWasTextNode) {
              return "<!-- -->" + escapeTextForBrowser(text);
            }
            this.previousWasTextNode = true;
            return escapeTextForBrowser(text);
          } else {
            var nextChild;
            var _resolve = resolve(child, context2, this.threadID);
            nextChild = _resolve.child;
            context2 = _resolve.context;
            if (nextChild === null || nextChild === false) {
              return "";
            } else if (!React.isValidElement(nextChild)) {
              if (nextChild != null && nextChild.$$typeof != null) {
                var $$typeof = nextChild.$$typeof;
                if (!($$typeof !== REACT_PORTAL_TYPE)) {
                  {
                    throw Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
                  }
                }
                {
                  {
                    throw Error("Unknown element-like object type: " + $$typeof.toString() + ". This is likely a bug in React. Please file an issue.");
                  }
                }
              }
              var nextChildren = toArray(nextChild);
              var frame = {
                type: null,
                domNamespace: parentNamespace,
                children: nextChildren,
                childIndex: 0,
                context: context2,
                footer: ""
              };
              {
                frame.debugElementStack = [];
              }
              this.stack.push(frame);
              return "";
            }
            var nextElement = nextChild;
            var elementType = nextElement.type;
            if (typeof elementType === "string") {
              return this.renderDOM(nextElement, context2, parentNamespace);
            }
            switch (elementType) {
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_SUSPENSE_LIST_TYPE:
              case REACT_FRAGMENT_TYPE: {
                var _nextChildren = toArray(nextChild.props.children);
                var _frame = {
                  type: null,
                  domNamespace: parentNamespace,
                  children: _nextChildren,
                  childIndex: 0,
                  context: context2,
                  footer: ""
                };
                {
                  _frame.debugElementStack = [];
                }
                this.stack.push(_frame);
                return "";
              }
              case REACT_SUSPENSE_TYPE: {
                {
                  {
                    {
                      throw Error("ReactDOMServer does not yet support Suspense.");
                    }
                  }
                }
              }
              case REACT_SCOPE_TYPE: {
                {
                  {
                    throw Error("ReactDOMServer does not yet support scope components.");
                  }
                }
              }
            }
            if (typeof elementType === "object" && elementType !== null) {
              switch (elementType.$$typeof) {
                case REACT_FORWARD_REF_TYPE: {
                  var element = nextChild;
                  var _nextChildren5;
                  var componentIdentity = {};
                  prepareToUseHooks(componentIdentity);
                  _nextChildren5 = elementType.render(element.props, element.ref);
                  _nextChildren5 = finishHooks(elementType.render, element.props, _nextChildren5, element.ref);
                  _nextChildren5 = toArray(_nextChildren5);
                  var _frame5 = {
                    type: null,
                    domNamespace: parentNamespace,
                    children: _nextChildren5,
                    childIndex: 0,
                    context: context2,
                    footer: ""
                  };
                  {
                    _frame5.debugElementStack = [];
                  }
                  this.stack.push(_frame5);
                  return "";
                }
                case REACT_MEMO_TYPE: {
                  var _element = nextChild;
                  var _nextChildren6 = [React.createElement(elementType.type, _assign({
                    ref: _element.ref
                  }, _element.props))];
                  var _frame6 = {
                    type: null,
                    domNamespace: parentNamespace,
                    children: _nextChildren6,
                    childIndex: 0,
                    context: context2,
                    footer: ""
                  };
                  {
                    _frame6.debugElementStack = [];
                  }
                  this.stack.push(_frame6);
                  return "";
                }
                case REACT_PROVIDER_TYPE: {
                  var provider = nextChild;
                  var nextProps = provider.props;
                  var _nextChildren7 = toArray(nextProps.children);
                  var _frame7 = {
                    type: provider,
                    domNamespace: parentNamespace,
                    children: _nextChildren7,
                    childIndex: 0,
                    context: context2,
                    footer: ""
                  };
                  {
                    _frame7.debugElementStack = [];
                  }
                  this.pushProvider(provider);
                  this.stack.push(_frame7);
                  return "";
                }
                case REACT_CONTEXT_TYPE: {
                  var reactContext = nextChild.type;
                  {
                    if (reactContext._context === void 0) {
                      if (reactContext !== reactContext.Consumer) {
                        if (!hasWarnedAboutUsingContextAsConsumer) {
                          hasWarnedAboutUsingContextAsConsumer = true;
                          error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                        }
                      }
                    } else {
                      reactContext = reactContext._context;
                    }
                  }
                  var _nextProps = nextChild.props;
                  var threadID = this.threadID;
                  validateContextBounds(reactContext, threadID);
                  var nextValue = reactContext[threadID];
                  var _nextChildren8 = toArray(_nextProps.children(nextValue));
                  var _frame8 = {
                    type: nextChild,
                    domNamespace: parentNamespace,
                    children: _nextChildren8,
                    childIndex: 0,
                    context: context2,
                    footer: ""
                  };
                  {
                    _frame8.debugElementStack = [];
                  }
                  this.stack.push(_frame8);
                  return "";
                }
                case REACT_FUNDAMENTAL_TYPE: {
                  {
                    {
                      throw Error("ReactDOMServer does not yet support the fundamental API.");
                    }
                  }
                }
                case REACT_LAZY_TYPE: {
                  var _element2 = nextChild;
                  var lazyComponent = nextChild.type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  var result = init(payload);
                  var _nextChildren10 = [React.createElement(result, _assign({
                    ref: _element2.ref
                  }, _element2.props))];
                  var _frame10 = {
                    type: null,
                    domNamespace: parentNamespace,
                    children: _nextChildren10,
                    childIndex: 0,
                    context: context2,
                    footer: ""
                  };
                  {
                    _frame10.debugElementStack = [];
                  }
                  this.stack.push(_frame10);
                  return "";
                }
              }
            }
            var info = "";
            {
              var owner = nextElement._owner;
              if (elementType === void 0 || typeof elementType === "object" && elementType !== null && Object.keys(elementType).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var ownerName = owner ? getComponentName(owner) : null;
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
            }
            {
              {
                throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (elementType == null ? elementType : typeof elementType) + "." + info);
              }
            }
          }
        };
        _proto.renderDOM = function renderDOM(element, context2, parentNamespace) {
          var tag = element.type.toLowerCase();
          var namespace = parentNamespace;
          if (parentNamespace === Namespaces.html) {
            namespace = getIntrinsicNamespace(tag);
          }
          {
            if (namespace === Namespaces.html) {
              if (tag !== element.type) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", element.type);
              }
            }
          }
          validateDangerousTag(tag);
          var props = element.props;
          if (tag === "input") {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
                didWarnDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
                didWarnDefaultInputValue = true;
              }
            }
            props = _assign({
              type: void 0
            }, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: props.value != null ? props.value : props.defaultValue,
              checked: props.checked != null ? props.checked : props.defaultChecked
            });
          } else if (tag === "textarea") {
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
                error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnDefaultTextareaValue = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var defaultValue = props.defaultValue;
              var textareaChildren = props.children;
              if (textareaChildren != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                if (!(defaultValue == null)) {
                  {
                    throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                }
                if (Array.isArray(textareaChildren)) {
                  if (!(textareaChildren.length <= 1)) {
                    {
                      throw Error("<textarea> can only have at most one child.");
                    }
                  }
                  textareaChildren = textareaChildren[0];
                }
                defaultValue = "" + textareaChildren;
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            props = _assign({}, props, {
              value: void 0,
              children: "" + initialValue
            });
          } else if (tag === "select") {
            {
              checkControlledValueProps("select", props);
              for (var i3 = 0; i3 < valuePropNames.length; i3++) {
                var propName = valuePropNames[i3];
                if (props[propName] == null) {
                  continue;
                }
                var isArray2 = Array.isArray(props[propName]);
                if (props.multiple && !isArray2) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
                } else if (!props.multiple && isArray2) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
                }
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnDefaultSelectValue = true;
              }
            }
            this.currentSelectValue = props.value != null ? props.value : props.defaultValue;
            props = _assign({}, props, {
              value: void 0
            });
          } else if (tag === "option") {
            var selected = null;
            var selectValue = this.currentSelectValue;
            var optionChildren = flattenOptionChildren(props.children);
            if (selectValue != null) {
              var value;
              if (props.value != null) {
                value = props.value + "";
              } else {
                value = optionChildren;
              }
              selected = false;
              if (Array.isArray(selectValue)) {
                for (var j = 0; j < selectValue.length; j++) {
                  if ("" + selectValue[j] === value) {
                    selected = true;
                    break;
                  }
                }
              } else {
                selected = "" + selectValue === value;
              }
              props = _assign({
                selected: void 0,
                children: void 0
              }, props, {
                selected,
                children: optionChildren
              });
            }
          }
          {
            validatePropertiesInDevelopment(tag, props);
          }
          assertValidProps(tag, props);
          var out = createOpenTagMarkup(element.type, tag, props, namespace, this.makeStaticMarkup, this.stack.length === 1);
          var footer = "";
          if (omittedCloseTags.hasOwnProperty(tag)) {
            out += "/>";
          } else {
            out += ">";
            footer = "</" + element.type + ">";
          }
          var children;
          var innerMarkup = getNonChildrenInnerMarkup(props);
          if (innerMarkup != null) {
            children = [];
            if (newlineEatingTags.hasOwnProperty(tag) && innerMarkup.charAt(0) === "\n") {
              out += "\n";
            }
            out += innerMarkup;
          } else {
            children = toArray(props.children);
          }
          var frame = {
            domNamespace: getChildNamespace(parentNamespace, element.type),
            type: tag,
            children,
            childIndex: 0,
            context: context2,
            footer
          };
          {
            frame.debugElementStack = [];
          }
          this.stack.push(frame);
          this.previousWasTextNode = false;
          return out;
        };
        return ReactDOMServerRenderer2;
      }();
      function renderToString(element, options) {
        var renderer = new ReactDOMServerRenderer(element, false, options);
        try {
          var markup = renderer.read(Infinity);
          return markup;
        } finally {
          renderer.destroy();
        }
      }
      function renderToStaticMarkup(element, options) {
        var renderer = new ReactDOMServerRenderer(element, true, options);
        try {
          var markup = renderer.read(Infinity);
          return markup;
        } finally {
          renderer.destroy();
        }
      }
      function renderToNodeStream() {
        {
          {
            throw Error("ReactDOMServer.renderToNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToString() instead.");
          }
        }
      }
      function renderToStaticNodeStream() {
        {
          {
            throw Error("ReactDOMServer.renderToStaticNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToStaticMarkup() instead.");
          }
        }
      }
      exports.renderToNodeStream = renderToNodeStream;
      exports.renderToStaticMarkup = renderToStaticMarkup;
      exports.renderToStaticNodeStream = renderToStaticNodeStream;
      exports.renderToString = renderToString;
      exports.version = ReactVersion;
    })();
  }
});
var server_browser = createCommonjsModule(function(module) {
  {
    module.exports = reactDomServer_browser_development;
  }
});
var defaultColors = [
  "rgb(  0,   0,   0)",
  "rgb(230,   0,   0)",
  "rgb(255, 153,   0)",
  "rgb(255, 255,   0)",
  "rgb(  0, 138,   0)",
  "rgb(  0, 102, 204)",
  "rgb(153,  51, 255)",
  "rgb(255, 255, 255)",
  "rgb(250, 204, 204)",
  "rgb(255, 235, 204)",
  "rgb(255, 255, 204)",
  "rgb(204, 232, 204)",
  "rgb(204, 224, 245)",
  "rgb(235, 214, 255)",
  "rgb(187, 187, 187)",
  "rgb(240, 102, 102)",
  "rgb(255, 194, 102)",
  "rgb(255, 255, 102)",
  "rgb(102, 185, 102)",
  "rgb(102, 163, 224)",
  "rgb(194, 133, 255)",
  "rgb(136, 136, 136)",
  "rgb(161,   0,   0)",
  "rgb(178, 107,   0)",
  "rgb(178, 178,   0)",
  "rgb(  0,  97,   0)",
  "rgb(  0,  71, 178)",
  "rgb(107,  36, 178)",
  "rgb( 68,  68,  68)",
  "rgb( 92,   0,   0)",
  "rgb(102,  61,   0)",
  "rgb(102, 102,   0)",
  "rgb(  0,  55,   0)",
  "rgb(  0,  41, 102)",
  "rgb( 61,  20,  10)"
].map(function(color) {
  return {value: color};
});
var defaultItems = [
  {label: "Formats", type: "group", items: [
    {label: "Font", type: "font", items: [
      {label: "Sans Serif", value: "sans-serif", selected: true},
      {label: "Serif", value: "serif"},
      {label: "Monospace", value: "monospace"}
    ]},
    {label: "Size", type: "size", items: [
      {label: "Small", value: "10px"},
      {label: "Normal", value: "13px", selected: true},
      {label: "Large", value: "18px"},
      {label: "Huge", value: "32px"}
    ]},
    {label: "Alignment", type: "align", items: [
      {label: "", value: "", selected: true},
      {label: "", value: "center"},
      {label: "", value: "right"},
      {label: "", value: "justify"}
    ]}
  ]},
  {label: "Text", type: "group", items: [
    {type: "bold", label: "Bold"},
    {type: "italic", label: "Italic"},
    {type: "strike", label: "Strike"},
    {type: "underline", label: "Underline"},
    {type: "color", label: "Color", items: defaultColors},
    {type: "background", label: "Background color", items: defaultColors},
    {type: "link", label: "Link"}
  ]},
  {label: "Blocks", type: "group", items: [
    {type: "list", value: "bullet"},
    {type: "list", value: "ordered"}
  ]},
  {label: "Blocks", type: "group", items: [
    {type: "image", label: "Image"}
  ]}
];
var QuillToolbar = createReactClass({
  displayName: "Quill Toolbar",
  propTypes: {
    id: propTypes.string,
    className: propTypes.string,
    style: propTypes.object,
    items: propTypes.array
  },
  getDefaultProps: function() {
    return {
      items: defaultItems
    };
  },
  componentDidMount: function() {
    console.warn("QuillToolbar is deprecated. Consider switching to the official Quill toolbar format, or providing your own toolbar instead. See: https://github.com/zenoamaro/react-quill#upgrading-to-react-quill-v1-0-0");
  },
  shouldComponentUpdate: function(nextProps, nextState) {
    return !isEqual_1(nextProps, this.props);
  },
  renderGroup: function(item, key2) {
    return reactDomFactories.span({
      key: item.label || key2,
      className: "ql-formats"
    }, item.items.map(this.renderItem));
  },
  renderChoiceItem: function(item, key2) {
    return reactDomFactories.option({
      key: item.label || item.value || key2,
      value: item.value
    }, item.label);
  },
  renderChoices: function(item, key2) {
    var choiceItems = item.items.map(this.renderChoiceItem);
    var selectedItem = find_1(item.items, function(item2) {
      return item2.selected;
    });
    var attrs = {
      key: item.label || key2,
      title: item.label,
      className: "ql-" + item.type,
      value: selectedItem.value
    };
    return reactDomFactories.select(attrs, choiceItems);
  },
  renderButton: function(item, key2) {
    return reactDomFactories.button({
      type: "button",
      key: item.label || item.value || key2,
      value: item.value,
      className: "ql-" + item.type,
      title: item.label
    }, item.children);
  },
  renderAction: function(item, key2) {
    return reactDomFactories.button({
      key: item.label || item.value || key2,
      className: "ql-" + item.type,
      title: item.label
    }, item.children);
  },
  renderItem: function(item, key2) {
    switch (item.type) {
      case "group":
        return this.renderGroup(item, key2);
      case "font":
      case "header":
      case "align":
      case "size":
      case "color":
      case "background":
        return this.renderChoices(item, key2);
      case "bold":
      case "italic":
      case "underline":
      case "strike":
      case "link":
      case "list":
      case "bullet":
      case "ordered":
      case "indent":
      case "image":
      case "video":
        return this.renderButton(item, key2);
      default:
        return this.renderAction(item, key2);
    }
  },
  getClassName: function() {
    return "quill-toolbar " + (this.props.className || "");
  },
  render: function() {
    var children = this.props.items.map(this.renderItem);
    var html = children.map(server_browser.renderToStaticMarkup).join("");
    return reactDomFactories.div({
      id: this.props.id,
      className: this.getClassName(),
      style: this.props.style,
      dangerouslySetInnerHTML: {__html: html}
    });
  }
});
var toolbar = QuillToolbar;
QuillToolbar.defaultItems = defaultItems;
QuillToolbar.defaultColors = defaultColors;
var lib = component;
var _default = component;
var Quill_1 = quill;
var Mixin = mixin;
var Toolbar = toolbar;
lib.default = _default;
lib.Quill = Quill_1;
lib.Mixin = Mixin;
lib.Toolbar = Toolbar;
var quill_snow = `/*!
 * Quill Editor v1.3.7
 * https://quilljs.com/
 * Copyright (c) 2014, Jason Chen
 * Copyright (c) 2013, salesforce.com
 */
.ql-container {
  box-sizing: border-box;
  font-family: Helvetica, Arial, sans-serif;
  font-size: 13px;
  height: 100%;
  margin: 0px;
  position: relative;
}
.ql-container.ql-disabled .ql-tooltip {
  visibility: hidden;
}
.ql-container.ql-disabled .ql-editor ul[data-checked] > li::before {
  pointer-events: none;
}
.ql-clipboard {
  left: -100000px;
  height: 1px;
  overflow-y: hidden;
  position: absolute;
  top: 50%;
}
.ql-clipboard p {
  margin: 0;
  padding: 0;
}
.ql-editor {
  box-sizing: border-box;
  line-height: 1.42;
  height: 100%;
  outline: none;
  overflow-y: auto;
  padding: 12px 15px;
  tab-size: 4;
  -moz-tab-size: 4;
  text-align: left;
  white-space: pre-wrap;
  word-wrap: break-word;
}
.ql-editor > * {
  cursor: text;
}
.ql-editor p,
.ql-editor ol,
.ql-editor ul,
.ql-editor pre,
.ql-editor blockquote,
.ql-editor h1,
.ql-editor h2,
.ql-editor h3,
.ql-editor h4,
.ql-editor h5,
.ql-editor h6 {
  margin: 0;
  padding: 0;
  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;
}
.ql-editor ol,
.ql-editor ul {
  padding-left: 1.5em;
}
.ql-editor ol > li,
.ql-editor ul > li {
  list-style-type: none;
}
.ql-editor ul > li::before {
  content: '\\2022';
}
.ql-editor ul[data-checked=true],
.ql-editor ul[data-checked=false] {
  pointer-events: none;
}
.ql-editor ul[data-checked=true] > li *,
.ql-editor ul[data-checked=false] > li * {
  pointer-events: all;
}
.ql-editor ul[data-checked=true] > li::before,
.ql-editor ul[data-checked=false] > li::before {
  color: #777;
  cursor: pointer;
  pointer-events: all;
}
.ql-editor ul[data-checked=true] > li::before {
  content: '\\2611';
}
.ql-editor ul[data-checked=false] > li::before {
  content: '\\2610';
}
.ql-editor li::before {
  display: inline-block;
  white-space: nowrap;
  width: 1.2em;
}
.ql-editor li:not(.ql-direction-rtl)::before {
  margin-left: -1.5em;
  margin-right: 0.3em;
  text-align: right;
}
.ql-editor li.ql-direction-rtl::before {
  margin-left: 0.3em;
  margin-right: -1.5em;
}
.ql-editor ol li:not(.ql-direction-rtl),
.ql-editor ul li:not(.ql-direction-rtl) {
  padding-left: 1.5em;
}
.ql-editor ol li.ql-direction-rtl,
.ql-editor ul li.ql-direction-rtl {
  padding-right: 1.5em;
}
.ql-editor ol li {
  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;
  counter-increment: list-0;
}
.ql-editor ol li:before {
  content: counter(list-0, decimal) '. ';
}
.ql-editor ol li.ql-indent-1 {
  counter-increment: list-1;
}
.ql-editor ol li.ql-indent-1:before {
  content: counter(list-1, lower-alpha) '. ';
}
.ql-editor ol li.ql-indent-1 {
  counter-reset: list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;
}
.ql-editor ol li.ql-indent-2 {
  counter-increment: list-2;
}
.ql-editor ol li.ql-indent-2:before {
  content: counter(list-2, lower-roman) '. ';
}
.ql-editor ol li.ql-indent-2 {
  counter-reset: list-3 list-4 list-5 list-6 list-7 list-8 list-9;
}
.ql-editor ol li.ql-indent-3 {
  counter-increment: list-3;
}
.ql-editor ol li.ql-indent-3:before {
  content: counter(list-3, decimal) '. ';
}
.ql-editor ol li.ql-indent-3 {
  counter-reset: list-4 list-5 list-6 list-7 list-8 list-9;
}
.ql-editor ol li.ql-indent-4 {
  counter-increment: list-4;
}
.ql-editor ol li.ql-indent-4:before {
  content: counter(list-4, lower-alpha) '. ';
}
.ql-editor ol li.ql-indent-4 {
  counter-reset: list-5 list-6 list-7 list-8 list-9;
}
.ql-editor ol li.ql-indent-5 {
  counter-increment: list-5;
}
.ql-editor ol li.ql-indent-5:before {
  content: counter(list-5, lower-roman) '. ';
}
.ql-editor ol li.ql-indent-5 {
  counter-reset: list-6 list-7 list-8 list-9;
}
.ql-editor ol li.ql-indent-6 {
  counter-increment: list-6;
}
.ql-editor ol li.ql-indent-6:before {
  content: counter(list-6, decimal) '. ';
}
.ql-editor ol li.ql-indent-6 {
  counter-reset: list-7 list-8 list-9;
}
.ql-editor ol li.ql-indent-7 {
  counter-increment: list-7;
}
.ql-editor ol li.ql-indent-7:before {
  content: counter(list-7, lower-alpha) '. ';
}
.ql-editor ol li.ql-indent-7 {
  counter-reset: list-8 list-9;
}
.ql-editor ol li.ql-indent-8 {
  counter-increment: list-8;
}
.ql-editor ol li.ql-indent-8:before {
  content: counter(list-8, lower-roman) '. ';
}
.ql-editor ol li.ql-indent-8 {
  counter-reset: list-9;
}
.ql-editor ol li.ql-indent-9 {
  counter-increment: list-9;
}
.ql-editor ol li.ql-indent-9:before {
  content: counter(list-9, decimal) '. ';
}
.ql-editor .ql-indent-1:not(.ql-direction-rtl) {
  padding-left: 3em;
}
.ql-editor li.ql-indent-1:not(.ql-direction-rtl) {
  padding-left: 4.5em;
}
.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right {
  padding-right: 3em;
}
.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right {
  padding-right: 4.5em;
}
.ql-editor .ql-indent-2:not(.ql-direction-rtl) {
  padding-left: 6em;
}
.ql-editor li.ql-indent-2:not(.ql-direction-rtl) {
  padding-left: 7.5em;
}
.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right {
  padding-right: 6em;
}
.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right {
  padding-right: 7.5em;
}
.ql-editor .ql-indent-3:not(.ql-direction-rtl) {
  padding-left: 9em;
}
.ql-editor li.ql-indent-3:not(.ql-direction-rtl) {
  padding-left: 10.5em;
}
.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right {
  padding-right: 9em;
}
.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right {
  padding-right: 10.5em;
}
.ql-editor .ql-indent-4:not(.ql-direction-rtl) {
  padding-left: 12em;
}
.ql-editor li.ql-indent-4:not(.ql-direction-rtl) {
  padding-left: 13.5em;
}
.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right {
  padding-right: 12em;
}
.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right {
  padding-right: 13.5em;
}
.ql-editor .ql-indent-5:not(.ql-direction-rtl) {
  padding-left: 15em;
}
.ql-editor li.ql-indent-5:not(.ql-direction-rtl) {
  padding-left: 16.5em;
}
.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right {
  padding-right: 15em;
}
.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right {
  padding-right: 16.5em;
}
.ql-editor .ql-indent-6:not(.ql-direction-rtl) {
  padding-left: 18em;
}
.ql-editor li.ql-indent-6:not(.ql-direction-rtl) {
  padding-left: 19.5em;
}
.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right {
  padding-right: 18em;
}
.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right {
  padding-right: 19.5em;
}
.ql-editor .ql-indent-7:not(.ql-direction-rtl) {
  padding-left: 21em;
}
.ql-editor li.ql-indent-7:not(.ql-direction-rtl) {
  padding-left: 22.5em;
}
.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right {
  padding-right: 21em;
}
.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right {
  padding-right: 22.5em;
}
.ql-editor .ql-indent-8:not(.ql-direction-rtl) {
  padding-left: 24em;
}
.ql-editor li.ql-indent-8:not(.ql-direction-rtl) {
  padding-left: 25.5em;
}
.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right {
  padding-right: 24em;
}
.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right {
  padding-right: 25.5em;
}
.ql-editor .ql-indent-9:not(.ql-direction-rtl) {
  padding-left: 27em;
}
.ql-editor li.ql-indent-9:not(.ql-direction-rtl) {
  padding-left: 28.5em;
}
.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right {
  padding-right: 27em;
}
.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right {
  padding-right: 28.5em;
}
.ql-editor .ql-video {
  display: block;
  max-width: 100%;
}
.ql-editor .ql-video.ql-align-center {
  margin: 0 auto;
}
.ql-editor .ql-video.ql-align-right {
  margin: 0 0 0 auto;
}
.ql-editor .ql-bg-black {
  background-color: #000;
}
.ql-editor .ql-bg-red {
  background-color: #e60000;
}
.ql-editor .ql-bg-orange {
  background-color: #f90;
}
.ql-editor .ql-bg-yellow {
  background-color: #ff0;
}
.ql-editor .ql-bg-green {
  background-color: #008a00;
}
.ql-editor .ql-bg-blue {
  background-color: #06c;
}
.ql-editor .ql-bg-purple {
  background-color: #93f;
}
.ql-editor .ql-color-white {
  color: #fff;
}
.ql-editor .ql-color-red {
  color: #e60000;
}
.ql-editor .ql-color-orange {
  color: #f90;
}
.ql-editor .ql-color-yellow {
  color: #ff0;
}
.ql-editor .ql-color-green {
  color: #008a00;
}
.ql-editor .ql-color-blue {
  color: #06c;
}
.ql-editor .ql-color-purple {
  color: #93f;
}
.ql-editor .ql-font-serif {
  font-family: Georgia, Times New Roman, serif;
}
.ql-editor .ql-font-monospace {
  font-family: Monaco, Courier New, monospace;
}
.ql-editor .ql-size-small {
  font-size: 0.75em;
}
.ql-editor .ql-size-large {
  font-size: 1.5em;
}
.ql-editor .ql-size-huge {
  font-size: 2.5em;
}
.ql-editor .ql-direction-rtl {
  direction: rtl;
  text-align: inherit;
}
.ql-editor .ql-align-center {
  text-align: center;
}
.ql-editor .ql-align-justify {
  text-align: justify;
}
.ql-editor .ql-align-right {
  text-align: right;
}
.ql-editor.ql-blank::before {
  color: rgba(0,0,0,0.6);
  content: attr(data-placeholder);
  font-style: italic;
  left: 15px;
  pointer-events: none;
  position: absolute;
  right: 15px;
}
.ql-snow.ql-toolbar:after,
.ql-snow .ql-toolbar:after {
  clear: both;
  content: '';
  display: table;
}
.ql-snow.ql-toolbar button,
.ql-snow .ql-toolbar button {
  background: none;
  border: none;
  cursor: pointer;
  display: inline-block;
  float: left;
  height: 24px;
  padding: 3px 5px;
  width: 28px;
}
.ql-snow.ql-toolbar button svg,
.ql-snow .ql-toolbar button svg {
  float: left;
  height: 100%;
}
.ql-snow.ql-toolbar button:active:hover,
.ql-snow .ql-toolbar button:active:hover {
  outline: none;
}
.ql-snow.ql-toolbar input.ql-image[type=file],
.ql-snow .ql-toolbar input.ql-image[type=file] {
  display: none;
}
.ql-snow.ql-toolbar button:hover,
.ql-snow .ql-toolbar button:hover,
.ql-snow.ql-toolbar button:focus,
.ql-snow .ql-toolbar button:focus,
.ql-snow.ql-toolbar button.ql-active,
.ql-snow .ql-toolbar button.ql-active,
.ql-snow.ql-toolbar .ql-picker-label:hover,
.ql-snow .ql-toolbar .ql-picker-label:hover,
.ql-snow.ql-toolbar .ql-picker-label.ql-active,
.ql-snow .ql-toolbar .ql-picker-label.ql-active,
.ql-snow.ql-toolbar .ql-picker-item:hover,
.ql-snow .ql-toolbar .ql-picker-item:hover,
.ql-snow.ql-toolbar .ql-picker-item.ql-selected,
.ql-snow .ql-toolbar .ql-picker-item.ql-selected {
  color: #06c;
}
.ql-snow.ql-toolbar button:hover .ql-fill,
.ql-snow .ql-toolbar button:hover .ql-fill,
.ql-snow.ql-toolbar button:focus .ql-fill,
.ql-snow .ql-toolbar button:focus .ql-fill,
.ql-snow.ql-toolbar button.ql-active .ql-fill,
.ql-snow .ql-toolbar button.ql-active .ql-fill,
.ql-snow.ql-toolbar .ql-picker-label:hover .ql-fill,
.ql-snow .ql-toolbar .ql-picker-label:hover .ql-fill,
.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-fill,
.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-fill,
.ql-snow.ql-toolbar .ql-picker-item:hover .ql-fill,
.ql-snow .ql-toolbar .ql-picker-item:hover .ql-fill,
.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-fill,
.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-fill,
.ql-snow.ql-toolbar button:hover .ql-stroke.ql-fill,
.ql-snow .ql-toolbar button:hover .ql-stroke.ql-fill,
.ql-snow.ql-toolbar button:focus .ql-stroke.ql-fill,
.ql-snow .ql-toolbar button:focus .ql-stroke.ql-fill,
.ql-snow.ql-toolbar button.ql-active .ql-stroke.ql-fill,
.ql-snow .ql-toolbar button.ql-active .ql-stroke.ql-fill,
.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,
.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,
.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,
.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,
.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,
.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,
.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,
.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill {
  fill: #06c;
}
.ql-snow.ql-toolbar button:hover .ql-stroke,
.ql-snow .ql-toolbar button:hover .ql-stroke,
.ql-snow.ql-toolbar button:focus .ql-stroke,
.ql-snow .ql-toolbar button:focus .ql-stroke,
.ql-snow.ql-toolbar button.ql-active .ql-stroke,
.ql-snow .ql-toolbar button.ql-active .ql-stroke,
.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke,
.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke,
.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke,
.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke,
.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke,
.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke,
.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke,
.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke,
.ql-snow.ql-toolbar button:hover .ql-stroke-miter,
.ql-snow .ql-toolbar button:hover .ql-stroke-miter,
.ql-snow.ql-toolbar button:focus .ql-stroke-miter,
.ql-snow .ql-toolbar button:focus .ql-stroke-miter,
.ql-snow.ql-toolbar button.ql-active .ql-stroke-miter,
.ql-snow .ql-toolbar button.ql-active .ql-stroke-miter,
.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke-miter,
.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke-miter,
.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,
.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,
.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke-miter,
.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke-miter,
.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,
.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter {
  stroke: #06c;
}
@media (pointer: coarse) {
  .ql-snow.ql-toolbar button:hover:not(.ql-active),
  .ql-snow .ql-toolbar button:hover:not(.ql-active) {
    color: #444;
  }
  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-fill,
  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-fill,
  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill,
  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill {
    fill: #444;
  }
  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke,
  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke,
  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter,
  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter {
    stroke: #444;
  }
}
.ql-snow {
  box-sizing: border-box;
}
.ql-snow * {
  box-sizing: border-box;
}
.ql-snow .ql-hidden {
  display: none;
}
.ql-snow .ql-out-bottom,
.ql-snow .ql-out-top {
  visibility: hidden;
}
.ql-snow .ql-tooltip {
  position: absolute;
  transform: translateY(10px);
}
.ql-snow .ql-tooltip a {
  cursor: pointer;
  text-decoration: none;
}
.ql-snow .ql-tooltip.ql-flip {
  transform: translateY(-10px);
}
.ql-snow .ql-formats {
  display: inline-block;
  vertical-align: middle;
}
.ql-snow .ql-formats:after {
  clear: both;
  content: '';
  display: table;
}
.ql-snow .ql-stroke {
  fill: none;
  stroke: #444;
  stroke-linecap: round;
  stroke-linejoin: round;
  stroke-width: 2;
}
.ql-snow .ql-stroke-miter {
  fill: none;
  stroke: #444;
  stroke-miterlimit: 10;
  stroke-width: 2;
}
.ql-snow .ql-fill,
.ql-snow .ql-stroke.ql-fill {
  fill: #444;
}
.ql-snow .ql-empty {
  fill: none;
}
.ql-snow .ql-even {
  fill-rule: evenodd;
}
.ql-snow .ql-thin,
.ql-snow .ql-stroke.ql-thin {
  stroke-width: 1;
}
.ql-snow .ql-transparent {
  opacity: 0.4;
}
.ql-snow .ql-direction svg:last-child {
  display: none;
}
.ql-snow .ql-direction.ql-active svg:last-child {
  display: inline;
}
.ql-snow .ql-direction.ql-active svg:first-child {
  display: none;
}
.ql-snow .ql-editor h1 {
  font-size: 2em;
}
.ql-snow .ql-editor h2 {
  font-size: 1.5em;
}
.ql-snow .ql-editor h3 {
  font-size: 1.17em;
}
.ql-snow .ql-editor h4 {
  font-size: 1em;
}
.ql-snow .ql-editor h5 {
  font-size: 0.83em;
}
.ql-snow .ql-editor h6 {
  font-size: 0.67em;
}
.ql-snow .ql-editor a {
  text-decoration: underline;
}
.ql-snow .ql-editor blockquote {
  border-left: 4px solid #ccc;
  margin-bottom: 5px;
  margin-top: 5px;
  padding-left: 16px;
}
.ql-snow .ql-editor code,
.ql-snow .ql-editor pre {
  background-color: #f0f0f0;
  border-radius: 3px;
}
.ql-snow .ql-editor pre {
  white-space: pre-wrap;
  margin-bottom: 5px;
  margin-top: 5px;
  padding: 5px 10px;
}
.ql-snow .ql-editor code {
  font-size: 85%;
  padding: 2px 4px;
}
.ql-snow .ql-editor pre.ql-syntax {
  background-color: #23241f;
  color: #f8f8f2;
  overflow: visible;
}
.ql-snow .ql-editor img {
  max-width: 100%;
}
.ql-snow .ql-picker {
  color: #444;
  display: inline-block;
  float: left;
  font-size: 14px;
  font-weight: 500;
  height: 24px;
  position: relative;
  vertical-align: middle;
}
.ql-snow .ql-picker-label {
  cursor: pointer;
  display: inline-block;
  height: 100%;
  padding-left: 8px;
  padding-right: 2px;
  position: relative;
  width: 100%;
}
.ql-snow .ql-picker-label::before {
  display: inline-block;
  line-height: 22px;
}
.ql-snow .ql-picker-options {
  background-color: #fff;
  display: none;
  min-width: 100%;
  padding: 4px 8px;
  position: absolute;
  white-space: nowrap;
}
.ql-snow .ql-picker-options .ql-picker-item {
  cursor: pointer;
  display: block;
  padding-bottom: 5px;
  padding-top: 5px;
}
.ql-snow .ql-picker.ql-expanded .ql-picker-label {
  color: #ccc;
  z-index: 2;
}
.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-fill {
  fill: #ccc;
}
.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-stroke {
  stroke: #ccc;
}
.ql-snow .ql-picker.ql-expanded .ql-picker-options {
  display: block;
  margin-top: -1px;
  top: 100%;
  z-index: 1;
}
.ql-snow .ql-color-picker,
.ql-snow .ql-icon-picker {
  width: 28px;
}
.ql-snow .ql-color-picker .ql-picker-label,
.ql-snow .ql-icon-picker .ql-picker-label {
  padding: 2px 4px;
}
.ql-snow .ql-color-picker .ql-picker-label svg,
.ql-snow .ql-icon-picker .ql-picker-label svg {
  right: 4px;
}
.ql-snow .ql-icon-picker .ql-picker-options {
  padding: 4px 0px;
}
.ql-snow .ql-icon-picker .ql-picker-item {
  height: 24px;
  width: 24px;
  padding: 2px 4px;
}
.ql-snow .ql-color-picker .ql-picker-options {
  padding: 3px 5px;
  width: 152px;
}
.ql-snow .ql-color-picker .ql-picker-item {
  border: 1px solid transparent;
  float: left;
  height: 16px;
  margin: 2px;
  padding: 0px;
  width: 16px;
}
.ql-snow .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg {
  position: absolute;
  margin-top: -9px;
  right: 0;
  top: 50%;
  width: 18px;
}
.ql-snow .ql-picker.ql-header .ql-picker-label[data-label]:not([data-label=''])::before,
.ql-snow .ql-picker.ql-font .ql-picker-label[data-label]:not([data-label=''])::before,
.ql-snow .ql-picker.ql-size .ql-picker-label[data-label]:not([data-label=''])::before,
.ql-snow .ql-picker.ql-header .ql-picker-item[data-label]:not([data-label=''])::before,
.ql-snow .ql-picker.ql-font .ql-picker-item[data-label]:not([data-label=''])::before,
.ql-snow .ql-picker.ql-size .ql-picker-item[data-label]:not([data-label=''])::before {
  content: attr(data-label);
}
.ql-snow .ql-picker.ql-header {
  width: 98px;
}
.ql-snow .ql-picker.ql-header .ql-picker-label::before,
.ql-snow .ql-picker.ql-header .ql-picker-item::before {
  content: 'Normal';
}
.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="1"]::before,
.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="1"]::before {
  content: 'Heading 1';
}
.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="2"]::before,
.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="2"]::before {
  content: 'Heading 2';
}
.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="3"]::before,
.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="3"]::before {
  content: 'Heading 3';
}
.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="4"]::before,
.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="4"]::before {
  content: 'Heading 4';
}
.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="5"]::before,
.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="5"]::before {
  content: 'Heading 5';
}
.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="6"]::before,
.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="6"]::before {
  content: 'Heading 6';
}
.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="1"]::before {
  font-size: 2em;
}
.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="2"]::before {
  font-size: 1.5em;
}
.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="3"]::before {
  font-size: 1.17em;
}
.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="4"]::before {
  font-size: 1em;
}
.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="5"]::before {
  font-size: 0.83em;
}
.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="6"]::before {
  font-size: 0.67em;
}
.ql-snow .ql-picker.ql-font {
  width: 108px;
}
.ql-snow .ql-picker.ql-font .ql-picker-label::before,
.ql-snow .ql-picker.ql-font .ql-picker-item::before {
  content: 'Sans Serif';
}
.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=serif]::before,
.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {
  content: 'Serif';
}
.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=monospace]::before,
.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {
  content: 'Monospace';
}
.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {
  font-family: Georgia, Times New Roman, serif;
}
.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {
  font-family: Monaco, Courier New, monospace;
}
.ql-snow .ql-picker.ql-size {
  width: 98px;
}
.ql-snow .ql-picker.ql-size .ql-picker-label::before,
.ql-snow .ql-picker.ql-size .ql-picker-item::before {
  content: 'Normal';
}
.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=small]::before,
.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before {
  content: 'Small';
}
.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=large]::before,
.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before {
  content: 'Large';
}
.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=huge]::before,
.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {
  content: 'Huge';
}
.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before {
  font-size: 10px;
}
.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before {
  font-size: 18px;
}
.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {
  font-size: 32px;
}
.ql-snow .ql-color-picker.ql-background .ql-picker-item {
  background-color: #fff;
}
.ql-snow .ql-color-picker.ql-color .ql-picker-item {
  background-color: #000;
}
.ql-toolbar.ql-snow {
  border: 1px solid #ccc;
  box-sizing: border-box;
  font-family: 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;
  padding: 8px;
}
.ql-toolbar.ql-snow .ql-formats {
  margin-right: 15px;
}
.ql-toolbar.ql-snow .ql-picker-label {
  border: 1px solid transparent;
}
.ql-toolbar.ql-snow .ql-picker-options {
  border: 1px solid transparent;
  box-shadow: rgba(0,0,0,0.2) 0 2px 8px;
}
.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-label {
  border-color: #ccc;
}
.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-options {
  border-color: #ccc;
}
.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item.ql-selected,
.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item:hover {
  border-color: #000;
}
.ql-toolbar.ql-snow + .ql-container.ql-snow {
  border-top: 0px;
}
.ql-snow .ql-tooltip {
  background-color: #fff;
  border: 1px solid #ccc;
  box-shadow: 0px 0px 5px #ddd;
  color: #444;
  padding: 5px 12px;
  white-space: nowrap;
}
.ql-snow .ql-tooltip::before {
  content: "Visit URL:";
  line-height: 26px;
  margin-right: 8px;
}
.ql-snow .ql-tooltip input[type=text] {
  display: none;
  border: 1px solid #ccc;
  font-size: 13px;
  height: 26px;
  margin: 0px;
  padding: 3px 5px;
  width: 170px;
}
.ql-snow .ql-tooltip a.ql-preview {
  display: inline-block;
  max-width: 200px;
  overflow-x: hidden;
  text-overflow: ellipsis;
  vertical-align: top;
}
.ql-snow .ql-tooltip a.ql-action::after {
  border-right: 1px solid #ccc;
  content: 'Edit';
  margin-left: 16px;
  padding-right: 8px;
}
.ql-snow .ql-tooltip a.ql-remove::before {
  content: 'Remove';
  margin-left: 8px;
}
.ql-snow .ql-tooltip a {
  line-height: 26px;
}
.ql-snow .ql-tooltip.ql-editing a.ql-preview,
.ql-snow .ql-tooltip.ql-editing a.ql-remove {
  display: none;
}
.ql-snow .ql-tooltip.ql-editing input[type=text] {
  display: inline-block;
}
.ql-snow .ql-tooltip.ql-editing a.ql-action::after {
  border-right: 0px;
  content: 'Save';
  padding-right: 0px;
}
.ql-snow .ql-tooltip[data-mode=link]::before {
  content: "Enter link:";
}
.ql-snow .ql-tooltip[data-mode=formula]::before {
  content: "Enter formula:";
}
.ql-snow .ql-tooltip[data-mode=video]::before {
  content: "Enter video:";
}
.ql-snow a {
  color: #06c;
}
.ql-container.ql-snow {
  border: 1px solid #ccc;
}
`;
const LiensUtilesMgt = (props) => {
  const [text, settext] = react.useState("");
  const b = 0;
  react.useEffect(async () => {
    await axios({
      method: "GET",
      url: "/data/infosutils/get"
    }).then((response) => {
      settext(response.data.infos);
    });
  }, [b]);
  const postdata = async () => {
    await axios({
      method: "PUT",
      url: "/data/infosutils/put",
      data: {
        text
      }
    });
  };
  return /* @__PURE__ */ react.createElement("div", {
    className: "GestionsUtils"
  }, /* @__PURE__ */ react.createElement("section", {
    className: "head"
  }, /* @__PURE__ */ react.createElement("button", {
    className: "btn",
    onClick: postdata
  }, "enregistrer"), /* @__PURE__ */ react.createElement(PagesTitle, {
    title: "Liens utiles"
  })), /* @__PURE__ */ react.createElement("section", {
    className: "content"
  }, /* @__PURE__ */ react.createElement("div", {
    className: "preview"
  }, /* @__PURE__ */ react.createElement("h1", {
    className: "utilsName"
  }, "Liens utiles"), /* @__PURE__ */ react.createElement("div", {
    className: "render",
    id: "UtilsRendering",
    dangerouslySetInnerHTML: {__html: text}
  })), /* @__PURE__ */ react.createElement("div", {
    className: "writing"
  }, /* @__PURE__ */ react.createElement(lib, {
    value: text,
    onChange: (value) => settext(value)
  }))));
};
document.querySelector("body").getAttribute("data-root-url");
class Time extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      date: ""
    };
  }
  async componentDidMount() {
    this.tick();
    this.timerID = setInterval(() => this.tick(), 1e3);
  }
  tick() {
    var d = dateformat(new Date(), "HH:MM:ss");
    this.setState({date: d});
  }
  componentWillUnmount() {
    clearInterval(this.timerID);
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "time"
    }, /* @__PURE__ */ react.createElement("h3", null, this.state.date));
  }
}
class ErrorBoundary extends react.Component {
  componentDidCatch(error, errorInfo) {
    console.log(error, errorInfo);
  }
  render() {
    return this.props.children;
  }
}
function Layout() {
  const [dimentions, setDimentions] = react.useState({width: 0, height: 0});
  const [minView, setminView] = react.useState(false);
  const [bugPopup, openPopup] = react.useState(false);
  const [menuOpened, openMenu] = react.useState(false);
  const [service, setService] = react.useState(false);
  const [user, setUser] = react.useState({});
  const [style, setStyle] = react.useState(null);
  const [perm, setPerm] = react.useState({});
  react.useState(false);
  const dispatch = useNotifications();
  react.useEffect(async () => {
    let req = await axios({
      url: "/data/getperm",
      method: "get"
    });
    setPerm(req.data.perm);
    setUser(req.data.user);
    setStyle("background-image:" + (req.data.user.bg_img === null ? "none" : "url(/storage/user_background/" + req.data.user.id + "/" + req.data.user.bg_img + ");"));
    updateWindowDimensions();
    window.addEventListener("resize", updateWindowDimensions);
    const timerID = setInterval(() => tick(), 5 * 60 * 1e3);
    Pusher.logToConsole = false;
    let pusher = new Pusher("fd78f74e8faecbd2405b", {
      cluster: "eu"
    });
    let userChan = pusher.subscribe("UserChannel_" + req.data.user.id + "_" + env);
    userChan.bind("notify", (data) => {
      addNotification(data);
    });
    let BroadCastChan = pusher.subscribe("Broadcater_" + env);
    BroadCastChan.bind("notify", (data) => {
      addNotification(data);
    });
    return () => {
      window.removeEventListener("resize", updateWindowDimensions);
      clearInterval(timerID);
    };
  }, []);
  const tick = async () => {
    await axios({
      url: "/data/check/connexion",
      method: "GET"
    }).then((response) => {
      if (!response.data.session) {
        window.location.replace("/login");
      }
    }).catch((error) => {
      if (error.response.status === 503) {
        window.location.replace("/maintenance");
      }
    });
  };
  const updateWindowDimensions = () => {
    setDimentions({width: window.innerWidth, height: window.innerHeight});
    if (window.innerWidth < 1100) {
      setminView(true);
    } else {
      setminView(false);
    }
  };
  const addNotification = (data) => {
    if (!data.type) {
      data.type = "warning";
    }
    let payload = {};
    switch (data.type) {
      case 1:
        payload = {
          id: v4(),
          type: "success",
          message: data.text
        };
        break;
      case 2:
        payload = {
          id: v4(),
          type: "info",
          message: data.text
        };
        break;
      case 3:
        payload = {
          id: v4(),
          type: "warning",
          message: data.text
        };
        break;
      case 4:
        payload = {
          id: v4(),
          type: "danger",
          message: data.text
        };
        break;
    }
    dispatch({
      type: "ADD_NOTIFICATION",
      payload: {
        id: payload.id,
        type: payload.type,
        message: payload.message
      }
    });
  };
  return /* @__PURE__ */ react.createElement("div", {
    id: "layout"
  }, /* @__PURE__ */ react.createElement("style", {
    dangerouslySetInnerHTML: {__html: "#layout::before{" + style + "}"}
  }), /* @__PURE__ */ react.createElement("div", {
    id: "Menu",
    className: minView ? menuOpened ? "open collapsed" : "close collapsed" : null
  }, /* @__PURE__ */ react.createElement("div", {
    className: "closed-menu"
  }, /* @__PURE__ */ react.createElement("button", {
    onClick: () => {
      openMenu(true);
    }
  }, "Menu")), /* @__PURE__ */ react.createElement("div", {
    className: "menu-content"
  }, /* @__PURE__ */ react.createElement("div", {
    id: "logout"
  }, /* @__PURE__ */ react.createElement("a", {
    href: "/logout"
  }, /* @__PURE__ */ react.createElement("img", {
    src: "/assets/images/logout.svg",
    alt: ""
  }))), /* @__PURE__ */ react.createElement(Time, null), /* @__PURE__ */ react.createElement("div", {
    id: "Close"
  }, /* @__PURE__ */ react.createElement("button", {
    onClick: () => {
      openMenu(false);
    }
  }, "fermer")), /* @__PURE__ */ react.createElement("div", {
    id: "Logo"
  }, /* @__PURE__ */ react.createElement(NavLink, {
    to: "/"
  }, /* @__PURE__ */ react.createElement("img", {
    src: "/assets/images/BCFD.svg",
    alt: ""
  }))), /* @__PURE__ */ react.createElement("div", {
    className: "Menusepartor"
  }), /* @__PURE__ */ react.createElement(Service, {
    serviceUpade: async (state) => {
      setService(state);
    }
  }), /* @__PURE__ */ react.createElement("div", {
    className: "Menusepartor"
  }), /* @__PURE__ */ react.createElement("div", {
    className: "navigation"
  }, /* @__PURE__ */ react.createElement(Patient, {
    service,
    perm
  }), /* @__PURE__ */ react.createElement(Personnel, {
    service,
    perm,
    user
  }), /* @__PURE__ */ react.createElement(Gestion, {
    perm
  })), /* @__PURE__ */ react.createElement("div", {
    className: "Menusepartor"
  }), /* @__PURE__ */ react.createElement("div", {
    className: "bugreportter"
  }, /* @__PURE__ */ react.createElement("button", {
    className: "btn",
    onClick: () => {
      openPopup(true);
    }
  }, "Signaler un bug")), /* @__PURE__ */ react.createElement("div", {
    className: "Menusepartor"
  }), /* @__PURE__ */ react.createElement("div", {
    className: "Copyright"
  }, /* @__PURE__ */ react.createElement("p", null, "Design & d\xE9veloppement Simon Lou - Copyright \xA9")))), /* @__PURE__ */ react.createElement("div", {
    id: "content",
    style: {filter: bugPopup ? "blur(5px)" : "none"}
  }, /* @__PURE__ */ react.createElement(PermsContext.Provider, {
    value: perm
  }, /* @__PURE__ */ react.createElement(Route, {
    exact: true,
    path: "/",
    component: Main
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/bugrepport",
    component: BugRepport
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/patient/rapport",
    component: Rapport
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/patient/blackcode",
    component: BCController
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/patient/dossiers",
    component: RecherchePatient
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/personnel/service",
    component: Services
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/personnel/factures",
    component: Factures
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/personnel/informations",
    component: Informations
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/personnel/moncompte",
    component: MonCompte
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/personnel/livret",
    component: FormationsController
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/personnel/vols",
    component: CarnetVol
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/personnel/remboursement",
    component: Remboursement
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/gestion/rapport",
    component: RapportHoraire
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/gestion/content",
    component: ContentManagement
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/gestion/personnel",
    component: PersonnelList
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/gestion/log",
    component: Logs
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/gestion/formation",
    component: AFormaController
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/gestion/informations",
    component: InfoGestion
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/gestion/perm",
    component: Permissions
  }), /* @__PURE__ */ react.createElement(Route, {
    path: "/gestion/utils",
    component: LiensUtilesMgt
  }))), bugPopup && /* @__PURE__ */ react.createElement(BugRepport, {
    close: () => openPopup(false)
  }));
}
var app = `@charset "UTF-8";
h1 {
  font-family: "Baloo Thambi 2", serif;
  font-weight: 800;
  font-size: 30px;
  color: #00FFFF;
}

h2 {
  font-family: "Baloo Thambi 2", serif;
  font-weight: 700;
  font-size: 25px;
  color: #00FFFF;
}

h3 {
  font-family: "Baloo Thambi 2", serif;
  font-weight: 600;
  font-size: 20px;
  color: #00FFFF;
}

h4 {
  font-family: "Baloo Thambi 2", serif;
  font-weight: 500;
  font-size: 20px;
  color: #00FFFF;
}

h5 {
  font-family: "Baloo Thambi 2", serif;
  font-weight: 400;
  font-size: 18px;
  color: #00FFFF;
}

h6 {
  font-family: "Baloo Thambi 2", serif;
  font-weight: 300;
  font-size: 15px;
  color: #00FFFF;
}

h1, h2, h3, h4, h5, h6 {
  margin: 0 0;
}

input, select, textarea {
  color: #00FFFF;
  background-color: #004662;
  margin: 10px 0;
  font-size: 20px;
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 500;
  box-shadow: none;
  border: none;
  border-radius: 30px;
  padding: 10px;
}
input::placeholder, select::placeholder, textarea::placeholder {
  color: #00FFFF;
}
input:-webkit-autofill, select:-webkit-autofill, textarea:-webkit-autofill {
  background-color: #004662 !important;
  color: #00FFFF !important;
}

a, p, label {
  color: #00FFFF;
  font-family: "Baloo Thambi 2", monospace;
  font-weight: normal;
  font-size: 20px;
}

.Title {
  font-size: 35px;
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 900;
  text-align: center;
  margin-bottom: 10px;
}

a {
  text-decoration: none;
}

.Form-Line {
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: center;
}

.form-error p {
  color: #FF0000;
  margin: 0;
}

.TableBottom {
  background-color: #004662;
  width: 100%;
  height: 100px;
  position: sticky;
  bottom: 0;
  border-top: 1px #0c2646 solid;
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: space-between;
  z-index: 10;
}
.TableBottom .searsh {
  display: flex;
}
.TableBottom .searsh input {
  margin: auto 20px;
  background-color: #0c2646;
}
.TableBottom .pages {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  padding-right: 30px;
}
.TableBottom .pages button {
  background-color: #0c2646;
  border-radius: 20px;
  font-size: 30px;
  font-weight: 700;
  border: none;
  color: #00FFFF;
  margin: auto 0;
  font-family: "Baloo Thambi 2", monospace;
  padding: 5px 20px;
  cursor: pointer;
  transition: all 500ms;
}
.TableBottom .pages button:hover {
  transform: scale(1.2) rotate(5deg);
}
.TableBottom .pages h5 {
  font-size: 30px;
  font-weight: 700;
  margin: auto 10px;
}

.title-contain {
  background-color: #0c2646;
  border-radius: 30px;
  padding: 5px;
}
.title-contain h1 {
  font-size: 58px;
  padding: 5px;
}

.beta {
  width: 70px;
  height: 45px;
  border: 1px #FFa500 solid;
  background-color: rgba(255, 140, 0, 0.1);
  display: flex;
  border-radius: 40px;
}
.beta:after {
  padding: 7px;
  margin: auto;
  font-size: 20px;
  font-family: "Baloo Thambi 2", monospace;
  content: "b\xEAta";
  color: #FFa500;
}

.btn {
  height: fit-content;
  width: fit-content;
  padding: 10px 20px;
  background-color: #004662;
  color: #00FFFF;
  border-radius: 30px;
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 600;
  font-size: 25px;
  border: none;
  cursor: pointer;
  transition: 400ms cubic-bezier(0.28, -0.46, 0.33, 1.5);
}
.btn:hover {
  -webkit-transform: scale(1.2);
}
.btn:disabled {
  opacity: 0.7;
  transition: none;
  cursor: default;
  animation: none;
}
.btn:disabled:hover {
  transform: none;
}

.pilote-btn {
  /*Button is :CHECKED*/
  /*shared*/
  /*'un':checked state*/
  /* pesduo class on toggle */
}
.pilote-btn input[type=checkbox]:disabled ~ div {
  box-shadow: none;
  opacity: 0.7;
}
.pilote-btn *::before, .pilote-btn *::after {
  transition: 400ms all ease-in-out 50ms;
  box-sizing: border-box;
  backface-visibility: hidden;
}
.pilote-btn input[type=checkbox]:checked ~ div {
  background: #49a844;
  box-shadow: 0 0 2px #49a844;
}
.pilote-btn input[type=checkbox]:checked ~ div label {
  transform: translate(60px);
}
.pilote-btn input[type=checkbox] ~ div label {
  transition: 300ms all ease-in-out 50ms;
}
.pilote-btn div,
.pilote-btn label {
  border-radius: 50px;
}
.pilote-btn input[type=checkbox] {
  display: none;
}
.pilote-btn div {
  height: 40px;
  width: 80px;
  background: #2b2b2b;
  position: relative;
  top: 0;
  left: calc(50% - 35px);
  box-shadow: 0 0 2px #2b2b2b;
}
.pilote-btn label {
  height: 40px;
  width: 40px;
  background: white;
  position: absolute;
  top: 0;
  left: -15px;
  cursor: pointer;
}
.pilote-btn label::before {
  content: "";
  height: 60px;
  width: 5px;
  position: absolute;
  top: calc(50% - 30px);
  left: calc(50% - 2.5px);
  transform: rotate(45deg);
}
.pilote-btn label::after {
  content: "";
  height: 5px;
  width: 60px;
  position: absolute;
  top: calc(50% - 2.5px);
  left: calc(50% - 30px);
  transform: rotate(45deg);
}
.pilote-btn label::before,
.pilote-btn label::after {
  background: #2b2b2b;
  border-radius: 5px;
}
.pilote-btn input[type=checkbox]:checked ~ div label::before {
  height: 32px;
  top: calc(55% - 19px);
  left: calc(60% + 2px);
  background: #49a844;
}
.pilote-btn input[type=checkbox]:checked ~ div label::after {
  width: 21px;
  top: calc(95% - 17px);
  left: calc(22.5% - 7px);
  background: #49a844;
}

.switch-container {
  display: flex;
  margin: auto auto;
  z-index: 1;
}
.switch-container .payed_switch {
  height: 0;
  width: 0;
  visibility: hidden;
}
.switch-container .payed_switch:disabled + .payed_switchLabel {
  box-shadow: none;
  opacity: 0.7;
}
.switch-container .payed_switchLabel {
  z-index: 1;
  margin: auto auto;
  cursor: pointer;
  text-indent: -9999px;
  width: 100px;
  height: 30px;
  background: #FF0000;
  box-shadow: 0 0 20px 7px #FF0000;
  display: block;
  border-radius: 100px;
  position: relative;
  transition: 400ms cubic-bezier(0.28, -0.46, 0.33, 1.5);
}
.switch-container .payed_switchLabel::after {
  z-index: 1;
  content: " ";
  position: absolute;
  top: -5px;
  left: -5px;
  width: 40px;
  height: 40px;
  background: #222;
  border-radius: 90px;
  transition: 400ms cubic-bezier(0.28, -0.46, 0.33, 1.5);
}
.switch-container .payed_switch:checked + .payed_switchLabel {
  background: #00FF00;
  box-shadow: 0 0 20px 7px #00FF00;
  z-index: 1;
}
.switch-container .payed_switch:checked + .payed_switchLabel:after {
  left: calc(100% + 5px);
  transform: translateX(-100%);
  z-index: 1;
}
.switch-container .payed_switchLabel:active:after {
  width: 40px;
  z-index: 1;
}

.onoffswitch {
  position: relative;
  width: 120px;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}
.onoffswitch .onoffswitch-checkbox {
  position: absolute;
  opacity: 0;
  pointer-events: none;
}
.onoffswitch .onoffswitch-label {
  display: block;
  overflow: hidden;
  cursor: pointer;
  border-radius: 30px;
}
.onoffswitch .onoffswitch-inner {
  display: block;
  width: 200%;
  margin-left: -100%;
  transition: 400ms cubic-bezier(0.28, -0.46, 0.33, 1.5);
}
.onoffswitch .onoffswitch-inner:before, .onoffswitch .onoffswitch-inner:after {
  display: block;
  float: left;
  width: 50%;
  height: 40px;
  padding: 0;
  line-height: 35px;
  font-size: 20px;
  color: #004662;
  font-family: "Baloo Thambi 2", monospace;
  font-weight: bold;
  box-sizing: border-box;
  border: 2px solid transparent;
}
.onoffswitch .onoffswitch-inner:before {
  content: "OUI";
  padding-left: 20px;
  background-color: #2DF037;
  color: #0c2646;
}
.onoffswitch .onoffswitch-inner:after {
  content: "NON";
  padding-right: 20px;
  background-color: #DB1B1B;
  color: #0c2646;
  text-align: right;
}
.onoffswitch .onoffswitch-switch {
  display: block;
  width: 50px;
  margin: 0;
  height: 50px;
  background: #004662;
  border-radius: 30px;
  position: absolute;
  top: -5px;
  bottom: 0;
  right: 80px;
  transition: 300ms cubic-bezier(0.28, -0.46, 0.33, 1.5);
}
.onoffswitch .onoffswitch-checkbox:checked + .onoffswitch-label .onoffswitch-inner {
  margin-left: 0;
}
.onoffswitch .onoffswitch-checkbox:checked + .onoffswitch-label .onoffswitch-switch {
  right: -5px;
}

@keyframes SlideLeft {
  0% {
    margin-left: 120%;
  }
  100% {
    margin-left: 0;
  }
}
@keyframes SlideRight {
  0% {
    margin-left: 0;
  }
  100% {
    margin-left: 120%;
  }
}
.notification-wrapper {
  position: fixed;
  height: 100vh;
  top: 10px;
  right: 10px;
  width: 350px;
  pointer-events: none;
  z-index: 15;
}
.notification-wrapper .notification-item {
  padding: 5px 10px;
  min-height: 65px;
  pointer-events: all;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3), 1px 3px 4px rgba(0, 0, 0, 0.2);
  border-radius: 10px;
  overflow: hidden;
  margin-bottom: 20px;
  animation: SlideLeft 0.4s;
  animation-fill-mode: forwards;
  width: 90%;
  cursor: pointer;
}
.notification-wrapper .notification-item p {
  color: #fff;
  max-width: calc(100% - 15px);
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 600;
  font-size: 22px;
  line-height: 100%;
  word-wrap: break-word;
  margin-top: 10px;
}
.notification-wrapper .danger {
  background-color: #e3342f;
  border-left: 8px solid #bd1120;
}
.notification-wrapper .warning {
  background-color: #f6993f;
  border-left: 8px solid #b06319;
}
.notification-wrapper .info {
  background-color: #9561e2;
  border-left: 8px solid #5b20b3;
}
.notification-wrapper .success {
  background-color: #38c172;
  border-left: 8px solid #118c45;
}
.notification-wrapper .exit {
  animation: SlideRight 0.4s;
  animation-fill-mode: forwards;
}
.notification-wrapper .undefined {
  display: none;
}

.bar {
  background-color: #0c2646;
  width: 100%;
  margin-top: 10px;
  border-radius: 20px;
}
.bar .bar--filler {
  height: 10px !important;
  background-color: #004662;
  border-radius: 20px;
}

.uploader--container {
  width: 240px;
  height: 135px;
  border-radius: 30px;
  background-color: #004662;
  position: absolute;
  overflow: hidden;
}
.uploader--container .img {
  position: relative;
  width: 100%;
  height: 100%;
  filter: blur(2px);
}
.uploader--container .Uploader {
  width: 100%;
  height: 100%;
}
.uploader--container label {
  width: 100%;
  top: 10%;
  position: absolute;
  display: block;
  text-align: center;
}
.uploader--container .upload-btn {
  position: absolute;
  top: 40%;
  left: calc(50% - 92px);
  background-color: #0c2646;
  border-radius: 30px;
  border: none;
  color: #00FFFF;
  font-family: "Baloo Thambi 2", monospace;
  padding: 10px;
  font-size: 20px;
  font-weight: 700;
  cursor: pointer;
  transition: 400ms cubic-bezier(0.28, -0.46, 0.33, 1.5);
}
.uploader--container .upload-btn:hover {
  -webkit-transform: scale(1.2);
}
.uploader--container .upload-btn:disabled {
  opacity: 0.7;
  transition: none;
  cursor: default;
  animation: none;
}
.uploader--container .upload-btn:disabled:hover {
  transform: none;
}
.uploader--container .bar {
  position: absolute;
  left: 10%;
  top: 80%;
  width: 80%;
}
.uploader--container .bar .bar--filler {
  background-color: #00FFFF;
}
.uploader--container .hasFile {
  display: none;
}
.uploader--container .delete {
  position: absolute;
  background: transparent;
  border: none;
  top: 25%;
  left: 35%;
  cursor: pointer;
  transition: 400ms cubic-bezier(0.28, -0.46, 0.33, 1.5);
}
.uploader--container .delete:hover {
  -webkit-transform: scale(1.2);
}
.uploader--container .delete:disabled {
  opacity: 0.7;
  transition: none;
  cursor: default;
  animation: none;
}
.uploader--container .delete:disabled:hover {
  transform: none;
}
.uploader--container .anyFile {
  display: none;
}

@keyframes timer {
  0% {
    width: 100%;
  }
  to {
    width: 0;
  }
}
@keyframes slideIn {
  0% {
    opacity: 0;
    z-index: 0;
    visibility: hidden;
  }
  1% {
    visibility: visible;
  }
  100% {
    opacity: 1;
    z-index: 3;
    visibility: visible;
  }
}
@keyframes slideOut {
  0% {
    opacity: 1;
    z-index: 0;
    visibility: visible;
  }
  99% {
    opacity: 0;
    z-index: 0;
  }
  100% {
    visibility: hidden;
  }
}
@keyframes checked-icon {
  from {
    transform: translateZ(12px);
  }
  to {
    transform: translateX(16px) rotateY(90deg) translateZ(12px);
  }
}
@keyframes unchecked-icon {
  from {
    transform: translateX(-16px) rotateY(-90deg) translateZ(12px);
  }
  to {
    transform: translateZ(12px);
  }
}
@keyframes checked {
  from {
    background-image: radial-gradient(ellipse at center, #38c172 0%, #38c172 25%, #e3342f 25.1%, #e3342f 100%);
    background-position: 100% 50%;
  }
  to {
    background-image: radial-gradient(ellipse at center, #38c172 0%, #38c172 25%, #e3342f 25.1%, #e3342f 100%);
    background-position: 50% 50%;
    box-shadow: 0 0 20px 7px #00FF00;
  }
}
@keyframes unchecked {
  from {
    background-image: radial-gradient(ellipse at center, #e3342f 0%, #e3342f 25%, #38c172 25.1%, #38c172 100%);
    background-position: 100% 50%;
  }
  to {
    background-image: radial-gradient(ellipse at center, #e3342f 0%, #e3342f 25%, #38c172 25.1%, #38c172 100%);
    background-position: 50% 50%;
    box-shadow: 0 0 20px 7px #FF0000;
  }
}
@keyframes fromTop {
  0% {
    visibility: hidden;
    transform: translateY(-100%);
  }
  1% {
    visibility: visible;
  }
  100% {
    transform: translateY(0%);
  }
}
@keyframes toTop {
  0% {
    visibility: visible;
    transform: translateY(0%);
  }
  99% {
    visibility: hidden;
  }
  100% {
    visibility: hidden;
    transform: translateY(-100%);
  }
}
.form-error {
  border: #FF0000 1px solid !important;
}

.error-list {
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 500;
  color: #e3342f;
}

html {
  position: fixed;
  padding: 0;
  margin: 0;
  height: 100vh;
  width: 100vw;
  top: 0;
  left: 0;
}

body {
  padding: 0;
  margin: 0;
  height: 100vh;
  width: 100vw;
}

.AppContainer {
  padding: 0;
  margin: 0;
  height: 100vh;
  width: 100vw;
}

#app {
  height: 100vh;
  width: 100vw;
  background-color: #313124;
}

#layout {
  position: relative;
  background-color: transparent;
  height: 100vh;
  overflow-x: hidden !important;
}
@media (max-width: 1600px) {
  #layout {
    overflow-y: auto;
  }
  #layout .mobildisabled {
    display: none;
  }
}
#layout:before {
  position: absolute;
  width: 100vw;
  height: 100vh;
  content: " ";
  filter: blur(5px);
  overflow-y: hidden;
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
}

::-webkit-scrollbar {
  width: 10px;
}

::-webkit-scrollbar-track {
  background-color: rgba(143, 143, 143, 0.1);
  border-radius: 30px;
}

::-webkit-scrollbar-thumb {
  background: #000;
  border-radius: 30px;
}

.OnService {
  color: #00FF00;
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 600;
  font-size: 25px;
  text-shadow: 0 0 30px #00FF00;
}

.OffService {
  color: #FF0000;
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 600;
  font-size: 25px;
  text-shadow: 0 0 30px #FF0000;
}

.CountDownService {
  color: #1a202c;
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 600;
  font-size: 25px;
}

#service {
  height: 66px;
  width: 240px;
  z-index: 4;
  border-radius: 90px;
  background-color: #004662;
  margin: 10px;
  padding: 5px;
  border: none;
  box-shadow: none;
  transition: all 400ms cubic-bezier(0.51, -1.15, 0.48, 2.27);
  cursor: pointer;
}
#service:hover {
  transform: scale(1.1);
  -webkit-transform: scale(1.1);
}
#service:active {
  -webkit-box-shadow: none;
  border: none;
}
#service:disabled {
  cursor: default;
  color: #1a202c;
  text-shadow: none;
  transition: none;
  transform: none;
}

.menu-content {
  background-color: #0c2646;
  width: 270px;
  position: fixed;
  margin-left: 0;
  margin-top: 0;
  height: 100vh;
}
.menu-content .Menusepartor {
  height: 2px;
  width: 100%;
  background-color: #00FFFF;
  margin: 10px 0;
}
.menu-content #Logo {
  width: 100%;
  height: 200px;
  display: flex;
}
.menu-content #Logo a {
  margin: 0 auto;
  padding: 0;
}
.menu-content #Logo a img {
  width: 200px;
}
.menu-content #logout {
  width: 30px;
  margin: 5px;
  border-radius: 30px;
  height: 30px;
  padding: 5px;
  z-index: 14;
  position: fixed;
  background-color: #00FFFF;
  box-shadow: 0 0 20px 1px #00FFFF;
  transition: all 400ms cubic-bezier(0.51, -1.15, 0.48, 2.27);
  cursor: pointer;
}
.menu-content #logout:hover {
  -webkit-transform: scale(1.1);
  box-shadow: 0 0 30px 2px #00FFFF;
}
.menu-content .time {
  text-align: right;
  padding: 5px 15px 0 0;
}
.menu-content .time h3 {
  font-size: 28px;
}
.menu-content .navigation {
  height: calc(100vh - 562px);
  overflow-y: auto;
  overflow-x: hidden;
}
.menu-content .Menu-Item {
  padding: 0 10px 0 10px;
}
.menu-content .Menu-Item .Menu_title {
  position: relative;
  overflow: hidden;
  padding-right: 10px;
}
.menu-content .Menu-Item .Menu_title span {
  font-size: 27px;
  margin-left: 5px;
  padding: 0 5px 0 12px;
  z-index: 12;
  border-left: 7px #004662 solid;
  width: fit-content;
  position: relative;
}
.menu-content .Menu-Item .Menu_title span::after {
  position: absolute;
  width: 300px;
  height: 2px;
  top: 50%;
  left: calc(100% + 5px);
  content: " ";
  background-color: #004662;
  z-index: 0;
}
.menu-content .Menu-Item .Menu_title::before {
  position: absolute;
  width: 10px;
  height: 2px;
  top: 51%;
  left: 11px;
  background-color: #004662;
  content: " ";
  z-index: 0;
}
.menu-content .Menu-Item .Menu-list {
  margin-left: 5px;
}
.menu-content .Menu-Item .Menu-list li::marker {
  color: #004662;
}
.menu-content .Menu-Item .Menu-list li a {
  font-family: "Baloo Thambi 2", monospace;
  text-decoration: none;
  font-size: 20px;
  font-weight: 600;
}
.menu-content .Copyright {
  width: 100%;
}
.menu-content .Copyright p {
  text-align: center !important;
  color: #004662 !important;
  font-family: "Baloo Thambi 2", monospace;
  font-size: 20px;
  font-weight: 700;
}
.menu-content .bugreportter {
  display: flex;
}
.menu-content .bugreportter button {
  margin: 0 auto;
}

@media (min-width: 1100px) {
  .closed-menu {
    display: none;
  }

  #Close {
    display: none;
  }
}
@media (max-width: 1100px) {
  .close .menu-content {
    display: none;
  }
  .close .closed-menu {
    position: fixed;
    border-radius: 0 0 30px 0;
    background-color: #0c2646;
    padding: 10px 12px 12px 10px;
  }
  .close .closed-menu button {
    cursor: pointer;
    border: none;
    background-color: #004662;
    border-radius: 30px;
    font-size: 25px;
    padding: 5px 15px;
    color: #00FFFF;
    font-family: "Baloo Thambi 2", monospace;
    font-weight: 700;
    transition: 400ms cubic-bezier(0.28, -0.46, 0.33, 1.5);
  }
  .close .closed-menu button:hover {
    -webkit-transform: scale(1.2);
  }

  .open .closed-menu {
    display: none;
  }
  .open .menu-content #Close {
    z-index: 14;
    position: fixed;
    left: 160px;
    top: 5px;
  }
  .open .menu-content #Close button {
    cursor: pointer;
    border: none;
    background-color: #004662;
    border-radius: 30px;
    font-size: 25px;
    padding: 5px 15px;
    color: #00FFFF;
    font-family: "Baloo Thambi 2", monospace;
    font-weight: 700;
    transition: 400ms cubic-bezier(0.28, -0.46, 0.33, 1.5);
  }
  .open .menu-content #Close button:hover {
    -webkit-transform: scale(1.2);
  }
  .open .menu-content .Version {
    display: none;
  }
  .open .menu-content .Menusepartor:last-child {
    display: none;
    visibility: hidden;
  }
}
@media (min-width: 1100px) {
  #content {
    margin-left: 270px;
    width: calc(100vw - 270px);
  }
}
@media (max-width: 1100px) {
  #content {
    width: 100vw;
  }
}
#content {
  height: 100vh;
  position: absolute;
  overflow-y: hidden;
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
}

#Main-Page {
  display: flex;
  flex-direction: column;
  padding: 30px;
}
#Main-Page .Personnel_service {
  z-index: 1;
  background-color: #0c2646;
  width: 100%;
  height: 250px;
  border-radius: 30px;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}
#Main-Page .Personnel_service h1 {
  padding-left: 20px;
  font-size: 50px;
  margin: 0 auto;
}
#Main-Page .Personnel_service .Personnel-list {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  padding: 10px;
  width: 100%;
  height: 150px;
  overflow-y: auto;
}
#Main-Page .Personnel_service .Personnel-list .Personnel-card {
  position: relative;
  margin: 10px;
  display: flex;
  flex-direction: row;
  background-color: #004662;
  border-radius: 30px;
  height: min-content;
  padding: 6px 10px;
}
#Main-Page .Personnel_service .Personnel-list .Personnel-card h5 {
  margin: 0;
  font-size: 25px;
}
#Main-Page .Personnel_service .Personnel-list .Personnel-card .tag {
  height: 25px;
  width: 25px;
  content: " ";
  border: 1px black solid;
  border-radius: 100%;
  margin: auto 0 auto 5px;
}
#Main-Page .Personnel_service .Personnel-list .Personnel-card .tag-selector {
  overflow: hidden;
  position: fixed;
  overflow-y: scroll;
  width: 200px;
  height: 175px;
  background-color: #004662;
  border: 1px #00FFFF solid;
  display: flex;
  z-index: 100;
  flex-direction: column;
}
#Main-Page .Personnel_service .Personnel-list .Personnel-card .tag-selector button {
  cursor: pointer;
  display: flex;
  flex-direction: row-reverse;
  justify-content: space-between;
  width: 100%;
  padding: 0 15px 5px 5px;
  background-color: transparent;
  border: none;
  border-bottom: 1px #0c2646 solid;
  margin: 5px;
}
#Main-Page .Personnel_service .Personnel-list .Personnel-card .tag-selector button .tag, #Main-Page .Personnel_service .Personnel-list .Personnel-card .tag-selector button label {
  cursor: pointer;
}
#Main-Page .Personnel_service .bottom {
  position: relative;
  background-color: #004662;
  width: 100%;
  height: 80px;
}
#Main-Page .Personnel_service .bottom .groupcard {
  padding-top: 5px;
  height: 100%;
  width: 100%;
  overflow-x: scroll;
}
#Main-Page .Personnel_service .bottom .groupcard .contain {
  display: flex;
  flex-direction: row;
}
#Main-Page .Personnel_service .bottom .groupcard .contain .tag {
  margin: 0 10px 0 10px;
  font-size: 20px;
  display: flex;
  flex-direction: row;
  height: 30px;
}
#Main-Page .Personnel_service .bottom .groupcard .contain .tag div {
  height: 25px !important;
  width: 25px !important;
  content: " ";
  border: 1px black solid;
  border-radius: 100%;
  margin: auto 0 auto 5px;
}
#Main-Page .rowed {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}
#Main-Page .rowed .Annonces {
  margin-top: 35px;
  background-color: #0c2646;
  width: 62%;
  min-height: 200px;
  border-radius: 30px;
  padding: 10px;
  display: flex;
  flex-direction: column;
}
#Main-Page .rowed .Annonces h1 {
  padding-left: 20px;
  font-size: 50px;
  margin: 0 auto;
  text-align: center;
}
#Main-Page .rowed .Annonces .Annonces-List {
  margin: 0 auto;
  width: 100%;
  height: calc(100vh - 464px);
  overflow-y: auto;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: center;
}
#Main-Page .rowed .Annonces .Annonces-List .Annonce-Card {
  background-color: #004662;
  margin: 10px;
  padding: 10px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  border-radius: 30px;
  overflow-y: auto;
  height: 250px;
  width: 45%;
}
#Main-Page .rowed .Annonces .Annonces-List .Annonce-Card .Title {
  font-size: 30px;
  text-align: center;
  margin: 0 auto;
}
#Main-Page .rowed .Annonces .Annonces-List .Annonce-Card .Separator {
  margin: 5px auto;
  content: " ";
  width: 100%;
  text-align: center;
  background-color: #00FFFF;
  height: 2px;
}
#Main-Page .rowed .Annonces .Annonces-List .Annonce-Card .Text {
  font-size: 25px;
  text-indent: 20px;
}
#Main-Page .rowed .Annonces .Annonces-List .Annonce-Card .Date {
  font-size: 27px;
  text-align: center;
}
#Main-Page .rowed .Links {
  margin-top: 35px;
  background-color: #0c2646;
  width: 32%;
  min-height: 200px;
  border-radius: 30px;
  padding: 10px;
  display: flex;
  flex-direction: column;
}
#Main-Page .rowed .Links h1 {
  padding-left: 20px;
  font-size: 50px;
  margin: 0 auto;
  text-align: center;
}

#Rapport-Patient {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
}
#Rapport-Patient .Header {
  padding-top: 10px;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-evenly;
  width: 100%;
}
#Rapport-Patient .Header .Title {
  background-color: #0c2646;
  border-radius: 30px;
  padding: 20px;
}
#Rapport-Patient .Header .Title h1 {
  font-size: 30px;
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 700;
  text-align: center;
}
#Rapport-Patient .Header .pdf {
  margin-top: 15px;
  background-color: #0c2646;
  border-radius: 30px;
  padding: 10px;
  height: min-content;
}
#Rapport-Patient .Header .pdf a {
  text-decoration: none;
  font-size: 20px;
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 700;
}
#Rapport-Patient .Header .submit {
  background-color: #0c2646;
  border-radius: 30px;
  padding: 10px 15px;
  display: flex;
}
#Rapport-Patient .Header .submit button {
  margin: auto auto;
  cursor: pointer;
  background-color: #004662;
  color: #00FFFF;
  font-size: 20px;
  padding: 5px;
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 700;
  border: none;
  border-radius: 30px;
  box-shadow: none;
  transition: all 400ms cubic-bezier(0.51, -1.15, 0.48, 2.27);
}
#Rapport-Patient .Header .submit button:hover {
  -webkit-transform: scale(1.1);
}
#Rapport-Patient .Header .submit button:active {
  -webkit-transform: rotate(-5deg);
}
#Rapport-Patient .content {
  padding: 10px;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-evenly;
  overflow-y: auto;
}
#Rapport-Patient .content .Rapport-Card {
  margin: 10px;
  display: flex;
  flex-direction: column;
  padding: 15px;
  background-color: #0c2646;
  border-radius: 30px;
  width: fit-content;
}
#Rapport-Patient .content .Rapport-Card h1 {
  font-size: 30px;
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 600;
  text-align: center;
  margin-bottom: 10px;
}
#Rapport-Patient .content .Rapport-Card .Form-Group {
  height: 100%;
  max-height: 320px;
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  justify-content: space-evenly;
}
#Rapport-Patient .content .Rapport-Card .Form-Group input, #Rapport-Patient .content .Rapport-Card .Form-Group select, #Rapport-Patient .content .Rapport-Card .Form-Group textarea {
  padding: 10px;
  margin: 10px 0;
  font-size: 20px;
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 500;
  box-shadow: none;
  border: none;
  border-radius: 30px;
  background-color: #004662;
  color: #00FFFF;
}
#Rapport-Patient .content .Rapport-Card .Form-Group input::placeholder, #Rapport-Patient .content .Rapport-Card .Form-Group select::placeholder, #Rapport-Patient .content .Rapport-Card .Form-Group textarea::placeholder {
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 500;
  color: #00FFFF;
}
#Rapport-Patient .content .Rapport-Card .description {
  display: flex;
  flex-direction: column;
}
#Rapport-Patient .content .Rapport-Card .description textarea {
  min-width: 600px;
  min-height: 80px;
  border-radius: 30px;
  border: none;
}
#Rapport-Patient .content .Rapport-Card .ATA {
  display: flex;
  flex-direction: row;
}
#Rapport-Patient .content .Rapport-Card .ATA label {
  line-height: 30px;
  margin: auto 5px;
}
#Rapport-Patient .content .Rapport-Card .facture input[type=checkbox] {
  height: 0;
  width: 0;
  visibility: hidden;
}
#Rapport-Patient .content .Rapport-Card .facture #switch {
  margin: auto auto;
  cursor: pointer;
  text-indent: -9999px;
  width: 100px;
  height: 30px;
  background: #FF0000;
  box-shadow: 0 0 20px 7px #FF0000;
  display: block;
  border-radius: 100px;
  position: relative;
  transition: 400ms cubic-bezier(0.28, -0.46, 0.33, 1.5);
}
#Rapport-Patient .content .Rapport-Card .facture #switch::after {
  content: "";
  position: absolute;
  top: -5px;
  left: -5px;
  width: 40px;
  height: 40px;
  background: #222;
  border-radius: 90px;
  transition: 400ms cubic-bezier(0.28, -0.46, 0.33, 1.5);
}
#Rapport-Patient .content .Rapport-Card .facture input:checked + #switch {
  background: #00FF00;
  box-shadow: 0 0 20px 7px #00FF00;
}
#Rapport-Patient .content .Rapport-Card .facture input:checked + #switch:after {
  left: calc(100% + 5px);
  transform: translateX(-100%);
}
#Rapport-Patient .content .Rapport-Card .facture #switch:active:after {
  width: 40px;
}

.BC-Container {
  width: 100%;
  height: 100vh;
  overflow-y: hidden;
}
.BC-Container .BC-base {
  height: 100vh;
  width: 100%;
  display: flex;
  flex-direction: column;
}
@media (min-width: 1100px) {
  .BC-Container .BC-base {
    width: calc(100vw - 270px);
  }
}
@media (max-width: 1100px) {
  .BC-Container .BC-base {
    width: calc(100vw);
  }
}
.BC-Container .BC-base .header {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.BC-Container .BC-base .header button {
  margin: auto 0;
}
.BC-Container .BC-base .contain {
  padding-top: 20px;
  width: 100%;
  display: flex;
  flex-direction: row;
}
.BC-Container .BC-base .contain .BC-List {
  width: 100%;
  max-height: calc(100vh - 150px);
  overflow-y: auto;
  display: flex;
  flex-direction: column;
}
.BC-Container .BC-base .contain .BC-List h1 {
  text-align: center;
  font-weight: 700;
  font-size: 35px;
}
.BC-Container .BC-base .contain .BC-List .card {
  cursor: pointer;
  margin: 10px auto;
  padding: 10px;
  background-color: #0c2646;
  border-radius: 30px;
  min-width: 500px;
  max-width: 600px;
  height: 300px;
  display: flex;
  flex-direction: column;
  z-index: 1;
  border: #0c2646 1px solid;
  transition: all 400ms;
}
.BC-Container .BC-base .contain .BC-List .card h3, .BC-Container .BC-base .contain .BC-List .card h4 {
  text-align: center;
}
.BC-Container .BC-base .contain .BC-List .card h3 {
  font-size: 25px;
}
.BC-Container .BC-base .contain .BC-List .card h4 {
  font-size: 22px;
}
.BC-Container .BC-base .contain .BC-List .card .rowed {
  padding: 0 60px;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}
.BC-Container .BC-base .contain .BC-List .card .rowed h5 {
  font-size: 20px;
}
.BC-Container .BC-base .contain .BC-List .card .separator {
  margin: 10px auto;
  width: 90%;
  height: 3px;
  background-color: #004662;
  border-radius: 10px;
}
.BC-Container .BC-base .contain .BC-List .card:hover {
  transform: scale(1.1) rotate(3deg);
  z-index: 12;
  border: #004662 1px solid;
}
.BC-Container .popup {
  z-index: 25;
  width: 100%;
  height: 100vh;
  position: fixed;
  top: 0;
  backdrop-filter: blur(2px);
  display: flex;
  justify-content: center;
  padding: 10px;
}
@media (min-width: 1100px) {
  .BC-Container .popup {
    width: calc(100vw - 270px);
  }
}
@media (max-width: 1100px) {
  .BC-Container .popup {
    width: calc(100vw);
  }
}
.BC-Container .popup .popup-content {
  margin: auto 0;
  padding: 25px;
  background-color: #0c2646;
  border: 1px #004662 solid;
  border-radius: 30px;
}
.BC-Container .popup .popup-content h1 {
  font-weight: 700;
  text-align: center;
  font-size: 35px;
}
.BC-Container .popup .popup-content input, .BC-Container .popup .popup-content select {
  min-width: 200px;
  margin: 10px;
}
.BC-Container .popup .popup-content .row {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  flex-wrap: wrap;
}
.BC-Container .popup .popup-content form {
  display: flex;
  flex-direction: column;
}
.BC-Container .popup .popup-content .btn-contain {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.BC-Container .popup .popup-content .close {
  width: 300px;
  margin: 10px 20px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.BC-Container .BC-Last h2 {
  text-align: center;
  margin-top: 5px;
  font-size: 35px;
  margin-bottom: 20px;
}
.BC-Container .BC-View, .BC-Container .BC-Last {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  flex-wrap: nowrap;
  height: 100vh;
  overflow: hidden;
}
@media (min-width: 1100px) {
  .BC-Container .BC-View, .BC-Container .BC-Last {
    width: calc(100vw - 270px);
  }
}
@media (max-width: 1100px) {
  .BC-Container .BC-View, .BC-Container .BC-Last {
    width: calc(100vw);
  }
}
.BC-Container .BC-View .left, .BC-Container .BC-Last .left {
  width: 49%;
  min-width: 300px;
  padding: 10px;
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
}
.BC-Container .BC-View .left .header, .BC-Container .BC-Last .left .header {
  margin: 0 auto;
  width: 90%;
}
.BC-Container .BC-View .left .header .title-contain, .BC-Container .BC-Last .left .header .title-contain {
  border-radius: 30px 30px 0 30px;
}
.BC-Container .BC-View .left .header .btn-contain, .BC-Container .BC-Last .left .header .btn-contain {
  display: flex;
  flex-direction: row;
  justify-content: flex-end;
}
.BC-Container .BC-View .left .header .btn-contain .bgforbtn, .BC-Container .BC-Last .left .header .btn-contain .bgforbtn {
  width: 250px;
  background-color: #0c2646;
  padding-bottom: 17px;
  display: flex;
  border-radius: 0 0 30px 30px;
}
.BC-Container .BC-View .left .header .btn-contain .bgforbtn button, .BC-Container .BC-Last .left .header .btn-contain .bgforbtn button {
  margin: auto;
}
.BC-Container .BC-View .left .header .btn-contain .bgforquibtn, .BC-Container .BC-Last .left .header .btn-contain .bgforquibtn {
  margin-right: 5px;
  width: 250px;
  background-color: #0c2646;
  padding-bottom: 17px;
  display: flex;
  border-radius: 0 0 30px 30px;
}
.BC-Container .BC-View .left .header .btn-contain .bgforquibtn button, .BC-Container .BC-Last .left .header .btn-contain .bgforquibtn button {
  margin: auto;
}
.BC-Container .BC-View .left .row-spaced, .BC-Container .BC-Last .left .row-spaced {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  padding: 0 30px;
}
.BC-Container .BC-View .left .row-spaced .input, .BC-Container .BC-Last .left .row-spaced .input {
  width: 45%;
}
.BC-Container .BC-View .left .row-spaced label, .BC-Container .BC-Last .left .row-spaced label {
  margin: auto 0;
}
.BC-Container .BC-View .left .addpatient, .BC-Container .BC-Last .left .addpatient {
  width: 90%;
  margin: 15px auto;
  height: 475px;
  border-radius: 30px;
  background-color: #0c2646;
}
.BC-Container .BC-View .left .addpatient form, .BC-Container .BC-Last .left .addpatient form {
  width: 100%;
  padding: 5px;
  height: 100%;
}
.BC-Container .BC-View .left .addpatient form .top, .BC-Container .BC-Last .left .addpatient form .top {
  display: flex;
  flex-direction: row-reverse;
  justify-content: space-evenly;
  margin-top: 5px;
  margin-bottom: 20px;
}
.BC-Container .BC-View .left .addpatient form .top h2, .BC-Container .BC-Last .left .addpatient form .top h2 {
  font-size: 35px;
}
.BC-Container .BC-View .left .addpatient form .bottom, .BC-Container .BC-Last .left .addpatient form .bottom {
  margin-top: 20px;
  padding: 0 30px;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-evenly;
}
.BC-Container .BC-View .left .addpatient form .bottom label, .BC-Container .BC-View .left .addpatient form .bottom button, .BC-Container .BC-Last .left .addpatient form .bottom label, .BC-Container .BC-Last .left .addpatient form .bottom button {
  margin: auto 0;
  font-size: 20px;
}
.BC-Container .BC-View .left .addpatient form .bottom .idcard, .BC-Container .BC-View .left .addpatient form .bottom .paye, .BC-Container .BC-Last .left .addpatient form .bottom .idcard, .BC-Container .BC-Last .left .addpatient form .bottom .paye {
  width: 50%;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.BC-Container .BC-View .left .infos, .BC-Container .BC-Last .left .infos {
  width: 90%;
  margin: 15px auto;
  height: 475px;
  border-radius: 30px;
  background-color: #0c2646;
}
.BC-Container .BC-View .left .infos h2, .BC-Container .BC-Last .left .infos h2 {
  margin-top: 5px;
  text-align: center;
  font-size: 35px;
  margin-bottom: 20px;
}
.BC-Container .BC-View .left .infos div, .BC-Container .BC-Last .left .infos div {
  margin: 10px 10px;
}
.BC-Container .BC-View .left .personnel-list, .BC-Container .BC-Last .left .personnel-list {
  width: 90%;
  margin: 15px auto;
  height: 200px;
  border-radius: 30px;
  background-color: #0c2646;
  overflow-y: scroll;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}
.BC-Container .BC-View .left .personnel-list .tag, .BC-Container .BC-Last .left .personnel-list .tag {
  background-color: #004662;
  font-family: "Baloo Thambi 2", monospace;
  font-size: 25px;
  color: #00FFFF;
  border-radius: 30px;
  padding: 5px 12px;
  margin: 10px 10px;
  height: min-content;
}
.BC-Container .BC-View .list-container, .BC-Container .BC-Last .list-container {
  width: 49%;
  padding: 10px;
  display: flex;
  flex-direction: column;
  min-width: 300px;
}
.BC-Container .BC-View .list-container .list-content, .BC-Container .BC-Last .list-container .list-content {
  display: flex;
  width: 90%;
  height: 90%;
  margin: auto;
  flex-direction: column;
  background-color: #0c2646;
  border-radius: 30px;
}
.BC-Container .BC-View .list-container .list-content h1, .BC-Container .BC-Last .list-container .list-content h1 {
  text-align: center;
  margin: 20px 0;
  font-size: 40px;
}
.BC-Container .BC-View .list-container .list-content .list, .BC-Container .BC-Last .list-container .list-content .list {
  width: 90%;
  margin: 0 auto;
  height: 80%;
  background-color: #004662;
  display: flex;
  flex-direction: column;
  overflow-y: scroll;
  border-radius: 30px;
  padding: 10px;
}
.BC-Container .BC-View .list-container .list-content .list .Patient-list-card, .BC-Container .BC-Last .list-container .list-content .list .Patient-list-card {
  margin: 10px 0;
  display: grid;
  grid-template-columns: 7% 30% 13% 30% 10% 10%;
  grid-template-rows: 30px;
}
.BC-Container .BC-View .list-container .list-content .list .Patient-list-card h5, .BC-Container .BC-Last .list-container .list-content .list .Patient-list-card h5 {
  font-size: 20px;
  text-wrap: none;
}
.BC-Container .BC-View .list-container .list-content .list .Patient-list-card .id, .BC-Container .BC-Last .list-container .list-content .list .Patient-list-card .id {
  grid-column-start: 1;
  grid-column-end: 1;
  grid-row-start: 1;
  grid-row-end: 1;
  overflow: hidden;
}
.BC-Container .BC-View .list-container .list-content .list .Patient-list-card .name, .BC-Container .BC-Last .list-container .list-content .list .Patient-list-card .name {
  grid-column-start: 2;
  grid-column-end: 2;
  grid-row-start: 1;
  grid-row-end: 1;
  overflow: hidden;
  padding-right: 5px;
  margin: 0 2px;
}
.BC-Container .BC-View .list-container .list-content .list .Patient-list-card .date, .BC-Container .BC-Last .list-container .list-content .list .Patient-list-card .date {
  grid-column-start: 3;
  grid-column-end: 3;
  grid-row-start: 1;
  grid-row-end: 1;
  overflow: hidden;
}
.BC-Container .BC-View .list-container .list-content .list .Patient-list-card .color, .BC-Container .BC-Last .list-container .list-content .list .Patient-list-card .color {
  grid-column-start: 4;
  grid-column-end: 4;
  grid-row-start: 1;
  grid-row-end: 1;
  overflow: hidden;
  padding-right: 2px;
  margin-left: 1px;
}
.BC-Container .BC-View .list-container .list-content .list .Patient-list-card .edit, .BC-Container .BC-Last .list-container .list-content .list .Patient-list-card .edit {
  grid-column-start: 5;
  grid-column-end: 5;
  grid-row-start: 1;
  grid-row-end: 1;
  overflow: hidden;
}
.BC-Container .BC-View .list-container .list-content .list .Patient-list-card .delete, .BC-Container .BC-Last .list-container .list-content .list .Patient-list-card .delete {
  grid-column-start: 6;
  grid-column-end: 6;
  grid-row-start: 1;
  grid-row-end: 1;
  overflow: hidden;
}
.BC-Container .BC-View .list-container .list-content .list .Patient-list-card button, .BC-Container .BC-Last .list-container .list-content .list .Patient-list-card button {
  width: 100%;
  background-color: transparent;
  border: none;
  cursor: pointer;
  transition: all 300ms cubic-bezier(0.28, -0.46, 0.33, 1.5);
}
.BC-Container .BC-View .list-container .list-content .list .Patient-list-card button img, .BC-Container .BC-Last .list-container .list-content .list .Patient-list-card button img {
  width: 30px;
}
.BC-Container .BC-View .list-container .list-content .list .Patient-list-card button:hover, .BC-Container .BC-Last .list-container .list-content .list .Patient-list-card button:hover {
  transform: rotate(20deg) scale(1.3);
}

.RecherchePatient {
  display: flex;
  flex-direction: column;
  padding: 10px;
}
.RecherchePatient .header {
  max-width: fit-content;
  margin: auto;
}
.RecherchePatient .PatientRechercheContent {
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: space-around;
  margin-top: 20px;
}
@media (max-width: 1600px) {
  .RecherchePatient .PatientRechercheContent {
    flex-direction: column !important;
  }
}
.RecherchePatient .PatientRechercheContent .PatientInfos {
  width: 68%;
  padding: 10px;
  height: calc(100vh - 170px);
  border-radius: 30px;
  background-color: #0c2646;
}
@media (max-width: 1600px) {
  .RecherchePatient .PatientRechercheContent .PatientInfos {
    height: 100%;
    width: 90%;
    margin: 20px auto;
  }
}
.RecherchePatient .PatientRechercheContent .PatientInfos .Infos-Header {
  padding: 5px 20px;
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: center;
}
.RecherchePatient .PatientRechercheContent .PatientInfos .Infos-Header .Title {
  display: flex;
  background-color: #004662;
  border-radius: 30px;
  padding: 5px;
}
.RecherchePatient .PatientRechercheContent .PatientInfos .Infos-Header .Title h1 {
  margin: auto;
}
.RecherchePatient .PatientRechercheContent .PatientInfos .form form {
  width: 100%;
  display: grid;
}
@media (min-width: 900px) {
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form {
    grid-template-columns: 2% repeat(8, 12%) 2%;
    grid-template-rows: repeat(8, 23px 65px);
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .DescLabel {
    grid-row-start: 2;
    grid-row-end: 2;
    grid-column-start: 2;
    grid-column-end: 2;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .InterTypeLabel {
    display: flex;
    grid-row-start: 8;
    grid-row-end: 8;
    grid-column-start: 2;
    grid-column-end: 4;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .InterTypeLabel label {
    margin: auto 0;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .BroumLabel {
    display: flex;
    grid-row-start: 10;
    grid-row-end: 10;
    grid-column-start: 2;
    grid-column-end: 4;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .BroumLabel label {
    margin: auto 0;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .TarifLabel {
    display: flex;
    grid-row-start: 12;
    grid-row-end: 12;
    grid-column-start: 2;
    grid-column-end: 4;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .TarifLabel label {
    margin: auto 0;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .DescInput {
    grid-row-start: 3;
    grid-row-end: 7;
    grid-column-start: 2;
    grid-column-end: 10;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .InterInput {
    grid-row-start: 8;
    grid-row-end: 8;
    grid-column-start: 5;
    grid-column-end: 8;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .InterInput select {
    width: 100%;
    height: 100%;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .BroumInput {
    grid-row-start: 10;
    grid-row-end: 10;
    grid-column-start: 5;
    grid-column-end: 8;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .BroumInput select {
    width: 100%;
    height: 100%;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .TarifInput {
    grid-row-start: 12;
    grid-row-end: 12;
    grid-column-start: 5;
    grid-column-end: 8;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .TarifInput input {
    width: 100%;
    height: 100%;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .ATA {
    grid-row-start: 14;
    grid-row-end: 14;
    grid-column-start: 2;
    grid-column-end: 10;
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    justify-content: space-between;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .ATA label {
    margin: auto 0;
    font-size: 25px;
    font-weight: 550;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .submit {
    grid-row-start: 16;
    grid-row-end: 16;
    grid-column-start: 3;
    grid-column-end: 5;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .PDF {
    grid-row-start: 16;
    grid-row-end: 16;
    grid-column-start: 8;
    grid-column-end: 10;
  }
}
@media (max-width: 900px) {
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form {
    grid-template-columns: 2% repeat(8, 12%) 2%;
    grid-template-rows: repeat(12, 23px 65px);
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .DescLabel {
    grid-row-start: 2;
    grid-row-end: 2;
    grid-column-start: 2;
    grid-column-end: 4;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .DescInput {
    grid-row-start: 3;
    grid-row-end: 7;
    grid-column-start: 2;
    grid-column-end: 10;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .InterTypeLabel {
    display: flex;
    grid-row-start: 8;
    grid-row-end: 8;
    grid-column-start: 2;
    grid-column-end: 5;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .InterTypeLabel label {
    margin: auto 0;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .BroumLabel {
    display: flex;
    grid-row-start: 10;
    grid-row-end: 10;
    grid-column-start: 2;
    grid-column-end: 5;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .BroumLabel label {
    margin: auto 0;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .TarifLabel {
    display: flex;
    grid-row-start: 12;
    grid-row-end: 12;
    grid-column-start: 2;
    grid-column-end: 5;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .TarifLabel label {
    margin: auto 0;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .InterInput {
    grid-row-start: 8;
    grid-row-end: 8;
    grid-column-start: 6;
    grid-column-end: 8;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .InterInput select {
    width: 100%;
    height: 100%;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .BroumInput {
    grid-row-start: 10;
    grid-row-end: 10;
    grid-column-start: 6;
    grid-column-end: 8;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .BroumInput select {
    width: 100%;
    height: 100%;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .TarifInput {
    grid-row-start: 12;
    grid-row-end: 12;
    grid-column-start: 6;
    grid-column-end: 8;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .TarifInput input {
    width: 100%;
    height: 100%;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .ATA {
    grid-row-start: 14;
    grid-row-end: 17;
    grid-column-start: 2;
    grid-column-end: 10;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-evenly;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .ATA label {
    margin: auto 0;
    font-size: 25px;
    font-weight: 550;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .submit {
    grid-row-start: 20;
    grid-row-end: 20;
    grid-column-start: 3;
    grid-column-end: 5;
  }
  .RecherchePatient .PatientRechercheContent .PatientInfos .form form .PDF {
    grid-row-start: 22;
    grid-row-end: 22;
    grid-column-start: 3;
    grid-column-end: 5;
  }
}
.RecherchePatient .PatientRechercheContent .PatientInfos .form form input:disabled, .RecherchePatient .PatientRechercheContent .PatientInfos .form form select:disabled, .RecherchePatient .PatientRechercheContent .PatientInfos .form form textarea:disabled, .RecherchePatient .PatientRechercheContent .PatientInfos .form form button:disabled {
  opacity: 0.7;
  transition: none;
}
.RecherchePatient .PatientRechercheContent .PatientInfos .form form input:disabled:hover, .RecherchePatient .PatientRechercheContent .PatientInfos .form form select:disabled:hover, .RecherchePatient .PatientRechercheContent .PatientInfos .form form textarea:disabled:hover, .RecherchePatient .PatientRechercheContent .PatientInfos .form form button:disabled:hover {
  -webkit-transform: scale(1);
}
.RecherchePatient .PatientRechercheContent .Recherche {
  width: 28%;
  height: calc(100vh - 170px);
  overflow-y: auto;
  border-radius: 30px;
  background-color: #0c2646;
  overflow-x: hidden;
  display: flex;
  flex-direction: column;
}
@media (max-width: 1600px) {
  .RecherchePatient .PatientRechercheContent .Recherche {
    height: 100%;
    width: 90%;
    margin: 20px auto;
  }
}
.RecherchePatient .PatientRechercheContent .Recherche .FormRecherche {
  display: flex;
  width: 100%;
  padding: 10px;
  border-bottom: black 1px solid;
}
.RecherchePatient .PatientRechercheContent .Recherche .FormRecherche form {
  display: flex;
  flex-direction: row;
  margin: 0 auto;
}
@media (max-width: 1600px) {
  .RecherchePatient .PatientRechercheContent .Recherche .FormRecherche form input {
    width: calc(100% - 90px);
  }
}
.RecherchePatient .PatientRechercheContent .Recherche .FormRecherche form button {
  margin: auto 5px;
  display: flex;
  height: 60px;
  left: 50%;
}
.RecherchePatient .PatientRechercheContent .Recherche .FormRecherche form button img {
  margin: auto;
  height: 25px;
}
.RecherchePatient .PatientRechercheContent .Recherche .Interventions {
  display: flex;
  flex-direction: column;
  margin: 15px auto;
  width: 80%;
  background-color: #004662;
  border-radius: 30px;
}
.RecherchePatient .PatientRechercheContent .Recherche .Interventions h3 {
  margin: 10px auto;
  background-color: #0c2646;
  font-size: 25px;
  font-weight: 700;
  padding: 5px 10px;
  border-radius: 30px;
}
.RecherchePatient .PatientRechercheContent .Recherche .Interventions .InterventionsList {
  height: 400px;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  margin: 10px auto;
}
.RecherchePatient .PatientRechercheContent .Recherche .Interventions .InterventionsList .InterventionItem {
  margin: 0 auto;
  padding: 10px 5px;
  border-bottom: black 1px solid;
}
.RecherchePatient .PatientRechercheContent .Recherche .Interventions .InterventionsList .InterventionItem button {
  cursor: pointer;
  background-color: transparent;
  border: none;
  font-size: 20px;
  font-weight: 600;
  font-family: "Baloo Thambi 2", monospace;
  color: #00FFFF;
}
.RecherchePatient .PatientRechercheContent .Recherche .infos {
  padding: 15px;
}
@media (max-width: 1600px) {
  .RecherchePatient .PatientRechercheContent .Recherche .infos {
    margin: 0 auto;
    width: 80%;
  }
}
.RecherchePatient .PatientRechercheContent .Recherche .infos .inline {
  padding: 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}
@media (max-width: 1600px) {
  .RecherchePatient .PatientRechercheContent .Recherche .infos .inline {
    flex-direction: column !important;
    justify-content: normal !important;
  }
}
.RecherchePatient .PatientRechercheContent .Recherche .infos .inline input {
  width: 60%;
}
.RecherchePatient .PatientRechercheContent .Recherche .infos .inline label {
  margin: auto 0;
}

.Services {
  padding: 15px;
  display: flex;
  height: 95vh;
  flex-direction: column;
  justify-content: space-between;
}
@media (min-width: 1100px) and (max-width: 1200px) {
  .Services {
    overflow-x: scroll;
  }
}
.Services section {
  height: min-content;
}
.Services .title-contain {
  max-width: fit-content;
  margin: 0 auto;
}
.Services .week {
  margin: 0 auto;
}
.Services .week table {
  width: 800px;
  border-collapse: collapse;
  border-radius: 30px;
  background-color: #0c2646;
  display: block;
  height: 300px;
  overflow-y: scroll;
}
.Services .week table tr {
  border: black 1px solid;
  border-left: none;
  border-right: none;
}
.Services .week table tr:first-child {
  border-top: none;
}
.Services .week table tr:last-child {
  border-bottom: none;
}
.Services .week table .head {
  position: sticky;
  top: 0;
  border-bottom: black 1px solid;
  background-color: #004662;
  z-index: 10;
  border-left: 1px black solid;
  border-right: 1px black solid;
}
.Services .week table .head:first-child {
  border-left: none;
}
.Services .week table .head:last-child {
  border-right: none;
}
.Services .week table td {
  width: 200px;
  padding: 5px;
  text-align: center;
  font-family: "Baloo Thambi 2", monospace;
  font-size: 25px;
  color: #00FFFF;
  border: black 1px solid;
  border-top: none;
  border-bottom: none;
}
.Services .week table td:first-child {
  border-left: none;
}
.Services .week table td:last-child {
  border-right: none;
}
.Services .week table .body {
  width: 800px;
  padding-top: 40px;
}
.Services .week table .header {
  width: 800px;
  background-color: #004662;
  height: 40px;
}
.Services .week-list {
  margin: 0 auto;
}
.Services .week-list table {
  width: 900px;
  height: 300px;
  border-collapse: collapse;
  border-radius: 30px;
  background-color: #0c2646;
}
.Services .week-list table tr {
  border: black 1px solid;
  border-left: none;
  border-right: none;
}
.Services .week-list table tr:last-child {
  border-bottom: none;
}
.Services .week-list table td {
  width: 200px;
  padding: 5px;
  text-align: center;
  font-family: "Baloo Thambi 2", monospace;
  font-size: 25px;
  color: #00FFFF;
  border: black 1px solid;
  border-top: none;
  border-bottom: none;
}
.Services .week-list table td:first-child {
  border-left: none;
}
.Services .week-list table td:last-child {
  border-right: none;
}
.Services .week-list table .body {
  width: 800px;
}
.Services .week-list table .header {
  width: 800px;
  background-color: #004662;
}
.Services .week-list table .header tr:first-child {
  border-top: none;
}

.pdf_Generator {
  margin: auto 0;
  padding: 15px;
  background-color: #0c2646;
  border-radius: 30px;
}
.pdf_Generator form {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  margin: auto 0;
}
.pdf_Generator form label {
  margin: auto 10px;
}
.pdf_Generator form .btn {
  margin: auto 10px;
}

.impayes {
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
}
.impayes .header {
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: space-evenly;
}
.impayes .header .Add-facture {
  margin: auto 0;
}
.impayes .impayelist {
  margin: 0 auto;
  display: flex;
  height: 80vh;
  width: 80%;
  background-color: #0c2646;
  overflow-y: auto;
  border-radius: 30px;
  padding-bottom: 10px;
}
.impayes .impayelist .ImpayeTableContainer {
  width: 100%;
}
.impayes .impayelist .ImpayeTableContainer table {
  top: 0;
  width: 100%;
  border-collapse: collapse;
}
.impayes .impayelist .ImpayeTableContainer table tr {
  width: 100%;
  border: black 1px solid;
  border-left: none;
  border-right: none;
}
.impayes .impayelist .ImpayeTableContainer table tr:first-child {
  border-top: none;
}
.impayes .impayelist .ImpayeTableContainer table tr:last-child {
  border-bottom: none;
}
.impayes .impayelist .ImpayeTableContainer table .head {
  position: sticky;
  top: 0;
  border-bottom: black 1px solid;
  background-color: #004662;
  z-index: 10;
  border-left: 1px black solid;
  border-right: 1px black solid;
}
.impayes .impayelist .ImpayeTableContainer table .head:first-child {
  border-left: none;
}
.impayes .impayelist .ImpayeTableContainer table .head:last-child {
  border-right: none;
}
.impayes .impayelist .ImpayeTableContainer table td {
  width: 20%;
  padding: 5px;
  text-align: center;
  font-family: "Baloo Thambi 2", monospace;
  font-size: 25px;
  color: #00FFFF;
  height: 70px;
  border: black 1px solid;
  border-top: none;
  border-bottom: none;
}
.impayes .impayelist .ImpayeTableContainer table td:first-child {
  border-left: none;
}
.impayes .impayelist .ImpayeTableContainer table td:last-child {
  border-right: none;
}
.impayes .impayelist .ImpayeTableContainer table thead tr {
  border-bottom: 1px black solid !important;
}
.impayes .impayelist .ImpayeTableContainer table thead tr:nth-child(even) td {
  background: #0f2f57;
}
.impayes .add-facture-form {
  height: 100vh;
  width: calc(100vw - 270px);
  position: fixed;
  z-index: 21;
  display: flex;
  justify-content: center;
}
.impayes .add-facture-form .card-facture {
  margin: auto;
  width: 700px;
  height: 300px;
  background-color: #0c2646;
  border: 1px solid #00FFFF;
  box-shadow: 0 0 15px 0px #00FFFF;
  border-radius: 30px;
  padding: 15px;
}
.impayes .add-facture-form .card-facture h1 {
  text-align: center;
  font-size: 35px;
}
.impayes .add-facture-form .card-facture form {
  width: 100%;
  display: flex;
  flex-direction: column;
}
.impayes .add-facture-form .card-facture form .content {
  margin-top: 15px;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-evenly;
}
.impayes .add-facture-form .card-facture form .content .switch-container {
  margin-top: 15px;
}
.impayes .add-facture-form .card-facture form .footer {
  margin-top: 20px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}

.RapportHorraire {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
}
.RapportHorraire .header {
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  padding-top: 10px;
}
.RapportHorraire .header .semaine-select {
  margin: auto 0;
}
.RapportHorraire .header .semaine-select form {
  background-color: #0c2646;
  border-radius: 30px;
  padding: 10px;
  display: flex;
  flex-direction: row;
}
.RapportHorraire .header .semaine-select form input {
  margin: 0 10px;
}
.RapportHorraire .header .semaine-select form label, .RapportHorraire .header .semaine-select form button {
  margin: auto 0;
}
.RapportHorraire .header .add-perso {
  margin: auto 0;
}
.RapportHorraire .rapport-table-container {
  margin: 25px auto;
  height: 80vh;
  width: 90%;
  background-color: #0c2646;
  border-radius: 30px;
  overflow-y: scroll;
  overflow-x: hidden;
}
.RapportHorraire .rapport-table-container .rapport-table {
  width: 100%;
  height: 100%;
  border-collapse: collapse;
  display: table;
}
.RapportHorraire .rapport-table-container .rapport-table .row {
  display: table-row;
  height: 40px;
  border-top: 1px black solid;
  border-bottom: 1px black solid;
}
.RapportHorraire .rapport-table-container .rapport-table .row:first-child {
  border-top: none !important;
}
.RapportHorraire .rapport-table-container .rapport-table .row:last-child {
  border-bottom: none !important;
}
.RapportHorraire .rapport-table-container .rapport-table .row:nth-child(even) .cell {
  background: #0f2f57;
}
.RapportHorraire .rapport-table-container .rapport-table .cell {
  border-left: 1px black solid;
  border-right: 1px black solid;
  width: 10%;
  display: table-cell;
  vertical-align: middle;
}
.RapportHorraire .rapport-table-container .rapport-table .cell p {
  text-align: center;
}
.RapportHorraire .rapport-table-container .rapport-table .head {
  position: sticky;
  top: 0;
  border-bottom: black 1px solid;
  background-color: #004662;
  z-index: 10;
  height: 10px;
  border-left: 1px black solid;
  border-right: 1px black solid;
}
.RapportHorraire .rapport-table-container .rapport-table .head:first-child {
  border-left: none;
}
.RapportHorraire .rapport-table-container .rapport-table .head:last-child {
  border-right: none;
}
.RapportHorraire .rapport-table-container .rapport-table .column-1 {
  text-wrap: normal;
  border-left: none !important;
}
.RapportHorraire .rapport-table-container .rapport-table .column-10 {
  border-right: none !important;
}
.RapportHorraire .rapport-table-container .rapport-table .table-header {
  background-color: #004662;
  border-top: none !important;
  position: sticky;
  height: 70px;
  top: 0;
}

.ContentManagement {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
}
.ContentManagement .header {
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: center;
  margin-bottom: 10px;
  height: 151px;
}
.ContentManagement .content-mgt {
  width: 97%;
  margin: 0 auto;
  height: calc(100vh - 200px);
  overflow-y: scroll;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  flex-wrap: wrap;
  padding-top: 10px;
}
.ContentManagement .content-mgt .ContentCard {
  width: 400px;
  margin: 20px;
  height: 500px;
  background-color: #0c2646;
  border-radius: 30px;
  padding: 10px;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
}
.ContentManagement .content-mgt .ContentCard h1 {
  text-align: center;
  font-weight: 700;
  font-size: 35px;
}
.ContentManagement .content-mgt .ContentCard:last-child {
  margin-bottom: 100px;
}
.ContentManagement .content-mgt .ContentCard .item-list, .ContentManagement .content-mgt .ContentCard textarea {
  margin: 0 auto;
  background-color: #004662;
  border-radius: 30px 0 0 30px;
  padding: 10px;
  height: 300px;
  overflow-y: auto;
  width: 90%;
}
.ContentManagement .content-mgt .ContentCard .item-list .item, .ContentManagement .content-mgt .ContentCard textarea .item {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  flex-wrap: nowrap;
  width: 100%;
  border-bottom: 1px black solid;
  height: 50px;
  padding: 5px 0;
}
.ContentManagement .content-mgt .ContentCard .item-list .item button, .ContentManagement .content-mgt .ContentCard textarea .item button {
  cursor: pointer;
  background-color: transparent;
  border: none;
  transition: 500ms ease-in-out;
}
.ContentManagement .content-mgt .ContentCard .item-list .item button img, .ContentManagement .content-mgt .ContentCard textarea .item button img {
  height: 40px;
}
.ContentManagement .content-mgt .ContentCard .item-list .item button:hover, .ContentManagement .content-mgt .ContentCard textarea .item button:hover {
  -webkit-transform: rotate(6deg);
}
.ContentManagement .content-mgt .ContentCard .item-list .item p, .ContentManagement .content-mgt .ContentCard textarea .item p {
  margin: auto 0;
  font-size: 25px;
  max-width: 80%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
.ContentManagement .content-mgt .ContentCard .item-list .item .colorTag, .ContentManagement .content-mgt .ContentCard textarea .item .colorTag {
  height: 25px;
  width: 25px;
  content: " ";
  border: 1px black solid;
  border-radius: 100%;
  margin: auto 0 auto 5px;
}
.ContentManagement .content-mgt .ContentCard form {
  margin: 10px auto;
  display: flex;
  flex-direction: column;
  width: 90%;
}
.ContentManagement .content-mgt .ContentCard form button {
  margin-top: 10px;
  margin-right: 0;
  margin-left: auto;
}

.PersonnelList {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  flex-wrap: wrap;
}
.PersonnelList .header {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.PersonnelList .header a {
  margin: auto 0;
}
.PersonnelList .list-personnel {
  margin: 10px auto;
  background-color: #0c2646;
  border-radius: 30px;
  width: 90%;
  height: calc(100vh - 151px);
  overflow-y: scroll;
  flex-grow: 1;
}
.PersonnelList .list-personnel table {
  border-collapse: collapse;
  width: 100%;
}
.PersonnelList .list-personnel table th {
  position: sticky;
  top: 0;
  border-bottom: black 1px solid;
  background-color: #004662;
  z-index: 10;
  border-left: 1px black solid;
  border-right: 1px black solid;
}
.PersonnelList .list-personnel table th:first-child {
  border-left: none;
}
.PersonnelList .list-personnel table th:last-child {
  border-right: none;
}
.PersonnelList .list-personnel table .id {
  width: 5%;
  text-align: center;
}
.PersonnelList .list-personnel table .name {
  width: 20%;
  text-align: center;
}
.PersonnelList .list-personnel table .tel {
  width: 15%;
  text-align: center;
}
.PersonnelList .list-personnel table .compte {
  width: 15%;
  text-align: center;
}
.PersonnelList .list-personnel table .pilote {
  width: 15%;
}
.PersonnelList .list-personnel table .grade {
  width: 30%;
}
.PersonnelList .list-personnel table th, .PersonnelList .list-personnel table td {
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 500;
  font-size: 25px;
  color: #00FFFF;
  border-left: black 1px solid;
  border-right: 1px black solid;
}
.PersonnelList .list-personnel table th:first-child, .PersonnelList .list-personnel table td:first-child {
  border-left: none;
}
.PersonnelList .list-personnel table th:last-child, .PersonnelList .list-personnel table td:last-child {
  border-right: none;
}
.PersonnelList .list-personnel table td:last-child form {
  display: flex;
  flex-direction: row;
  justify-content: center;
}
.PersonnelList .list-personnel table td:last-child form select {
  width: 300px;
  margin-right: 20px;
}
.PersonnelList .list-personnel table td:last-child form button {
  margin: auto 0;
}
.PersonnelList .list-personnel table tr {
  border-top: 1px black solid;
  border-bottom: 1px black solid;
}
.PersonnelList .list-personnel table tr:first-child {
  border-top: none;
}
.PersonnelList .list-personnel table tr:last-child {
  border-bottom: none;
}
.PersonnelList .list-personnel table tr:nth-child(even) td {
  background: #0f2f57;
}

.Login, .Register {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  background-image: url("__VITE_ASSET__320df250__");
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
}
.Login .Form, .Register .Form {
  margin: auto auto;
  background-color: #0c2646;
  border-radius: 30px;
  padding: 10px;
}
.Login .Form form, .Register .Form form {
  display: flex;
  flex-direction: column;
}
.Login .Form form h1, .Register .Form form h1 {
  text-align: center;
  font-size: 40px;
  font-weight: 900;
  color: #00FFFF;
}
.Login .Form form label, .Register .Form form label {
  margin-top: 10px;
  font-size: 30px;
  font-weight: 600;
}
.Login .Form form .btn-contain, .Register .Form form .btn-contain {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  margin-top: 10px;
}

.maintenance {
  width: 100vw;
  height: 100vh;
  display: flex;
  justify-content: center;
  background-image: url("__VITE_ASSET__ecd34072__");
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
}
.maintenance .card {
  margin: auto auto;
  background-color: #0c2646;
  border-radius: 30px;
  padding: 10px;
  display: flex;
  flex-direction: column;
}
.maintenance .card h1 {
  text-align: center;
  font-size: 40px;
  font-weight: 900;
  color: #00FFFF;
}
.maintenance .card .infos {
  margin: 20px 0;
  display: flex;
  flex-direction: column;
  padding: 20px 0;
  border-bottom: 1px #004662 solid;
  border-top: 1px #004662 solid;
}
.maintenance .card .infos .rowed {
  padding: 0 30px;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}
.maintenance .card .contact {
  text-align: center;
  margin-bottom: 10px;
}
.maintenance .card .btn {
  margin: 15px auto;
}

.remboursement {
  display: flex;
  width: 100%;
  height: 95vh;
  padding: 10px;
  flex-direction: column;
  justify-content: space-between;
}
.remboursement .title-contain {
  width: min-content;
  margin: 0 40px 0 auto;
}
.remboursement .MainContainer {
  height: max-content;
  width: 80vw;
  margin: 0 auto;
  overflow: hidden;
}
.remboursement .MainContainer .selector {
  margin-left: 25px;
}
.remboursement .MainContainer .selector button {
  border: none;
  background-color: #0c2646;
  font-size: 28px;
  font-family: "Baloo Thambi 2", monospace;
  color: #00FFFF;
  font-weight: 600;
  margin-left: 10px;
  padding: 10px;
  border-radius: 25px 25px 0 0;
  border-top: 1px black solid;
  border-left: 1px black solid;
  border-right: 1px black solid;
}
.remboursement .MainContainer .selector .unselected {
  background-color: #004662;
  cursor: pointer;
}
.remboursement .MainContainer .myview {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  background-color: #0c2646;
  border-radius: 30px;
}
.remboursement .MainContainer .myview .add {
  width: 49%;
  min-width: 300px;
  display: flex;
}
.remboursement .MainContainer .myview .add form {
  margin: 0 auto;
  width: 60%;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  max-height: 300px;
}
.remboursement .MainContainer .myview .add form h2 {
  text-align: center;
}
.remboursement .MainContainer .myview .add form button {
  margin: 0 0 0 auto;
}
.remboursement .MainContainer .myview .list-content {
  display: flex;
  width: 42%;
  padding: 30px;
}
.remboursement .MainContainer .myview .list-content .list {
  display: flex;
  flex-direction: column;
  height: 700px;
  overflow-y: auto;
  margin: 0 auto;
  background-color: #004662;
  border-radius: 30px;
  width: 70%;
  min-width: 300px;
  padding: 5px;
}
.remboursement .MainContainer .myview .list-content .list .row {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  margin-bottom: 10px;
  cursor: default;
}
.remboursement .MainContainer .myview .list-content .list .row h5 {
  font-size: 22px;
  line-height: 30px;
}
.remboursement .MainContainer .myview .list-content .list .row button {
  background: transparent;
  border: none;
  cursor: pointer !important;
}
.remboursement .MainContainer .myview .list-content .list .row button img {
  width: 30px;
  transition: all 200ms;
}
.remboursement .MainContainer .myview .list-content .list .row button img:hover {
  -webkit-transform: scale(1.2);
}
.remboursement .MainContainer .adminview {
  display: flex;
  flex-direction: column;
  background-color: #0c2646;
  border-radius: 30px;
  width: 100%;
  height: calc(100vh - 250px);
  overflow-y: hidden;
}
.remboursement .MainContainer .adminview .table-head {
  display: flex;
  width: 100%;
  height: 100px;
}
.remboursement .MainContainer .adminview .table-head form {
  display: flex;
  flex-direction: row;
  padding: 10px;
}
.remboursement .MainContainer .adminview .table-head form label {
  font-size: 28px;
  margin: auto 10px auto 10px;
  font-weight: 500;
}
.remboursement .MainContainer .adminview .table-head form button {
  margin: auto 0 auto 30px;
}
.remboursement .MainContainer .adminview .table-head form input {
  width: 70px;
}
.remboursement .MainContainer .adminview .table-container {
  height: calc(100vh - 107px);
  overflow-y: scroll;
}
.remboursement .MainContainer .adminview .table-container table {
  border-collapse: collapse;
  height: 500px;
  width: 100%;
  overflow-y: scroll;
  border-radius: 30px;
}
.remboursement .MainContainer .adminview .table-container table .head {
  position: sticky;
  color: #00FFFF;
  text-align: center;
  padding: 10px;
  height: 40px;
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 600;
  font-size: 25px;
  top: 0;
  background-color: #004662;
}
.remboursement .MainContainer .adminview .table-container table tbody tr {
  height: 30px;
  border-top: black 1px solid;
  border-bottom: black 1px solid;
}
.remboursement .MainContainer .adminview .table-container table tbody tr td {
  text-align: center;
  padding: 10px;
  font-family: "Baloo Thambi 2", monospace;
  font-weight: 500;
  font-size: 20px;
  color: #00FFFF;
  border-left: 1px black solid;
  border-right: 1px black solid;
}
.remboursement .MainContainer .adminview .table-container table tbody tr td:last-child {
  border-right: none !important;
}
.remboursement .MainContainer .adminview .table-container table tbody tr td:first-child {
  border-left: none !important;
}
.remboursement .MainContainer .adminview .table-container table .id {
  width: 70px;
}

.Logs {
  width: 100%;
  height: 100vh;
  display: flex;
  flex-direction: column;
}
.Logs .header {
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  margin-bottom: 30px;
  height: 130px;
}
.Logs .header .logs-select {
  display: flex;
  padding: 7px 20px;
  background-color: #0c2646;
  border-radius: 30px;
}
.Logs .header .logs-select select {
  margin: auto;
}
.Logs .log-list {
  margin: 0 auto;
  height: calc(100vh - 250px);
  background-color: #0c2646;
  border-radius: 30px;
  width: 90%;
  padding: 10px;
}
.Logs .log-list .logs-header {
  padding: 10px;
  width: calc(100% - 20px);
  height: 80px;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  border-bottom: 1px #00FFFF solid;
}
.Logs .log-list .logs-header p {
  font-weight: 600;
  font-size: 30px;
  margin: auto 0;
}
.Logs .log-list .logs-header .pages {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  width: 550px;
}
.Logs .log-list .logs-header .pages label {
  margin: auto 0;
}
.Logs .log-list .logs-header .pages button {
  cursor: pointer;
  background-color: transparent;
  border: none;
  font-size: 30px;
  font-weight: 600;
  color: #00FFFF;
}
.Logs .log-list .logs-header .pages p {
  font-size: 30px;
}
.Logs .log-list .logs-header .pages button, .Logs .log-list .logs-header .pages p {
  margin: auto 0;
  height: 45px;
}
.Logs .log-list .logs-header .pages select {
  width: 150px;
}
.Logs .log-list .table {
  overflow-y: scroll;
  max-height: calc(100% - 110px);
  margin-top: 15px;
}
.Logs .log-list .table table {
  top: 0;
  width: 100%;
  border-collapse: collapse;
}
.Logs .log-list .table table tr {
  width: 100%;
  border: black 1px solid;
  border-left: none;
  border-right: none;
}
.Logs .log-list .table table thead {
  position: sticky;
  top: 0;
  border-bottom: black 1px solid;
  background-color: #004662;
  z-index: 10;
  border-left: 1px black solid;
  border-right: 1px black solid;
}
.Logs .log-list .table table td, .Logs .log-list .table table th {
  padding: 5px;
  text-align: center;
  font-family: "Baloo Thambi 2", monospace;
  font-size: 25px;
  color: #00FFFF;
  height: 70px;
  border: black 1px solid;
  border-top: none;
  border-bottom: none;
}
.Logs .log-list .table table tr:nth-child(even) td {
  background: #0f2f57;
}
.Logs .log-list .table table thead tr {
  border-bottom: 1px black solid !important;
}

.BugRepport {
  z-index: 25;
  width: 100%;
  position: fixed;
  top: 0;
  backdrop-filter: blur(5px);
  height: 100vh;
  display: flex;
}
.BugRepport .Repport-Card {
  margin: auto;
  width: 40%;
  background-color: #0c2646;
  border-radius: 30px;
  border: 1px solid #00FFFF;
  padding: 20px;
}
.BugRepport .Repport-Card h1 {
  font-weight: 700;
  font-size: 35px;
  text-align: center;
}
.BugRepport .Repport-Card form {
  display: flex;
  flex-direction: column;
}
.BugRepport .Repport-Card .rowed {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.BugRepport .Repport-Card .rowed button {
  margin: auto 0;
}

.load {
  display: flex;
  width: 100%;
  height: 100%;
}
.load img {
  margin: auto auto;
}

.livret-page {
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
}
.livret-page .title-contain {
  margin: 10px auto;
}
.livret-page .livret {
  margin: auto auto;
  background-color: #0c2646;
  border-radius: 30px;
  height: calc(100vh - 200px);
  width: 90%;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}
.livret-page .livret .livret-content {
  display: flex;
  flex-direction: column;
  flex-wrap: nowrap;
  width: 100%;
  padding: 20px;
  height: 75%;
}
.livret-page .livret .livret-content section {
  height: 100%;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-between;
  width: 85%;
  padding: 0 10px;
  border-collapse: collapse;
  margin: 0 auto;
}
.livret-page .livret .livret-content section .forma {
  padding: 10px;
  width: 40%;
  display: flex;
  flex-direction: column;
  cursor: pointer;
  transition: all 400ms ease-in-out;
}
.livret-page .livret .livret-content section .forma:hover {
  transform: rotate(-2deg);
}
.livret-page .livret .livret-content section .forma .infos {
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
}
.livret-page .livret .livret-content section .forma .infos img {
  width: 275px;
  height: 154px;
  border-radius: 30px;
}
.livret-page .livret .livret-content section .forma .infos .text {
  margin-left: 10px;
}
.livret-page .livret .livret-content section .forma .infos .text h5 {
  font-size: 25px;
  font-weight: 700;
}
.livret-page .livret .livret-content section .forma .infos .text p {
  text-indent: 30px;
  text-align: justify;
  height: 100px;
  overflow: hidden;
}
.livret-page .livret .livret-content section .forma .validation {
  border-radius: 30px;
  display: grid;
  grid-template-columns: 5% 20% 45% 30%;
  grid-template-rows: 70px;
  height: 80px;
  background-color: #004662;
}
.livret-page .livret .livret-content section .forma .validation h3 {
  grid-column-start: 2;
  grid-column-end: 2;
  line-height: 70px;
  font-size: 25px;
  font-weight: 800;
}
.livret-page .livret .livret-content section .forma .validation img {
  grid-column-start: 4;
  grid-column-end: 4;
  width: 120px;
  transform: rotate(12deg) translateY(12px);
}
.livret-page .livret .livret-content section .forma:nth-child(2n):hover {
  transform: rotate(2deg);
}
.livret-page .livret .livret-footer {
  padding: 20px 40px;
  height: 15%;
  width: calc(100% - 80px);
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}
.livret-page .livret .livret-footer button {
  margin: auto 0;
}

.responsepage {
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
}
.responsepage .title-contain {
  margin: 0 auto;
}
.responsepage .responsecontent {
  overflow-y: hidden;
  height: calc(100vh - 200px);
  width: 90%;
  margin: 0 auto;
  background-color: #0c2646;
  border-radius: 30px;
  display: flex;
  flex-direction: column;
  flex-wrap: nowrap;
}
.responsepage .responsecontent .question {
  height: 90%;
  margin-bottom: 10px;
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
}
.responsepage .responsecontent .question .left {
  width: 80%;
  padding: 10px;
}
.responsepage .responsecontent .question .left h2 {
  margin-top: 30px;
  font-size: 35px;
  text-wrap: avoid;
  max-height: 100px;
  overflow-y: hidden;
  margin-bottom: 15px;
  margin-left: 20px;
}
.responsepage .responsecontent .question .left h2 span {
  text-decoration: #00FFFF underline 3px;
}
.responsepage .responsecontent .question .left .response {
  padding-left: 60px;
  height: calc(100% - 210px);
  padding-top: 20px;
  overflow-y: auto;
}
.responsepage .responsecontent .question .left .response .rowed {
  margin: 30px 0;
}
.responsepage .responsecontent .question .left .response .rowed .checkbox .container {
  display: block;
  position: relative;
  padding-left: 35px;
  margin-bottom: 12px;
  font-size: 25px;
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}
.responsepage .responsecontent .question .left .response .rowed .checkbox .container input {
  position: absolute;
  opacity: 0;
  cursor: pointer;
  top: 10px;
  height: 0;
  margin-right: 20px;
  width: 0;
}
.responsepage .responsecontent .question .left .response .rowed .checkbox .container input:disabled {
  cursor: default !important;
}
.responsepage .responsecontent .question .left .response .rowed .checkbox .container .checkmark {
  position: absolute;
  top: 7px;
  left: -10px;
  height: 25px;
  width: 25px;
  background-color: #004662;
  border-radius: 50%;
}
.responsepage .responsecontent .question .left .response .rowed .checkbox .container .checkmark:after {
  content: "";
  position: absolute;
  display: none;
}
.responsepage .responsecontent .question .left .response .rowed .checkbox .right {
  color: green !important;
}
.responsepage .responsecontent .question .left .response .rowed .checkbox .user:checked ~ .checkmark {
  background-color: #00FFFF;
}
.responsepage .responsecontent .question .left .response .rowed .checkbox .container input:checked ~ .checkmark:after {
  display: block;
}
.responsepage .responsecontent .question .left .response .rowed .checkbox .disabled {
  cursor: default !important;
}
.responsepage .responsecontent .question .left .response .rowed label {
  font-size: 25px;
}
.responsepage .responsecontent .question .infos {
  width: 20%;
  padding: 10px;
  min-width: 290px;
  display: flex;
  flex-direction: column;
}
.responsepage .responsecontent .question .infos img {
  width: 275px;
  height: 154px;
  border-radius: 30px;
  margin-top: 20px;
}
.responsepage .responsecontent .question .infos p {
  text-indent: 20px;
  text-align: justify-all;
  word-break: break-word;
}
.responsepage .responsecontent .question .infos .correction p {
  color: green;
}
.responsepage .responsecontent .question .question-end {
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
}
.responsepage .responsecontent .question .stater-page {
  margin: 0 auto;
  width: 80%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
}
.responsepage .responsecontent .question .stater-page h1 {
  text-align: center;
  font-size: 70px;
  font-weight: 700;
}
.responsepage .responsecontent .question .stater-page .questions {
  text-align: center;
}
.responsepage .responsecontent .question .stater-page .questions h3 {
  font-size: 30px;
}
.responsepage .responsecontent .question .stater-page .infosList {
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
}
.responsepage .responsecontent .question .stater-page .infosList .rowed {
  margin-bottom: 20px;
  height: 100px;
  display: flex;
  flex-direction: row;
}
.responsepage .responsecontent .question .stater-page .infosList .rowed .illustrations {
  position: relative;
  width: 100px;
  overflow: hidden;
}
.responsepage .responsecontent .question .stater-page .infosList .rowed .illustrations img {
  top: 0;
  left: 0;
  position: absolute;
  width: 100px;
  height: auto;
}
.responsepage .responsecontent .question .stater-page .infosList .rowed .text {
  margin: auto 0 auto 30px;
}
.responsepage .responsecontent .bottom {
  padding-top: 10px;
  border-top: 1px #00FFFF solid;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.responsepage .responsecontent .bottom h3, .responsepage .responsecontent .bottom button {
  margin: auto 0;
}
.responsepage .responsecontent .bottom h3 {
  font-size: 30px;
}

.moncompte {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  height: 100vh;
}
.moncompte .title-contain {
  margin: 15px auto 15px auto;
  text-align: center;
}
.moncompte .title-contain span {
  font-weight: 500;
  font-size: 30px;
}
.moncompte .account-container {
  margin: auto auto;
  width: 90%;
}
.moncompte .account-container .header {
  height: 60px;
  margin-left: 40px;
  display: flex;
  flex-direction: row;
}
.moncompte .account-container .header button {
  border: none;
  background-color: #0c2646;
  font-size: 28px;
  font-family: "Baloo Thambi 2", monospace;
  color: #00FFFF;
  font-weight: 600;
  margin-left: 10px;
  padding: 10px;
  border-radius: 25px 25px 0 0;
  border-top: 1px black solid;
  border-left: 1px black solid;
  border-right: 1px black solid;
  display: flex;
  flex-direction: row;
}
.moncompte .account-container .header button img {
  width: 28px;
  margin: auto 10px auto 0;
}
.moncompte .account-container .header .unselected {
  background-color: #004662;
  cursor: pointer;
}
.moncompte .account-container .acc-content {
  height: calc(100vh - 340px);
  border-radius: 30px;
  background-color: #0c2646;
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  position: relative;
}
.moncompte .account-container .acc-content .rowed {
  display: flex;
  flex-direction: row;
}
.moncompte .account-container .acc-content .row {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  flex-wrap: wrap;
}
.moncompte .account-container .acc-content .row-evenly {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.moncompte .account-container .acc-content .conlumn {
  display: flex;
  flex-direction: column;
}
.moncompte .account-container .acc-content .changedata {
  width: 50%;
  z-index: 1;
}
.moncompte .account-container .acc-content .changedata form {
  height: 95%;
  width: 90%;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  padding: 30px;
}
.moncompte .account-container .acc-content .changedata form .rowed {
  justify-content: space-between;
}
.moncompte .account-container .acc-content .changedata form .rowed input, .moncompte .account-container .acc-content .changedata form .rowed select {
  width: 350px;
}
.moncompte .account-container .acc-content .changedata form .rowed label {
  font-size: 30px;
  margin: auto 0;
}
.moncompte .account-container .acc-content .changedata form button {
  margin: 0 0 0 auto;
}
.moncompte .account-container .acc-content .info {
  color: #004662;
  margin: 0 auto;
  font-weight: 700;
  font-size: 25px;
  text-align: right;
}
.moncompte .account-container .acc-content .bigchange {
  z-index: 1;
  width: 50%;
  padding: 20px;
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
}
.moncompte .account-container .acc-content .bigchange .btn {
  margin: 0 auto;
}
.moncompte .account-container .acc-content .popup {
  position: absolute;
  width: 100%;
  height: calc(100vh - 340px);
  z-index: 3;
}
.moncompte .account-container .acc-content .popup .center {
  padding: 5px;
  background-color: #0c2646;
  border-radius: 30px;
  border: 1px #00FFFF solid;
  width: 90%;
  max-width: 560px;
  height: 350px;
}
.moncompte .account-container .acc-content .popup .center label {
  margin-left: 10px;
  margin: auto 0;
}
.moncompte .account-container .acc-content .popup .center h1 {
  text-align: center;
}

.perm {
  display: flex;
  flex-direction: column;
  height: 100vh;
  overflow-y: hidden;
  justify-content: space-around;
}
.perm .header {
  display: flex;
  flex-direction: row;
  width: 100%;
  justify-content: space-evenly;
}
.perm .header .title-contain {
  margin: auto 0;
}
.perm .header a {
  margin: auto 0;
}
.perm .content {
  margin: 0 auto;
  height: calc(100vh - 300px);
  width: 90%;
  border-radius: 30px;
  background-color: #0c2646;
  overflow-y: scroll;
}
.perm .content .tablecontainer table {
  width: 100%;
  border-collapse: collapse;
  display: grid;
  grid-template-columns: repeat(28, 160px);
}
.perm .content .tablecontainer table thead, .perm .content .tablecontainer table tbody, .perm .content .tablecontainer table tr {
  display: contents;
}
.perm .content .tablecontainer table td {
  z-index: 1;
  padding: 15px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  display: flex;
  justify-content: center;
  align-items: center;
}
.perm .content .tablecontainer table .grade {
  font-size: 22px;
  padding: 5px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-family: "Baloo Thambi 2", monospace;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}
.perm .content .tablecontainer table th {
  z-index: 12;
  border-collapse: collapse;
  color: #00FFFF;
  font-family: "Baloo Thambi 2", monospace;
  height: 110px;
  position: sticky;
  top: 0;
  background: #004662;
  padding: 5px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: normal;
  font-size: 1.1rem;
  border: 1px black solid;
  border-top: none;
}
.perm .content .tablecontainer table th:first-child {
  border-left: none;
}
.perm .content .tablecontainer table th:last-child {
  border-right: none;
}
.perm .content .tablecontainer table td {
  padding-top: 10px;
  padding-bottom: 10px;
  color: #00FFFF;
}
.perm .content .tablecontainer table tr:nth-child(even) td {
  background: #0f2f57;
}

.carnetvol {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  height: 100vh;
  overflow-y: hidden;
}
.carnetvol .head {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  width: 100%;
}
.carnetvol .head button {
  margin: auto 0;
}
.carnetvol .head .title-contain {
  margin: auto 0;
}
.carnetvol .table-container {
  height: calc(100vh - 200px);
  overflow-y: scroll;
  background-color: #0c2646;
  border-radius: 30px;
  margin: 0 auto;
  width: 90%;
}
.carnetvol .table-container table {
  width: 100%;
  border-collapse: collapse;
}
.carnetvol .table-container table tr {
  height: 60px;
  border-top: 1px black solid;
  border-bottom: 1px black solid;
}
.carnetvol .table-container table tr:first-child {
  border-top: none !important;
}
.carnetvol .table-container table tr:nth-child(even) td {
  background: #0f2f57;
}
.carnetvol .table-container table th, .carnetvol .table-container table td {
  color: #00FFFF;
  font-size: 20px;
  font-family: "Baloo Thambi 2", monospace;
  text-align: center;
}
.carnetvol .table-container table th {
  background-color: #004662;
  position: sticky;
  top: 0;
}

.popup {
  position: fixed;
  top: 0;
  height: 100vh;
  backdrop-filter: blur(2px);
  z-index: 14;
  display: flex;
}
@media (min-width: 1100px) {
  .popup {
    width: calc(100vw - 270px);
  }
}
@media (max-width: 1100px) {
  .popup {
    width: calc(100vw);
  }
}
.popup .center {
  margin: auto auto;
  width: 90%;
  max-width: 550px;
  height: 350px;
  background-color: #0c2646;
  border-radius: 30px;
  border: 1px #00FFFF solid;
}
.popup .center form {
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
}
.popup .center h2 {
  font-size: 30px;
  font-weight: 700;
  text-align: center;
}
.popup .center .rowed {
  padding: 0 30px;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}
.popup .center .rowed label {
  margin: auto 0;
}
.popup .center select, .popup .center input {
  width: 260px;
}
.popup .center .button {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}

.formationCretor {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  height: 100vh;
  overflow-y: hidden;
}
.formationCretor .header {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.formationCretor .header .btn {
  margin: auto 0;
}
.formationCretor .creator {
  height: calc(100vh - 170px);
  width: 90%;
  background-color: #0c2646;
  border-radius: 30px;
  margin: 0 auto;
  display: flex;
  flex-direction: column;
  padding-top: 15px;
  overflow-y: hidden;
}
.formationCretor .creator .creator-items {
  position: relative;
  margin: 0 auto;
  width: 95%;
  height: 90%;
  justify-content: center;
  align-items: center;
  overflow: hidden;
}
.formationCretor .creator .creator-items .creator-item {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
.formationCretor .creator .creator-items .creator-item .questionadder {
  width: 100%;
  height: 100%;
  display: grid;
  grid-template-rows: repeat(12, 8.3%);
  grid-template-columns: repeat(20, 5%);
}
.formationCretor .creator .creator-items .creator-item .questionadder label {
  font-weight: 500;
  font-size: 25px;
  text-decoration: underline #00FFFF;
}
.formationCretor .creator .creator-items .creator-item .questionadder .question-title {
  grid-row: 1/1;
  grid-column: 1/6;
}
.formationCretor .creator .creator-items .creator-item .questionadder .question-main {
  grid-row: 3/5;
  grid-column: 1/10;
  display: flex;
  flex-direction: column;
}
.formationCretor .creator .creator-items .creator-item .questionadder .question-main input {
  width: 90%;
}
.formationCretor .creator .creator-items .creator-item .questionadder .saver {
  grid-row: 1/2;
  grid-column: 7/10;
}
.formationCretor .creator .creator-items .creator-item .questionadder .add-image {
  grid-row: 1/5;
  grid-column: 13/21;
  overflow: hidden;
  display: flex;
}
.formationCretor .creator .creator-items .creator-item .questionadder .add-image .image {
  margin: auto auto;
  width: 350px;
  height: 197.7px;
  background-color: #004662;
  border-radius: 30px;
  position: relative;
  z-index: 1;
  overflow: hidden;
}
.formationCretor .creator .creator-items .creator-item .questionadder .add-image .image img {
  border-radius: 30px;
  z-index: 3;
  width: 100%;
  height: auto;
}
.formationCretor .creator .creator-items .creator-item .questionadder .add-image .image h3, .formationCretor .creator .creator-items .creator-item .questionadder .add-image .image input {
  position: absolute;
  z-index: 2;
}
.formationCretor .creator .creator-items .creator-item .questionadder .add-image .image input {
  top: 50%;
  left: 20%;
  width: 200px;
}
.formationCretor .creator .creator-items .creator-item .questionadder .add-image .image h3 {
  top: 5%;
  left: 26%;
  width: 160px;
}
.formationCretor .creator .creator-items .creator-item .questionadder .response-info {
  grid-row: 6/7;
  grid-column: 1/12;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.formationCretor .creator .creator-items .creator-item .questionadder .responses-list {
  grid-row: 7/13;
  grid-column: 1/12;
  display: flex;
  flex-direction: column;
  padding: 5px;
  overflow-y: auto;
}
.formationCretor .creator .creator-items .creator-item .questionadder .responses-list .response {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.formationCretor .creator .creator-items .creator-item .questionadder .responses-list .response button {
  background-color: transparent;
  border: none;
  cursor: pointer;
  transition: all 300ms cubic-bezier(0.28, -0.46, 0.33, 1.5);
}
.formationCretor .creator .creator-items .creator-item .questionadder .responses-list .response button img {
  width: 40px;
}
.formationCretor .creator .creator-items .creator-item .questionadder .responses-list .response button:hover {
  transform: rotate(20deg) scale(1.3);
}
.formationCretor .creator .creator-items .creator-item .questionadder .responses-list .response input[type=checkbox] {
  margin: auto 0;
  --duration: .5s;
  -webkit-appearance: none;
  -moz-appearance: none;
  -webkit-tap-highlight-color: transparent;
  outline: none;
  cursor: pointer;
  position: relative;
  overflow: hidden;
  transform-style: preserve-3d;
  perspective: 240px;
  border-radius: 50%;
  width: 36px;
  height: 36px;
  background-size: 300% 300%;
  transition: transform 0.3s;
  transform: scale(var(--scale, 1)) translateZ(0);
  animation: var(--name, unchecked) var(--duration) ease forwards;
}
.formationCretor .creator .creator-items .creator-item .questionadder .responses-list .response input[type=checkbox]:before, .formationCretor .creator .creator-items .creator-item .questionadder .responses-list .response input[type=checkbox]:after {
  content: "";
  position: absolute;
  width: 16px;
  height: var(--height, 16px);
  left: 6px;
  top: var(--top, 6px);
  animation: var(--name-icon-b, var(--name-icon, unchecked-icon)) var(--duration) ease forwards;
}
.formationCretor .creator .creator-items .creator-item .questionadder .responses-list .response input[type=checkbox]:before {
  clip-path: polygon(0 6px, 6px 6px, 6px 0, 10px 0, 10px 6px, 16px 6px, 16px 10px, 10px 10px, 10px 16px, 6px 16px, 6px 10px, 0 10px);
}
.formationCretor .creator .creator-items .creator-item .questionadder .responses-list .response input[type=checkbox]:after {
  --height: 4px;
  --top: 12px;
  --background:$green;
  --name-icon-b: var(--name-icon-a, checked-icon);
}
.formationCretor .creator .creator-items .creator-item .questionadder .responses-list .response input[type=checkbox]:active {
  --scale: .95;
}
.formationCretor .creator .creator-items .creator-item .questionadder .responses-list .response input[type=checkbox]:checked {
  --name: checked;
  --name-icon-b: checked-icon;
  --name-icon-a: unchecked-icon;
}
.formationCretor .creator .creator-items .creator-item .questionadder .description {
  grid-row: 6/9;
  grid-column: 13/21;
  display: flex;
  flex-direction: column;
}
.formationCretor .creator .creator-items .creator-item .questionadder .description textarea {
  width: 90%;
  margin: 0 auto;
}
.formationCretor .creator .creator-items .creator-item .questionadder .correction {
  grid-row: 10/12;
  grid-column: 13/21;
  display: flex;
  flex-direction: column;
}
.formationCretor .creator .creator-items .creator-item .questionadder .correction input {
  width: 90%;
  margin: 0 auto;
}
.formationCretor .creator .creator-items .creator-item .infos {
  width: 100%;
  height: 100%;
  display: grid;
  grid-template-rows: repeat(20, 5%);
  grid-template-columns: repeat(20, 5%);
}
.formationCretor .creator .creator-items .creator-item .infos label {
  font-weight: 500;
  font-size: 25px;
  text-decoration: underline #00FFFF;
}
.formationCretor .creator .creator-items .creator-item .infos .row {
  width: 100%;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.formationCretor .creator .creator-items .creator-item .infos .rowed {
  width: 100%;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}
.formationCretor .creator .creator-items .creator-item .infos .item-hidden {
  animation: toTop 500ms ease-in-out forwards;
}
.formationCretor .creator .creator-items .creator-item .infos .item-current {
  animation: fromTop 500ms ease-in-out forwards;
}
.formationCretor .creator .creator-items .creator-item .infos .name {
  grid-row: 1/4;
  grid-column: 1/10;
  display: flex;
  flex-direction: column;
}
.formationCretor .creator .creator-items .creator-item .infos .time {
  grid-row: 5/10;
  grid-column: 1/10;
  animation: slideIn 500ms ease-in-out forwards;
}
.formationCretor .creator .creator-items .creator-item .infos .time .rowed {
  z-index: 2;
  background-color: #0c2646;
  position: relative;
}
.formationCretor .creator .creator-items .creator-item .infos .time .time-data-container {
  margin-top: 20px;
  height: max-content;
  overflow: hidden;
}
.formationCretor .creator .creator-items .creator-item .infos .time .time-data-container .time-data {
  margin: auto 0;
}
.formationCretor .creator .creator-items .creator-item .infos .time .time-data-container .time-data .t-q-t-switch {
  width: 250px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  background-color: #004662;
  border-radius: 30px;
  overflow: hidden;
  height: 70px;
}
.formationCretor .creator .creator-items .creator-item .infos .time .time-data-container .time-data .t-q-t-switch .item {
  margin: auto 0;
  text-decoration: none;
  color: #38c172;
  text-shadow: 0 0 30px #00FF00;
  line-height: 65px;
  background-color: #0c2646;
  padding: 0 15px;
  border-radius: 30px;
  transition: all 300ms ease-in-out;
}
.formationCretor .creator .creator-items .creator-item .infos .time .time-data-container .time-data .t-q-t-switch .disabled {
  color: #303030;
  text-shadow: none;
  cursor: pointer;
}
.formationCretor .creator .creator-items .creator-item .infos .time .time-data-container input {
  margin: auto 0;
}
.formationCretor .creator .creator-items .creator-item .infos .try {
  grid-row: 10/18;
  grid-column: 1/10;
}
.formationCretor .creator .creator-items .creator-item .infos .try .try-data-container {
  padding-left: 30px;
  margin-top: 20px;
  height: max-content;
  overflow: hidden;
}
.formationCretor .creator .creator-items .creator-item .infos .try .try-data-container label {
  text-decoration: none;
}
.formationCretor .creator .creator-items .creator-item .infos .try .try-data-container .btwtry {
  display: flex;
  flex-direction: column;
}
.formationCretor .creator .creator-items .creator-item .infos .try .try-data-container .btwtry .pilote-btn {
  margin: auto 0;
}
.formationCretor .creator .creator-items .creator-item .infos .try .try-data-container .btwtry input[type=text] {
  width: 150px;
}
.formationCretor .creator .creator-items .creator-item .infos .correction {
  grid-row: 19/21;
  grid-column: 1/10;
}
.formationCretor .creator .creator-items .creator-item .infos .correction .pilote-btn {
  margin: auto 0;
}
.formationCretor .creator .creator-items .creator-item .infos .correction label {
  margin: auto 0;
}
.formationCretor .creator .creator-items .creator-item .infos .image {
  grid-row: 1/7;
  grid-column: 11/20;
  overflow: hidden;
  display: flex;
}
.formationCretor .creator .creator-items .creator-item .infos .image .add-image {
  margin: auto auto;
  width: 350px;
  height: 197.7px;
  background-color: #004662;
  border-radius: 30px;
  position: relative;
  z-index: 1;
  overflow: hidden;
}
.formationCretor .creator .creator-items .creator-item .infos .image .add-image img {
  border-radius: 30px;
  z-index: 3;
  width: 100%;
  height: auto;
}
.formationCretor .creator .creator-items .creator-item .infos .image .add-image h3, .formationCretor .creator .creator-items .creator-item .infos .image .add-image input {
  position: absolute;
  z-index: 2;
}
.formationCretor .creator .creator-items .creator-item .infos .image .add-image input {
  top: 50%;
  left: 20%;
  width: 200px;
}
.formationCretor .creator .creator-items .creator-item .infos .image .add-image h3 {
  top: 5%;
  left: 26%;
  width: 160px;
}
.formationCretor .creator .creator-items .creator-item .infos .desc {
  grid-row: 7/12;
  grid-column: 11/20;
  display: flex;
  flex-direction: column;
  width: 100%;
}
.formationCretor .creator .creator-items .creator-item .infos .desc textarea {
  width: 100%;
}
.formationCretor .creator .creator-items .creator-item .infos .infos {
  grid-row: 13/20;
  grid-column: 11/20;
  display: flex;
  height: 100%;
  flex-direction: column;
  justify-content: space-evenly;
}
.formationCretor .creator .creator-items .creator-item .infos .infos label {
  text-decoration: none;
}
.formationCretor .creator .creator-items .creator-item .infos .infos .pilote-btn {
  margin: auto 0;
}
.formationCretor .creator .creator-items .hidden {
  animation: slideOut 500ms ease-in-out forwards;
}
.formationCretor .creator .creator-items .hidden .time, .formationCretor .creator .creator-items .hidden .try {
  visibility: hidden !important;
}
.formationCretor .creator .creator-items .current {
  animation: slideIn 500ms ease-in-out forwards;
}
.formationCretor .creator .creator-items .current .time, .formationCretor .creator .creator-items .current .try {
  visibility: visible;
}
.formationCretor .creator .creator-bottom {
  width: 100%;
  margin-top: 15px;
  display: flex;
  flex-direction: row;
  height: 9%;
  justify-content: space-evenly;
  padding-bottom: 10px;
}
.formationCretor .creator .creator-bottom .items-list {
  width: 40%;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  max-height: 100%;
  overflow-y: auto;
}
.formationCretor .creator .creator-bottom .items-list .bottom-item {
  height: 15px;
  width: 15px;
  border-radius: 10px;
  background-color: #004662;
  margin: 5px;
}
.formationCretor .creator .creator-bottom .items-list .active {
  background-color: #00FFFF;
}
.formationCretor .creator .creator-bottom .btn-contain {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  width: 50%;
}

.f-userlist {
  display: flex;
  width: 100%;
  height: 100vh;
  flex-direction: column;
  justify-content: space-around;
}
.f-userlist .header {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.f-userlist .header .btn {
  margin: auto 0;
}
.f-userlist .user-list {
  margin: 0 auto;
  width: 90%;
  overflow: auto;
  height: calc(100vh - 200px);
  background-color: #0c2646;
  border-radius: 30px;
}
.f-userlist .user-list table {
  border-collapse: collapse;
}
.f-userlist .user-list table tr {
  height: 60px;
  border: black 1px solid;
  border-left: none;
  border-right: none;
}
.f-userlist .user-list table tr:first-child {
  border-top: none;
}
.f-userlist .user-list table tr:last-child {
  border-bottom: none;
}
.f-userlist .user-list table td, .f-userlist .user-list table th {
  width: 100px;
  padding: 5px;
  text-align: center;
  font-family: "Baloo Thambi 2", monospace;
  font-size: 25px;
  color: #00FFFF;
  height: 70px;
  border: black 1px solid;
  border-top: none;
  border-bottom: none;
}
.f-userlist .user-list table td:first-child, .f-userlist .user-list table th:first-child {
  border-left: none;
}
.f-userlist .user-list table td:last-child, .f-userlist .user-list table th:last-child {
  border-right: none;
}
.f-userlist .user-list table td .pilote-btn, .f-userlist .user-list table th .pilote-btn {
  padding: 0 20px;
}
.f-userlist .user-list table thead tr {
  border-bottom: 1px black solid !important;
}
.f-userlist .user-list table thead th {
  position: sticky;
  top: 0;
  border-bottom: black 1px solid;
  background-color: #004662;
  z-index: 10;
  border-left: 1px black solid;
  border-right: 1px black solid;
}
.f-userlist .user-list table thead th:first-child {
  border-left: none;
}
.f-userlist .user-list table thead th:last-child {
  border-right: none;
}
.f-userlist .user-list table .clicable {
  text-decoration: underline #00FFFF 1px;
  cursor: pointer;
}
.f-userlist .user-list table tbody tr:nth-child(even) td {
  background: #0f2f57;
}

.ViewFormaResponse {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  width: 100%;
  height: 100vh;
  overflow-y: hidden;
}
.ViewFormaResponse .header {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.ViewFormaResponse .header button {
  margin: auto 0;
}
.ViewFormaResponse .response-list {
  background-color: #0c2646;
  border-radius: 30px;
  width: 90%;
  height: calc(100vh - 170px);
  margin: 0 auto;
  overflow-y: auto;
}
.ViewFormaResponse .response-list table {
  width: 100%;
  border-collapse: collapse;
}
.ViewFormaResponse .response-list table tr {
  height: 60px;
  border: black 1px solid;
  border-left: none;
  border-right: none;
}
.ViewFormaResponse .response-list table tr:first-child {
  border-top: none;
}
.ViewFormaResponse .response-list table tr:last-child {
  border-bottom: none;
}
.ViewFormaResponse .response-list table td, .ViewFormaResponse .response-list table th {
  width: 100px;
  padding: 5px;
  text-align: center;
  font-family: "Baloo Thambi 2", monospace;
  font-size: 25px;
  color: #00FFFF;
  height: 70px;
  border: black 1px solid;
  border-top: none;
  border-bottom: none;
}
.ViewFormaResponse .response-list table td:first-child, .ViewFormaResponse .response-list table th:first-child {
  border-left: none;
}
.ViewFormaResponse .response-list table td:last-child, .ViewFormaResponse .response-list table th:last-child {
  border-right: none;
}
.ViewFormaResponse .response-list table thead tr {
  border-bottom: 1px black solid !important;
}
.ViewFormaResponse .response-list table thead th {
  position: sticky;
  top: 0;
  border-bottom: black 1px solid;
  background-color: #004662;
  z-index: 10;
  border-left: 1px black solid;
  border-right: 1px black solid;
}
.ViewFormaResponse .response-list table thead th:first-child {
  border-left: none;
}
.ViewFormaResponse .response-list table thead th:last-child {
  border-right: none;
}
.ViewFormaResponse .response-list table tbody tr:nth-child(even) td {
  background: #0f2f57;
}

.f-formalist {
  display: flex;
  width: 100%;
  height: 100vh;
  flex-direction: column;
  justify-content: space-around;
}
.f-formalist .header {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.f-formalist .header .btn {
  margin: auto 0;
}
.f-formalist .f-list {
  display: flex;
  flex-direction: column;
  background-color: #0c2646;
  border-radius: 30px;
  width: 90%;
  margin: 0 auto;
  height: calc(100vh - 170px);
  overflow-y: scroll;
  padding: 10px 25px 10px 0;
}
.f-formalist .f-list .item {
  margin-bottom: 10px;
  border-bottom: 1px #00FFFF solid;
  padding-bottom: 10px;
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  height: 145px;
}
.f-formalist .f-list .item .columns {
  display: flex;
  flex-direction: column;
}
.f-formalist .f-list .item .img {
  margin: auto 0;
  width: 245px;
}
.f-formalist .f-list .item .img img {
  margin: auto auto;
  height: 135px;
  width: 240px;
  border-radius: 30px;
}
.f-formalist .f-list .item .text {
  padding: 5px 10px;
  width: 50%;
}
.f-formalist .f-list .item .text p {
  height: 80%;
  overflow: hidden;
  text-overflow: ellipsis;
  text-indent: 15px;
}
.f-formalist .f-list .item .infos {
  padding: 10px 0;
  width: 15%;
  justify-content: space-around;
}
.f-formalist .f-list .item .infos h5 {
  font-size: 25px;
}
.f-formalist .f-list .item .actions {
  padding: 10px 0;
  width: 15%;
  justify-content: space-around;
}
.f-formalist .f-list .item .actions .row {
  width: 100%;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.f-formalist .f-list .item .actions .row button {
  width: 100%;
  background-color: transparent;
  border: none;
  cursor: pointer;
  transition: all 300ms cubic-bezier(0.28, -0.46, 0.33, 1.5);
}
.f-formalist .f-list .item .actions .row button img {
  width: 40px;
}
.f-formalist .f-list .item .actions .row button:hover {
  transform: rotate(20deg) scale(1.3);
}
.f-formalist .f-list .item .actions .row button:disabled {
  transition: none;
  opacity: 0.7;
}
.f-formalist .f-list .item .actions .row button:disabled:hover {
  transform: none;
}
.f-formalist .f-list .item .actions h5 {
  margin: 0 auto;
  font-weight: 500;
}

.GestionsUtils {
  width: 100%;
  height: 100vh;
  overflow-y: hidden;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
}
.GestionsUtils .head {
  display: flex;
  flex-direction: row-reverse;
  justify-content: space-evenly;
}
.GestionsUtils .head button {
  margin: auto 0;
}
.GestionsUtils .content {
  overflow-y: hidden;
  height: calc(100vh - 270px);
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
}
.GestionsUtils .content .preview {
  height: 100%;
  width: 32%;
  background-color: #0c2646;
  border-radius: 30px;
}
.GestionsUtils .content .preview .utilsName {
  padding-left: 20px;
  font-size: 50px;
  margin: 0 auto;
  text-align: center;
}
.GestionsUtils .content .preview .render {
  margin: auto 0;
  width: 100%;
  height: 90%;
}
.GestionsUtils .content .writing {
  height: 100%;
  width: 62%;
  background-color: #0c2646;
  border-radius: 30px;
  border: none;
}
.GestionsUtils .content .writing .ql-toolbar, .GestionsUtils .content .writing .ql-container {
  border: none;
}
.GestionsUtils .content .writing .ql-toolbar {
  border-bottom: 2px #004662 solid;
  text-align: center;
}

#UtilsRendering {
  padding: 15px;
}
#UtilsRendering h1 {
  font-size: 26px;
  font-weight: 800;
}
#UtilsRendering h2 {
  font-size: 24px;
  font-weight: 700;
}
#UtilsRendering h3 {
  font-size: 22px;
  font-weight: 600;
}
#UtilsRendering p {
  font-size: 20px;
  margin: 0;
}
#UtilsRendering a {
  color: #3490dc;
  text-decoration: underline #3490dc 1px;
  transition: all 500ms;
}
#UtilsRendering a:hover {
  color: #6cb2eb;
  text-decoration: none;
}
#UtilsRendering li {
  color: #00FFFF;
  font-family: "Baloo Thambi 2", monospace;
  font-size: 18px;
}
#UtilsRendering li::marker {
  font-weight: 800;
}

.notification-item .bar {
  height: 10px;
}

.notification-item.success .bar {
  background-color: #65d266;
}

.notification-item.error .bar {
  background-color: red;
}

/*# sourceMappingURL=app.css.map */
`;
const rootUrl = document.querySelector("body").getAttribute("data-root-url");
class Register extends react.Component {
  constructor(props) {
    super(props);
    this.registering = this.registering.bind(this);
    this.PswRepeatCheck = this.PswRepeatCheck.bind(this);
    this.PswCheck = this.PswCheck.bind(this);
    this.EmailCheck = this.EmailCheck.bind(this);
    this.PseudoCheck = this.PseudoCheck.bind(this);
    this.state = {
      pseudo: "",
      email: "",
      psw: "",
      repeat_psw: "",
      repeat_error: false,
      psw_error: false,
      pseudo_error: false,
      email_empty: false,
      error: true,
      email_exist: false,
      redirect: false
    };
  }
  componentDidMount() {
    setTimeout(() => {
      if (this.state.repeat_psw !== this.state.psw) {
        this.setState({repeat_error: true, error: true});
      } else {
        this.setState({repeat_error: false});
        if (!this.state.psw_error && !this.state.email_empty && !this.state.pseudo_error) {
          this.setState({error: false});
        }
      }
      if (this.state.psw < 5) {
        this.setState({psw_error: true, error: true});
      } else {
        this.setState({psw_error: false});
        if (!this.state.repeat_error && !this.state.email_empty && !this.state.pseudo_error) {
          this.setState({error: false});
        }
      }
      if (this.state.email < 5) {
        this.setState({email_empty: true, error: true});
      } else {
        this.setState({email_empty: false});
        if (!this.state.repeat_error && !this.state.psw_error && !this.state.pseudo_error) {
          this.setState({error: false});
        }
      }
      if (this.state.pseudo < 5) {
        this.setState({pseudo_error: true, error: true});
      } else {
        this.setState({pseudo_error: false});
        if (!this.state.repeat_error && !this.state.psw_error && !this.state.email_empty) {
          this.setState({error: false});
        }
      }
    }, 200);
  }
  PswRepeatCheck(e) {
    this.setState({repeat_psw: e.target.value});
    if (e.target.value !== this.state.psw) {
      this.setState({repeat_error: true, error: true});
    } else {
      this.setState({repeat_error: false});
      if (!this.state.psw_error && !this.state.email_empty && !this.state.pseudo_error) {
        this.setState({error: false});
      }
    }
  }
  PswCheck(e) {
    this.setState({psw: e.target.value});
    if (e.target.value < 5) {
      this.setState({psw_error: true, error: true});
    } else {
      this.setState({psw_error: false});
      if (!this.state.repeat_error && !this.state.email_empty && !this.state.pseudo_error) {
        this.setState({error: false});
      }
    }
  }
  EmailCheck(e) {
    this.setState({email: e.target.value});
    if (e.target.value.length < 5) {
      this.setState({email_empty: true, error: true});
    } else {
      this.setState({email_empty: false});
      if (!this.state.repeat_error && !this.state.psw_error && !this.state.pseudo_error) {
        this.setState({error: false});
      }
    }
    if (this.state.email_exist) {
      this.setState({email_exist: false, error: false});
    }
  }
  PseudoCheck(e) {
    this.setState({pseudo: e.target.value});
    if (e.target.value.length < 5) {
      this.setState({pseudo_error: true, error: true});
    } else {
      this.setState({pseudo_error: false});
      if (!this.state.repeat_error && !this.state.psw_error && !this.state.email_empty) {
        this.setState({error: false});
      }
    }
  }
  async registering(e) {
    e.preventDefault();
    if (!this.state.error) {
      var email = this.state.email;
      var psw = this.state.psw;
      var pseudo = this.state.pseudo;
      const res = await axios({
        method: "POST",
        url: "/data/register",
        data: {
          pseudo,
          psw,
          email,
          "X-CSRF-TOKEN": csrf
        }
      });
      if (res.data["raison"] === "Email taken") {
        this.setState({email_exist: true, error: true});
      }
      if (res.status === 201) {
        window.location.href = "/informations";
      }
    }
  }
  render() {
    if (this.state.redirect) {
      return /* @__PURE__ */ react.createElement(Redirect, {
        to: this.state.redirect
      });
    }
    return /* @__PURE__ */ react.createElement("div", {
      className: "Register"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "Form"
    }, /* @__PURE__ */ react.createElement("form", {
      method: "POST",
      onSubmit: this.registering
    }, /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: rootUrl + "assets/images/LONG_EMS_BC_2.png"
    }), /* @__PURE__ */ react.createElement("h1", null, "Inscription"), /* @__PURE__ */ react.createElement("label", null, "nom pr\xE9nom : "), /* @__PURE__ */ react.createElement("input", {
      type: "text",
      value: this.state.pseudo,
      maxLength: "20",
      onChange: this.PseudoCheck
    }), this.state.pseudo_error && /* @__PURE__ */ react.createElement("div", {
      className: "form-error"
    }, /* @__PURE__ */ react.createElement("p", null, "La case est vide (min 5 caract\xE8res) ")), /* @__PURE__ */ react.createElement("label", null, "adresse mail : "), /* @__PURE__ */ react.createElement("input", {
      type: "email",
      value: this.state.email,
      name: "email",
      onChange: this.EmailCheck
    }), this.state.email_empty && /* @__PURE__ */ react.createElement("div", {
      className: "form-error"
    }, /* @__PURE__ */ react.createElement("p", null, "La case est vide (min 5 caract\xE8res)")), this.state.email_exist && /* @__PURE__ */ react.createElement("div", {
      className: "form-error"
    }, /* @__PURE__ */ react.createElement("p", null, "Cette adresse mail est d\xE9ja utilis\xE9e")), /* @__PURE__ */ react.createElement("label", null, "Mot de passe : "), /* @__PURE__ */ react.createElement("input", {
      type: "password",
      value: this.state.psw,
      name: "psw",
      onChange: this.PswCheck
    }), this.state.psw_error && /* @__PURE__ */ react.createElement("div", {
      className: "form-error"
    }, /* @__PURE__ */ react.createElement("p", null, "Mot de passe vide (min 5 caract\xE8res)")), /* @__PURE__ */ react.createElement("label", null, "Confirmation mot de passe : "), /* @__PURE__ */ react.createElement("input", {
      type: "password",
      value: this.state.repeat_psw,
      name: "psw_repeat",
      onChange: this.PswRepeatCheck
    }), this.state.repeat_error && /* @__PURE__ */ react.createElement("div", {
      className: "form-error"
    }, /* @__PURE__ */ react.createElement("p", null, "Les deux mots de passe ne correspondent pas")), /* @__PURE__ */ react.createElement("div", {
      className: "btn-contain"
    }, /* @__PURE__ */ react.createElement(Link, {
      className: "btn",
      to: "/login"
    }, "j'ai d\xE9ja un compte"), /* @__PURE__ */ react.createElement("button", {
      type: "submit",
      className: "btn"
    }, "S'inscrire")))));
  }
}
class Mdpreset extends react.Component {
  render() {
    return /* @__PURE__ */ react.createElement(Uploader, null);
  }
}
class Error$1 extends react.Component {
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "maintenance"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "card"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "image"
    }, /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/assets/images/LONG_EMS_BC_2.png"
    })), /* @__PURE__ */ react.createElement("h1", null, "Vous ne pouvez pas acceder"), /* @__PURE__ */ react.createElement("a", {
      className: "btn",
      href: "/logout"
    }, "Se deconnecter"), /* @__PURE__ */ react.createElement("section", {
      className: "contact"
    }, /* @__PURE__ */ react.createElement("h3", null, "Contactez un responsable"), /* @__PURE__ */ react.createElement("h4", null, "salon #note-mdt"))));
  }
}
class Emailsender extends react.Component {
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "maintenance"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "card"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "image"
    }, /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/assets/images/LONG_EMS_BC_2.png"
    })), /* @__PURE__ */ react.createElement("h1", null, "maintenance en cours"), /* @__PURE__ */ react.createElement("section", {
      className: "infos"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("h3", null, "D\xE9but de la maintenance : "), /* @__PURE__ */ react.createElement("h3", null, "00/00/0000 \xE0 00h00 [FR]")), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("h3", null, "Dur\xE9e pr\xE9vue : "), /* @__PURE__ */ react.createElement("h3", null, "02h00")), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("h3", null, "raison : "), /* @__PURE__ */ react.createElement("h3", null, "mise \xE0 jour")), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("h3", null, "derni\xE8re  v\xE9rification : "), /* @__PURE__ */ react.createElement("h3", null, "00h00 [FR]"))), /* @__PURE__ */ react.createElement("section", {
      className: "contact"
    }, /* @__PURE__ */ react.createElement("h3", null, "Plus d'information sur discord"), /* @__PURE__ */ react.createElement("h4", null, "salon #note-mdt"))));
  }
}
class Maintenance extends react.Component {
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "maintenance"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "card"
    }, /* @__PURE__ */ react.createElement("section", {
      className: "image"
    }, /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/assets/images/LONG_EMS_BC_2.png"
    })), /* @__PURE__ */ react.createElement("h1", null, "maintenance en cours"), /* @__PURE__ */ react.createElement("section", {
      className: "infos"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("h3", null, "D\xE9but de la maintenance : "), /* @__PURE__ */ react.createElement("h3", null, "00/00/0000 \xE0 00h00 [FR]")), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("h3", null, "Dur\xE9e pr\xE9vue : "), /* @__PURE__ */ react.createElement("h3", null, "02h00")), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("h3", null, "raison : "), /* @__PURE__ */ react.createElement("h3", null, "mise \xE0 jour")), /* @__PURE__ */ react.createElement("div", {
      className: "rowed"
    }, /* @__PURE__ */ react.createElement("h3", null, "derni\xE8re  v\xE9rification : "), /* @__PURE__ */ react.createElement("h3", null, "00h00 [FR]"))), /* @__PURE__ */ react.createElement("section", {
      className: "contact"
    }, /* @__PURE__ */ react.createElement("h3", null, "Plus d'information sur discord"), /* @__PURE__ */ react.createElement("h4", null, "salon #note-mdt"))));
  }
}
class GetInfos extends react.Component {
  constructor(props) {
    super(props);
    this.state = {
      live: 1,
      tel: "",
      compte: "",
      errors: []
    };
    this.sendinfos = this.sendinfos.bind(this);
  }
  async sendinfos(e) {
    e.preventDefault();
    await axios({
      method: "post",
      url: "/data/postuserinfos",
      data: {
        living: this.state.live,
        tel: this.state.tel,
        compte: this.state.compte,
        "X-CSRF-TOKEN": csrf
      }
    }).then((response) => {
      if (response.status === 201) {
        window.location.href = "/";
      }
    }).catch((error) => {
      error = Object.assign({}, error);
      if (error.response.status === 422) {
        this.setState({errors: error.response.data.errors});
      }
    });
  }
  render() {
    return /* @__PURE__ */ react.createElement("div", {
      className: "Register"
    }, /* @__PURE__ */ react.createElement("div", {
      className: "Form"
    }, /* @__PURE__ */ react.createElement("form", {
      method: "POST",
      onSubmit: this.sendinfos
    }, /* @__PURE__ */ react.createElement("img", {
      alt: "",
      src: "/assets/images/LONG_EMS_BC_2.png"
    }), /* @__PURE__ */ react.createElement("h1", null, "Informations"), /* @__PURE__ */ react.createElement("label", null, "Contr\xE9 habit\xE9 : "), /* @__PURE__ */ react.createElement("select", {
      defaultValue: this.state.live,
      onChange: (e) => this.setState({live: e.target.value})
    }, /* @__PURE__ */ react.createElement("option", {
      value: 1,
      disabled: true
    }, "choisir"), /* @__PURE__ */ react.createElement("option", null, "LS"), /* @__PURE__ */ react.createElement("option", null, "BC")), /* @__PURE__ */ react.createElement("label", null, "n\xB0 de tel IG : "), /* @__PURE__ */ react.createElement("input", {
      type: "number",
      value: this.state.tel,
      className: this.state.errors.tel ? "form-error" : "",
      onChange: (e) => {
        this.setState({tel: e.target.value});
        this.componentDidMount();
      }
    }), /* @__PURE__ */ react.createElement("ul", {
      className: "error-list"
    }, this.state.errors.tel && this.state.errors.tel.map((item) => /* @__PURE__ */ react.createElement("li", null, item))), /* @__PURE__ */ react.createElement("label", null, "n\xB0 de compte "), /* @__PURE__ */ react.createElement("input", {
      type: "number",
      value: this.state.compte,
      className: this.state.errors.compte ? "form-error" : "",
      name: "psw",
      onChange: (e) => {
        this.setState({compte: e.target.value});
        this.componentDidMount();
      }
    }), /* @__PURE__ */ react.createElement("ul", {
      className: "error-list"
    }, this.state.errors.compte && this.state.errors.compte.map((item) => /* @__PURE__ */ react.createElement("li", null, item))), /* @__PURE__ */ react.createElement("div", {
      className: "btn-contain"
    }, /* @__PURE__ */ react.createElement("button", {
      type: "submit",
      className: "btn"
    }, "Terminer")))));
  }
}
class App extends react.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return /* @__PURE__ */ react.createElement(NotificationsProvider, null, /* @__PURE__ */ react.createElement(BrowserRouter, null, /* @__PURE__ */ react.createElement(Switch, null, /* @__PURE__ */ react.createElement(Route, {
      path: "/login",
      component: Login
    }), /* @__PURE__ */ react.createElement(Route, {
      path: "/register",
      component: Register
    }), /* @__PURE__ */ react.createElement(Route, {
      path: "/reset/*",
      component: Mdpreset
    }), /* @__PURE__ */ react.createElement(Route, {
      path: "/sendmail",
      component: Emailsender
    }), /* @__PURE__ */ react.createElement(Route, {
      path: "/ANA",
      component: Error$1
    }), /* @__PURE__ */ react.createElement(Route, {
      path: "/maintenance",
      component: Maintenance
    }), /* @__PURE__ */ react.createElement(Route, {
      path: "/informations",
      component: GetInfos
    }), /* @__PURE__ */ react.createElement(Layout, null))));
  }
}
if (document.getElementById("app")) {
  reactDom.render(/* @__PURE__ */ react.createElement(App, null), document.getElementById("app"));
}
